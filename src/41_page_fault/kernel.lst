     1                                  ;********************************************************************************************************
     2                                  ;マクロ
     3                                  ;********************************************************************************************************
     4                                  %define         USE_SYSTEM_CALL
     5                                  %define         USE_TEST_AND_SET
     6                                  
     7                                  %include        "..\include\define.s"
     1                              <1> VECT_BASE   equ     0x0010_0000             ;0010_0000:0010_07FF
     2                              <1> 
     3                              <1> SECT_SIZE   equ     (512)                   ;セクタサイズ
     4                              <1> 
     5                              <1> BOOT_LOAD   equ     0x7C00                  ;ブートプログラムのロード位置
     6                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)
     7                              <1> BOOT_SIZE   equ     (1024 * 8)              ;ブートコードサイズ
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     9                              <1> 
    10                              <1> KERNEL_LOAD equ     0x0010_1000
    11                              <1> KERNEL_SIZE equ     (1024*8)                ;カーネルサイズ
    12                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> STACK_BASE  equ     0x0010_3000             ;タスク用スタックエリア
    15                              <1> STACK_SIZE  equ     1024                    ;スタックサイズ
    16                              <1> 
    17                              <1> CR3_BASE    equ     0x0010_5000             ;ページ変換テーブル:タスク3用
    18                              <1> 
    19                              <1> SP_TASK_0   equ     STACK_BASE + (STACK_SIZE * 1)
    20                              <1> SP_TASK_1   equ     STACK_BASE + (STACK_SIZE * 2)
    21                              <1> SP_TASK_2   equ     STACK_BASE + (STACK_SIZE * 3)
    22                              <1> SP_TASK_3   equ     STACK_BASE + (STACK_SIZE * 4)
    23                              <1> 
    24                              <1> E820_RECORD_SIZE    equ 20
     8                                  %include        "..\include\macro.s"
     1                              <1> %define     RING_ITEM_SIZE  (1 << 4)
     2                              <1> %define     RING_INDEX_MASK (RING_ITEM_SIZE - 1)
     3                              <1> 
     4                              <1> struc rose
     5 00000000 <res 00000004>      <1>         .x0         resd    1                       ;左上座標:X0
     6 00000004 <res 00000004>      <1>         .y0         resd    1                       ;左上座標:Y0
     7 00000008 <res 00000004>      <1>         .x1         resd    1                       ;右下座標:X1
     8 0000000C <res 00000004>      <1>         .y1         resd    1                       ;右下座標:Y1
     9                              <1> 
    10 00000010 <res 00000004>      <1>         .n          resd    1                       ;変数:n
    11 00000014 <res 00000004>      <1>         .d          resd    1                       ;変数:d
    12                              <1> 
    13 00000018 <res 00000004>      <1>         .color_x    resd    1                       ;描画色:X座標
    14 0000001C <res 00000004>      <1>         .color_y    resd    1                       ;描画色:Y座標
    15 00000020 <res 00000004>      <1>         .color_z    resd    1                       ;描画色:枠
    16 00000024 <res 00000004>      <1>         .color_s    resd    1                       ;描画色:文字
    17 00000028 <res 00000004>      <1>         .color_f    resd    1                       ;描画色:グラフ描画色
    18 0000002C <res 00000004>      <1>         .color_b    resd    1                       ;描画色:グラフ消去色
    19                              <1> 
    20 00000030 <res 00000010>      <1>         .title      resb    16                      ;タイトル
    21                              <1> 
    22                              <1> endstruc
    23                              <1> 
    24                              <1> struc drive
    25 00000000 <res 00000002>      <1>         .no         resw    1                       ;ドライブ番号
    26 00000002 <res 00000002>      <1>         .cyln       resw    1                       ;シリンダ
    27 00000004 <res 00000002>      <1>         .head       resw    1                       ;ヘッド
    28 00000006 <res 00000002>      <1>         .sect       resw    1                       ;セクタ
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc ring_buff
    32 00000000 <res 00000004>      <1>         .rp         resd    1                       ;RP:書き込み位置
    33 00000004 <res 00000004>      <1>         .wp         resd    1                       ;WP:読み込み位置
    34 00000008 <res 00000010>      <1>         .item       resb    RING_ITEM_SIZE          ;ブッファ
    35                              <1> endstruc
    36                              <1> 
    37                              <1> %macro  cdecl   1-*.nolist
    38                              <1> 
    39                              <1>     %rep    %0 - 1
    40                              <1>         push    %{-1:-1}
    41                              <1>         %rotate -1
    42                              <1>     %endrep
    43                              <1>     %rotate -1
    44                              <1> 
    45                              <1>         call    %1
    46                              <1> 
    47                              <1>     %if 1 < %0
    48                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    49                              <1>     %endif
    50                              <1> 
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro  set_vect    1-*
    54                              <1>         push    eax
    55                              <1>         push    edi
    56                              <1> 
    57                              <1>         mov     edi, VECT_BASE + (%1 * 8)           ;ベクタアドレス
    58                              <1>         mov     eax, %2
    59                              <1> 
    60                              <1>     %if 3 == %0
    61                              <1>         mov     [edi + 4], %3                       ;フラグ
    62                              <1>     %endif
    63                              <1> 
    64                              <1>         mov     [edi + 0], ax                       ;例外アドレス[15:0]
    65                              <1>         shr     eax, 16
    66                              <1>         mov     [edi + 6], ax                       ;6はエンディアン(?) 例外アドレス[31:16]
    67                              <1> 
    68                              <1>         pop     edi
    69                              <1>         pop     eax
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro  outp    2
    73                              <1>         mov     al, %2
    74                              <1>         out     %1, al
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_desc    2-*
    78                              <1>         push    eax
    79                              <1>         push    edi
    80                              <1> 
    81                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
    82                              <1>         mov     eax, %2                             ;ベースアドレス
    83                              <1> 
    84                              <1>     %if 3 == %0
    85                              <1>         mov     [edi + 0], %3                       ;リミット
    86                              <1>     %endif
    87                              <1>     
    88                              <1>         mov     [edi + 2], ax                       ;ベース([15: 0])
    89                              <1>         shr     eax, 16
    90                              <1>         mov     [edi + 4], al                       ;ベース([23:16])
    91                              <1>         mov     [edi + 7], ah                       ;ベース([31:24])
    92                              <1> 
    93                              <1>         pop     edi
    94                              <1>         pop     eax
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> %macro  set_gate    2-*
    98                              <1>         push    eax
    99                              <1>         push    edi
   100                              <1> 
   101                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
   102                              <1>         mov     eax, %2                             ;ベースアドレス
   103                              <1> 
   104                              <1>         mov     [edi + 0], ax                       ;ベース([15:0])
   105                              <1>         shr     eax, 16
   106                              <1>         mov     [edi + 6], ax                       ;ベース([31:16])
   107                              <1> 
   108                              <1>         pop     edi
   109                              <1>         pop     eax
   110                              <1> %endmacro
     9                                  
    10                                          ORG     KERNEL_LOAD                             ;カーネルのロードアドレス
    11                                  
    12                                  [BITS 32]
    13                                  ;********************************************************************************************************
    14                                  ;エントリポイント
    15                                  ;********************************************************************************************************
    16                                  kernel:
    17                                          ;---------------------------------------
    18                                          ;フォントアドレスを取得
    19                                          ;---------------------------------------
    20 00000000 BE007E0000                      mov     esi, BOOT_LOAD + SECT_SIZE      ;ESI = 0x7C00 + 512
    21 00000005 0FB706                          movzx   eax, word [esi + 0]             ;EAX = [ESI + 0] //セグメント
    22 00000008 0FB75E02                        movzx   ebx, word [esi + 2]             ;EBX = [ESI + 2] //オフセット
    23 0000000C C1E004                          shl     eax, 4                          ;EAX << 4;
    24 0000000F 01D8                            add     eax, ebx                        ;EAX += EBX;
    25 00000011 A3[50020000]                    mov     [FONT_ADR], eax                 ;FONT_ADR[0] = EAX;
    26                                  
    27                                          ;---------------------------------------
    28                                          ;TSSディスクリプタの設定
    29                                          ;---------------------------------------
    30                                          set_desc        GDT.tss_0, TSS_0        ;//タスク0用TSSの設定
    30 00000016 50                  <1>  push eax
    30 00000017 57                  <1>  push edi
    30                              <1> 
    30 00000018 BF[D8050000]        <1>  mov edi, %1
    30 0000001D B8[58020000]        <1>  mov eax, %2
    30                              <1> 
    30                              <1>  %if 3 == %0
    30                              <1>  mov [edi + 0], %3
    30                              <1>  %endif
    30                              <1> 
    30 00000022 66894702            <1>  mov [edi + 2], ax
    30 00000026 C1E810              <1>  shr eax, 16
    30 00000029 884704              <1>  mov [edi + 4], al
    30 0000002C 886707              <1>  mov [edi + 7], ah
    30                              <1> 
    30 0000002F 5F                  <1>  pop edi
    30 00000030 58                  <1>  pop eax
    31                                          set_desc        GDT.tss_1, TSS_1        ;//タスク1用TSSの設定
    31 00000031 50                  <1>  push eax
    31 00000032 57                  <1>  push edi
    31                              <1> 
    31 00000033 BF[E0050000]        <1>  mov edi, %1
    31 00000038 B8[30030000]        <1>  mov eax, %2
    31                              <1> 
    31                              <1>  %if 3 == %0
    31                              <1>  mov [edi + 0], %3
    31                              <1>  %endif
    31                              <1> 
    31 0000003D 66894702            <1>  mov [edi + 2], ax
    31 00000041 C1E810              <1>  shr eax, 16
    31 00000044 884704              <1>  mov [edi + 4], al
    31 00000047 886707              <1>  mov [edi + 7], ah
    31                              <1> 
    31 0000004A 5F                  <1>  pop edi
    31 0000004B 58                  <1>  pop eax
    32                                          set_desc        GDT.tss_2, TSS_2        ;//タスク1用TSSの設定
    32 0000004C 50                  <1>  push eax
    32 0000004D 57                  <1>  push edi
    32                              <1> 
    32 0000004E BF[E8050000]        <1>  mov edi, %1
    32 00000053 B8[08040000]        <1>  mov eax, %2
    32                              <1> 
    32                              <1>  %if 3 == %0
    32                              <1>  mov [edi + 0], %3
    32                              <1>  %endif
    32                              <1> 
    32 00000058 66894702            <1>  mov [edi + 2], ax
    32 0000005C C1E810              <1>  shr eax, 16
    32 0000005F 884704              <1>  mov [edi + 4], al
    32 00000062 886707              <1>  mov [edi + 7], ah
    32                              <1> 
    32 00000065 5F                  <1>  pop edi
    32 00000066 58                  <1>  pop eax
    33                                          set_desc        GDT.tss_3, TSS_3        ;//タスク1用TSSの設定
    33 00000067 50                  <1>  push eax
    33 00000068 57                  <1>  push edi
    33                              <1> 
    33 00000069 BF[F0050000]        <1>  mov edi, %1
    33 0000006E B8[E0040000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if 3 == %0
    33                              <1>  mov [edi + 0], %3
    33                              <1>  %endif
    33                              <1> 
    33 00000073 66894702            <1>  mov [edi + 2], ax
    33 00000077 C1E810              <1>  shr eax, 16
    33 0000007A 884704              <1>  mov [edi + 4], al
    33 0000007D 886707              <1>  mov [edi + 7], ah
    33                              <1> 
    33 00000080 5F                  <1>  pop edi
    33 00000081 58                  <1>  pop eax
    34                                  
    35                                          ;---------------------------------------
    36                                          ;コールゲートの設定
    37                                          ;---------------------------------------
    38                                          set_gate        GDT.call_gate, call_gate;コールゲートの設定
    38 00000082 50                  <1>  push eax
    38 00000083 57                  <1>  push edi
    38                              <1> 
    38 00000084 BF[F8050000]        <1>  mov edi, %1
    38 00000089 B8[C8120000]        <1>  mov eax, %2
    38                              <1> 
    38 0000008E 668907              <1>  mov [edi + 0], ax
    38 00000091 C1E810              <1>  shr eax, 16
    38 00000094 66894706            <1>  mov [edi + 6], ax
    38                              <1> 
    38 00000098 5F                  <1>  pop edi
    38 00000099 58                  <1>  pop eax
    39                                  
    40                                          ;---------------------------------------
    41                                          ;LDTの設定
    42                                          ;---------------------------------------
    43                                          set_desc        GDT.ldt, LDT, word LDT_LIMIT
    43 0000009A 50                  <1>  push eax
    43 0000009B 57                  <1>  push edi
    43                              <1> 
    43 0000009C BF[D0050000]        <1>  mov edi, %1
    43 000000A1 B8[06060000]        <1>  mov eax, %2
    43                              <1> 
    43                              <1>  %if 3 == %0
    43 000000A6 66C7074700          <1>  mov [edi + 0], %3
    43                              <1>  %endif
    43                              <1> 
    43 000000AB 66894702            <1>  mov [edi + 2], ax
    43 000000AF C1E810              <1>  shr eax, 16
    43 000000B2 884704              <1>  mov [edi + 4], al
    43 000000B5 886707              <1>  mov [edi + 7], ah
    43                              <1> 
    43 000000B8 5F                  <1>  pop edi
    43 000000B9 58                  <1>  pop eax
    44                                  
    45                                          ;---------------------------------------
    46                                          ;GDTをロード(再設定)
    47                                          ;---------------------------------------
    48 000000BA 0F0115[00060000]                lgdt    [GDTR]                          ;//グローバルディスクリプタテーブルをロード
    49                                  
    50                                          ;---------------------------------------
    51                                          ;スタックの設定
    52                                          ;---------------------------------------
    53 000000C1 BC00341000                      mov     esp, SP_TASK_0                  ;タスク0用のスタックを設定
    54                                  
    55                                          ;---------------------------------------
    56                                          ;タスクレジスタの初期化
    57                                          ;---------------------------------------
    58 000000C6 66B82000                        mov     ax, SS_TASK_0                   ;//タスクレジスタの設定
    59 000000CA 0F00D8                          ltr     ax
    60                                  
    61                                          ;---------------------------------------
    62                                          ;初期化
    63                                          ;---------------------------------------
    64 000000CD E80C100000                      cdecl   init_int                        ;//割り込みベクタの初期化
    65 000000D2 E856100000                      cdecl   init_pic                        ;//割り込みコントローラの初期化
    66 000000D7 E89B080000                      cdecl   init_page                       ;ページングの初期化
    67                                  
    68                                          set_vect        0x00, int_zero_div      ;割り込み処理の登録:0除算
    68 000000DC 50                  <1>  push eax
    68 000000DD 57                  <1>  push edi
    68                              <1> 
    68 000000DE BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    68 000000E3 B8[0F110000]        <1>  mov eax, %2
    68                              <1> 
    68                              <1>  %if 3 == %0
    68                              <1>  mov [edi + 4], %3
    68                              <1>  %endif
    68                              <1> 
    68 000000E8 668907              <1>  mov [edi + 0], ax
    68 000000EB C1E810              <1>  shr eax, 16
    68 000000EE 66894706            <1>  mov [edi + 6], ax
    68                              <1> 
    68 000000F2 5F                  <1>  pop edi
    68 000000F3 58                  <1>  pop eax
    69                                          set_vect        0x07, int_nm            ;割り込み処理の登録:デバイス使用不可(FPU)
    69 000000F4 50                  <1>  push eax
    69 000000F5 57                  <1>  push edi
    69                              <1> 
    69 000000F6 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    69 000000FB B8[65130000]        <1>  mov eax, %2
    69                              <1> 
    69                              <1>  %if 3 == %0
    69                              <1>  mov [edi + 4], %3
    69                              <1>  %endif
    69                              <1> 
    69 00000100 668907              <1>  mov [edi + 0], ax
    69 00000103 C1E810              <1>  shr eax, 16
    69 00000106 66894706            <1>  mov [edi + 6], ax
    69                              <1> 
    69 0000010A 5F                  <1>  pop edi
    69 0000010B 58                  <1>  pop eax
    70                                          set_vect        0x0E, int_pf            ;割り込み処理の登録:ページフォルト
    70 0000010C 50                  <1>  push eax
    70 0000010D 57                  <1>  push edi
    70                              <1> 
    70 0000010E BF70001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    70 00000113 B8[92090000]        <1>  mov eax, %2
    70                              <1> 
    70                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 4], %3
    70                              <1>  %endif
    70                              <1> 
    70 00000118 668907              <1>  mov [edi + 0], ax
    70 0000011B C1E810              <1>  shr eax, 16
    70 0000011E 66894706            <1>  mov [edi + 6], ax
    70                              <1> 
    70 00000122 5F                  <1>  pop edi
    70 00000123 58                  <1>  pop eax
    71                                          set_vect        0x20, int_timer         ;割り込み処理の登録:タイマー
    71 00000124 50                  <1>  push eax
    71 00000125 57                  <1>  push edi
    71                              <1> 
    71 00000126 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    71 0000012B B8[4E060000]        <1>  mov eax, %2
    71                              <1> 
    71                              <1>  %if 3 == %0
    71                              <1>  mov [edi + 4], %3
    71                              <1>  %endif
    71                              <1> 
    71 00000130 668907              <1>  mov [edi + 0], ax
    71 00000133 C1E810              <1>  shr eax, 16
    71 00000136 66894706            <1>  mov [edi + 6], ax
    71                              <1> 
    71 0000013A 5F                  <1>  pop edi
    71 0000013B 58                  <1>  pop eax
    72                                          set_vect        0x21, int_keyboard      ;割り込み処理の登録:KBC
    72 0000013C 50                  <1>  push eax
    72 0000013D 57                  <1>  push edi
    72                              <1> 
    72 0000013E BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    72 00000143 B8[42120000]        <1>  mov eax, %2
    72                              <1> 
    72                              <1>  %if 3 == %0
    72                              <1>  mov [edi + 4], %3
    72                              <1>  %endif
    72                              <1> 
    72 00000148 668907              <1>  mov [edi + 0], ax
    72 0000014B C1E810              <1>  shr eax, 16
    72 0000014E 66894706            <1>  mov [edi + 6], ax
    72                              <1> 
    72 00000152 5F                  <1>  pop edi
    72 00000153 58                  <1>  pop eax
    73                                          set_vect        0x28, int_rtc           ;割り込み処理の登録:RTC
    73 00000154 50                  <1>  push eax
    73 00000155 57                  <1>  push edi
    73                              <1> 
    73 00000156 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    73 0000015B B8[58110000]        <1>  mov eax, %2
    73                              <1> 
    73                              <1>  %if 3 == %0
    73                              <1>  mov [edi + 4], %3
    73                              <1>  %endif
    73                              <1> 
    73 00000160 668907              <1>  mov [edi + 0], ax
    73 00000163 C1E810              <1>  shr eax, 16
    73 00000166 66894706            <1>  mov [edi + 6], ax
    73                              <1> 
    73 0000016A 5F                  <1>  pop edi
    73 0000016B 58                  <1>  pop eax
    74                                          set_vect        0x81, trap_gate_81, word 0xEF00 ;トラップゲートの登録:1文字出力
    74 0000016C 50                  <1>  push eax
    74 0000016D 57                  <1>  push edi
    74                              <1> 
    74 0000016E BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    74 00000173 B8[F8120000]        <1>  mov eax, %2
    74                              <1> 
    74                              <1>  %if 3 == %0
    74 00000178 66C7470400EF        <1>  mov [edi + 4], %3
    74                              <1>  %endif
    74                              <1> 
    74 0000017E 668907              <1>  mov [edi + 0], ax
    74 00000181 C1E810              <1>  shr eax, 16
    74 00000184 66894706            <1>  mov [edi + 6], ax
    74                              <1> 
    74 00000188 5F                  <1>  pop edi
    74 00000189 58                  <1>  pop eax
    75                                          set_vect        0x82, trap_gate_82, word 0xEF00 ;トラップゲートの登録:点の描画
    75 0000018A 50                  <1>  push eax
    75 0000018B 57                  <1>  push edi
    75                              <1> 
    75 0000018C BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    75 00000191 B8[06130000]        <1>  mov eax, %2
    75                              <1> 
    75                              <1>  %if 3 == %0
    75 00000196 66C7470400EF        <1>  mov [edi + 4], %3
    75                              <1>  %endif
    75                              <1> 
    75 0000019C 668907              <1>  mov [edi + 0], ax
    75 0000019F C1E810              <1>  shr eax, 16
    75 000001A2 66894706            <1>  mov [edi + 6], ax
    75                              <1> 
    75 000001A6 5F                  <1>  pop edi
    75 000001A7 58                  <1>  pop eax
    76                                  
    77                                          ;---------------------------------------
    78                                          ;デバイスの割り込み許可
    79                                          ;---------------------------------------
    80 000001A8 6A10E8D20F00006683-             cdecl   rtc_int_en, 0x10                ;rtc_int_en(UIE); //更新サイクル終了割り込み許可
    80 000001B1 C404               
    81 000001B3 E8C8100000                      cdecl   int_en_timer0                   ;//タイマー(カウンタ0)割り込み許可
    82                                  
    83                                          ;---------------------------------------
    84                                          ;IMR(割り込みマスクレジスタ)の設定
    85                                          ;---------------------------------------
    86                                          outp    0x21, 0b_1111_1000              ;//割り込み有効:スレーブPIC/KBC/タイマー
    86 000001B8 B0F8                <1>  mov al, %2
    86 000001BA E621                <1>  out %1, al
    87                                          outp    0xA1, 0b_1111_1110              ;//割り込み有効:RTC
    87 000001BC B0FE                <1>  mov al, %2
    87 000001BE E6A1                <1>  out %1, al
    88                                  
    89                                          ;---------------------------------------
    90                                          ;CR3レジスタにページング用のベースアドレスをセット
    91                                          ;---------------------------------------
    92 000001C0 B800501000                      mov     eax, CR3_BASE
    93 000001C5 0F22D8                          mov     cr3, eax                        ;//ページテーブルの登録
    94                                  
    95                                          ;---------------------------------------
    96                                          ;CR0レジスタのPEビットを1に設定(ページングの有効化)
    97                                          ;---------------------------------------
    98 000001C8 0F20C0                          mov     eax, cr0                        ;//PGビットをセット
    99 000001CB 0D00000080                      or      eax, (1 << 31)                  ;CR0 |= PG;
   100 000001D0 0F22C0                          mov     cr0, eax
   101 000001D3 EB00                            jmp     $ + 2                           ;FLUSH() //キャッシュされた命令を破棄
   102                                  
   103                                          ;---------------------------------------
   104                                          ;CPUの割り込み許可
   105                                          ;---------------------------------------
   106 000001D5 FB                              sti                                      ;//割り込み許可
   107                                  
   108                                          ;---------------------------------------
   109                                          ;フォントの一覧表示
   110                                          ;---------------------------------------
   111 000001D6 6A0D6A3FE8B1090000-             cdecl   draw_font, 63, 13               ;//フォントの一覧表示
   111 000001DF 6683C408           
   112 000001E3 6A046A3FE8250A0000-             cdecl   draw_color_bar, 63, 4           ;//カラーバーの表示
   112 000001EC 6683C408           
   113                                  
   114                                          ;---------------------------------------
   115                                          ;文字列の表示
   116                                          ;---------------------------------------
   117 000001F0 68[3A020000]680F01-             cdecl   draw_str, 25, 14, 0x010F, .s0   ;draw_str();
   117 000001F8 00006A0E6A19E8D009-
   117 00000201 00006683C410       
   118                                  
   119                                  .10L:                                           ;while(1)
   120                                                                                  ;{
   121                                          ;---------------------------------------
   122                                          ;タスクの呼び出し
   123                                          ;---------------------------------------
   124                                          ;call    SS_TASK_1:0                     ;       //タスク1へのジャンプ
   125                                  
   126                                          ;---------------------------------------
   127                                          ;回転する棒の表示
   128                                          ;---------------------------------------
   129 00000207 E883100000                      cdecl   draw_rotation_bar               ;       //回転する棒を表示
   130                                  
   131                                          ;---------------------------------------
   132                                          ;キーコードの取得
   133                                          ;---------------------------------------
   134 0000020C 68[4B020000]68-                 cdecl   ring_rd, _KEY_BUFF, .int_key    ;       EAX = ring_rd(buff, &int_key);
   134 00000212 [68120000]E87A0F00-
   134 0000021A 006683C408         
   135 0000021F 83F800                          cmp     eax, 0                          ;       if(EAX != 0)
   136 00000222 7412                            je      .10E                            ;       {
   137                                  
   138                                          ;---------------------------------------
   139                                          ;キーコードの表示
   140                                          ;---------------------------------------
   141 00000224 68[68120000]6A1D6A-             cdecl   draw_key, 2, 29, _KEY_BUFF      ;               ring_show(key_buff); //全要素を表示
   141 0000022C 02E8BC0F00006683C4-
   141 00000235 0C                 
   142                                  .10E:                                           ;       }
   143 00000236 EBCF                            jmp     .10L                            ;}
   144                                  
   145                                          ;---------------------------------------
   146                                          ;処理の終了
   147                                          ;---------------------------------------
   148 00000238 EBFE                            jmp     $                               ;while(1) //無限ループ
   149                                  
   150                                  
   151                                  
   152 0000023A 2048656C6C6F2C206B-     .s0:    db      " Hello, kernel! ", 0
   152 00000243 65726E656C212000   
   153                                  
   154 0000024B 00000000                .int_key:       dd      0
   155                                  
   156 0000024F 00                      ALIGN   4, db   0
   157 00000250 00000000                FONT_ADR:       dd      0
   158 00000254 00000000                RTC_TIME:       dd      0
   159                                  
   160                                  ;********************************************************************************************************
   161                                  ;タスク
   162                                  ;********************************************************************************************************
   163                                  %include        "descriptor.s"
     1                              <1> ;********************************************************************************************************
     2                              <1> ;TSS
     3                              <1> ;********************************************************************************************************
     4                              <1> TSS_0:
     5 00000258 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
     6 0000025C 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                                     ;*  4:ESP0
     7 00000260 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
     8 00000264 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
     9 00000268 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    10 0000026C 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    11 00000270 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    12 00000274 00501000            <1> .cr3:           dd  CR3_BASE                                            ;  28:CR3(PDBR)
    13 00000278 00000000            <1> .eip:           dd  0                                                   ;  32:EIP
    14 0000027C 00000000            <1> .eflags:        dd  0                                                   ;  36:EFLAGS
    15 00000280 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    16 00000284 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    17 00000288 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    18 0000028C 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    19 00000290 00000000            <1> .esp:           dd  0                                                   ;  56:ESP
    20 00000294 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    21 00000298 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    22 0000029C 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    23 000002A0 00000000            <1> .es:            dd  0                                                   ;  72:ES
    24 000002A4 00000000            <1> .cs:            dd  0                                                   ;  76:CS
    25 000002A8 00000000            <1> .ss:            dd  0                                                   ;  80:SS
    26 000002AC 00000000            <1> .ds:            dd  0                                                   ;  84:DS
    27 000002B0 00000000            <1> .fs:            dd  0                                                   ;  88:FS
    28 000002B4 00000000            <1> .gs:            dd  0                                                   ;  92:GS
    29 000002B8 00000000            <1> .ldt:           dd  0                                                   ;* 96:LDTセグメントセレクタ
    30 000002BC 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    31 000002C0 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    32                              <1> 
    33                              <1> TSS_1:
    34 00000330 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    35 00000334 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                                     ;*  4:ESP0
    36 00000338 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    37 0000033C 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    38 00000340 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    39 00000344 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    40 00000348 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    41 0000034C 00501000            <1> .cr3:           dd  CR3_BASE                                            ;  28:CR3(PDBR)
    42 00000350 [AC060000]          <1> .eip:           dd  task_1                                              ;  32:EIP
    43 00000354 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
    44 00000358 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    45 0000035C 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    46 00000360 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    47 00000364 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    48 00000368 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56:ESP
    49 0000036C 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    50 00000370 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    51 00000374 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    52 00000378 27000000            <1> .es:            dd  DS_TASK_1                                           ;  72:ES
    53 0000037C 1F000000            <1> .cs:            dd  CS_TASK_1                                           ;  76:CS
    54 00000380 27000000            <1> .ss:            dd  DS_TASK_1                                           ;  80:SS
    55 00000384 27000000            <1> .ds:            dd  DS_TASK_1                                           ;  84:DS
    56 00000388 27000000            <1> .fs:            dd  DS_TASK_1                                           ;  88:FS
    57 0000038C 27000000            <1> .gs:            dd  DS_TASK_1                                           ;  92:GS
    58 00000390 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
    59 00000394 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    60 00000398 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    61                              <1> 
    62                              <1> TSS_2:
    63 00000408 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    64 0000040C 003A1000            <1> .esp0:          dd  SP_TASK_2 - 512                                     ;*  4:ESP0
    65 00000410 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    66 00000414 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    67 00000418 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    68 0000041C 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    69 00000420 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    70 00000424 00501000            <1> .cr3:           dd  CR3_BASE                                            ;  28:CR3(PDBR)
    71 00000428 [E3060000]          <1> .eip:           dd  task_2                                              ;  32:EIP
    72 0000042C 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
    73 00000430 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    74 00000434 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    75 00000438 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    76 0000043C 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    77 00000440 003C1000            <1> .esp:           dd  SP_TASK_2                                           ;  56:ESP
    78 00000444 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    79 00000448 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    80 0000044C 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    81 00000450 37000000            <1> .es:            dd  DS_TASK_2                                           ;  72:ES
    82 00000454 2F000000            <1> .cs:            dd  CS_TASK_2                                           ;  76:CS
    83 00000458 37000000            <1> .ss:            dd  DS_TASK_2                                           ;  80:SS
    84 0000045C 37000000            <1> .ds:            dd  DS_TASK_2                                           ;  84:DS
    85 00000460 37000000            <1> .fs:            dd  DS_TASK_2                                           ;  88:FS
    86 00000464 37000000            <1> .gs:            dd  DS_TASK_2                                           ;  92:GS
    87 00000468 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
    88 0000046C 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    89 00000470 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    90                              <1> 
    91                              <1> TSS_3:
    92 000004E0 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    93 000004E4 003E1000            <1> .esp0:          dd  SP_TASK_3 - 512                                     ;*  4:ESP0
    94 000004E8 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    95 000004EC 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    96 000004F0 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    97 000004F4 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    98 000004F8 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    99 000004FC 00501000            <1> .cr3:           dd  CR3_BASE                                            ;  28:CR3(PDBR)
   100 00000500 [B4070000]          <1> .eip:           dd  task_3                                              ;  32:EIP
   101 00000504 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
   102 00000508 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
   103 0000050C 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
   104 00000510 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
   105 00000514 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
   106 00000518 00401000            <1> .esp:           dd  SP_TASK_3                                           ;  56:ESP
   107 0000051C 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
   108 00000520 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
   109 00000524 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
   110 00000528 47000000            <1> .es:            dd  DS_TASK_3                                           ;  72:ES
   111 0000052C 3F000000            <1> .cs:            dd  CS_TASK_3                                           ;  76:CS
   112 00000530 47000000            <1> .ss:            dd  DS_TASK_3                                           ;  80:SS
   113 00000534 47000000            <1> .ds:            dd  DS_TASK_3                                           ;  84:DS
   114 00000538 47000000            <1> .fs:            dd  DS_TASK_3                                           ;  88:FS
   115 0000053C 47000000            <1> .gs:            dd  DS_TASK_3                                           ;  92:GS
   116 00000540 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
   117 00000544 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
   118 00000548 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
   119                              <1> 
   120                              <1> ;********************************************************************************************************
   121                              <1> ;グローバルディスクリプタテーブル
   122                              <1> ;********************************************************************************************************
   123 000005B8 0000000000000000    <1> GDT:            dq  0x_0000_0000_0000_0000                              ;NULL
   124 000005C0 FFFF0000009ACF00    <1> .cs_kernel:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
   125 000005C8 FFFF00000092CF00    <1> .ds_kernel:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
   126 000005D0 0000000000820000    <1> .ldt:           dq  0x_0000_8200_0000_0000                              ;LDTディスクリプタ
   127 000005D8 6700000000890000    <1> .tss_0:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   128 000005E0 6700000000890000    <1> .tss_1:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   129 000005E8 6700000000890000    <1> .tss_2:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   130 000005F0 6700000000890000    <1> .tss_3:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   131 000005F8 0000080004EC0000    <1> .call_gate:     dq  0x_0000_EC04_0008_0000                              ;386コールゲート(DPL=3, count=4, SEL=8)
   132                              <1> .end:
   133                              <1> 
   134                              <1> CS_KERNEL       equ .cs_kernel  - GDT
   135                              <1> DS_KERNEL       equ .ds_kernel  - GDT
   136                              <1> SS_LDT          equ .ldt        - GDT
   137                              <1> SS_TASK_0       equ .tss_0      - GDT
   138                              <1> SS_TASK_1       equ .tss_1      - GDT
   139                              <1> SS_TASK_2       equ .tss_2      - GDT
   140                              <1> SS_TASK_3       equ .tss_3      - GDT
   141                              <1> SS_GATE_0       equ .call_gate  - GDT
   142                              <1> 
   143 00000600 4700                <1> GDTR:           dw  GDT.end - GDT - 1
   144 00000602 [B8050000]          <1>                 dd  GDT
   145                              <1> 
   146                              <1> 
   147                              <1> ;********************************************************************************************************
   148                              <1> ;ローカルディスクリプタテーブル
   149                              <1> ;********************************************************************************************************
   150 00000606 0000000000000000    <1> LDT:            dq  0x_0000_0000_0000_0000                              ;NULL
   151 0000060E FFFF0000009ACF00    <1> .cs_task_0:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
   152 00000616 FFFF00000092CF00    <1> .ds_task_0:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
   153 0000061E FFFF000000FACF00    <1> .cs_task_1:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   154 00000626 FFFF000000F2CF00    <1> .ds_task_1:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   155 0000062E FFFF000000FACF00    <1> .cs_task_2:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   156 00000636 FFFF000000F2CF00    <1> .ds_task_2:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   157 0000063E FFFF000000FACF00    <1> .cs_task_3:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   158 00000646 FFFF000000F2CF00    <1> .ds_task_3:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   159                              <1> .end:
   160                              <1> 
   161                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                              ;タスク0用CSセレクタ
   162                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                              ;タスク0用DSセレクタ
   163                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                          ;タスク1用CSセレクタ
   164                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                          ;タスク1用DSセレクタ
   165                              <1> CS_TASK_2       equ (.cs_task_2 - LDT) | 4 | 3                          ;タスク2用CSセレクタ
   166                              <1> DS_TASK_2       equ (.ds_task_2 - LDT) | 4 | 3                          ;タスク2用DSセレクタ
   167                              <1> CS_TASK_3       equ (.cs_task_3 - LDT) | 4 | 3                          ;タスク3用CSセレクタ
   168                              <1> DS_TASK_3       equ (.ds_task_3 - LDT) | 4 | 3                          ;タスク3用DSセレクタ
   169                              <1> 
   170                              <1> LDT_LIMIT       equ .end        - LDT - 1
   164                                  %include        "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 0000064E 60                  <1>         pushad
     6 0000064F 1E                  <1>         push    ds
     7 00000650 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 00000651 66B81000            <1>         mov     ax, 0x0010
    13 00000655 8ED8                <1>         mov     ds, ax
    14 00000657 8EC0                <1>         mov     es, ax
    15                              <1>         
    16                              <1>         ;---------------------------------------
    17                              <1>         ;TICK
    18                              <1>         ;---------------------------------------
    19 00000659 FF05[A4060000]      <1>         inc     dword [TIMER_COUNT]             ;TIMER_COUNT++; //割り込み回数の更新
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;割り込みフラグをクリア(EOI)
    23                              <1>         ;---------------------------------------
    24                              <1>         outp 0x20, 0x20
    24 0000065F B020                <2>  mov al, %2
    24 00000661 E620                <2>  out %1, al
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;タスクの切り替え
    28                              <1>         ;---------------------------------------
    29 00000663 660F00C8            <1>         str     ax                              ;AX = TR; //現在のタスクレジスタ
    30 00000667 6683F820            <1>         cmp     ax, SS_TASK_0                   ;case(AX)
    31 0000066B 7415                <1>         je      .11L                            ;{
    32 0000066D 6683F828            <1>         cmp     ax, SS_TASK_1
    33 00000671 7418                <1>         je      .12L
    34 00000673 6683F830            <1>         cmp     ax, SS_TASK_2
    35 00000677 741B                <1>         je      .13L
    36                              <1>                                                 ;       default:
    37 00000679 EA000000002000      <1>         jmp     SS_TASK_0:0                     ;       //タスク0に切り替え
    38 00000680 EB1B                <1>         jmp     .10E                            ;       break;
    39                              <1> .11L:                                           ;       case SS_TASK_0:
    40 00000682 EA000000002800      <1>         jmp     SS_TASK_1:0                     ;       //タスク1に切り替え
    41 00000689 EB12                <1>         jmp     .10E                            ;       break;
    42                              <1> .12L:                                           ;       case SS_TASK_1:
    43 0000068B EA000000003000      <1>         jmp     SS_TASK_2:0                     ;       //タスク2に切り替え
    44 00000692 EB09                <1>         jmp     .10E                            ;       break;
    45                              <1> .13L:                                           ;       case SS_TASK_2:
    46 00000694 EA000000003800      <1>         jmp     SS_TASK_3:0                     ;       //タスク3に切り替え
    47 0000069B EB00                <1>         jmp     .10E                            ;       break;
    48                              <1> .10E:                                           ;}
    49                              <1> 
    50                              <1>         ;---------------------------------------
    51                              <1>         ;レジスタの復帰
    52                              <1>         ;---------------------------------------
    53 0000069D 07                  <1>         pop     es
    54 0000069E 1F                  <1>         pop     ds
    55 0000069F 61                  <1>         popad
    56                              <1>         
    57 000006A0 CF                  <1>         iret
    58                              <1> 
    59                              <1>         ;---------------------------------------
    60                              <1>         ;データ
    61                              <1>         ;---------------------------------------
    62 000006A1 00<rept>            <1> ALIGN   4, db   0
    63 000006A4 0000000000000000    <1> TIMER_COUNT:    dq  0
   165                                  %include        "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;文字列の表示
     4                              <1>         ;---------------------------------------
     5 000006AC 68[DC060000]6A076A- <1>         cdecl   SS_GATE_0:0, 63, 0 , 0x07, .s0  ;draw_str();
     5 000006B4 006A3F9A0000000040- <1>
     5 000006BD 006683C410          <1>
     6                              <1> 
     7                              <1> .10L:                                           ;while(1)
     8                              <1>                                                 ;{
     9                              <1> 
    10                              <1>         ;---------------------------------------
    11                              <1>         ;時刻の表示
    12                              <1>         ;---------------------------------------
    13 000006C2 A1[54020000]        <1>         mov     eax, [RTC_TIME]                 ;       //時刻の取得
    14 000006C7 5068000700006A006A- <1>         cdecl   draw_time, 72, 0, 0x0700, eax   ;       //時刻の表示
    14 000006D0 48E8550800006683C4- <1>
    14 000006D9 10                  <1>
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;タスクの呼び出し
    18                              <1>         ;---------------------------------------       
    19                              <1>         ;jmp     SS_TASK_0:0                     ;       //タスク0へのジャンプ
    20                              <1> 
    21 000006DA EBE6                <1>         jmp     .10L                            ;}
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;データ
    25                              <1>         ;---------------------------------------
    26 000006DC 5461736B2D3100      <1> .s0:    db  "Task-1", 0
   166                                  %include        "tasks/task_2.s"
     1                              <1> task_2:
     2 000006E3 68[A6070000]6A076A- <1>         cdecl   draw_str, 63, 1, 0x07, .s0      ;   draw_str(.s0);
     2 000006EB 016A3FE8E004000066- <1>
     2 000006F4 83C410              <1>
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;FPU
     6                              <1>         ;---------------------------------------
     7                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
     8                              <1>                                     ;       ST0|        ST1|        ST2|        ST3|        ST4|        ST5|
     9                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    10 000006F7 DB05[94070000]      <1>         fild    dword [.c1000]      ;      1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    11 000006FD D9EB                <1>         fldpi                       ;        pi|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    12 000006FF DA35[98070000]      <1>         fidiv   dword [.c180]       ;    pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    13 00000705 D9EB                <1>         fldpi                       ;        pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    14 00000707 DCC0                <1>         fadd    st0, st0            ;      2*pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    15 00000709 D9EE                <1>         fldz                        ;     θ = 0|       2*pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|
    16                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    17                              <1> 
    18                              <1> .10L:                                           ;while(1)
    19                              <1>                                                 ;{
    20                              <1> 
    21                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    22                              <1>                                     ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    23                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    24 0000070B D8C2                <1>         fadd    st0, ST2            ;θ =  θ + d|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    25 0000070D D9F8                <1>         fprem                       ;    MOD(θ)|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    26                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    27                              <1>                                     ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    28 0000070F D9C0                <1>         fld     st0                 ;         θ|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    29 00000711 D9FE                <1>         fsin                        ;    sin(θ)|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    30 00000713 D8CC                <1>         fmul    st0, st4            ;ST4*sin(θ)|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    31 00000715 DF35[9C070000]      <1>         fbstp   [.bcd]              ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    32                              <1> 
    33                              <1>         ;---------------------------------------
    34                              <1>         ;CPU
    35                              <1>         ;---------------------------------------
    36                              <1>         ;---------------------------------------
    37                              <1>         ;数値出力
    38                              <1>         ;---------------------------------------
    39 0000071B A1[9C070000]        <1>         mov     eax, [.bcd]                     ;   EAX = 1000* sin(t);
    40 00000720 89C3                <1>         mov     ebx, eax                        ;   EBX = EAX;
    41                              <1> 
    42 00000722 250F0F0000          <1>         and     eax, 0x0F0F                     ;   //上位4ビットをマスク
    43 00000727 0D30300000          <1>         or      eax, 0x3030                     ;   //上位4ビットに0x3を設定
    44                              <1> 
    45 0000072C C1EB04              <1>         shr     ebx, 4                          ;   EBX >> 4;
    46 0000072F 81E30F0F0000        <1>         and     ebx, 0x0F0F                     ;   //上位4ビットをマスク
    47 00000735 81CB30300000        <1>         or      ebx, 0x3030                     ;   //上位4ビットに0x3を設定
    48                              <1> 
    49 0000073B 883D[AE070000]      <1>         mov     [.s2 + 0], bh                   ;   //1桁目
    50 00000741 8825[B0070000]      <1>         mov     [.s3 + 0], ah                   ;   //小数1桁目
    51 00000747 881D[B1070000]      <1>         mov     [.s3 + 1], bl                   ;   //小数2桁目
    52 0000074D A2[B2070000]        <1>         mov     [.s3 + 2], al                   ;   //小数3桁目
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;符号チェック
    56                              <1>         ;---------------------------------------
    57 00000752 B807000000          <1>         mov     eax, 7                          ;   //bt命令準備(取り出しbit番号指定)
    58 00000757 0FA305[A5070000]    <1>         bt      [.bcd + 9], eax                 ;   CF = bcd[9] & 0x80;
    59 0000075E 7209                <1>         jc      .10F                            ;   if(CF)
    60                              <1>                                                 ;   {
    61 00000760 C605[AD070000]2B    <1>         mov     [.s1 + 0], byte '+'             ;       *s1 = '+';
    62 00000767 EB07                <1>         jmp     .10E                            ;   }
    63                              <1> .10F:                                           ;   else
    64                              <1>                                                 ;   {
    65 00000769 C605[AD070000]2D    <1>         mov     [.s1 + 0], byte '-'             ;       *s1 = '-';
    66                              <1> .10E:                                           ;   }
    67                              <1> 
    68 00000770 68[AD070000]6A076A- <1>         cdecl   draw_str, 72, 1, 0x07, .s1      ;   draw_str(.s1);
    68 00000778 016A48E85304000066- <1>
    68 00000781 83C410              <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;ウェイト
    72                              <1>         ;---------------------------------------
    73 00000784 6A0AE8350C00006683- <1>         cdecl   wait_tick, 10                   ;   wait_tick(10);
    73 0000078D C404                <1>
    74                              <1> 
    75 0000078F E977FFFFFF          <1>         jmp     .10L                            ;}
    76                              <1> 
    77                              <1>         ;---------------------------------------
    78                              <1>         ;データ
    79                              <1>         ;---------------------------------------
    80                              <1> ALIGN   4,  db  0
    81 00000794 E8030000            <1> .c1000:     dd  1000
    82 00000798 B4000000            <1> .c180:      dd  180
    83 0000079C 00<rept>            <1> .bcd:   times 10    db  0x00
    84 000007A6 5461736B2D3200      <1> .s0:    db  "Task-2", 0
    85 000007AD 2D                  <1> .s1:    db  "-"
    86 000007AE 302E                <1> .s2:    db  "0."
    87 000007B0 30303000            <1> .s3:    db  "000", 0
   167                                  %include        "tasks/task_3.s"
     1                              <1> task_3:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;---------------------------------------
     5 000007B4 89E5                <1>         mov     ebp, esp                        ;EBP+ 0| EBP(元の値)
     6                              <1>                                                 ;------|---------
     7 000007B6 6A00                <1>         push    dword 0                         ;   - 4| x0 = 0; //X座標原点
     8 000007B8 6A00                <1>         push    dword 0                         ;   - 8| y0 = 0; //Y座標原点
     9 000007BA 6A00                <1>         push    dword 0                         ;   -12| x  = 0; //X座標描画
    10 000007BC 6A00                <1>         push    dword 0                         ;   -16| y  = 0; //Y座標描画
    11 000007BE 6A00                <1>         push    dword 0                         ;   -20| r  = 0; //角度
    12                              <1> 
    13                              <1>         ;---------------------------------------
    14                              <1>         ;初期化
    15                              <1>         ;---------------------------------------
    16 000007C0 BE00701000          <1>         mov     esi, 0x0010_7000                 ;ESI = 描画パラメータ
    17                              <1> 
    18                              <1>         ;---------------------------------------
    19                              <1>         ;タイトル表示
    20                              <1>         ;---------------------------------------
    21 000007C5 8B06                <1>         mov     eax, [esi + rose.x0]            ;X0座標
    22 000007C7 8B5E04              <1>         mov     ebx, [esi + rose.y0]            ;Y0座標
    23                              <1> 
    24 000007CA C1E803              <1>         shr     eax, 3                          ;ESI = EAX / 8; //X座標を文字位置に変換
    25 000007CD C1EB04              <1>         shr     ebx, 4                          ;EDI = EBX / 16; //Y座標を文字位置に変換
    26 000007D0 4B                  <1>         dec     ebx                             ;//1文字分上に移動
    27 000007D1 8B4E24              <1>         mov     ecx, [esi + rose.color_s]       ;文字色
    28 000007D4 8D5630              <1>         lea     edx, [esi + rose.title]         ;タイトル
    29                              <1> 
    30 000007D7 52515350E8F3030000- <1>         cdecl   draw_str, eax, ebx, ecx, edx    ;   draw_str(.s0);
    30 000007E0 6683C410            <1>
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;X軸の中点
    34                              <1>         ;---------------------------------------
    35 000007E4 8B06                <1>         mov     eax, [esi + rose.x0]            ;EAX = X0座標;
    36 000007E6 8B5E08              <1>         mov     ebx, [esi + rose.x1]            ;EBX = X1座標;
    37 000007E9 29C3                <1>         sub     ebx, eax                        ;EBX = (X1 - X0);
    38 000007EB D1EB                <1>         shr     ebx, 1                          ;EBX /= 2;
    39 000007ED 01C3                <1>         add     ebx, eax                        ;EBX += X0;
    40 000007EF 895DFC              <1>         mov     [ebp - 4], ebx                  ;x0 = EBX; //X座標原点;
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;Y軸の中点
    44                              <1>         ;---------------------------------------
    45 000007F2 8B4604              <1>         mov     eax, [esi + rose.y0]            ;EAX = Y0座標;
    46 000007F5 8B5E0C              <1>         mov     ebx, [esi + rose.y1]            ;EBX = Y1座標;
    47 000007F8 29C3                <1>         sub     ebx, eax                        ;EBX = (Y1 - Y0);
    48 000007FA D1EB                <1>         shr     ebx, 1                          ;EBX /= 2;
    49 000007FC 01C3                <1>         add     ebx, eax                        ;EBX += Y0;
    50 000007FE 895DF8              <1>         mov     [ebp - 8], ebx                  ;y0 = EBX; //Y座標原点;
    51                              <1> 
    52                              <1>         ;---------------------------------------
    53                              <1>         ;X軸の描画
    54                              <1>         ;---------------------------------------
    55 00000801 8B06                <1>         mov     eax, [esi + rose.x0]            ;EAX = X0座標;
    56 00000803 8B5DF8              <1>         mov     ebx, [ebp - 8]                  ;EBX = Y軸の中点
    57 00000806 8B4E08              <1>         mov     ecx, [esi + rose.x1]            ;ECX = X1座標;
    58                              <1> 
    59 00000809 FF761853515350E837- <1>         cdecl   draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]       ;X軸
    59 00000812 0500006683C414      <1>
    60                              <1>         
    61                              <1>         ;---------------------------------------
    62                              <1>         ;Y軸の描画
    63                              <1>         ;---------------------------------------
    64 00000819 8B4604              <1>         mov     eax, [esi + rose.y0]            ;EAX = Y0座標;
    65 0000081C 8B5DFC              <1>         mov     ebx, [ebp - 4]                  ;EBX = X軸の中点
    66 0000081F 8B4E0C              <1>         mov     ecx, [esi + rose.y1]            ;ECX = Y1座標;
    67                              <1> 
    68 00000822 FF761C51535053E81E- <1>         cdecl   draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]       ;Y軸
    68 0000082B 0500006683C414      <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;枠の描画
    72                              <1>         ;---------------------------------------
    73 00000832 8B06                <1>         mov     eax, [esi + rose.x0]            ;X0座標
    74 00000834 8B5E04              <1>         mov     ebx, [esi + rose.y0]            ;Y0座標
    75 00000837 8B4E08              <1>         mov     ecx, [esi + rose.x1]            ;X1座標
    76 0000083A 8B560C              <1>         mov     edx, [esi + rose.y1]            ;y1座標
    77                              <1> 
    78 0000083D FF762052515350E8B2- <1>         cdecl   draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]       ;枠
    78 00000846 0500006683C414      <1>
    79                              <1> 
    80                              <1>         ;---------------------------------------
    81                              <1>         ;振れ幅をX軸の約95%とする
    82                              <1>         ;---------------------------------------
    83 0000084D 8B4608              <1>         mov     eax, [esi + rose.x1]            ;EAX = X1座標;
    84 00000850 2B06                <1>         sub     eax, [esi + rose.x0]            ;EAX -= X0座標;
    85 00000852 D1E8                <1>         shr     eax, 1                          ;EAX /= 2; //半分
    86 00000854 89C3                <1>         mov     ebx, eax                        ;EBX = EAX;
    87 00000856 C1EB04              <1>         shr     ebx, 4                          ;EBX /= 16;
    88 00000859 29D8                <1>         sub     eax, ebx                        ;EAX -= EBX;
    89                              <1> 
    90                              <1>         ;---------------------------------------
    91                              <1>         ;FPUの初期化(パラ曲線の初期化)
    92                              <1>         ;---------------------------------------
    93 0000085B FF7614FF761050E88D- <1>         cdecl   fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]  ;fpu_rose_init(A, n, d);
    93 00000864 0000006683C40C      <1>
    94                              <1> 
    95                              <1>         ;---------------------------------------
    96                              <1>         ;メインループ
    97                              <1>         ;---------------------------------------
    98                              <1> .10L:                                           ;while(1)
    99                              <1>                                                 ;{
   100                              <1> 
   101                              <1>         ;---------------------------------------
   102                              <1>         ;座標計算
   103                              <1>         ;---------------------------------------
   104 0000086B 8D5DF4              <1>         lea     ebx, [ebp -12]                  ;       EBX = &x;
   105 0000086E 8D4DF0              <1>         lea     ecx, [ebp -16]                  ;       ECX = &y;
   106 00000871 8B45EC              <1>         mov     eax, [ebp -20]                  ;       EAX = r;
   107                              <1> 
   108 00000874 505153E89200000066- <1>         cdecl   fpu_rose_update, ebx, ecx, eax  ;       fpu_rose_update(&x, &y, r);
   108 0000087D 83C40C              <1>
   109                              <1> 
   110                              <1>         ;---------------------------------------
   111                              <1>         ;角度更新(r = r % 36000)
   112                              <1>         ;---------------------------------------
   113 00000880 BA00000000          <1>         mov     edx, 0                          ;       EDX = 0;
   114 00000885 40                  <1>         inc     eax                             ;       EAX++;
   115 00000886 BBA08C0000          <1>         mov     ebx, 360 * 100                  ;       EBX = 36000
   116 0000088B F7F3                <1>         div     ebx                             ;       EDX = EDX:EAX % EBX;
   117 0000088D 8955EC              <1>         mov     [ebp -20], edx
   118                              <1> 
   119                              <1>         ;---------------------------------------
   120                              <1>         ;ドット描画
   121                              <1>         ;---------------------------------------
   122 00000890 8B4DF4              <1>         mov     ecx, [ebp -12]                  ;       ECX = X座標
   123 00000893 8B55F0              <1>         mov     edx, [ebp -16]                  ;       ECX = Y座標
   124                              <1> 
   125 00000896 034DFC              <1>         add     ecx, [ebp - 4]                  ;       ECX += X座標原点;
   126 00000899 0355F8              <1>         add     edx, [ebp - 8]                  ;       EDX += Y座標原点;
   127                              <1> 
   128 0000089C 8B5E28              <1>         mov     ebx, [esi + rose.color_f]       ;       EBX = 表示色;
   129 0000089F CD82                <1>         int     0x82                            ;       sys_call_82(表示色, X, Y);
   130                              <1> 
   131                              <1>         ;---------------------------------------
   132                              <1>         ;ウェイト
   133                              <1>         ;---------------------------------------
   134 000008A1 6A02E8180B00006683- <1>         cdecl   wait_tick, 2                    ;   wait_tick(2);
   134 000008AA C404                <1>
   135                              <1> 
   136                              <1>         ;---------------------------------------
   137                              <1>         ;ドット描画(消去)
   138                              <1>         ;---------------------------------------
   139 000008AC 8B5E2C              <1>         mov     ebx, [esi + rose.color_b]       ;       EBX = 背景色;
   140 000008AF CD82                <1>         int     0x82                            ;       sys_call_82(背景色, X, Y);
   141                              <1> 
   142 000008B1 EBB8                <1>         jmp     .10L                            ;}
   143                              <1> 
   144                              <1>         ;---------------------------------------
   145                              <1>         ;データ
   146                              <1>         ;---------------------------------------
   147 000008B3 00                  <1> ALIGN 4, db 0
   148                              <1> DRAW_PARAM:
   149                              <1>         istruc  rose
   150 000008B4 10000000            <1>                 at      rose.x0,        dd      16              ;左上座標:X0
   151 000008B8 20000000            <1>                 at      rose.y0,        dd      32              ;左上座標:Y0
   152 000008BC A0010000            <1>                 at      rose.x1,        dd      416             ;右下座標:X1
   153 000008C0 B0010000            <1>                 at      rose.y1,        dd      432             ;右下座標:Y1
   154                              <1> 
   155 000008C4 02000000            <1>                 at      rose.n,         dd      2               ;変数:n
   156 000008C8 01000000            <1>                 at      rose.d,         dd      1               ;変数:d
   157                              <1> 
   158 000008CC 07000000            <1>                 at      rose.color_x,   dd      0x0007          ;描画色:X軸
   159 000008D0 07000000            <1>                 at      rose.color_y,   dd      0x0007          ;描画色:Y軸
   160 000008D4 0F000000            <1>                 at      rose.color_z,   dd      0x000F          ;描画色:枠
   161 000008D8 0F030000            <1>                 at      rose.color_s,   dd      0x030F          ;描画色:文字
   162 000008DC 0F000000            <1>                 at      rose.color_f,   dd      0x000F          ;描画色:グラフ描画色
   163 000008E0 03000000            <1>                 at      rose.color_b,   dd      0x0003          ;描画色:グラフ消去色
   164                              <1> 
   165 000008E4 5461736B2D3300      <1>                 at      rose.title,     db      "Task-3", 0     ;タイトル
   166 000008EB 00<rept>            <1>         iend
   167                              <1> 
   168                              <1> fpu_rose_init:
   169                              <1>         ;---------------------------------------
   170                              <1>         ;スタックフレームの構築
   171                              <1>         ;---------------------------------------
   172                              <1>                                                 ;   +16| d
   173                              <1>                                                 ;   +12| n
   174                              <1>                                                 ;   + 8| A
   175                              <1>                                                 ;   + 4| EIP(戻り番号)
   176 000008F4 55                  <1>         push    ebp                             ;EBP+ 0| EBP(元の値)
   177 000008F5 89E5                <1>         mov     ebp, esp                        ;------|---------
   178 000008F7 68B4000000          <1>         push    dword 180                       ;   - 4| dword i = 180;
   179                              <1> 
   180                              <1>         ;---------------------------------------
   181                              <1>         ;FPU
   182                              <1>         ;---------------------------------------
   183                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   184                              <1>                                         ;       ST0|        ST1|        ST2|        ST3|        ST4|        ST5|
   185                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   186 000008FC D9EB                <1>         fldpi                           ;        pi|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   187 000008FE DA75FC              <1>         fidiv   dword [ebp - 4]         ;    pi/180|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   188 00000901 DB450C              <1>         fild    dword [ebp +12]         ;         n|     pi/180|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   189 00000904 DA7510              <1>         fidiv   dword [ebp +16]         ;       n/d|     pi/180|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   190 00000907 DB4508              <1>         fild    dword [ebp + 8]         ;         A|        n/d|     pi/180|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   191                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   192                              <1>                                         ;         A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   193                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   194                              <1> 
   195                              <1>         ;---------------------------------------
   196                              <1>         ;スタックフレームの破棄
   197                              <1>         ;---------------------------------------
   198 0000090A 89EC                <1>         mov     esp, ebp
   199 0000090C 5D                  <1>         pop     ebp
   200                              <1> 
   201 0000090D C3                  <1>         ret
   202                              <1> 
   203                              <1> fpu_rose_update:
   204                              <1>         ;---------------------------------------
   205                              <1>         ;スタックフレームの構築
   206                              <1>         ;---------------------------------------
   207                              <1>                                                 ;   +16| t(角度)
   208                              <1>                                                 ;   +12| Y(float)のアドレス
   209                              <1>                                                 ;   + 8| X(float)のアドレス
   210                              <1>                                                 ;   + 4| EIP(戻り番号)
   211 0000090E 55                  <1>         push   ebp                              ;EBP+ 0| EBP(元の値)
   212 0000090F 89E5                <1>         mov    ebp, esp                         ;------|---------
   213                              <1> 
   214                              <1>         ;---------------------------------------
   215                              <1>         ;レジスタの保存
   216                              <1>         ;---------------------------------------
   217 00000911 50                  <1>         push    eax
   218 00000912 53                  <1>         push    ebx
   219                              <1> 
   220                              <1>         ;---------------------------------------
   221                              <1>         ;X/Y座標の保存先を設定
   222                              <1>         ;---------------------------------------
   223 00000913 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = pX; //X座標へのポインタ
   224 00000916 8B5D0C              <1>         mov     ebx, [ebp + 12]                 ;EBX = pY; //Y座標へのポインタ
   225                              <1>         
   226                              <1>         ;---------------------------------------
   227                              <1>         ;FPU
   228                              <1>         ;---------------------------------------
   229                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   230                              <1>                                         ;       ST0|        ST1|        ST2|        ST3|        ST4|        ST5|
   231                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   232 00000919 DB4510              <1>         fild    dword [ebp +16]         ;         t|          A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|
   233 0000091C D8CB                <1>         fmul    st0, st3                ;        rt|          A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|
   234 0000091E D9C0                <1>         fld     st0                     ;        rt|         rt|          A|          k|          r|  xxxxxxxxx|
   235                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   236                              <1>                                         ;    θ=(rt)|     θ=(rt)|          A|          k|          r|  xxxxxxxxx|
   237                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   238 00000920 D9FB                <1>         fsincos                         ;    cos(θ)|     sin(θ)|          θ|          A|          k|          r|
   239                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   240 00000922 D9CA                <1>         fxch    st2                     ;         θ|     sin(θ)|     cos(θ)|          A|          k|          r|
   241 00000924 D8CC                <1>         fmul    st0, st4                ;        kθ|     sin(θ)|     cos(θ)|          A|          k|          r|
   242 00000926 D9FE                <1>         fsin                            ;   sin(kθ)|     sin(θ)|     cos(θ)|          A|          k|          r|
   243 00000928 D8CB                <1>         fmul    st0, st3                ;  Asin(kθ)|     sin(θ)|     cos(θ)|          A|          k|          r|
   244                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   245 0000092A D9CA                <1>         fxch    st2                     ;    cos(θ)|     sin(θ)|   Asin(kθ)|          A|          k|          r|
   246 0000092C D8CA                <1>         fmul    st0, st2                ;         x|     sin(θ)|   Asin(kθ)|          A|          k|          r|
   247 0000092E DB18                <1>         fistp   dword [eax]             ;    sin(θ)|   Asin(kθ)|          A|          k|          r|  xxxxxxxxx|
   248                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   249 00000930 DEC9                <1>         fmulp   st1, st0                ;         y|          A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|
   250 00000932 D9E0                <1>         fchs                            ;        -y|          A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|
   251 00000934 DB1B                <1>         fistp   dword [ebx]             ;         A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   252                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   253                              <1> 
   254                              <1>         ;---------------------------------------
   255                              <1>         ;レジスタの復帰
   256                              <1>         ;---------------------------------------
   257 00000936 5B                  <1>         pop     ebx
   258 00000937 58                  <1>         pop     eax
   259                              <1> 
   260                              <1>         ;---------------------------------------
   261                              <1>         ;スタックフレームの破棄
   262                              <1>         ;---------------------------------------
   263 00000938 89EC                <1>         mov     esp, ebp
   264 0000093A 5D                  <1>         pop     ebp
   265                              <1> 
   266 0000093B C3                  <1>         ret
   168                                  %include        "modules/paging.s"
     1                              <1> page_set_4m:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;---------------------------------------
     5                              <1>                                                 ;   + 8| ページテーブル作成位置
     6                              <1>                                                 ;   + 4| EIP(戻り番号)
     7 0000093C 55                  <1>         push    ebp                             ;EBP+ 0| EBP(元の値)
     8 0000093D 89E5                <1>         mov     ebp, esp                        ;------|---------
     9                              <1> 
    10                              <1>         ;---------------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;---------------------------------------
    13 0000093F 60                  <1>         pusha
    14                              <1> 
    15                              <1>         ;---------------------------------------
    16                              <1>         ;ページディレクトリの作成(P=0)
    17                              <1>         ;---------------------------------------
    18 00000940 FC                  <1>         cld                                     ;//DFクリア(+方向)
    19 00000941 8B7D08              <1>         mov     edi, [ebp + 8]                  ;EDI = ページディレクトリの先頭;
    20 00000944 B800000000          <1>         mov     eax, 0x0000_0000                ;EAX = 0; //P = 0
    21 00000949 B900040000          <1>         mov     ecx, 1024                       ;count = 1024;
    22 0000094E F3AB                <1>         rep     stosd                           ;while(cout--) *dst++ = 属性; //ページディレクトリ全てに0x00000000をセット
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;先頭のエントリーを設定
    26                              <1>         ;---------------------------------------
    27 00000950 89F8                <1>         mov     eax, edi                        ;EAX = EDI; //ページディレクトリの直後
    28 00000952 2500F0FFFF          <1>         and     eax, ~0x0000_0FFF               ;EAX &= ~0FFF; //物理アドレスの指定
    29 00000957 83C807              <1>         or      eax, 7                          ;EAX |= 7; //RWの許可
    30 0000095A 898700F0FFFF        <1>         mov     [edi - (1024 * 4)], eax         ;//先頭エントリを設定
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;ページテーブルの設定(リニア)
    34                              <1>         ;---------------------------------------
    35 00000960 B807000000          <1>         mov     eax, 0x0000_0007                ;//物理アドレスの指定とRWの許可
    36 00000965 B900040000          <1>         mov     ecx, 1024                       ;count = 1024;
    37                              <1>                                                 ;do
    38                              <1> .10L:                                           ;{
    39 0000096A AB                  <1>         stosd                                   ;   *dst++ = 属性;
    40 0000096B 0500100000          <1>         add     eax, 0x0000_1000                ;   adr += 0x1000;
    41 00000970 E2F8                <1>         loop    .10L                            ;}while(--count);
    42                              <1>         
    43                              <1>         ;---------------------------------------
    44                              <1>         ;レジスタの復帰
    45                              <1>         ;---------------------------------------
    46 00000972 61                  <1>         popa
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;スタックフレームの破棄
    50                              <1>         ;---------------------------------------
    51 00000973 89EC                <1>         mov     esp, ebp
    52 00000975 5D                  <1>         pop     ebp
    53                              <1> 
    54 00000976 C3                  <1>         ret
    55                              <1> 
    56                              <1> init_page:
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの保存
    59                              <1>         ;---------------------------------------
    60 00000977 60                  <1>         pusha
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;ページ変換テーブルの作成
    64                              <1>         ;---------------------------------------
    65 00000978 6800501000E8BAFFFF- <1>         cdecl   page_set_4m, CR3_BASE           ;ページ変換テーブルの作成:タスク3用
    65 00000981 FF6683C404          <1>
    66 00000986 C7051C641000000000- <1>         mov     [0x00106000 + 0x107 * 4], dword 0;0x0010_7000をページ不在に設定
    66 0000098F 00                  <1>
    67                              <1> 
    68                              <1>         ;---------------------------------------
    69                              <1>         ;レジスタの復帰
    70                              <1>         ;---------------------------------------
    71 00000990 61                  <1>         popa
    72                              <1> 
    73 00000991 C3                  <1>         ret
   169                                  %include        "modules/int_pf.s"
     1                              <1> int_pf:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;---------------------------------------
     5                              <1>                                                 ;   + 4| EIP(戻り番号)
     6 00000992 55                  <1>         push    ebp                             ;EBP+ 0| EBP(元の値)
     7 00000993 89E5                <1>         mov     ebp, esp                        ;------|---------
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;レジスタの保存
    11                              <1>         ;---------------------------------------
    12 00000995 60                  <1>         pusha
    13 00000996 1E                  <1>         push    ds
    14 00000997 06                  <1>         push    es
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;例外を生成したアドレスの確認
    18                              <1>         ;---------------------------------------
    19 00000998 0F20D0              <1>         mov     eax, cr2                        ;//CR2
    20 0000099B 2500F0FFFF          <1>         and     eax, ~0x0FFF                    ;//4Kバイト以内のアクセス
    21 000009A0 3D00701000          <1>         cmp     eax, 0x0010_7000                ;ptr = アクセスアドレス;
    22 000009A5 7521                <1>         jne     .10F                            ;if(0x0010_7000 == ptr)
    23                              <1>                                                 ;{
    24 000009A7 C7051C641000077010- <1>         mov     [0x00106000 + 0x107 * 4], dword 0x00107007  ;//ページの有効化
    24 000009B0 00                  <1>
    25 000009B1 6A4068[B4080000]68- <1>         cdecl   memcpy, 0x0010_7000, DRAW_PARAM, rose_size  ;描画パラメータ:タスク3用
    25 000009B9 00701000E81C0A0000- <1>
    25 000009C2 6683C40C            <1>
    26                              <1>                                                 ;}
    27 000009C6 EB15                <1>         jmp     .10E                            ;else
    28                              <1> .10F:                                           ;{
    29                              <1>         ;---------------------------------------
    30                              <1>         ;スタックの調整
    31                              <1>         ;---------------------------------------
    32 000009C8 83C404              <1>         add     esp, 4                          ;pop es
    33 000009CB 83C404              <1>         add     esp, 4                          ;pop ds
    34 000009CE 61                  <1>         popa
    35 000009CF 5D                  <1>         pop     ebp
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;タスク終了処理
    39                              <1>         ;---------------------------------------
    40 000009D0 9C                  <1>         pushf                                   ;   //EFLAGS
    41 000009D1 0E                  <1>         push    cs                              ;   //CS
    42 000009D2 68[A00F0000]        <1>         push    int_stop                        ;   //スタック表示処理
    43                              <1> 
    44 000009D7 B8[E7090000]        <1>         mov     eax, .s0                        ;   //割り込み種別
    45 000009DC CF                  <1>         iret                                    ;}
    46                              <1> .10E:
    47                              <1>         ;---------------------------------------
    48                              <1>         ;レジスタの復帰
    49                              <1>         ;---------------------------------------
    50 000009DD 07                  <1>         pop     es
    51 000009DE 1F                  <1>         pop     ds
    52 000009DF 61                  <1>         popa
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;スタックフレームの破棄
    56                              <1>         ;---------------------------------------
    57 000009E0 89EC                <1>         mov     esp, ebp
    58 000009E2 5D                  <1>         pop     ebp
    59                              <1> 
    60                              <1>         ;---------------------------------------
    61                              <1>         ;エラーコードの破棄
    62                              <1>         ;---------------------------------------
    63 000009E3 83C404              <1>         add     esp, 4                          ;//エラーコードの破棄
    64                              <1> 
    65 000009E6 CF                  <1>         iret
    66                              <1>         ;---------------------------------------
    67                              <1>         ;データ
    68                              <1>         ;---------------------------------------
    69 000009E7 203C20504147452046- <1> .s0:    db  " < PAGE FAULT > ", 0
    69 000009F0 41554C54203E2000    <1>
   170                                  
   171                                  ;********************************************************************************************************
   172                                  ;モジュール
   173                                  ;********************************************************************************************************
   174                                  %include        "..\modules\protect\vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 読み込みプレーン(0~3)
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 000009F8 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 000009F9 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 000009FB 6650                <1>         push    ax
    14 000009FD 6652                <1>         push    dx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;読み込みプレーンの選択
    18                              <1>         ;---------------------------------------
    19 000009FF 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    20 00000A02 80E403              <1>         and     ah, 0x03                        ;AH &= 0x03; //余計なビットをマスク
    21 00000A05 B004                <1>         mov     al, 0x04                        ;AL = 読み込みマップ選択レジスタ
    22 00000A07 66BACE03            <1>         mov     dx, 0x03CE                      ;DX = グラフィックス制御ポート
    23 00000A0B 66EF                <1>         out     dx, ax                          ;//ポート出力
    24                              <1>         
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00000A0D 665A                <1>         pop     dx
    29 00000A0F 6658                <1>         pop     ax
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;スタックフレームの破棄
    33                              <1>         ;---------------------------------------
    34 00000A11 89EC                <1>         mov     esp, ebp
    35 00000A13 5D                  <1>         pop     ebp
    36                              <1> 
    37 00000A14 C3                  <1>         ret
    38                              <1> 
    39                              <1> vga_set_write_plane:
    40                              <1>         ;-----------------------------------
    41                              <1>         ;スタックフレームの構築
    42                              <1>         ;-----------------------------------
    43                              <1>                                             ;   + 8| 書き込みプレーン
    44                              <1>                                             ;   + 4| IP(戻り番号)
    45 00000A15 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    46 00000A16 89E5                <1>         mov    ebp, esp                     ;------|---------
    47                              <1> 
    48                              <1>         ;-----------------------------------
    49                              <1>         ;レジスタの保存
    50                              <1>         ;-----------------------------------
    51 00000A18 6650                <1>         push    ax
    52 00000A1A 6652                <1>         push    dx
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;読み込みプレーンの選択
    56                              <1>         ;---------------------------------------
    57 00000A1C 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    58 00000A1F 80E40F              <1>         and     ah, 0x0F                        ;AH &= 0x03; //余計なビットをマスク
    59 00000A22 B002                <1>         mov     al, 0x02                        ;AL = 読み込みマップ選択レジスタ
    60 00000A24 66BAC403            <1>         mov     dx, 0x03C4                      ;DX = グラフィックス制御ポート
    61 00000A28 66EF                <1>         out     dx, ax                          ;//ポート出力
    62                              <1>         
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 00000A2A 665A                <1>         pop     dx
    67 00000A2C 6658                <1>         pop     ax
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;スタックフレームの破棄
    71                              <1>         ;---------------------------------------
    72 00000A2E 89EC                <1>         mov     esp, ebp
    73 00000A30 5D                  <1>         pop     ebp
    74                              <1> 
    75 00000A31 C3                  <1>         ret
    76                              <1> 
    77                              <1> vram_font_copy:
    78                              <1>         ;-----------------------------------
    79                              <1>         ;スタックフレームの構築
    80                              <1>         ;-----------------------------------
    81                              <1>                                             ;EBP+20| 描画色
    82                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
    83                              <1>                                             ;EBP+12| VRAMアドレス
    84                              <1>                                             ;   + 8| FONTアドレス
    85                              <1>                                             ;   + 4| IP(戻り番号)
    86 00000A32 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    87 00000A33 89E5                <1>         mov    ebp, esp                     ;------|---------
    88                              <1> 
    89                              <1>         ;-----------------------------------
    90                              <1>         ;レジスタの保存
    91                              <1>         ;-----------------------------------
    92 00000A35 50                  <1>         push    eax
    93 00000A36 53                  <1>         push    ebx
    94 00000A37 51                  <1>         push    ecx
    95 00000A38 57                  <1>         push    edi
    96 00000A39 52                  <1>         push    edx
    97 00000A3A 56                  <1>         push    esi
    98                              <1> 
    99                              <1>         ;---------------------------------------
   100                              <1>         ;引数を変数に代入
   101                              <1>         ;---------------------------------------
   102 00000A3B 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = フォントアドレス;
   103 00000A3E 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   104 00000A41 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   105 00000A45 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   106                              <1> 
   107                              <1>         ;---------------------------------------
   108                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   109                              <1>         ;---------------------------------------
   110 00000A49 84C7                <1>         test    bh, al                          ;ZF = (背景色 & プレーン)
   111 00000A4B 0F94C6              <1>         setz    dh                              ;if(ZF == 1){ DH = 0x00; }else{ DH = 0x01;}
   112 00000A4E FECE                <1>         dec     dh                              ;DH--; // 0xFF or 0x00
   113                              <1> 
   114 00000A50 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   115 00000A52 0F94C2              <1>         setz    dl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   116 00000A55 FECA                <1>         dec     dl                              ;DL--; //0xFF or 0x00
   117                              <1> 
   118                              <1>         ;---------------------------------------
   119                              <1>         ;16ビットフォントのコピー
   120                              <1>         ;---------------------------------------
   121 00000A57 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
   122                              <1> 
   123 00000A58 B910000000          <1>         mov     ecx, 16                         ;ECX = 16; //16ドット
   124                              <1> .10L:                                           ;do
   125                              <1>                                                 ;{
   126                              <1>         ;---------------------------------------
   127                              <1>         ;フォントマスクの作成
   128                              <1>         ;---------------------------------------
   129 00000A5D AC                  <1>         lodsb                                   ;   AL = *ESI++; //フォント
   130 00000A5E 88C4                <1>         mov     ah, al                          ;   AH = AL;
   131 00000A60 F6D4                <1>         not     ah                              ;   AH ~= AH; //!フォント(ビット反転)
   132                              <1> 
   133                              <1>         ;---------------------------------------
   134                              <1>         ;前景色
   135                              <1>         ;---------------------------------------
   136 00000A62 20D0                <1>         and     al, dl                          ;   AL = 前景色 & フォント;
   137                              <1> 
   138                              <1>         ;---------------------------------------
   139                              <1>         ;背景色
   140                              <1>         ;---------------------------------------
   141 00000A64 F7C310000000        <1>         test    ebx, 0x0010                     ;if(透過モード)
   142 00000A6A 7404                <1>         jz      .11F                            ;{
   143 00000A6C 2227                <1>         and     ah, [edi]                       ;   AH = !フォント & [EDI] //現在値
   144 00000A6E EB02                <1>         jmp     .11E                            ;}
   145                              <1> .11F:                                           ;else
   146                              <1>                                                 ;{
   147 00000A70 20F4                <1>         and     ah, dh                          ;   AH = !フォント & 背景色
   148                              <1> .11E:                                           ;}
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;前景色と背景色を合成
   152                              <1>         ;---------------------------------------
   153 00000A72 08E0                <1>         or  al, ah                              ;   AL = 背景 | 前景;
   154                              <1> 
   155                              <1>         ;---------------------------------------
   156                              <1>         ;新しい値を出力（VRAMに代入)
   157                              <1>         ;---------------------------------------
   158 00000A74 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //プレーンに書き込む
   159                              <1> 
   160 00000A76 83C750              <1>         add     edi, 80                         ;   EDI += 80;
   161 00000A79 E2E2                <1>         loop    .10L                            ;}while(--ECX);
   162                              <1> .10E:
   163                              <1>         ;---------------------------------------
   164                              <1>         ;レジスタの復帰
   165                              <1>         ;---------------------------------------
   166 00000A7B 5E                  <1>         pop     esi
   167 00000A7C 5A                  <1>         pop     edx
   168 00000A7D 5F                  <1>         pop     edi
   169 00000A7E 59                  <1>         pop     ecx
   170 00000A7F 5B                  <1>         pop     ebx
   171 00000A80 58                  <1>         pop     eax
   172                              <1> 
   173                              <1>         ;---------------------------------------
   174                              <1>         ;スタックフレームの破棄
   175                              <1>         ;---------------------------------------
   176 00000A81 89EC                <1>         mov     esp, ebp
   177 00000A83 5D                  <1>         pop     ebp
   178                              <1> 
   179 00000A84 C3                  <1>         ret
   180                              <1> 
   181                              <1> vram_bit_copy:
   182                              <1>         ;-----------------------------------
   183                              <1>         ;スタックフレームの構築
   184                              <1>         ;-----------------------------------
   185                              <1>                                             ;EBP+20| 描画色
   186                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
   187                              <1>                                             ;EBP+12| VRAMアドレス
   188                              <1>                                             ;   + 8| 出力ビットパターン
   189                              <1>                                             ;   + 4| IP(戻り番号)
   190 00000A85 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
   191 00000A86 89E5                <1>         mov    ebp, esp                     ;------|---------
   192                              <1> 
   193                              <1>         ;-----------------------------------
   194                              <1>         ;レジスタの保存
   195                              <1>         ;-----------------------------------
   196 00000A88 50                  <1>         push    eax
   197 00000A89 53                  <1>         push    ebx
   198 00000A8A 57                  <1>         push    edi
   199                              <1> 
   200                              <1>         ;---------------------------------------
   201                              <1>         ;引数を変数に代入
   202                              <1>         ;---------------------------------------
   203 00000A8B 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   204 00000A8E 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   205 00000A92 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   206                              <1> 
   207                              <1>         ;---------------------------------------
   208                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   209                              <1>         ;---------------------------------------
   210 00000A96 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   211 00000A98 0F94C3              <1>         setz    bl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   212 00000A9B FECB                <1>         dec     bl                              ;DL--; //0xFF or 0x00
   213                              <1> 
   214                              <1>         ;---------------------------------------
   215                              <1>         ;背景のマスクを作成
   216                              <1>         ;---------------------------------------
   217 00000A9D 8A4508              <1>         mov     al, [ebp + 8]                   ;AL = 出力ビットパターン;
   218 00000AA0 88C4                <1>         mov     ah, al                          ;AH ~= AL; //!出力ビットパターン(ビット反転)
   219 00000AA2 F6D4                <1>         not     ah
   220                              <1> 
   221                              <1>         ;---------------------------------------
   222                              <1>         ;背景色
   223                              <1>         ;---------------------------------------
   224 00000AA4 2227                <1>         and     ah, [edi]                       ;AH = 現在値 & !出力ビットパターン
   225 00000AA6 20D8                <1>         and     al, bl                          ;AL = 表示色 & 出力ビットパターン
   226 00000AA8 08E0                <1>         or      al, ah                          ;AL |= AH;
   227 00000AAA 8807                <1>         mov     [edi], al                       ;[EDI] = BL; //プレーンに書き込む
   228                              <1> 
   229                              <1>         ;---------------------------------------
   230                              <1>         ;レジスタの復帰
   231                              <1>         ;---------------------------------------
   232 00000AAC 5F                  <1>         pop     edi
   233 00000AAD 5B                  <1>         pop     ebx
   234 00000AAE 58                  <1>         pop     eax
   235                              <1> 
   236                              <1>         ;---------------------------------------
   237                              <1>         ;スタックフレームの破棄
   238                              <1>         ;---------------------------------------
   239 00000AAF 89EC                <1>         mov     esp, ebp
   240 00000AB1 5D                  <1>         pop     ebp
   241                              <1> 
   242 00000AB2 C3                  <1>         ret
   175                                  %include        "..\modules\protect\draw_char.s"
     1                              <1> draw_char:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +20| 文字
     6                              <1>                                             ;   +16| 描画色
     7                              <1>                                             ;   +12| 行(0~29)
     8                              <1>                                             ;   + 8| 列(0~79)
     9                              <1>                                             ;   + 4| IP(戻り番号)
    10 00000AB3 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    11 00000AB4 89E5                <1>         mov    ebp, esp                     ;------|---------
    12                              <1> 
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000AB6 53                  <1>         push    ebx
    17 00000AB7 57                  <1>         push    edi
    18 00000AB8 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 00000AB9 0FB67514            <1>         movzx   esi, byte [ebp +20]             ;CL = 文字コード;
    24 00000ABD C1E604              <1>         shl     esi, 4                          ;CL *= 16; //1文字16バイト
    25 00000AC0 0335[50020000]      <1>         add     esi, [FONT_ADR]                 ;ESI = フォントアドレス;
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;コピー先アドレスを取得
    29                              <1>         ;adr = 0xA0000 + (640 / 8 * 16) * y + x
    30                              <1>         ;---------------------------------------
    31 00000AC6 8B7D0C              <1>         mov     edi, [ebp +12]                  ;Y(行)
    32 00000AC9 C1E708              <1>         shl     edi, 8                          ;EDI = Y * 256;
    33 00000ACC 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]  ;EDI = Y * 4 + Y;
    34 00000AD3 037D08              <1>         add     edi, [ebp + 8]                  ;X(列)
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;同期処理(リソース解法待ち(ビジーウェイト))
    38                              <1>         ;---------------------------------------
    39                              <1> %ifdef  USE_TEST_AND_SET
    40 00000AD6 68[8C0B0000]E83308- <1>         cdecl   test_and_set, IN_USE            ;//リソースの空き待ち
    40 00000ADE 00006683C404        <1>
    41                              <1> %endif
    42                              <1> 
    43                              <1>         ;---------------------------------------
    44                              <1>         ;1文字文のフォントを出力
    45                              <1>         ;---------------------------------------
    46 00000AE4 0FB75D10            <1>         movzx   ebx, word [ebp +16]             ; //表示色
    47                              <1> 
    48 00000AE8 6A03E809FFFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;//読み込みプレーン:輝度(I)
    48 00000AF1 C404                <1>
    49 00000AF3 6A08E81BFFFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;//書き込みプレーン:輝度(I)
    49 00000AFC C404                <1>
    50 00000AFE 536A085756E82AFFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x08, ebx
    50 00000B07 FF6683C410          <1>
    51                              <1>         
    52 00000B0C 6A02E8E5FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;//読み込みプレーン:赤(R)
    52 00000B15 C404                <1>
    53 00000B17 6A04E8F7FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;//書き込みプレーン:赤(R)
    53 00000B20 C404                <1>
    54 00000B22 536A045756E806FFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x04, ebx
    54 00000B2B FF6683C410          <1>
    55                              <1> 
    56 00000B30 6A01E8C1FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;//読み込みプレーン:緑(G)
    56 00000B39 C404                <1>
    57 00000B3B 6A02E8D3FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;//書き込みプレーン:緑(G)
    57 00000B44 C404                <1>
    58 00000B46 536A025756E8E2FEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x02, ebx
    58 00000B4F FF6683C410          <1>
    59                              <1> 
    60 00000B54 6A00E89DFEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;//読み込みプレーン:青(B)
    60 00000B5D C404                <1>
    61 00000B5F 6A01E8AFFEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;//書き込みプレーン:青(B)
    61 00000B68 C404                <1>
    62 00000B6A 536A015756E8BEFEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x01, ebx
    62 00000B73 FF6683C410          <1>
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;同期処理(リソース解法)
    66                              <1>         ;---------------------------------------
    67                              <1> %ifdef  USE_TEST_AND_SET
    68 00000B78 C705[8C0B0000]0000- <1>         mov     [IN_USE], dword 0               ;変数のクリア
    68 00000B80 0000                <1>
    69                              <1> %endif
    70                              <1> 
    71                              <1>         ;---------------------------------------
    72                              <1>         ;レジスタの復帰
    73                              <1>         ;---------------------------------------
    74 00000B82 5E                  <1>         pop     esi
    75 00000B83 5F                  <1>         pop     edi
    76 00000B84 5B                  <1>         pop     ebx
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 00000B85 89EC                <1>         mov     esp, ebp
    82 00000B87 5D                  <1>         pop     ebp
    83                              <1> 
    84 00000B88 C3                  <1>         ret
    85                              <1> 
    86                              <1>         ;---------------------------------------
    87                              <1>         ;データ
    88                              <1>         ;---------------------------------------
    89 00000B89 00<rept>            <1> ALIGN   4,      db      0
    90 00000B8C 00000000            <1> IN_USE:         dd      0
   176                                  %include        "..\modules\protect\draw_font.s"
     1                              <1> draw_font:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000B90 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000B91 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000B93 50                  <1>         push    eax
    15 00000B94 53                  <1>         push    ebx
    16 00000B95 51                  <1>         push    ecx
    17 00000B96 57                  <1>         push    edi
    18 00000B97 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 00000B98 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 00000B9B 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;コピー先アドレスを取得
    28                              <1>         ;---------------------------------------
    29 00000B9E B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 00000BA3 81F900010000        <1> .10L:   cmp     ecx, 256                        ;    ECX < 256;
    31 00000BA9 731F                <1>         jae     .10E                            ;
    32                              <1>                                                 ;    ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示する桁位置を計算
    36                              <1>         ;---------------------------------------
    37 00000BAB 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 00000BAD 83E00F              <1>         and     eax, 0x0F                       ;   EAX &= 0x0F;
    39 00000BB0 01F0                <1>         add     eax, esi                        ;   EAX += X;
    40                              <1>         ;---------------------------------------
    41                              <1>         ;表示する行位置を計算
    42                              <1>         ;---------------------------------------
    43 00000BB2 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    44 00000BB4 C1EB04              <1>         shr     ebx, 4                          ;   EBX /= 16;
    45 00000BB7 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    46                              <1>         
    47 00000BB9 516A075350E8F0FEFF- <1>         cdecl   draw_char, eax, ebx, 0x07, ecx  ;   draw_char();
    47 00000BC2 FF6683C410          <1>
    48                              <1> 
    49 00000BC7 41                  <1>         inc     ecx                             ;   //for(... ECX++)
    50 00000BC8 EBD9                <1>         jmp     .10L                            ;
    51                              <1> .10E:                                           ;}
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;レジスタの復帰
    55                              <1>         ;---------------------------------------
    56 00000BCA 5E                  <1>         pop     esi
    57 00000BCB 5F                  <1>         pop     edi
    58 00000BCC 59                  <1>         pop     ecx
    59 00000BCD 5B                  <1>         pop     ebx
    60 00000BCE 58                  <1>         pop     eax
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;スタックフレームの破棄
    64                              <1>         ;---------------------------------------
    65 00000BCF 89EC                <1>         mov     esp, ebp
    66 00000BD1 5D                  <1>         pop     ebp
    67                              <1> 
    68 00000BD2 C3                  <1>         ret
   177                                  %include        "..\modules\protect\draw_str.s"
     1                              <1> draw_str:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000BD3 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000BD4 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000BD6 50                  <1>         push    eax
    15 00000BD7 53                  <1>         push    ebx
    16 00000BD8 51                  <1>         push    ecx
    17 00000BD9 52                  <1>         push    edx
    18 00000BDA 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 00000BDB 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = 列;
    24 00000BDE 8B550C              <1>         mov     edx, [ebp +12]                  ;EDX = 行;
    25 00000BE1 0FB75D10            <1>         movzx   ebx, word [ebp + 16]            ;EBX = 表示色;
    26 00000BE5 8B7514              <1>         mov     esi, [ebp +20]                  ;ESI = 文字列へのアドレス;
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字列を表示
    30                              <1>         ;---------------------------------------
    31 00000BE8 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
    32                              <1> .10L:                                           ;do
    33                              <1>                                                 ;{
    34 00000BE9 AC                  <1>         lodsb                                   ;   AL = *ESI++;
    35 00000BEA 3C00                <1>         cmp     al, 0                           ;   if(0 == AL)
    36 00000BEC 741A                <1>         je  .10E                                ;       break;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;システムコールを利用して文字を出力する
    40                              <1>         ;---------------------------------------
    41                              <1> %ifdef  USE_SYSTEM_CALL
    42 00000BEE CD81                <1>         int     0x81                            ;       sys_call(1, X, Y, 色, 文字);
    43                              <1> %else
    44                              <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;       draw_char();
    45                              <1> %endif
    46                              <1> 
    47                              <1>         ;---------------------------------------
    48                              <1>         ;文字の表示位置を更新
    49                              <1>         ;---------------------------------------
    50 00000BF0 41                  <1>         inc     ecx                             ;   ECX++; //列を加算
    51 00000BF1 83F950              <1>         cmp     ecx, 80                         ;   if(80 <= ECX) //80文字以上?
    52 00000BF4 7C10                <1>         jl      .12E                            ;   {
    53 00000BF6 B900000000          <1>         mov     ecx, 0                          ;       ECX = 0; //列を初期化
    54 00000BFB 42                  <1>         inc     edx                             ;       EDX++; //行を加算
    55 00000BFC 83FA1E              <1>         cmp     edx, 30                         ;       if(30 <= EDX) //30行以上?
    56 00000BFF 7C05                <1>         jl      .12E                            ;       {
    57 00000C01 BA00000000          <1>         mov     edx, 0                          ;           EDX = 0;
    58                              <1>                                                 ;       }
    59                              <1> .12E:                                           ;   }
    60 00000C06 EBE1                <1>         jmp     .10L                            ;
    61                              <1> .10E:                                           ;}while(1);
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 00000C08 5E                  <1>         pop     esi
    67 00000C09 5A                  <1>         pop     edx
    68 00000C0A 59                  <1>         pop     ecx
    69 00000C0B 5B                  <1>         pop     ebx
    70 00000C0C 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 00000C0D 89EC                <1>         mov     esp, ebp
    76 00000C0F 5D                  <1>         pop     ebp
    77                              <1> 
    78 00000C10 C3                  <1>         ret
   178                                  %include        "..\modules\protect\draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000C11 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000C12 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000C14 50                  <1>         push    eax
    15 00000C15 53                  <1>         push    ebx
    16 00000C16 51                  <1>         push    ecx
    17 00000C17 52                  <1>         push    edx
    18 00000C18 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 00000C19 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 00000C1C 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;カラーバーを表示
    28                              <1>         ;---------------------------------------
    29 00000C1F B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 00000C24 83F910              <1> .10L:   cmp     ecx, 16                         ;    ECX < 16;
    31 00000C27 732E                <1>         jae     .10E
    32                              <1>                                                 ;ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示位置を計算(列)
    36                              <1>         ;---------------------------------------
    37 00000C29 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 00000C2B 83E001              <1>         and     eax, 0x01                       ;   EAX &= 0x01;
    39 00000C2E C1E003              <1>         shl     eax, 3                          ;   EAX *= 8; //8文字分乗算
    40 00000C31 01F0                <1>         add     eax, esi                        ;   EAX += X;
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;表示位置を計算(行)
    44                              <1>         ;---------------------------------------
    45 00000C33 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    46 00000C35 D1EB                <1>         shr     ebx, 1                          ;   EBX /= 2;
    47 00000C37 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    48                              <1> 
    49                              <1>         ;---------------------------------------
    50                              <1>         ;描画色を計算
    51                              <1>         ;---------------------------------------
    52 00000C39 89CA                <1>         mov     edx, ecx                        ;   EDX = ECX;
    53 00000C3B D1E2                <1>         shl     edx, 1                          ;   EDX *= 2;
    54 00000C3D 8B92[690C0000]      <1>         mov     edx, [.t0 + edx]                ;   EDX += Y;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;カラーバーを表示
    58                              <1>         ;---------------------------------------
    59 00000C43 68[600C0000]525350- <1>         cdecl   draw_str, eax, ebx, edx, .s0    ;   draw_str();
    59 00000C4B E883FFFFFF6683C410  <1>
    60                              <1> 
    61 00000C54 41                  <1>         inc     ecx                             ;   //for(...ECX++
    62 00000C55 EBCD                <1>         jmp     .10L                            ;
    63                              <1> .10E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;レジスタの復帰
    67                              <1>         ;---------------------------------------
    68 00000C57 5E                  <1>         pop     esi
    69 00000C58 5A                  <1>         pop     edx
    70 00000C59 59                  <1>         pop     ecx
    71 00000C5A 5B                  <1>         pop     ebx
    72 00000C5B 58                  <1>         pop     eax
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;スタックフレームの破棄
    76                              <1>         ;---------------------------------------
    77 00000C5C 89EC                <1>         mov     esp, ebp
    78 00000C5E 5D                  <1>         pop     ebp
    79                              <1> 
    80 00000C5F C3                  <1>         ret
    81                              <1> 
    82                              <1>         ;---------------------------------------
    83                              <1>         ;データ
    84                              <1>         ;---------------------------------------
    85 00000C60 202020202020202000  <1> .s0:    db  '        ', 0                       ;8文字分のスペース(表示色だけを変更)
    86                              <1> 
    87 00000C69 00000008            <1> .t0:    dw  0x0000, 0x0800                      ;カラーバーの背景色
    88 00000C6D 00010009            <1>         dw  0x0100, 0x0900
    89 00000C71 0002000A            <1>         dw  0x0200, 0x0A00
    90 00000C75 0003000B            <1>         dw  0x0300, 0x0B00
    91 00000C79 0004000C            <1>         dw  0x0400, 0x0C00
    92 00000C7D 0005000D            <1>         dw  0x0500, 0x0D00
    93 00000C81 0006000E            <1>         dw  0x0600, 0x0E00
    94 00000C85 0007000F            <1>         dw  0x0700, 0x0F00
   179                                  %include        "..\modules\protect\draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +16| 色
     6                              <1>                                             ;   +12| Y(行)
     7                              <1>                                             ;   + 8| X(列)
     8                              <1>                                             ;   + 4| IP(戻り番号)
     9 00000C89 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    10 00000C8A 89E5                <1>         mov    ebp, esp                     ;------|---------
    11                              <1> 
    12                              <1>         ;-----------------------------------
    13                              <1>         ;レジスタの保存
    14                              <1>         ;-----------------------------------
    15 00000C8C 50                  <1>         push    eax
    16 00000C8D 53                  <1>         push    ebx
    17 00000C8E 51                  <1>         push    ecx
    18 00000C8F 57                  <1>         push    edi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;描画位置のメモリアドレスを計算
    22                              <1>         ;---------------------------------------
    23                              <1>         ;---------------------------------------
    24                              <1>         ;Y座標を80倍する(640/8)
    25                              <1>         ;---------------------------------------
    26 00000C90 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y座標;
    27 00000C93 C1E704              <1>         shl     edi, 4                          ;EDI *= 16;
    28 00000C96 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000] ;EDI = 0xA_0000[EDI * 4 + EDI];
    29                              <1>         
    30                              <1>         ;---------------------------------------
    31                              <1>         ;X座標を1/8して加算
    32                              <1>         ;---------------------------------------
    33 00000C9D 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;EBX = X座標;
    34 00000CA0 89D9                <1>         mov     ecx, ebx                        ;ECX = X座標; //一時保存
    35 00000CA2 C1EB03              <1>         shr     ebx, 3                          ;EBX /= 8;
    36 00000CA5 01DF                <1>         add     edi, ebx                        ;EDI += EBX;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;X座標を8で割った余りからビット位置を計算(出力ビットパターン)
    40                              <1>         ;(0=0x80, 1=0x40,... 7=0x01)
    41                              <1>         ;---------------------------------------
    42 00000CA7 83E107              <1>         and     ecx, 0x07                       ;ECX = X & 0x07;
    43 00000CAA BB80000000          <1>         mov     ebx, 0x80                       ;EBX = 0x80;
    44 00000CAF D3EB                <1>         shr     ebx, cl                         ;EBX >>= ECX;
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;色を指定
    48                              <1>         ;---------------------------------------
    49 00000CB1 8B4D10              <1>         mov     ecx, [ebp +16]                  ;表示色
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;プレーンごとに出力
    53                              <1>         ;---------------------------------------
    54 00000CB4 6A03E83DFDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;輝度(I)プレーンを選択
    54 00000CBD C404                <1>
    55 00000CBF 6A08E84FFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;輝度(I)プレーンを選択
    55 00000CC8 C404                <1>
    56 00000CCA 516A085753E8B1FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    56 00000CD3 FF6683C410          <1>
    57                              <1> 
    58 00000CD8 6A02E819FDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;赤(R)プレーンを選択
    58 00000CE1 C404                <1>
    59 00000CE3 6A04E82BFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;赤(R)プレーンを選択
    59 00000CEC C404                <1>
    60 00000CEE 516A045753E88DFDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    60 00000CF7 FF6683C410          <1>
    61                              <1> 
    62 00000CFC 6A01E8F5FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;緑(G)プレーンを選択
    62 00000D05 C404                <1>
    63 00000D07 6A02E807FDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;緑(G)プレーンを選択
    63 00000D10 C404                <1>
    64 00000D12 516A025753E869FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    64 00000D1B FF6683C410          <1>
    65                              <1> 
    66 00000D20 6A00E8D1FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;青(B)プレーンを選択
    66 00000D29 C404                <1>
    67 00000D2B 6A01E8E3FCFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;青(B)プレーンを選択
    67 00000D34 C404                <1>
    68 00000D36 516A015753E845FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    68 00000D3F FF6683C410          <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;レジスタの復帰
    72                              <1>         ;---------------------------------------
    73 00000D44 5F                  <1>         pop     edi
    74 00000D45 59                  <1>         pop     ecx
    75 00000D46 5B                  <1>         pop     ebx
    76 00000D47 58                  <1>         pop     eax
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 00000D48 89EC                <1>         mov     esp, ebp
    82 00000D4A 5D                  <1>         pop     ebp
    83                              <1> 
    84 00000D4B C3                  <1>         ret
   180                                  %include        "..\modules\protect\draw_line.s"
     1                              <1> draw_line:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000D4C 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000D4D 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;変数を定義
    16                              <1>         ;-----------------------------------
    17 00000D4F 6A00                <1>         push    dword 0                     ;   - 4| sum = 0; //相対軸の積算値
    18 00000D51 6A00                <1>         push    dword 0                     ;   - 8| x0 = 0; //X座標
    19 00000D53 6A00                <1>         push    dword 0                     ;   -12| dx = 0; //X増分
    20 00000D55 6A00                <1>         push    dword 0                     ;   -16| inc_x = 0; //X座標増分(基準軸:1 or -1)
    21 00000D57 6A00                <1>         push    dword 0                     ;   -20| y0 = 0; //Y座標
    22 00000D59 6A00                <1>         push    dword 0                     ;   -24| dy = 0; //Y増分
    23 00000D5B 6A00                <1>         push    dword 0                     ;   -28| inc_y = 0; //Y座標増分(基準軸:1 or -1)
    24                              <1> 
    25                              <1>         ;-----------------------------------
    26                              <1>         ;レジスタの保存
    27                              <1>         ;-----------------------------------
    28 00000D5D 50                  <1>         push    eax
    29 00000D5E 53                  <1>         push    ebx
    30 00000D5F 51                  <1>         push    ecx
    31 00000D60 57                  <1>         push    edi
    32 00000D61 52                  <1>         push    edx
    33 00000D62 56                  <1>         push    esi
    34                              <1> 
    35                              <1>         ;---------------------------------------
    36                              <1>         ;幅を計算(X軸)
    37                              <1>         ;---------------------------------------
    38 00000D63 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    39 00000D66 8B5D10              <1>         mov     ebx, [ebp +16]                  ;EBX = X1;
    40 00000D69 29C3                <1>         sub     ebx, eax                        ;EBX = X1 - X0; //幅
    41 00000D6B 7D09                <1>         jge     .10F                            ;if(幅 < 0)
    42                              <1>                                                 ;{
    43 00000D6D F7DB                <1>         neg     ebx                             ;   幅 *= -1;
    44 00000D6F BEFFFFFFFF          <1>         mov     esi, -1                         ;   //X座標の増分
    45 00000D74 EB05                <1>         jmp     .10E                            ;}
    46                              <1> .10F:                                           ;else
    47                              <1>                                                 ;{
    48 00000D76 BE01000000          <1>         mov     esi, 1                          ;   //X座標の増分
    49                              <1> .10E:                                           ;}
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;高さを計算(Y軸)
    53                              <1>         ;---------------------------------------
    54 00000D7B 8B4D0C              <1>         mov     ecx, [ebp +12]                  ;ECX = Y0;
    55 00000D7E 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    56 00000D81 29CA                <1>         sub     edx, ecx                        ;EDX = Y1 - Y0; //高さ
    57 00000D83 7D09                <1>         jge     .20F                            ;if(高さ < 0)
    58                              <1>                                                 ;{
    59 00000D85 F7DA                <1>         neg     edx                             ;   高さ *= -1;
    60 00000D87 BFFFFFFFFF          <1>         mov     edi, -1                         ;   //Y座標の増分
    61 00000D8C EB05                <1>         jmp     .20E                            ;}
    62                              <1> .20F:                                           ;else
    63                              <1>                                                 ;{
    64 00000D8E BF01000000          <1>         mov     edi, 1                          ;   //Y座標の増分
    65                              <1> .20E:                                           ;}
    66                              <1>         
    67                              <1>         ;---------------------------------------
    68                              <1>         ;X軸
    69                              <1>         ;---------------------------------------
    70 00000D93 8945F8              <1>         mov     [ebp - 8], eax                  ;//X軸:開始座標
    71 00000D96 895DF4              <1>         mov     [ebp -12], ebx                  ;//X軸:描画幅
    72 00000D99 8975F0              <1>         mov     [ebp -16], esi                  ;//X軸:増分(基準軸:1 or -1)
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;Y軸
    76                              <1>         ;---------------------------------------
    77 00000D9C 894DEC              <1>         mov     [ebp -20], ecx                  ;//Y軸:開始座標
    78 00000D9F 8955E8              <1>         mov     [ebp -24], edx                  ;//Y軸:描画幅
    79 00000DA2 897DE4              <1>         mov     [ebp -28], edi                  ;//Y軸:増分(基準軸:1 or -1)
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;基準軸を決める
    83                              <1>         ;---------------------------------------
    84 00000DA5 39D3                <1>         cmp     ebx, edx                        ;if(幅 <= 高さ)
    85 00000DA7 7F08                <1>         jg      .22F                            ;{
    86                              <1>         
    87 00000DA9 8D75EC              <1>         lea     esi, [ebp -20]                  ;   //X軸が基準軸
    88 00000DAC 8D7DF8              <1>         lea     edi, [ebp - 8]                  ;   //Y軸が相対軸
    89                              <1> 
    90 00000DAF EB06                <1>         jmp     .22E                            ;}
    91                              <1> .22F:                                           ;else
    92                              <1>                                                 ;{
    93 00000DB1 8D75F8              <1>         lea     esi, [ebp - 8]                  ;   //Y軸が基準軸
    94 00000DB4 8D7DEC              <1>         lea     edi, [ebp -20]                  ;   //X軸が相対軸
    95                              <1> .22E:                                           ;}
    96                              <1> 
    97                              <1>         ;---------------------------------------
    98                              <1>         ;繰り返し回数(基準軸のドット数)(基準軸の長さが0な場合,繰り返し回数を1に設定し,1ピクセルの点を描画)
    99                              <1>         ;---------------------------------------
   100 00000DB7 8B4EFC              <1>         mov     ecx, [esi - 4]                  ;ECX = 基準軸描画幅
   101 00000DBA 83F900              <1>         cmp     ecx, 0                          ;if(0 == ECX)
   102 00000DBD 7505                <1>         jnz     .30E                            ;{
   103 00000DBF B901000000          <1>         mov     ecx, 1                          ;   ECX = 1;
   104                              <1> .30E:                                           ;}
   105                              <1> 
   106                              <1>         ;---------------------------------------
   107                              <1>         ;線を描画
   108                              <1>         ;---------------------------------------
   109                              <1> .50L:                                           ;do
   110                              <1>                                                 ;{
   111                              <1>         
   112                              <1>         ;---------------------------------------
   113                              <1>         ;同期処理
   114                              <1>         ;---------------------------------------
   115                              <1> %ifdef  USE_SYSTEM_CALL
   116 00000DC4 89C8                <1>         mov     eax, ecx                        ;       //繰り返し回数を保存
   117                              <1> 
   118 00000DC6 8B5D18              <1>         mov     ebx, [ebp +24]                  ;       EBX = 表示色;
   119 00000DC9 8B4DF8              <1>         mov     ecx, [ebp - 8]                  ;       ECX = X座標;
   120 00000DCC 8B55EC              <1>         mov     edx, [ebp -20]                  ;       ECX = Y座標;
   121 00000DCF CD82                <1>         int     0x82                            ;       sys_call(1, X, Y, 色, 文字); //BX(C), CX(X), DX(Y)
   122                              <1> 
   123 00000DD1 89C1                <1>         mov     ecx, eax
   124                              <1> %else
   127                              <1>         cdecl   draw_pixel, dword [ebp - 8],                             dword [ebp -20],                             dword [ebp +24]     ;   //点の描画
   128                              <1> %endif
   129                              <1> 
   130                              <1>         ;---------------------------------------
   131                              <1>         ;基準軸を更新
   132                              <1>         ;---------------------------------------
   133 00000DD3 8B46F8              <1>         mov     eax, [esi - 8]                  ;   EAX = 基準軸増加(1 or -1);
   134 00000DD6 0106                <1>         add     [esi - 0], eax                  ;
   135                              <1> 
   136                              <1>         ;---------------------------------------
   137                              <1>         ;相対軸を更新
   138                              <1>         ;---------------------------------------
   139 00000DD8 8B45FC              <1>         mov     eax, [ebp - 4]                  ;   EAX = sum;  //相対軸の積算値
   140 00000DDB 0347FC              <1>         add     eax, [edi - 4]                  ;   EAX += dy;  //増加(相対軸の描画幅)
   141                              <1> 
   142 00000DDE 8B5EFC              <1>         mov     ebx, [esi - 4]                  ;   EBX = dx;   //増分(基準軸の描画幅)
   143                              <1> 
   144 00000DE1 39D8                <1>         cmp     eax, ebx                        ;   if(積算値 <= 相対軸の増分)
   145 00000DE3 7C07                <1>         jl      .52E                            ;   {
   146 00000DE5 29D8                <1>         sub     eax, ebx                        ;       EAX -= EBX; //積算値から相対軸の増分を減算
   147                              <1>                                                 ;       //相対軸の座標を更新(1ドット分)
   148 00000DE7 8B5FF8              <1>         mov     ebx, [edi - 8]                  ;       EBX = 相対軸増分;
   149 00000DEA 011F                <1>         add     [edi - 0], ebx                  ;       相対軸座標 = EBX;
   150                              <1> .52E:                                           ;   }
   151                              <1> 
   152 00000DEC 8945FC              <1>         mov     [ebp - 4], eax                  ;//積算値を更新
   153                              <1> 
   154 00000DEF E2D3                <1>         loop    .50L
   155                              <1> .50E:                                           ;} while(ループ回数--);
   156                              <1> 
   157                              <1>         ;---------------------------------------
   158                              <1>         ;レジスタの復帰
   159                              <1>         ;---------------------------------------
   160 00000DF1 5E                  <1>         pop     esi
   161 00000DF2 5A                  <1>         pop     edx
   162 00000DF3 5F                  <1>         pop     edi
   163 00000DF4 59                  <1>         pop     ecx
   164 00000DF5 5B                  <1>         pop     ebx
   165 00000DF6 58                  <1>         pop     eax
   166                              <1> 
   167                              <1>         ;---------------------------------------
   168                              <1>         ;スタックフレームの破棄
   169                              <1>         ;---------------------------------------
   170 00000DF7 89EC                <1>         mov     esp, ebp
   171 00000DF9 5D                  <1>         pop     ebp
   172                              <1> 
   173 00000DFA C3                  <1>         ret
   181                                  %include        "..\modules\protect\draw_rect.s"
     1                              <1> draw_rect:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000DFB 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000DFC 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000DFE 50                  <1>         push    eax
    17 00000DFF 53                  <1>         push    ebx
    18 00000E00 51                  <1>         push    ecx
    19 00000E01 52                  <1>         push    edx
    20 00000E02 56                  <1>         push    esi
    21                              <1> 
    22                              <1>         ;---------------------------------------
    23                              <1>         ;変数に引数を代入
    24                              <1>         ;---------------------------------------
    25 00000E03 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    26 00000E06 8B5D0C              <1>         mov     ebx, [ebp +12]                  ;EBX = Y0;
    27 00000E09 8B4D10              <1>         mov     ecx, [ebp +16]                  ;ECX = X1;
    28 00000E0C 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    29 00000E0F 8B7518              <1>         mov     esi, [ebp +24]                  ;ESI = 色;
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;座標軸の大小を確定
    33                              <1>         ;---------------------------------------
    34 00000E12 39C8                <1>         cmp     eax, ecx                        ;if(X1 < X0)
    35 00000E14 7C01                <1>         jl      .10E                            ;{
    36 00000E16 91                  <1>         xchg    eax, ecx                        ;   //X0とX1を入れ替える;
    37                              <1> .10E:                                           ;}
    38                              <1> 
    39 00000E17 39D3                <1>         cmp     ebx, edx                        ;if(Y1 < Y0)
    40 00000E19 7C02                <1>         jl      .20E                            ;{
    41 00000E1B 87DA                <1>         xchg    ebx, edx                        ;   //Y0とY1を入れ替える;
    42                              <1> .20E:                                           ;}
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;矩形を描画
    46                              <1>         ;---------------------------------------
    47 00000E1D 5653515350E825FFFF- <1>         cdecl   draw_line, eax, ebx, ecx, ebx, esi  ;上線
    47 00000E26 FF6683C414          <1>
    48 00000E2B 5652505350E817FFFF- <1>         cdecl   draw_line, eax, ebx, eax, edx, esi  ;左線
    48 00000E34 FF6683C414          <1>
    49                              <1> 
    50 00000E39 4A                  <1>         dec     edx                                 ;EDX--; //下線は1ドット上げる
    51 00000E3A 5652515250E808FFFF- <1>         cdecl   draw_line, eax, edx, ecx, edx, esi  ;下線
    51 00000E43 FF6683C414          <1>
    52 00000E48 42                  <1>         inc     edx
    53                              <1> 
    54 00000E49 49                  <1>         dec     ecx                                 ;ECX--; //右線は1ドット左に移動
    55 00000E4A 5652515351E8F8FEFF- <1>         cdecl   draw_line, ecx, ebx, ecx, edx, esi  ;右線
    55 00000E53 FF6683C414          <1>
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの復帰
    59                              <1>         ;---------------------------------------
    60 00000E58 5E                  <1>         pop     esi
    61 00000E59 5A                  <1>         pop     edx
    62 00000E5A 59                  <1>         pop     ecx
    63 00000E5B 5B                  <1>         pop     ebx
    64 00000E5C 58                  <1>         pop     eax
    65                              <1> 
    66                              <1>         ;---------------------------------------
    67                              <1>         ;スタックフレームの破棄
    68                              <1>         ;---------------------------------------
    69 00000E5D 89EC                <1>         mov     esp, ebp
    70 00000E5F 5D                  <1>         pop     ebp
    71                              <1> 
    72 00000E60 C3                  <1>         ret
   182                                  %include        "..\modules\protect\itoa.s"
     1                              <1> itoa:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000E61 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000E62 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000E64 50                  <1>         push    eax
    18 00000E65 53                  <1>         push    ebx
    19 00000E66 51                  <1>         push    ecx
    20 00000E67 52                  <1>         push    edx
    21 00000E68 56                  <1>         push    esi
    22 00000E69 57                  <1>         push    edi
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;引数の取得
    26                              <1>         ;---------------------------------------
    27 00000E6A 8B4508              <1>         mov     eax, [ebp + 8]                  ;eax(val) =  数値;
    28 00000E6D 8B750C              <1>         mov     esi, [ebp + 12]                 ;esi(dst) = バッファアドレス;
    29 00000E70 8B4D10              <1>         mov     ecx, [ebp + 16]                 ;ecx(size) = バッファサイズ;
    30                              <1> 
    31 00000E73 89F7                <1>         mov     edi, esi                        ;edi = esi(dst); //バッファの最後尾
    32 00000E75 01CF                <1>         add     edi, ecx                        ;edi(dst) = edi + ecx - 1;
    33 00000E77 4F                  <1>         dec     edi
    34                              <1> 
    35 00000E78 8B5D18              <1>         mov     ebx, [ebp + 24]            ;flags = オプション;
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;符号付き判定
    39                              <1>         ;---------------------------------------
    40 00000E7B F7C301000000        <1>         test    ebx, 0b0001                      ;if(flags & 0x01) //符号付き
    41 00000E81 7408                <1> .10Q:   je      .10E                            ;{
    42 00000E83 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    43 00000E86 7D03                <1> .12Q:   jge     .12E                            ;   {
    44 00000E88 83CB02              <1>         or      ebx, 0b0010                     ;       flags |= 2; //符号表示
    45                              <1> .12E:                                           ;   }
    46                              <1> .10E:                                           ;}
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;符号付き判定
    50                              <1>         ;---------------------------------------
    51 00000E8B F7C302000000        <1>         test    ebx, 0b0010                     ;if(flags & 0x02) //符号出力判定
    52 00000E91 7410                <1> .20Q:   je      .20E                            ;{
    53 00000E93 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    54 00000E96 7D07                <1> .22Q:   jge     .22F                            ;   {
    55 00000E98 F7D8                <1>         neg     eax                             ;       val *= -1; //符号反転
    56 00000E9A C6062D              <1>         mov     [esi], byte '-'                 ;       *dst = '-'; //符号表示
    57 00000E9D EB03                <1>         jmp     .22E                            ;   }
    58                              <1> .22F:                                           ;   else
    59                              <1>                                                 ;   {
    60 00000E9F C6062B              <1>         mov     [esi], byte '+'                 ;       *dst = '+'; //符号表示
    61                              <1> .22E:                                           ;   }
    62 00000EA2 49                  <1>         dec     ecx                             ;   size--;     //残りバッファサイズの減算
    63                              <1> .20E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;ASCII変換
    67                              <1>         ;---------------------------------------
    68 00000EA3 8B5D14              <1>         mov     ebx, [ebp + 20]                 ;BX = 基数;
    69                              <1> .30L:                                           ;do
    70                              <1>                                                 ;{
    71 00000EA6 BA00000000          <1>         mov     edx, 0                          ;
    72 00000EAB F7F3                <1>         div     ebx                             ;   DX = DX:AX % 基数;
    73                              <1>                                                 ;   AX = DX:AX / 基数;
    74                              <1>                                                 ;
    75 00000EAD 89D6                <1>         mov     esi, edx                        ;   //テーブル参照
    76 00000EAF 8A96[DA0E0000]      <1>         mov     dl, byte [.ascii + esi]         ;   DL = ASCII[DX]
    77                              <1>                                                 ;
    78 00000EB5 8817                <1>         mov     [edi], dl                       ;   *dst = DL;
    79 00000EB7 4F                  <1>         dec     edi                             ;   dst--;
    80                              <1>                                                 ;
    81 00000EB8 83F800              <1>         cmp     eax, 0                          ;
    82 00000EBB E0E9                <1>         loopnz  .30L                            ;}while(AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;---------------------------------------
    86                              <1>         ;空欄を埋める
    87                              <1>         ;---------------------------------------
    88 00000EBD 83F900              <1>         cmp     ecx, 0                          ;if(size)
    89 00000EC0 740E                <1> .40Q:   je      .40E                            ;{
    90 00000EC2 B020                <1>         mov     al, ' '                         ;       AL = ' '; // ' 'で埋める(デフォルト値)
    91 00000EC4 66837D1804          <1>         cmp     [ebp + 24], word 0b0100         ;       if(flags & 0x04)
    92 00000EC9 7502                <1> .42Q:   jne     .42E                            ;           {
    93 00000ECB B030                <1>         mov     al, '0'                         ;               AL = '0'; // '0'で埋める
    94                              <1> .42E:                                           ;           }
    95 00000ECD FD                  <1>         std                                     ;       // DF = 1(-方向)
    96 00000ECE F3AA                <1>         rep     stosb                           ;       while(--CX) *DI -- = AL;
    97                              <1> .40E:                                           ;}
    98                              <1>         
    99                              <1>         ;---------------------------------------
   100                              <1>         ;レジスタの復帰
   101                              <1>         ;---------------------------------------
   102 00000ED0 5F                  <1>         pop     edi
   103 00000ED1 5E                  <1>         pop     esi
   104 00000ED2 5A                  <1>         pop     edx
   105 00000ED3 59                  <1>         pop     ecx
   106 00000ED4 5B                  <1>         pop     ebx
   107 00000ED5 58                  <1>         pop     eax
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;スタックフレームの破棄
   111                              <1>         ;---------------------------------------
   112 00000ED6 89EC                <1>         mov     esp, ebp
   113 00000ED8 5D                  <1>         pop     ebp
   114                              <1> 
   115 00000ED9 C3                  <1>         ret
   116                              <1> 
   117 00000EDA 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   117 00000EE3 39414243444546      <1>
   183                                  %include        "..\modules\protect\rtc.s"
     1                              <1> rtc_get_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 保存先アドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000EEA 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000EEB 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000EED 53                  <1>         push    ebx
    14                              <1> 
    15                              <1>         ;---------------------------------------
    16                              <1>         ;RTCから必要な情報を取得
    17                              <1>         ;---------------------------------------
    18 00000EEE B00A                <1>         mov     al, 0x0A                        ;//レジスタA
    19 00000EF0 E670                <1>         out     0x70, al                        ;outp(0x70, AL);
    20 00000EF2 E471                <1>         in      al, 0x71                        ;AL = レジスタA
    21 00000EF4 A880                <1>         test    al, 0x80                        ;if(UIP) //更新中
    22 00000EF6 7407                <1>         je      .10F                            ;{
    23 00000EF8 B801000000          <1>         mov     eax, 1                          ;   return 0; //データ更新中
    24 00000EFD EB27                <1>         jmp     .10E                            ;}
    25                              <1> .10F:                                           ;else
    26                              <1>                                                 ;{
    27 00000EFF B004                <1>         mov     al, 0x04                        ;   AL = 0x04;
    28 00000F01 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    29 00000F03 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //時データ
    30                              <1> 
    31 00000F05 C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    32                              <1> 
    33 00000F08 B002                <1>         mov     al, 0x02                        ;   AL = 0x02;
    34 00000F0A E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    35 00000F0C E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //分データ
    36                              <1> 
    37 00000F0E C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    38                              <1> 
    39                              <1>                                                 ;   RAM[0x00]:秒
    40 00000F11 B000                <1>         mov     al, 0x00                        ;   AL = 0x00;
    41 00000F13 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    42 00000F15 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //秒データ
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;有効なデータのみをアドレス先へ保存
    46                              <1>         ;---------------------------------------
    47 00000F17 25FFFFFF00          <1>         and     eax, 0x00_FF_FF_FF              ;//下位3バイトのみ有効
    48                              <1> 
    49 00000F1C 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;dst = 保存先;
    50 00000F1F 8903                <1>         mov     [ebx], eax                      ;[dst] = 時刻;
    51                              <1>         
    52 00000F21 B801000000          <1>         mov     eax, 1                          ;   return 1; //正常終了
    53                              <1> .10E:                                           ;}
    54                              <1> 
    55                              <1>         ;---------------------------------------
    56                              <1>         ;レジスタの復帰
    57                              <1>         ;---------------------------------------
    58 00000F26 5B                  <1>         pop     ebx
    59                              <1> 
    60                              <1>         ;---------------------------------------
    61                              <1>         ;スタックフレームの破棄
    62                              <1>         ;---------------------------------------
    63 00000F27 89EC                <1>         mov     esp, ebp
    64 00000F29 5D                  <1>         pop     ebp
    65                              <1> 
    66 00000F2A C3                  <1>         ret
   184                                  %include        "..\modules\protect\draw_time.s"
     1                              <1> draw_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000F2B 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000F2C 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000F2E 50                  <1>         push    eax
    18 00000F2F 53                  <1>         push    ebx
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;数字を文字に変換
    22                              <1>         ;---------------------------------------
    23 00000F30 8B4514              <1>         mov     eax, [ebp +20]                  ;EAX = 時刻データ;
    24                              <1> 
    25 00000F33 0FB6D8              <1>         movzx   ebx, al                         ;EBX = 秒;
    26 00000F36 6A046A106A0268-     <1>         cdecl   itoa, ebx, .sec, 2, 16, 0b0100  ;//文字を変換
    26 00000F3D [9D0F0000]53E81AFF- <1>
    26 00000F45 FFFF6683C414        <1>
    27                              <1> 
    28 00000F4B 88E3                <1>         mov     bl, ah                          ;EBX = 分;
    29 00000F4D 6A046A106A0268-     <1>         cdecl   itoa, ebx, .min, 2, 16, 0b0100  ;//文字に変換
    29 00000F54 [9A0F0000]53E803FF- <1>
    29 00000F5C FFFF6683C414        <1>
    30                              <1> 
    31 00000F62 C1E810              <1>         shr     eax, 16                         ;EBX = 時;
    32 00000F65 6A046A106A0268-     <1>         cdecl   itoa, eax, .hour, 2, 16, 0b0100 ;//文字に変換
    32 00000F6C [970F0000]50E8EBFE- <1>
    32 00000F74 FFFF6683C414        <1>
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;文字列を表示
    36                              <1>         ;---------------------------------------
    37 00000F7A 68[970F0000]FF7510- <1>         cdecl   draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    37 00000F82 FF750CFF7508E846FC- <1>
    37 00000F8B FFFF6683C410        <1>
    38                              <1>         
    39                              <1>         ;---------------------------------------
    40                              <1>         ;レジスタの復帰
    41                              <1>         ;---------------------------------------
    42 00000F91 5B                  <1>         pop     ebx
    43 00000F92 58                  <1>         pop     eax
    44                              <1> 
    45                              <1>         ;---------------------------------------
    46                              <1>         ;スタックフレームの破棄
    47                              <1>         ;---------------------------------------
    48 00000F93 89EC                <1>         mov     esp, ebp
    49 00000F95 5D                  <1>         pop     ebp
    50                              <1> 
    51 00000F96 C3                  <1>         ret
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;データ
    55                              <1>         ;---------------------------------------
    56 00000F97 5A5A3A              <1>         .hour:  db  "ZZ:"
    57 00000F9A 5A5A3A              <1>         .min:   db  "ZZ:"
    58 00000F9D 5A5A00              <1>         .sec:   db  "ZZ", 0
   185                                  %include        "..\modules\protect\interrupt.s"
     1                              <1> int_stop:
     2 00000FA0 FB                  <1>         sti                                     ;//割り込み許可
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;EAXで示される文字列を表示
     6                              <1>         ;---------------------------------------
     7 00000FA1 50680F0600006A0F6A- <1>         cdecl   draw_str, 25, 15, 0x060F, eax   ;draw_str(EAX);
     7 00000FAA 19E823FCFFFF6683C4- <1>
     7 00000FB3 10                  <1>
     8                              <1>         
     9                              <1>         ;---------------------------------------
    10                              <1>         ;スタックのデータを文字列に変換
    11                              <1>         ;---------------------------------------
    12 00000FB4 8B0424              <1>         mov     eax, [esp + 0]                  ;EAX = ESP[ 0];
    13 00000FB7 6A046A106A0868-     <1>         cdecl   itoa, eax, .p1, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    13 00000FBE [7C100000]50E899FE- <1>
    13 00000FC6 FFFF6683C414        <1>
    14                              <1> 
    15 00000FCC 8B442404            <1>         mov     eax, [esp + 4]                  ;EAX = ESP[ 4];
    16 00000FD0 6A046A106A0868-     <1>         cdecl   itoa, eax, .p2, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    16 00000FD7 [8D100000]50E880FE- <1>
    16 00000FDF FFFF6683C414        <1>
    17                              <1> 
    18 00000FE5 8B442408            <1>         mov     eax, [esp + 8]                  ;EAX = ESP[ 8];
    19 00000FE9 6A046A106A0868-     <1>         cdecl   itoa, eax, .p3, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    19 00000FF0 [9E100000]50E867FE- <1>
    19 00000FF8 FFFF6683C414        <1>
    20                              <1> 
    21 00000FFE 8B44240C            <1>         mov     eax, [esp +12]                  ;EAX = ESP[12];
    22 00001002 6A046A106A0868-     <1>         cdecl   itoa, eax, .p4, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    22 00001009 [AF100000]50E84EFE- <1>
    22 00001011 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;文字列の表示
    26                              <1>         ;---------------------------------------
    27 00001017 68[75100000]68040F- <1>         cdecl   draw_str, 25, 16, 0x0F04, .s1,  ;draw_str("ESP+ 0:-------- ");
    27 0000101F 00006A106A19E8A9FB- <1>
    27 00001028 FFFF6683C410        <1>
    28 0000102E 68[86100000]68040F- <1>         cdecl   draw_str, 25, 17, 0x0F04, .s2   ;draw_str("   + 4:-------- ");
    28 00001036 00006A116A19E892FB- <1>
    28 0000103F FFFF6683C410        <1>
    29 00001045 68[97100000]68040F- <1>         cdecl   draw_str, 25, 18, 0x0F04, .s3,  ;draw_str("   + 8:-------- ");
    29 0000104D 00006A126A19E87BFB- <1>
    29 00001056 FFFF6683C410        <1>
    30 0000105C 68[A8100000]68040F- <1>         cdecl   draw_str, 25, 19, 0x0F04, .s4   ;draw_str("   +12:-------- ");        
    30 00001064 00006A136A19E864FB- <1>
    30 0000106D FFFF6683C410        <1>
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;無限ループ
    34                              <1>         ;---------------------------------------
    35 00001073 EBFE                <1>         jmp     $                               ;while(1); //無限ループ
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;データ
    39                              <1>         ;---------------------------------------
    40 00001075 4553502B20303A      <1> .s1:    db  "ESP+ 0:"
    41 0000107C 2D2D2D2D2D2D2D2D20- <1> .p1:    db  "-------- ", 0
    41 00001085 00                  <1>
    42 00001086 2020202B20343A      <1> .s2:    db  "   + 4:"
    43 0000108D 2D2D2D2D2D2D2D2D20- <1> .p2:    db  "-------- ", 0
    43 00001096 00                  <1>
    44 00001097 2020202B20383A      <1> .s3:    db  "   + 8:"
    45 0000109E 2D2D2D2D2D2D2D2D20- <1> .p3:    db  "-------- ", 0
    45 000010A7 00                  <1>
    46 000010A8 2020202B31323A      <1> .s4:    db  "   +12:"
    47 000010AF 2D2D2D2D2D2D2D2D20- <1> .p4:    db  "-------- ", 0
    47 000010B8 00                  <1>
    48                              <1> 
    49                              <1> int_default:
    50                              <1>         ;---------------------------------------
    51                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
    52                              <1>         ;---------------------------------------
    53 000010B9 9C                  <1>         pushf                                   ;//EFLAGS(IF=0)
    54 000010BA 0E                  <1>         push    cs                              ;//cs
    55 000010BB 68[A00F0000]        <1>         push    int_stop                        ;//スタック表示処理
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み種別を登録して復帰
    59                              <1>         ;---------------------------------------
    60 000010C0 B8[C6100000]        <1>         mov     eax, .s0                        ;//割り込み種別
    61 000010C5 CF                  <1>         iret                                    ;スタックされている場所に復帰
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;データ
    65                              <1>         ;---------------------------------------
    66 000010C6 203C2020202053544F- <1> .s0:    db  " <    STOP    > ", 0
    66 000010CF 50202020203E2000    <1>
    67                              <1> 
    68                              <1> ;********************************************************************************************************
    69                              <1> ;割り込みベクタの初期化
    70                              <1> ;********************************************************************************************************
    71 000010D7 90                  <1> ALIGN   4
    72 000010D8 FF07                <1> IDTR:   dw      8 * 256 - 1                     ;idt_limit
    73 000010DA 00001000            <1>         dd      VECT_BASE                       ;idt_location
    74                              <1> 
    75                              <1> ;********************************************************************************************************
    76                              <1> ;割り込みテーブルを初期化
    77                              <1> ;********************************************************************************************************
    78                              <1> init_int:
    79                              <1>         ;---------------------------------------
    80                              <1>         ;レジスタの保存
    81                              <1>         ;---------------------------------------
    82 000010DE 50                  <1>         push    eax
    83 000010DF 53                  <1>         push    ebx
    84 000010E0 51                  <1>         push    ecx
    85 000010E1 57                  <1>         push    edi
    86                              <1> 
    87                              <1>         ;---------------------------------------
    88                              <1>         ;全ての割り込みにデフォルト処理を設定
    89                              <1>         ;---------------------------------------
    90 000010E2 8D05[B9100000]      <1>         lea     eax, [int_default]              ;EAX = 割り込み処理アドレス;
    91 000010E8 BB008E0800          <1>         mov     ebx, 0x0008_8E00                ;EBX = セグメントセレクタ;
    92 000010ED 6693                <1>         xchg    ax, bx                          ;//下位ワード(2バイト)を交換(割り込みゲートディスクリプタの形式に合わせる)
    93                              <1> 
    94 000010EF B900010000          <1>         mov     ecx, 256                        ;ECX = 割り込みベクタ数
    95 000010F4 BF00001000          <1>         mov     edi, VECT_BASE                  ;EDI = 割り込みベクタテーブル
    96                              <1> 
    97                              <1> .10L:                                           ;do
    98                              <1>                                                 ;{
    99 000010F9 891F                <1>         mov     [edi + 0], ebx                  ;       [EDI + 0] = 割り込みディスクリプタ(下位)
   100 000010FB 894704              <1>         mov     [edi + 4], eax                  ;       [EDI + 4] = 割り込みディスクリプタ(上位)
   101 000010FE 83C708              <1>         add     edi, 8                          ;       EDI += 8;
   102 00001101 E2F6                <1>         loop    .10L                            ;}while(ECX--);
   103                              <1> 
   104                              <1>         ;---------------------------------------
   105                              <1>         ;割り込みディスクリプタの設定
   106                              <1>         ;---------------------------------------
   107 00001103 0F011D[D8100000]    <1>         lidt    [IDTR]                          ;//割り込みディスクリプタテーブルをロード
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;データ
   111                              <1>         ;---------------------------------------
   112 0000110A 5F                  <1>         pop     edi
   113 0000110B 59                  <1>         pop     ecx
   114 0000110C 5B                  <1>         pop     ebx
   115 0000110D 58                  <1>         pop     eax
   116                              <1> 
   117 0000110E C3                  <1>         ret
   118                              <1> 
   119                              <1> int_zero_div:
   120                              <1>         ;---------------------------------------
   121                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
   122                              <1>         ;---------------------------------------
   123 0000110F 9C                  <1>         pushf                                   ;//EFLAGS
   124 00001110 0E                  <1>         push    cs                              ;//CS
   125 00001111 68[A00F0000]        <1>         push    int_stop                        ;//スタック表示処理
   126                              <1> 
   127                              <1>         ;---------------------------------------
   128                              <1>         ;割り込み種別を登録して復帰
   129                              <1>         ;---------------------------------------
   130 00001116 B8[1C110000]        <1>         mov     eax, .s0                        ;//割り込み種別
   131 0000111B CF                  <1>         iret
   132                              <1> 
   133 0000111C 203C20205A45524F20- <1> .s0:    db      " <  ZERO DIV  > ", 0
   133 00001125 44495620203E2000    <1>
   186                                  %include        "..\modules\protect\pic.s"
     1                              <1> init_pic:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 0000112D 50                  <1>         push    eax
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;マスタの設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x20, 0x11                      ;//MASTER.ICW1 = 0x11;
    10 0000112E B011                <2>  mov al, %2
    10 00001130 E620                <2>  out %1, al
    11                              <1>         outp    0x21, 0x20                      ;//MASTER.ICW2 = 0x20;
    11 00001132 B020                <2>  mov al, %2
    11 00001134 E621                <2>  out %1, al
    12                              <1>         outp    0x21, 0x04                      ;//MASTER.ICW3 = 0x04;
    12 00001136 B004                <2>  mov al, %2
    12 00001138 E621                <2>  out %1, al
    13                              <1>         outp    0x21, 0x05                      ;//MASTER.ICW4 = 0x05;
    13 0000113A B005                <2>  mov al, %2
    13 0000113C E621                <2>  out %1, al
    14                              <1>         outp    0x21, 0xEF                      ;//マスタ割り込みマスク
    14 0000113E B0EF                <2>  mov al, %2
    14 00001140 E621                <2>  out %1, al
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;スレーブの設定
    18                              <1>         ;---------------------------------------
    19                              <1>         outp    0xA0, 0x11                      ;//SLAVE.ICW1 = 0x11;
    19 00001142 B011                <2>  mov al, %2
    19 00001144 E6A0                <2>  out %1, al
    20                              <1>         outp    0xA1, 0x28                      ;//SLAVE.ICW2 = 0x28;
    20 00001146 B028                <2>  mov al, %2
    20 00001148 E6A1                <2>  out %1, al
    21                              <1>         outp    0xA1, 0x02                      ;//SLAVE.ICW3 = 0x02;
    21 0000114A B002                <2>  mov al, %2
    21 0000114C E6A1                <2>  out %1, al
    22                              <1>         outp    0xA1, 0x01                      ;//SLAVE.ICW4 = 0x01;
    22 0000114E B001                <2>  mov al, %2
    22 00001150 E6A1                <2>  out %1, al
    23                              <1>         outp    0xA1, 0xEF                      ;//マスタ割り込みマスク
    23 00001152 B0EF                <2>  mov al, %2
    23 00001154 E6A1                <2>  out %1, al
    24                              <1> 
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00001156 58                  <1>         pop     eax
    29                              <1> 
    30 00001157 C3                  <1>         ret
   187                                  %include        "..\modules\protect\int_rtc.s"
     1                              <1> int_rtc:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00001158 60                  <1>         pusha
     6 00001159 1E                  <1>         push    ds
     7 0000115A 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントセレクタの設定
    11                              <1>         ;---------------------------------------
    12 0000115B 66B81000            <1>         mov     ax, 0x0010
    13 0000115F 8ED8                <1>         mov     ds, ax
    14 00001161 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;RTCから時刻を取得
    18                              <1>         ;---------------------------------------
    19 00001163 68[54020000]E87DFD- <1>         cdecl   rtc_get_time, RTC_TIME          ;EAX = get_time(&RTC_TIME);
    19 0000116B FFFF6683C404        <1>
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;RTCの割り込み要因を取得
    23                              <1>         ;---------------------------------------
    24                              <1>         outp    0x70, 0x0C                      ;outp(0x70, 0x0C); //レジスタCを選択
    24 00001171 B00C                <2>  mov al, %2
    24 00001173 E670                <2>  out %1, al
    25 00001175 E471                <1>         in      al, 0x71                        ;AL = port(0x71);
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;割り込みフラグをクリア(EOI)
    29                              <1>         ;---------------------------------------
    30 00001177 B020                <1>         mov     al, 0x20                        ;AL = EOIコマンド;
    31 00001179 E6A0                <1>         out     0xA0, al                        ;outp(0xA0, AL); //スレーブPIC
    32 0000117B E620                <1>         out     0x20, al                        ;outp(0x20, AL); //マスタPIC
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;レジスタの復帰
    36                              <1>         ;---------------------------------------
    37 0000117D 07                  <1>         pop     es
    38 0000117E 1F                  <1>         pop     ds
    39 0000117F 61                  <1>         popa
    40                              <1> 
    41 00001180 CF                  <1>         iret                                    ;割り込み処理の終了
    42                              <1> 
    43                              <1> rtc_int_en:
    44                              <1>         ;-----------------------------------
    45                              <1>         ;スタックフレームの構築
    46                              <1>         ;-----------------------------------
    47                              <1>                                             ;   + 8| 指定されたビット
    48                              <1>                                             ;   + 4| IP(戻り番号)
    49 00001181 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    50 00001182 89E5                <1>         mov     ebp, esp                    ;------|---------
    51                              <1> 
    52                              <1>         ;---------------------------------------
    53                              <1>         ;レジスタの保存
    54                              <1>         ;---------------------------------------
    55 00001184 50                  <1>         push    eax
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み許可認定(RTCの内部レジスタBのUIE(更新終了割り込み許可)ビットをセット)
    59                              <1>         ;---------------------------------------
    60                              <1>         outp    0x70, 0x0B                      ;outp(0x70, AL); //レジスタBを選択
    60 00001185 B00B                <2>  mov al, %2
    60 00001187 E670                <2>  out %1, al
    61                              <1> 
    62 00001189 E471                <1>         in      al, 0x71                        ;AL = port(0x71); //レジスタBの
    63 0000118B 0A4508              <1>         or      al, [ebp + 8]                   ;AL |= ビット; //指定されたビットをセット
    64                              <1> 
    65 0000118E E671                <1>         out     0x71, al                        ;outp(0x71, AL); //レジスタBに書き込み
    66                              <1> 
    67                              <1>         ;---------------------------------------
    68                              <1>         ;レジスタの復帰
    69                              <1>         ;---------------------------------------
    70 00001190 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 00001191 89EC                <1>         mov     esp, ebp
    76 00001193 5D                  <1>         pop     ebp
    77                              <1> 
    78 00001194 C3                  <1>         ret
   188                                  %include        "..\modules\protect\ring_buff.s"
     1                              <1> ring_rd:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| 読み込んだデータの保存先アドレス
     6                              <1>                                             ;   + 8| リングバッファ
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00001195 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
     9 00001196 89E5                <1>         mov     ebp, esp                    ;------|---------
    10                              <1> 
    11                              <1>         ;---------------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;---------------------------------------
    14 00001198 60                  <1>         pusha
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;引数を取得
    18                              <1>         ;---------------------------------------
    19 00001199 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    20 0000119C 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = データアドレス;
    21                              <1>         
    22                              <1>         ;---------------------------------------
    23                              <1>         ;読み込み位置を確認
    24                              <1>         ;---------------------------------------
    25 0000119F B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    26 000011A4 8B1E                <1>         mov     ebx, [esi + ring_buff.rp]       ;EBX = rp; //読み込み位置
    27 000011A6 3B5E04              <1>         cmp     ebx, [esi + ring_buff.wp]       ;if(EBX != wp) //書き込み位置と異なる
    28 000011A9 7411                <1>         je      .10E                            ;{
    29                              <1>         
    30 000011AB 8A441E08            <1>         mov     al, [esi + ring_buff.item + ebx];   AL = BUFF[rp]; //キーコードを保存
    31                              <1> 
    32 000011AF 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //データを保存
    33                              <1> 
    34 000011B1 43                  <1>         inc     ebx                             ;   EBX++; //次の読み込み位置
    35 000011B2 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= 0x0F; //サイズの制限
    36 000011B5 891E                <1>         mov     [esi + ring_buff.rp], ebx       ;   wp = EBX; //読み込み位置を保存
    37                              <1> 
    38 000011B7 B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //データあり
    39                              <1> .10E:                                           ;}
    40                              <1> 
    41                              <1>         ;---------------------------------------
    42                              <1>         ;レジスタの復帰
    43                              <1>         ;---------------------------------------
    44 000011BC 61                  <1>         popa
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;スタックフレームの破棄
    48                              <1>         ;---------------------------------------
    49 000011BD 89EC                <1>         mov     esp, ebp
    50 000011BF 5D                  <1>         pop     ebp
    51                              <1> 
    52 000011C0 C3                  <1>         ret
    53                              <1> 
    54                              <1> ring_wr:
    55                              <1>         ;-----------------------------------
    56                              <1>         ;スタックフレームの構築
    57                              <1>         ;-----------------------------------
    58                              <1>                                             ;   +12| 書き込むデータ
    59                              <1>                                             ;   + 8| リングバッファ
    60                              <1>                                             ;   + 4| IP(戻り番号)
    61 000011C1 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    62 000011C2 89E5                <1>         mov     ebp, esp                    ;------|---------
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;レジスタの保存
    66                              <1>         ;---------------------------------------
    67 000011C4 60                  <1>         pusha
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;引数を取得
    71                              <1>         ;---------------------------------------
    72 000011C5 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    73                              <1>         
    74                              <1>         ;---------------------------------------
    75                              <1>         ;書き込み位置を確認
    76                              <1>         ;---------------------------------------
    77 000011C8 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    78 000011CD 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
    79 000011D0 89D9                <1>         mov     ecx, ebx                        ;ECX = EBX;
    80 000011D2 41                  <1>         inc     ecx                             ;ECX++;
    81 000011D3 83E10F              <1>         and     ecx, RING_INDEX_MASK            ;ECX &= 0x0F //サイズの制限
    82                              <1>         
    83 000011D6 3B0E                <1>         cmp     ecx, [esi + ring_buff.rp]       ;if(ECX != rp) //読み込み位置と異なる
    84 000011D8 740F                <1>         je      .10E                            ;{
    85                              <1>         
    86 000011DA 8A450C              <1>         mov     al, [ebp +12]                   ;   AL = データ;
    87                              <1> 
    88 000011DD 88441E08            <1>         mov     [esi + ring_buff.item + ebx], al;   BUFF[wp] = AL; //キーコードを保存
    89 000011E1 894E04              <1>         mov     [esi + ring_buff.wp], ecx       ;   wp = ECX; //書き込み位置を保存
    90 000011E4 B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //成功
    91                              <1> .10E:                                           ;}
    92                              <1> 
    93                              <1>         ;---------------------------------------
    94                              <1>         ;レジスタの復帰
    95                              <1>         ;---------------------------------------
    96 000011E9 61                  <1>         popa
    97                              <1>         
    98                              <1>         ;---------------------------------------
    99                              <1>         ;スタックフレームの破棄
   100                              <1>         ;---------------------------------------
   101 000011EA 89EC                <1>         mov     esp, ebp
   102 000011EC 5D                  <1>         pop     ebp
   103                              <1> 
   104 000011ED C3                  <1>         ret
   105                              <1> 
   106                              <1> draw_key:
   107                              <1>         ;-----------------------------------
   108                              <1>         ;スタックフレームの構築
   109                              <1>         ;-----------------------------------
   110                              <1>                                             ;   +16| リングブッファ
   111                              <1>                                             ;   +12| Y(行)
   112                              <1>                                             ;   + 8| X(列)
   113                              <1>                                             ;   + 4| IP(戻り番号)
   114 000011EE 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
   115 000011EF 89E5                <1>         mov     ebp, esp                    ;------|---------
   116                              <1> 
   117                              <1>         ;---------------------------------------
   118                              <1>         ;レジスタの保存
   119                              <1>         ;---------------------------------------
   120 000011F1 60                  <1>         pusha
   121                              <1> 
   122                              <1>         ;---------------------------------------
   123                              <1>         ;引数を取得
   124                              <1>         ;---------------------------------------
   125 000011F2 8B7508              <1>         mov     esi, [ebp + 8]                  ;EDX = X(列);
   126 000011F5 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行);
   127 000011F8 8B7510              <1>         mov     esi, [ebp +16]                  ;ESI = リングブッファ;
   128                              <1>         
   129                              <1>         ;---------------------------------------
   130                              <1>         ;リングブッファの情報を取得
   131                              <1>         ;---------------------------------------
   132 000011FB 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
   133 000011FE 8D7608              <1>         lea     esi, [esi + ring_buff.item]     ;ESI = &KEY_BUFF[EBX];
   134 00001201 B910000000          <1>         mov     ecx, RING_ITEM_SIZE             ;ECX = RING_ITEM_SIZE; //要素数
   135                              <1> 
   136                              <1> .10L:                                           ;do
   137                              <1>                                                 ;{
   138 00001206 4B                  <1>         dec     ebx                             ;   EBX--;
   139 00001207 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= RING_INDEX_MASK;
   140 0000120A 8A041E              <1>         mov     al, [esi + ebx]                 ;   EAX = KEY_BUFF[EBX];
   141                              <1> 
   142 0000120D 6A046A106A0268-     <1>         cdecl   itoa, eax, .tmp, 2, 16, 0b0100  ;   //キーコードを文字列に変換
   142 00001214 [3E120000]50E843FC- <1>
   142 0000121C FFFF6683C414        <1>
   143 00001222 68[3E120000]6A0257- <1>         cdecl   draw_str, edx, edi, 0x02, .tmp  ;   //変換した文字列を表示
   143 0000122A 52E8A3F9FFFF6683C4- <1>
   143 00001233 10                  <1>
   144                              <1> 
   145 00001234 83C203              <1>         add     edx, 3                          ;   //表示位置を更新(3文字分)
   146                              <1> 
   147 00001237 E2CD                <1>         loop    .10L
   148                              <1> .10E:                                           ;}while(ECX--);        
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;レジスタの復帰
   152                              <1>         ;---------------------------------------
   153 00001239 61                  <1>         popa
   154                              <1>         
   155                              <1>         ;---------------------------------------
   156                              <1>         ;スタックフレームの破棄
   157                              <1>         ;---------------------------------------
   158 0000123A 89EC                <1>         mov     esp, ebp
   159 0000123C 5D                  <1>         pop     ebp
   160                              <1> 
   161 0000123D C3                  <1>         ret
   162                              <1> 
   163                              <1>         ;---------------------------------------
   164                              <1>         ;データ
   165                              <1>         ;---------------------------------------
   166 0000123E 2D2D2000            <1> .tmp    db  "-- ", 0
   189                                  %include        "..\modules\protect\int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00001242 60                  <1>         pusha
     6 00001243 1E                  <1>         push    ds
     7 00001244 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 00001245 66B81000            <1>         mov     ax, 0x0010
    13 00001249 8ED8                <1>         mov     ds, ax
    14 0000124B 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;KBCのブッファ読み取り
    18                              <1>         ;---------------------------------------
    19 0000124D E460                <1>         in      al, 0x60                        ; AL = キーコードの取得
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;キーコードの保存
    23                              <1>         ;---------------------------------------
    24 0000124F 5068[68120000]E867- <1>         cdecl   ring_wr, _KEY_BUFF, eax         ;ring_wr(_KEY_BUFF, EAX); //キーコードの保存
    24 00001257 FFFFFF6683C408      <1>
    25                              <1>         
    26                              <1>         ;---------------------------------------
    27                              <1>         ;割り込み終了コマンド送信
    28                              <1>         ;---------------------------------------
    29                              <1>         outp    0x20, 0x20                      ;outp(); //マスタPIC:EOIコマンド
    29 0000125E B020                <2>  mov al, %2
    29 00001260 E620                <2>  out %1, al
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;レジスタの復帰
    33                              <1>         ;---------------------------------------
    34 00001262 07                  <1>         pop     es
    35 00001263 1F                  <1>         pop     ds
    36 00001264 61                  <1>         popa
    37                              <1> 
    38 00001265 CF                  <1>         iret                                    ;割り込みからの復帰
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;データ
    42                              <1>         ;---------------------------------------
    43                              <1> 
    44 00001266 00<rept>            <1> ALIGN   4, db   0
    45 00001268 00<rept>            <1> _KEY_BUFF:  times   ring_buff_size  db  0
   190                                  %include        "..\modules\protect\timer.s"
     1                              <1> int_en_timer0:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00001280 50                  <1>         push    eax                              ;//outp用
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;タイマーICのカウンタ0を設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x43, 0b_00_11_010_0            ;//カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    10 00001281 B034                <2>  mov al, %2
    10 00001283 E643                <2>  out %1, al
    11                              <1>         outp    0x40, 0x9C                      ;//下位バイト
    11 00001285 B09C                <2>  mov al, %2
    11 00001287 E640                <2>  out %1, al
    12                              <1>         outp    0x40, 0x2E                      ;//上位バイト
    12 00001289 B02E                <2>  mov al, %2
    12 0000128B E640                <2>  out %1, al
    13                              <1> 
    14                              <1>         ;---------------------------------------
    15                              <1>         ;レジスタの復帰
    16                              <1>         ;---------------------------------------
    17 0000128D 58                  <1>         pop     eax
    18                              <1> 
    19 0000128E C3                  <1>         ret
   191                                  %include        "..\modules\protect\draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 0000128F 60                  <1>         pushad
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;引数を取得
     9                              <1>         ;---------------------------------------
    10 00001290 A1[A4060000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = タイマー割り込みカウンタ
    11 00001295 C1E804              <1>         shr     eax, 4                          ;EAX /= 4; //16で除算
    12 00001298 3B05[C0120000]      <1>         cmp     eax, [.index]                   ;if(EAX != 前回値)
    13 0000129E 741E                <1>         je      .10E                            ;{
    14                              <1>         
    15 000012A0 A3[C0120000]        <1>         mov     [.index], eax                   ;   前回値 = EAX;
    16 000012A5 83E003              <1>         and     eax, 0x03                       ;   EAX &= 0x03; //0~3に限定
    17                              <1> 
    18 000012A8 8A80[C4120000]      <1>         mov     al, [.table + eax]              ;   AL = table[index];
    19 000012AE 506A0F6A1D6A00E8F9- <1>         cdecl   draw_char, 0 ,29, 0x000F, eax   ;   draw_char(); //文字を表示
    19 000012B7 F7FFFF6683C410      <1>
    20                              <1> 
    21                              <1> .10E:                                           ;}    
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;レジスタの復帰
    25                              <1>         ;---------------------------------------
    26 000012BE 61                  <1>         popad
    27                              <1> 
    28 000012BF C3                  <1>         ret
    29                              <1> 
    30                              <1>         ;---------------------------------------
    31                              <1>         ;データ
    32                              <1>         ;---------------------------------------
    33                              <1> ALIGN   4,  db  0
    34 000012C0 00000000            <1> .index:     dd  0                               ;前回値
    35 000012C4 7C2F2D5C            <1> .table:     db  "|/-\"                          ;表示キャラクタ
   192                                  %include        "..\modules\protect\call_gate.s"
     1                              <1> call_gate:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| X(列)
     6                              <1>                                             ;   +16| Y(行)
     7                              <1>                                             ;   +20| 色
     8                              <1>                                             ;   +24| 文字
     9                              <1>                                             ;   + 8| CS(コードセグメント)
    10                              <1>                                             ;   + 4| EIP(戻り番号)
    11 000012C8 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    12 000012C9 89E5                <1>         mov    ebp, esp                     ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 000012CB 60                  <1>         pusha
    18 000012CC 1E                  <1>         push    ds
    19 000012CD 06                  <1>         push    es
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;データ用セグメントの設定
    23                              <1>         ;---------------------------------------
    24 000012CE 66B81000            <1>         mov     ax, 0x0010
    25 000012D2 8ED8                <1>         mov     ds, ax
    26 000012D4 8EC0                <1>         mov     es, ax
    27                              <1>         
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字を表示
    30                              <1>         ;---------------------------------------
    31 000012D6 8B450C              <1>         mov     eax, dword [ebp +12]            ;EAX = X(列);
    32 000012D9 8B5D10              <1>         mov     ebx, dword [ebp +16]            ;EBX = Y(行);
    33 000012DC 8B4D14              <1>         mov     ecx, dword [ebp +20]            ;ECX = 色;
    34 000012DF 8B5518              <1>         mov     edx, dword [ebp +24]            ;EDX = 文字;
    35 000012E2 52515350E8E8F8FFFF- <1>         cdecl   draw_str, eax, ebx, ecx, edx    ;draw_str();
    35 000012EB 6683C410            <1>
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;レジスタの復帰
    39                              <1>         ;---------------------------------------
    40 000012EF 07                  <1>         pop     es
    41 000012F0 1F                  <1>         pop     ds
    42 000012F1 61                  <1>         popa
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;スタックフレームの破棄
    46                              <1>         ;---------------------------------------
    47 000012F2 89EC                <1>         mov     esp, ebp
    48 000012F4 5D                  <1>         pop     ebp
    49                              <1> 
    50 000012F5 CA1000              <1>         retf 4 * 4
   193                                  %include        "..\modules\protect\trap_gate.s"
     1                              <1> trap_gate_81:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;1文字出力
     4                              <1>         ;---------------------------------------
     5 000012F8 50535251E8B2F7FFFF- <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;//1文字出力
     5 00001301 6683C410            <1>
     6                              <1> 
     7 00001305 CF                  <1>         iret
     8                              <1> 
     9                              <1> trap_gate_82:
    10                              <1>         ;---------------------------------------
    11                              <1>         ;点の描画
    12                              <1>         ;---------------------------------------
    13 00001306 535251E87BF9FFFF66- <1>         cdecl   draw_pixel, ecx, edx, ebx       ;//点の描画
    13 0000130F 83C40C              <1>
    14                              <1> 
    15 00001312 CF                  <1>         iret
   194                                  %include        "..\modules\protect\test_and_set.s"
     1                              <1> test_and_set:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| ローカル変数のアドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00001313 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00001314 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00001316 50                  <1>         push    eax
    14 00001317 53                  <1>         push    ebx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;テストアンドセット
    18                              <1>         ;---------------------------------------
    19 00001318 B800000000          <1>         mov     eax, 0                          ;local = 0;
    20 0000131D 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;global = アドレス;
    21                              <1> 
    22                              <1> .10L:                                           ;while(1)
    23                              <1>                                                 ;{
    24 00001320 F00FAB03            <1>         lock    bts [ebx], eax                  ;   CF = TEST_AND_SET(IN_USE, 1);
    25 00001324 7307                <1>         jnc     .10E                            ;   if(0 == CF)
    26                              <1>                                                 ;   break;
    27                              <1> 
    28                              <1> .12L:                                           ;   while(1)
    29                              <1>                                                 ;   {
    30 00001326 0FA303              <1>         bt      [ebx], eax                      ;       CF = TEST(IN_USE, 1);
    31 00001329 72FB                <1>         jc      .12L                            ;       if(0 == CF)
    32                              <1>                                                 ;       break;
    33 0000132B EBF3                <1>         jmp     .10L                            ;   }
    34                              <1> .10E:                                           ;}
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;レジスタの復帰
    38                              <1>         ;---------------------------------------
    39 0000132D 5B                  <1>         pop     ebx
    40 0000132E 58                  <1>         pop     eax
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;スタックフレームの破棄
    44                              <1>         ;---------------------------------------
    45 0000132F 89EC                <1>         mov     esp, ebp
    46 00001331 5D                  <1>         pop     ebp
    47                              <1> 
    48 00001332 C3                  <1>         ret
   195                                  %include        "..\modules\protect\int_nm.s"
     1                              <1> get_tss_base:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;TSSセレクタで指定されているTSSディスクリプタからTSSベースアドレスを取得し、EAXに代入。
     4                              <1>         ;---------------------------------------
     5 00001333 8B83[BA050000]      <1>         mov     eax, [GDT + ebx + 2]            ;EAX = TSS[23:0];
     6 00001339 C1E008              <1>         shl     eax, 8                          ;EAX << 8;
     7 0000133C 8A83[BF050000]      <1>         mov     al, [GDT + ebx + 7]             ;AL = TSS[31:24];
     8 00001342 C1C808              <1>         ror     eax, 8                          ;EAX >>= 8; //循環
     9                              <1> 
    10 00001345 C3                  <1>         ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1>         ;---------------------------------------
    14                              <1>         ;EAXレジスタに設定されたTSSディスクリプタのベースアドレスを参照して、FPUコンテキストを保存し、保存済みフラグをセット。
    15                              <1>         ;---------------------------------------
    16 00001346 DD7068              <1>         fnsave  [eax + 104]                     ;//FPUコンテキストを保存
    17 00001349 C780D4000000010000- <1>         mov     [eax + 104 + 108], dword 1      ;saved = 1; //フラグをセット
    17 00001352 00                  <1>
    18                              <1> 
    19 00001353 C3                  <1>         ret
    20                              <1> 
    21                              <1> load_fpu_context:
    22                              <1>         ;---------------------------------------
    23                              <1>         ;FPUコンテキストを復帰する。保存済みフラグがセットされていなければFPUを初期化する。
    24                              <1>         ;---------------------------------------
    25 00001354 83B8D400000000      <1>         cmp     [eax + 104 + 108], dword 0      ;if(0 == saved)
    26 0000135B 7504                <1>         jne     .10F                            ;{
    27 0000135D DBE3                <1>         fninit                                  ;   //FPUの初期化
    28 0000135F EB03                <1>         jmp     .10E                            ;}
    29                              <1> .10F:                                           ;else
    30                              <1>                                                 ;{
    31 00001361 DD6068              <1>         frstor  [eax + 104]                     ;   //FPUコンテキストを復帰
    32                              <1> .10E:                                           ;}
    33                              <1> 
    34 00001364 C3                  <1>         ret
    35                              <1> 
    36                              <1> int_nm:
    37                              <1>         ;-----------------------------------
    38                              <1>         ;レジスタの保存
    39                              <1>         ;-----------------------------------
    40 00001365 60                  <1>         pusha
    41 00001366 1E                  <1>         push    ds
    42 00001367 06                  <1>         push    es
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;カーネル用セレクタを設定
    46                              <1>         ;---------------------------------------
    47 00001368 66B81000            <1>         mov     ax, DS_KERNEL                   ;0x10と同じ
    48 0000136C 8ED8                <1>         mov     ds, ax
    49 0000136E 8EC0                <1>         mov     es, ax
    50                              <1>         
    51                              <1>         ;---------------------------------------
    52                              <1>         ;タスクスイッチフラグをクリア
    53                              <1>         ;---------------------------------------
    54 00001370 0F06                <1>         clts                                    ;CR0.TS = 0;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;前回/今回FPUを使用するタスク
    58                              <1>         ;---------------------------------------
    59 00001372 8B3D[BC130000]      <1>         mov     edi, [.last_tss]                ;EDI = 前回FPUを使用したタスクのTSS
    60 00001378 0F00CE              <1>         str     esi                             ;ESI = 今回FPUを使用したタスクのTSS
    61 0000137B 83E6F8              <1>         and     esi, ~0x0007                    ;//特権レベルとTI(Table Indicator:テーブル指定)bitをマスクして除外
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;FPUの初回利用をチェック
    65                              <1>         ;---------------------------------------
    66 0000137E 83FF00              <1>         cmp     edi, 0                          ;if(0 != EDI) //前回使用したタスク
    67 00001381 7420                <1>         je      .10F                            ;{
    68                              <1>         
    69 00001383 39FE                <1>         cmp     esi, edi                        ;   if(ESI != EDI) //異なるタスク
    70 00001385 741A                <1>         je      .12E                            ;   {
    71                              <1>         
    72 00001387 FA                  <1>         cli                                     ;       //割り込み禁止
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;前回のFPUコンテキストを保存
    76                              <1>         ;---------------------------------------
    77 00001388 89FB                <1>         mov     ebx, edi                        ;       EBX = EDI; //前回のタスク
    78 0000138A E8A4FFFFFF          <1>         call    get_tss_base                    ;       EAX = get_tss_base(TSSセレクタインデックス(前回)); //TSSアドレスを取得
    79 0000138F E8B2FFFFFF          <1>         call    save_fpu_context                ;       save_fpu_context(); //FPUコンテキスを保存
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;今回のFPUコンテキストを復帰
    83                              <1>         ;---------------------------------------
    84 00001394 89F3                <1>         mov     ebx, esi                        ;       EBX = ESI; //今回のタスク
    85 00001396 E898FFFFFF          <1>         call    get_tss_base                    ;       EAX = get_tss_base(TSSセレクタインデックス(今回)); //TSSアドレスを取得
    86 0000139B E8B4FFFFFF          <1>         call    load_fpu_context                ;       load_fpu_context(); //FPUコンテキスを復帰
    87                              <1> 
    88 000013A0 FB                  <1>         sti                                     ;       //割り込み許可
    89                              <1> .12E:                                           ;   }
    90 000013A1 EB0E                <1>         jmp     .10E                            ;}
    91                              <1> .10F:                                           ;else
    92                              <1>                                                 ;{
    93                              <1>         
    94 000013A3 FA                  <1>         cli                                     ;   //割り込み禁止
    95                              <1> 
    96                              <1>         ;---------------------------------------
    97                              <1>         ;今回のFPUコンテキストを復帰
    98                              <1>         ;---------------------------------------
    99 000013A4 89F3                <1>         mov     ebx, esi                        ;   EBX = ESI; //今回のタスク
   100 000013A6 E888FFFFFF          <1>         call    get_tss_base                    ;   EAX = get_tss_base(TSSセレクタインデックス(今回)); //TSSアドレスを取得
   101 000013AB E8A4FFFFFF          <1>         call    load_fpu_context                ;   load_fpu_context(); //FPUコンテキスを復帰
   102                              <1> 
   103 000013B0 FB                  <1>         sti                                     ;   //割り込み許可
   104                              <1> .10E:                                           ;}
   105                              <1> 
   106 000013B1 8935[BC130000]      <1>         mov     [.last_tss], esi                ;//FPUを使用したタスクを保存
   107                              <1> 
   108                              <1>         ;---------------------------------------
   109                              <1>         ;レジスタの復帰
   110                              <1>         ;---------------------------------------
   111 000013B7 07                  <1>         pop     es
   112 000013B8 1F                  <1>         pop     ds
   113 000013B9 61                  <1>         popa
   114                              <1> 
   115 000013BA CF                  <1>         iret
   116                              <1> 
   117 000013BB 00                  <1> ALIGN   4,  db  0
   118 000013BC 00000000            <1> .last_tss:  dd  0
   196                                  %include        "..\modules\protect\wait_tick.s"
     1                              <1> wait_tick:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| ウェイト
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 000013C0 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 000013C1 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 000013C3 50                  <1>         push    eax
    14 000013C4 51                  <1>         push    ecx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;ウェイト
    18                              <1>         ;---------------------------------------
    19 000013C5 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = ウェイト回数
    20 000013C8 A1[A4060000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = TIMER;
    21                              <1>                                                 ;do
    22                              <1>                                                 ;{
    23 000013CD 3905[A4060000]      <1> .10L:   cmp     [TIMER_COUNT], eax              ;   while(TIMER_COUNT == EAX){} //タイマ割り込みでループを出る
    24 000013D3 74F8                <1>         je      .10L
    25 000013D5 40                  <1>         inc     eax                             ;   EAX++;
    26 000013D6 E2F5                <1>         loop    .10L                            ;}while(ECX--);
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;レジスタの復帰
    30                              <1>         ;---------------------------------------
    31 000013D8 59                  <1>         pop     ecx
    32 000013D9 58                  <1>         pop     eax
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;スタックフレームの破棄
    36                              <1>         ;---------------------------------------
    37 000013DA 89EC                <1>         mov     esp, ebp
    38 000013DC 5D                  <1>         pop     ebp
    39                              <1> 
    40 000013DD C3                  <1>         ret
   197                                  %include        "..\modules\protect\memcpy.s"
     1                              <1> memcpy:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;------|---------
     6                              <1>                                             ;EBP+16| バイト数
     7                              <1>                                             ;EBP+12| コピー元
     8                              <1>                                             ;EBP+ 8| コピー先
     9                              <1>                                             ;------|---------
    10 000013DE 55                  <1>         push    ebp                         ;EBP+ 4| EIP(戻り番地)
    11 000013DF 89E5                <1>         mov     ebp, esp                    ;EBP+ 0| EBP(元の値)
    12                              <1>                                             ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 000013E1 51                  <1>         push    ecx
    18 000013E2 56                  <1>         push    esi
    19 000013E3 57                  <1>         push    edi
    20                              <1> 
    21                              <1>         ;-----------------------------------
    22                              <1>         ;バイト単位でのコピー
    23                              <1>         ;-----------------------------------
    24 000013E4 FC                  <1>         cld                                 ;DF = 0; //+方向
    25 000013E5 8B7D08              <1>         mov     edi, [ebp + 8]              ;EDI = コピー先
    26 000013E8 8B750C              <1>         mov     esi, [ebp + 12]             ;ESI = コピー元
    27 000013EB 8B4D10              <1>         mov     ecx, [ebp + 16]             ;ECX = バイト数
    28                              <1> 
    29 000013EE F3A4                <1>         rep movsb                           ;while(*EDI++ = *ESI++);
    30                              <1> 
    31                              <1>         ;-----------------------------------
    32                              <1>         ;レジスタの復帰
    33                              <1>         ;-----------------------------------
    34 000013F0 5F                  <1>         pop     edi
    35 000013F1 5E                  <1>         pop     esi
    36 000013F2 59                  <1>         pop     ecx
    37                              <1> 
    38                              <1>         ;-----------------------------------
    39                              <1>         ;スタックフレームの破棄
    40                              <1>         ;-----------------------------------
    41 000013F3 89EC                <1>         mov     esp,ebp
    42 000013F5 5D                  <1>         pop     ebp
    43                              <1> 
    44 000013F6 C3                  <1>         ret
   198                                  
   199                                  ;********************************************************************************************************
   200                                  ;パディング
   201                                  ;********************************************************************************************************
   202 000013F7 00<rept>                        times KERNEL_SIZE - ($ - $$)    db 0    ;パディング
