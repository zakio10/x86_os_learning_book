int_stop:
        ;---------------------------------------
        ;EAXで示される文字列を表示
        ;---------------------------------------
        cdecl   draw_str, 25, 15, 0x060F, eax   ;draw_str(EAX);
        
        ;---------------------------------------
        ;スタックのデータを文字列に変換
        ;---------------------------------------
        mov     eax, [esp + 0]                  ;EAX = ESP[ 0];
        cdecl   itoa, eax, .p1, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);

        mov     eax, [esp + 4]                  ;EAX = ESP[ 4];
        cdecl   itoa, eax, .p2, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);

        mov     eax, [esp + 8]                  ;EAX = ESP[ 8];
        cdecl   itoa, eax, .p3, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);

        mov     eax, [esp +12]                  ;EAX = ESP[12];
        cdecl   itoa, eax, .p4, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);

        ;---------------------------------------
        ;文字列の表示
        ;---------------------------------------
        cdecl   draw_str, 25, 16, 0x0F04, .s1,  ;draw_str("ESP+ 0:-------- ");
        cdecl   draw_str, 25, 17, 0x0F04, .s2   ;draw_str("   + 4:-------- ");
        cdecl   draw_str, 25, 18, 0x0F04, .s3,  ;draw_str("   + 8:-------- ");
        cdecl   draw_str, 25, 19, 0x0F04, .s4   ;draw_str("   +12:-------- ");        

        ;---------------------------------------
        ;無限ループ
        ;---------------------------------------
        jmp     $                               ;while(1); //無限ループ

        ;---------------------------------------
        ;データ
        ;---------------------------------------
.s1:    db  "ESP+ 0:"
.p1:    db  "-------- ", 0
.s2:    db  "   + 4:"
.p2:    db  "-------- ", 0
.s3:    db  "   + 8:"
.p3:    db  "-------- ", 0
.s4:    db  "   +12:"
.p4:    db  "-------- ", 0

int_default:
        ;---------------------------------------
        ;スタック表示関数に復帰するために必要な情報をスタック
        ;---------------------------------------
        pushf                                   ;//EFLAGS
        push    cs                              ;//cs
        push    int_stop                        ;//スタック表示処理

        ;---------------------------------------
        ;割り込み種別を登録して復帰
        ;---------------------------------------
        mov     eax, .s0                        ;//割り込み種別
        iret                                    ;スタックされている場所に復帰

        ;---------------------------------------
        ;データ
        ;---------------------------------------
.s0:    db  " <    STOP    > ", 0

;********************************************************************************************************
;割り込みベクタの初期化
;********************************************************************************************************
ALIGN   4
IDTR:   dw      8 * 256 - 1                     ;idt_limit
        dd      VECT_BASE                       ;idt_location

;********************************************************************************************************
;割り込みテーブルを初期化
;********************************************************************************************************
init_int:
        ;---------------------------------------
        ;レジスタの保存
        ;---------------------------------------
        push    eax
        push    ebx
        push    ecx
        push    edi

        ;---------------------------------------
        ;全ての割り込みにデフォルト処理を設定
        ;---------------------------------------
        lea     eax, [int_default]              ;EAX = 割り込み処理アドレス;
        mov     ebx, 0x0008_8E00                ;EBX = セグメントセレクタ;
        xchg    ax, bx                          ;//下位ワード(2バイト)を交換(割り込みゲートディスクリプタの形式に合わせる)

        mov     ecx, 256                        ;ECX = 割り込みベクタ数
        mov     edi, VECT_BASE                  ;EDI = 割り込みベクタテーブル

.10L:                                           ;do
                                                ;{
        mov     [edi + 0], ebx                  ;       [EDI + 0] = 割り込みディスクリプタ(下位)
        mov     [edi + 4], eax                  ;       [EDI + 4] = 割り込みディスクリプタ(上位)
        add     edi, 8                          ;       EDI += 8;
        loop    .10L                            ;}while(ECX--);

        ;---------------------------------------
        ;割り込みディスクリプタの設定
        ;---------------------------------------
        lidt    [IDTR]                          ;//割り込みディスクリプタテーブルをロード

        ;---------------------------------------
        ;データ
        ;---------------------------------------
        pop     edi
        pop     ecx
        pop     ebx
        pop     eax

        ret

int_zero_div:
        ;---------------------------------------
        ;スタック表示関数に復帰するために必要な情報をスタック
        ;---------------------------------------
        pushf                                   ;//EFLAGS
        push    cs                              ;//CS
        push    int_stop                        ;//スタック表示処理

        ;---------------------------------------
        ;割り込み種別を登録して復帰
        ;---------------------------------------
        mov     eax, .s0                        ;//割り込み種別
        iret

.s0:    db      " <  ZERO DIV  > ", 0