     1                                  ;********************************************************************************************************
     2                                  ;マクロ
     3                                  ;********************************************************************************************************
     4                                  %define         USE_SYSTEM_CALL
     5                                  %define         USE_TEST_AND_SET
     6                                  
     7                                  %include        "..\include\define.s"
     1                              <1> VECT_BASE       equ     0x0010_0000             ;0010_0000:0010_07FF
     2                              <1> 
     3                              <1> SECT_SIZE   equ     (512)                   ;セクタサイズ
     4                              <1> 
     5                              <1> BOOT_LOAD   equ     0x7C00                  ;ブートプログラムのロード位置
     6                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)
     7                              <1> BOOT_SIZE   equ     (1024 * 8)              ;ブートコードサイズ
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     9                              <1> 
    10                              <1> KERNEL_LOAD equ     0x0010_1000
    11                              <1> KERNEL_SIZE equ     (1024*8)                ;カーネルサイズ
    12                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> STACK_BASE  equ     0x0010_3000             ;タスク用スタックエリア
    15                              <1> STACK_SIZE  equ     1024                    ;スタックサイズ
    16                              <1> 
    17                              <1> SP_TASK_0   equ     STACK_BASE + (STACK_SIZE * 1)
    18                              <1> SP_TASK_1   equ     STACK_BASE + (STACK_SIZE * 2)
    19                              <1> SP_TASK_2   equ     STACK_BASE + (STACK_SIZE * 3)
    20                              <1> SP_TASK_3   equ     STACK_BASE + (STACK_SIZE * 4)
    21                              <1> 
    22                              <1> E820_RECORD_SIZE    equ 20
     8                                  %include        "..\include\macro.s"
     1                              <1> %define     RING_ITEM_SIZE  (1 << 4)
     2                              <1> %define     RING_INDEX_MASK (RING_ITEM_SIZE - 1)
     3                              <1> 
     4                              <1> struc drive
     5 00000000 <res 00000002>      <1>         .no         resw    1                       ;ドライブ番号
     6 00000002 <res 00000002>      <1>         .cyln       resw    1                       ;シリンダ
     7 00000004 <res 00000002>      <1>         .head       resw    1                       ;ヘッド
     8 00000006 <res 00000002>      <1>         .sect       resw    1                       ;セクタ
     9                              <1> endstruc
    10                              <1> 
    11                              <1> struc ring_buff
    12 00000000 <res 00000004>      <1>         .rp         resd    1                       ;RP:書き込み位置
    13 00000004 <res 00000004>      <1>         .wp         resd    1                       ;WP:読み込み位置
    14 00000008 <res 00000010>      <1>         .item       resb    RING_ITEM_SIZE          ;ブッファ
    15                              <1> endstruc
    16                              <1> 
    17                              <1> %macro  cdecl   1-*.nolist
    18                              <1> 
    19                              <1>     %rep    %0 - 1
    20                              <1>         push    %{-1:-1}
    21                              <1>         %rotate -1
    22                              <1>     %endrep
    23                              <1>     %rotate -1
    24                              <1> 
    25                              <1>         call    %1
    26                              <1> 
    27                              <1>     %if 1 < %0
    28                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    29                              <1>     %endif
    30                              <1> 
    31                              <1> %endmacro
    32                              <1> 
    33                              <1> %macro  set_vect    1-*
    34                              <1>         push    eax
    35                              <1>         push    edi
    36                              <1> 
    37                              <1>         mov     edi, VECT_BASE + (%1 * 8)           ;ベクタアドレス
    38                              <1>         mov     eax, %2
    39                              <1> 
    40                              <1>     %if 3 == %0
    41                              <1>         mov     [edi + 4], %3                       ;フラグ
    42                              <1>     %endif
    43                              <1> 
    44                              <1>         mov     [edi + 0], ax                       ;例外アドレス[15:0]
    45                              <1>         shr     eax, 16
    46                              <1>         mov     [edi + 6], ax                       ;6はエンディアン(?) 例外アドレス[31:16]
    47                              <1> 
    48                              <1>         pop     edi
    49                              <1>         pop     eax
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro  outp    2
    53                              <1>         mov     al, %2
    54                              <1>         out     %1, al
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro  set_desc    2-*
    58                              <1>         push    eax
    59                              <1>         push    edi
    60                              <1> 
    61                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
    62                              <1>         mov     eax, %2                             ;ベースアドレス
    63                              <1> 
    64                              <1>     %if 3 == %0
    65                              <1>         mov     [edi + 0], %3                       ;リミット
    66                              <1>     %endif
    67                              <1>     
    68                              <1>         mov     [edi + 2], ax                       ;ベース([15: 0])
    69                              <1>         shr     eax, 16
    70                              <1>         mov     [edi + 4], al                       ;ベース([23:16])
    71                              <1>         mov     [edi + 7], ah                       ;ベース([31:24])
    72                              <1> 
    73                              <1>         pop     edi
    74                              <1>         pop     eax
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_gate    2-*
    78                              <1>         push    eax
    79                              <1>         push    edi
    80                              <1> 
    81                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
    82                              <1>         mov     eax, %2                             ;ベースアドレス
    83                              <1> 
    84                              <1>         mov     [edi + 0], ax                       ;ベース([15:0])
    85                              <1>         shr     eax, 16
    86                              <1>         mov     [edi + 6], ax                       ;ベース([31:16])
    87                              <1> 
    88                              <1>         pop     edi
    89                              <1>         pop     eax
    90                              <1> %endmacro
     9                                  
    10                                          ORG     KERNEL_LOAD                             ;カーネルのロードアドレス
    11                                  
    12                                  [BITS 32]
    13                                  ;********************************************************************************************************
    14                                  ;エントリポイント
    15                                  ;********************************************************************************************************
    16                                  kernel:
    17                                          ;---------------------------------------
    18                                          ;フォントアドレスを取得
    19                                          ;---------------------------------------
    20 00000000 BE007E0000                      mov     esi, BOOT_LOAD + SECT_SIZE      ;ESI = 0x7C00 + 512
    21 00000005 0FB706                          movzx   eax, word [esi + 0]             ;EAX = [ESI + 0] //セグメント
    22 00000008 0FB75E02                        movzx   ebx, word [esi + 2]             ;EBX = [ESI + 2] //オフセット
    23 0000000C C1E004                          shl     eax, 4                          ;EAX << 4;
    24 0000000F 01D8                            add     eax, ebx                        ;EAX += EBX;
    25 00000011 A3[20020000]                    mov     [FONT_ADR], eax                 ;FONT_ADR[0] = EAX;
    26                                  
    27                                          ;---------------------------------------
    28                                          ;TSSディスクリプタの設定
    29                                          ;---------------------------------------
    30                                          set_desc        GDT.tss_0, TSS_0        ;//タスク0用TSSの設定
    30 00000016 50                  <1>  push eax
    30 00000017 57                  <1>  push edi
    30                              <1> 
    30 00000018 BF[A8050000]        <1>  mov edi, %1
    30 0000001D B8[28020000]        <1>  mov eax, %2
    30                              <1> 
    30                              <1>  %if 3 == %0
    30                              <1>  mov [edi + 0], %3
    30                              <1>  %endif
    30                              <1> 
    30 00000022 66894702            <1>  mov [edi + 2], ax
    30 00000026 C1E810              <1>  shr eax, 16
    30 00000029 884704              <1>  mov [edi + 4], al
    30 0000002C 886707              <1>  mov [edi + 7], ah
    30                              <1> 
    30 0000002F 5F                  <1>  pop edi
    30 00000030 58                  <1>  pop eax
    31                                          set_desc        GDT.tss_1, TSS_1        ;//タスク1用TSSの設定
    31 00000031 50                  <1>  push eax
    31 00000032 57                  <1>  push edi
    31                              <1> 
    31 00000033 BF[B0050000]        <1>  mov edi, %1
    31 00000038 B8[00030000]        <1>  mov eax, %2
    31                              <1> 
    31                              <1>  %if 3 == %0
    31                              <1>  mov [edi + 0], %3
    31                              <1>  %endif
    31                              <1> 
    31 0000003D 66894702            <1>  mov [edi + 2], ax
    31 00000041 C1E810              <1>  shr eax, 16
    31 00000044 884704              <1>  mov [edi + 4], al
    31 00000047 886707              <1>  mov [edi + 7], ah
    31                              <1> 
    31 0000004A 5F                  <1>  pop edi
    31 0000004B 58                  <1>  pop eax
    32                                          set_desc        GDT.tss_2, TSS_2        ;//タスク1用TSSの設定
    32 0000004C 50                  <1>  push eax
    32 0000004D 57                  <1>  push edi
    32                              <1> 
    32 0000004E BF[B8050000]        <1>  mov edi, %1
    32 00000053 B8[D8030000]        <1>  mov eax, %2
    32                              <1> 
    32                              <1>  %if 3 == %0
    32                              <1>  mov [edi + 0], %3
    32                              <1>  %endif
    32                              <1> 
    32 00000058 66894702            <1>  mov [edi + 2], ax
    32 0000005C C1E810              <1>  shr eax, 16
    32 0000005F 884704              <1>  mov [edi + 4], al
    32 00000062 886707              <1>  mov [edi + 7], ah
    32                              <1> 
    32 00000065 5F                  <1>  pop edi
    32 00000066 58                  <1>  pop eax
    33                                          set_desc        GDT.tss_3, TSS_3        ;//タスク1用TSSの設定
    33 00000067 50                  <1>  push eax
    33 00000068 57                  <1>  push edi
    33                              <1> 
    33 00000069 BF[C0050000]        <1>  mov edi, %1
    33 0000006E B8[B0040000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if 3 == %0
    33                              <1>  mov [edi + 0], %3
    33                              <1>  %endif
    33                              <1> 
    33 00000073 66894702            <1>  mov [edi + 2], ax
    33 00000077 C1E810              <1>  shr eax, 16
    33 0000007A 884704              <1>  mov [edi + 4], al
    33 0000007D 886707              <1>  mov [edi + 7], ah
    33                              <1> 
    33 00000080 5F                  <1>  pop edi
    33 00000081 58                  <1>  pop eax
    34                                  
    35                                          ;---------------------------------------
    36                                          ;コールゲートの設定
    37                                          ;---------------------------------------
    38                                          set_gate        GDT.call_gate, call_gate;コールゲートの設定
    38 00000082 50                  <1>  push eax
    38 00000083 57                  <1>  push edi
    38                              <1> 
    38 00000084 BF[C8050000]        <1>  mov edi, %1
    38 00000089 B8[28110000]        <1>  mov eax, %2
    38                              <1> 
    38 0000008E 668907              <1>  mov [edi + 0], ax
    38 00000091 C1E810              <1>  shr eax, 16
    38 00000094 66894706            <1>  mov [edi + 6], ax
    38                              <1> 
    38 00000098 5F                  <1>  pop edi
    38 00000099 58                  <1>  pop eax
    39                                  
    40                                          ;---------------------------------------
    41                                          ;LDTの設定
    42                                          ;---------------------------------------
    43                                          set_desc        GDT.ldt, LDT, word LDT_LIMIT
    43 0000009A 50                  <1>  push eax
    43 0000009B 57                  <1>  push edi
    43                              <1> 
    43 0000009C BF[A0050000]        <1>  mov edi, %1
    43 000000A1 B8[D6050000]        <1>  mov eax, %2
    43                              <1> 
    43                              <1>  %if 3 == %0
    43 000000A6 66C7074700          <1>  mov [edi + 0], %3
    43                              <1>  %endif
    43                              <1> 
    43 000000AB 66894702            <1>  mov [edi + 2], ax
    43 000000AF C1E810              <1>  shr eax, 16
    43 000000B2 884704              <1>  mov [edi + 4], al
    43 000000B5 886707              <1>  mov [edi + 7], ah
    43                              <1> 
    43 000000B8 5F                  <1>  pop edi
    43 000000B9 58                  <1>  pop eax
    44                                  
    45                                          ;---------------------------------------
    46                                          ;GDTをロード(再設定)
    47                                          ;---------------------------------------
    48 000000BA 0F0115[D0050000]                lgdt    [GDTR]                          ;//グローバルディスクリプタテーブルをロード
    49                                  
    50                                          ;---------------------------------------
    51                                          ;スタックの設定
    52                                          ;---------------------------------------
    53 000000C1 BC00341000                      mov     esp, SP_TASK_0                  ;タスク0用のスタックを設定
    54                                  
    55                                          ;---------------------------------------
    56                                          ;タスクレジスタの初期化
    57                                          ;---------------------------------------
    58 000000C6 66B82000                        mov     ax, SS_TASK_0                   ;//タスクレジスタの設定
    59 000000CA 0F00D8                          ltr     ax
    60                                  
    61                                          ;---------------------------------------
    62                                          ;初期化
    63                                          ;---------------------------------------
    64 000000CD E86C0E0000                      cdecl   init_int                        ;//割り込みベクタの初期化
    65 000000D2 E8B60E0000                      cdecl   init_pic                        ;//割り込みコントローラの初期化
    66                                  
    67                                          set_vect        0x00, int_zero_div      ;割り込み処理の登録:0除算
    67 000000D7 50                  <1>  push eax
    67 000000D8 57                  <1>  push edi
    67                              <1> 
    67 000000D9 BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    67 000000DE B8[6F0F0000]        <1>  mov eax, %2
    67                              <1> 
    67                              <1>  %if 3 == %0
    67                              <1>  mov [edi + 4], %3
    67                              <1>  %endif
    67                              <1> 
    67 000000E3 668907              <1>  mov [edi + 0], ax
    67 000000E6 C1E810              <1>  shr eax, 16
    67 000000E9 66894706            <1>  mov [edi + 6], ax
    67                              <1> 
    67 000000ED 5F                  <1>  pop edi
    67 000000EE 58                  <1>  pop eax
    68                                          set_vect        0x07, int_nm            ;割り込み処理の登録:デバイス使用不可(FPU)
    68 000000EF 50                  <1>  push eax
    68 000000F0 57                  <1>  push edi
    68                              <1> 
    68 000000F1 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    68 000000F6 B8[C5110000]        <1>  mov eax, %2
    68                              <1> 
    68                              <1>  %if 3 == %0
    68                              <1>  mov [edi + 4], %3
    68                              <1>  %endif
    68                              <1> 
    68 000000FB 668907              <1>  mov [edi + 0], ax
    68 000000FE C1E810              <1>  shr eax, 16
    68 00000101 66894706            <1>  mov [edi + 6], ax
    68                              <1> 
    68 00000105 5F                  <1>  pop edi
    68 00000106 58                  <1>  pop eax
    69                                          set_vect        0x20, int_timer         ;割り込み処理の登録:タイマー
    69 00000107 50                  <1>  push eax
    69 00000108 57                  <1>  push edi
    69                              <1> 
    69 00000109 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    69 0000010E B8[1E060000]        <1>  mov eax, %2
    69                              <1> 
    69                              <1>  %if 3 == %0
    69                              <1>  mov [edi + 4], %3
    69                              <1>  %endif
    69                              <1> 
    69 00000113 668907              <1>  mov [edi + 0], ax
    69 00000116 C1E810              <1>  shr eax, 16
    69 00000119 66894706            <1>  mov [edi + 6], ax
    69                              <1> 
    69 0000011D 5F                  <1>  pop edi
    69 0000011E 58                  <1>  pop eax
    70                                          set_vect        0x21, int_keyboard      ;割り込み処理の登録:KBC
    70 0000011F 50                  <1>  push eax
    70 00000120 57                  <1>  push edi
    70                              <1> 
    70 00000121 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    70 00000126 B8[A2100000]        <1>  mov eax, %2
    70                              <1> 
    70                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 4], %3
    70                              <1>  %endif
    70                              <1> 
    70 0000012B 668907              <1>  mov [edi + 0], ax
    70 0000012E C1E810              <1>  shr eax, 16
    70 00000131 66894706            <1>  mov [edi + 6], ax
    70                              <1> 
    70 00000135 5F                  <1>  pop edi
    70 00000136 58                  <1>  pop eax
    71                                          set_vect        0x28, int_rtc           ;割り込み処理の登録:RTC
    71 00000137 50                  <1>  push eax
    71 00000138 57                  <1>  push edi
    71                              <1> 
    71 00000139 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    71 0000013E B8[B80F0000]        <1>  mov eax, %2
    71                              <1> 
    71                              <1>  %if 3 == %0
    71                              <1>  mov [edi + 4], %3
    71                              <1>  %endif
    71                              <1> 
    71 00000143 668907              <1>  mov [edi + 0], ax
    71 00000146 C1E810              <1>  shr eax, 16
    71 00000149 66894706            <1>  mov [edi + 6], ax
    71                              <1> 
    71 0000014D 5F                  <1>  pop edi
    71 0000014E 58                  <1>  pop eax
    72                                          set_vect        0x81, trap_gate_81, word 0xEF00 ;トラップゲートの登録:1文字出力
    72 0000014F 50                  <1>  push eax
    72 00000150 57                  <1>  push edi
    72                              <1> 
    72 00000151 BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    72 00000156 B8[58110000]        <1>  mov eax, %2
    72                              <1> 
    72                              <1>  %if 3 == %0
    72 0000015B 66C7470400EF        <1>  mov [edi + 4], %3
    72                              <1>  %endif
    72                              <1> 
    72 00000161 668907              <1>  mov [edi + 0], ax
    72 00000164 C1E810              <1>  shr eax, 16
    72 00000167 66894706            <1>  mov [edi + 6], ax
    72                              <1> 
    72 0000016B 5F                  <1>  pop edi
    72 0000016C 58                  <1>  pop eax
    73                                          set_vect        0x82, trap_gate_82, word 0xEF00 ;トラップゲートの登録:点の描画
    73 0000016D 50                  <1>  push eax
    73 0000016E 57                  <1>  push edi
    73                              <1> 
    73 0000016F BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    73 00000174 B8[66110000]        <1>  mov eax, %2
    73                              <1> 
    73                              <1>  %if 3 == %0
    73 00000179 66C7470400EF        <1>  mov [edi + 4], %3
    73                              <1>  %endif
    73                              <1> 
    73 0000017F 668907              <1>  mov [edi + 0], ax
    73 00000182 C1E810              <1>  shr eax, 16
    73 00000185 66894706            <1>  mov [edi + 6], ax
    73                              <1> 
    73 00000189 5F                  <1>  pop edi
    73 0000018A 58                  <1>  pop eax
    74                                  
    75                                          ;---------------------------------------
    76                                          ;デバイスの割り込み許可
    77                                          ;---------------------------------------
    78 0000018B 6A10E84F0E00006683-             cdecl   rtc_int_en, 0x10                ;rtc_int_en(UIE); //更新サイクル終了割り込み許可
    78 00000194 C404               
    79 00000196 E8450F0000                      cdecl   int_en_timer0                   ;//タイマー(カウンタ0)割り込み許可
    80                                  
    81                                          ;---------------------------------------
    82                                          ;IMR(割り込みマスクレジスタ)の設定
    83                                          ;---------------------------------------
    84                                          outp    0x21, 0b_1111_1000              ;//割り込み有効:スレーブPIC/KBC/タイマー
    84 0000019B B0F8                <1>  mov al, %2
    84 0000019D E621                <1>  out %1, al
    85                                          outp    0xA1, 0b_1111_1110              ;//割り込み有効:RTC
    85 0000019F B0FE                <1>  mov al, %2
    85 000001A1 E6A1                <1>  out %1, al
    86                                  
    87                                          ;---------------------------------------
    88                                          ;CPUの割り込み許可
    89                                          ;---------------------------------------
    90 000001A3 FB                              sti                                      ;//割り込み許可
    91                                  
    92                                          ;---------------------------------------
    93                                          ;フォントの一覧表示
    94                                          ;---------------------------------------
    95 000001A4 6A0D6A3FE843080000-             cdecl   draw_font, 63, 13               ;//フォントの一覧表示
    95 000001AD 6683C408           
    96 000001B1 6A046A3FE8B7080000-             cdecl   draw_color_bar, 63, 4           ;//カラーバーの表示
    96 000001BA 6683C408           
    97                                  
    98                                          ;---------------------------------------
    99                                          ;文字列の表示
   100                                          ;---------------------------------------
   101 000001BE 68[08020000]680F01-             cdecl   draw_str, 25, 14, 0x010F, .s0   ;draw_str();
   101 000001C6 00006A0E6A19E86208-
   101 000001CF 00006683C410       
   102                                  
   103                                  .10L:                                           ;while(1)
   104                                                                                  ;{
   105                                          ;---------------------------------------
   106                                          ;タスクの呼び出し
   107                                          ;---------------------------------------
   108                                          ;call    SS_TASK_1:0                     ;       //タスク1へのジャンプ
   109                                  
   110                                          ;---------------------------------------
   111                                          ;回転する棒の表示
   112                                          ;---------------------------------------
   113 000001D5 E8150F0000                      cdecl   draw_rotation_bar               ;       //回転する棒を表示
   114                                  
   115                                          ;---------------------------------------
   116                                          ;キーコードの取得
   117                                          ;---------------------------------------
   118 000001DA 68[19020000]68-                 cdecl   ring_rd, _KEY_BUFF, .int_key    ;       EAX = ring_rd(buff, &int_key);
   118 000001E0 [C8100000]E80C0E00-
   118 000001E8 006683C408         
   119 000001ED 83F800                          cmp     eax, 0                          ;       if(EAX != 0)
   120 000001F0 7412                            je      .10E                            ;       {
   121                                  
   122                                          ;---------------------------------------
   123                                          ;キーコードの表示
   124                                          ;---------------------------------------
   125 000001F2 68[C8100000]6A1D6A-             cdecl   draw_key, 2, 29, _KEY_BUFF      ;               ring_show(key_buff); //全要素を表示
   125 000001FA 02E84E0E00006683C4-
   125 00000203 0C                 
   126                                  .10E:                                           ;       }
   127 00000204 EBCF                            jmp     .10L                            ;}
   128                                  
   129                                          ;---------------------------------------
   130                                          ;処理の終了
   131                                          ;---------------------------------------
   132 00000206 EBFE                            jmp     $                               ;while(1) //無限ループ
   133                                  
   134                                  
   135                                  
   136 00000208 2048656C6C6F2C206B-     .s0:    db      " Hello, kernel! ", 0
   136 00000211 65726E656C212000   
   137                                  
   138 00000219 00000000                .int_key:       dd      0
   139                                  
   140 0000021D 00<rept>                ALIGN   4, db   0
   141 00000220 00000000                FONT_ADR:       dd      0
   142 00000224 00000000                RTC_TIME:       dd      0
   143                                  
   144                                  ;********************************************************************************************************
   145                                  ;タスク
   146                                  ;********************************************************************************************************
   147                                  %include        "descriptor.s"
     1                              <1> ;********************************************************************************************************
     2                              <1> ;TSS
     3                              <1> ;********************************************************************************************************
     4                              <1> TSS_0:
     5 00000228 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
     6 0000022C 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                                     ;*  4:ESP0
     7 00000230 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
     8 00000234 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
     9 00000238 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    10 0000023C 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    11 00000240 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    12 00000244 00000000            <1> .cr3:           dd  0                                                   ;  28:CR3(PDBR)
    13 00000248 00000000            <1> .eip:           dd  0                                                   ;  32:EIP
    14 0000024C 00000000            <1> .eflags:        dd  0                                                   ;  36:EFLAGS
    15 00000250 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    16 00000254 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    17 00000258 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    18 0000025C 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    19 00000260 00000000            <1> .esp:           dd  0                                                   ;  56:ESP
    20 00000264 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    21 00000268 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    22 0000026C 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    23 00000270 00000000            <1> .es:            dd  0                                                   ;  72:ES
    24 00000274 00000000            <1> .cs:            dd  0                                                   ;  76:CS
    25 00000278 00000000            <1> .ss:            dd  0                                                   ;  80:SS
    26 0000027C 00000000            <1> .ds:            dd  0                                                   ;  84:DS
    27 00000280 00000000            <1> .fs:            dd  0                                                   ;  88:FS
    28 00000284 00000000            <1> .gs:            dd  0                                                   ;  92:GS
    29 00000288 00000000            <1> .ldt:           dd  0                                                   ;* 96:LDTセグメントセレクタ
    30 0000028C 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    31 00000290 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    32                              <1> 
    33                              <1> TSS_1:
    34 00000300 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    35 00000304 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                                     ;*  4:ESP0
    36 00000308 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    37 0000030C 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    38 00000310 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    39 00000314 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    40 00000318 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    41 0000031C 00000000            <1> .cr3:           dd  0                                                   ;  28:CR3(PDBR)
    42 00000320 [7C060000]          <1> .eip:           dd  task_1                                              ;  32:EIP
    43 00000324 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
    44 00000328 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    45 0000032C 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    46 00000330 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    47 00000334 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    48 00000338 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56:ESP
    49 0000033C 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    50 00000340 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    51 00000344 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    52 00000348 27000000            <1> .es:            dd  DS_TASK_1                                           ;  72:ES
    53 0000034C 1F000000            <1> .cs:            dd  CS_TASK_1                                           ;  76:CS
    54 00000350 27000000            <1> .ss:            dd  DS_TASK_1                                           ;  80:SS
    55 00000354 27000000            <1> .ds:            dd  DS_TASK_1                                           ;  84:DS
    56 00000358 27000000            <1> .fs:            dd  DS_TASK_1                                           ;  88:FS
    57 0000035C 27000000            <1> .gs:            dd  DS_TASK_1                                           ;  92:GS
    58 00000360 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
    59 00000364 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    60 00000368 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    61                              <1> 
    62                              <1> TSS_2:
    63 000003D8 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    64 000003DC 003A1000            <1> .esp0:          dd  SP_TASK_2 - 512                                     ;*  4:ESP0
    65 000003E0 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    66 000003E4 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    67 000003E8 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    68 000003EC 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    69 000003F0 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    70 000003F4 00000000            <1> .cr3:           dd  0                                                   ;  28:CR3(PDBR)
    71 000003F8 [B3060000]          <1> .eip:           dd  task_2                                              ;  32:EIP
    72 000003FC 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
    73 00000400 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    74 00000404 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    75 00000408 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    76 0000040C 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    77 00000410 003C1000            <1> .esp:           dd  SP_TASK_2                                           ;  56:ESP
    78 00000414 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    79 00000418 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    80 0000041C 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    81 00000420 37000000            <1> .es:            dd  DS_TASK_2                                           ;  72:ES
    82 00000424 2F000000            <1> .cs:            dd  CS_TASK_2                                           ;  76:CS
    83 00000428 37000000            <1> .ss:            dd  DS_TASK_2                                           ;  80:SS
    84 0000042C 37000000            <1> .ds:            dd  DS_TASK_2                                           ;  84:DS
    85 00000430 37000000            <1> .fs:            dd  DS_TASK_2                                           ;  88:FS
    86 00000434 37000000            <1> .gs:            dd  DS_TASK_2                                           ;  92:GS
    87 00000438 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
    88 0000043C 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    89 00000440 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    90                              <1> 
    91                              <1> TSS_3:
    92 000004B0 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    93 000004B4 003E1000            <1> .esp0:          dd  SP_TASK_3 - 512                                     ;*  4:ESP0
    94 000004B8 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    95 000004BC 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    96 000004C0 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    97 000004C4 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    98 000004C8 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    99 000004CC 00000000            <1> .cr3:           dd  0                                                   ;  28:CR3(PDBR)
   100 000004D0 [84070000]          <1> .eip:           dd  task_3                                              ;  32:EIP
   101 000004D4 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
   102 000004D8 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
   103 000004DC 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
   104 000004E0 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
   105 000004E4 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
   106 000004E8 00401000            <1> .esp:           dd  SP_TASK_3                                           ;  56:ESP
   107 000004EC 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
   108 000004F0 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
   109 000004F4 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
   110 000004F8 47000000            <1> .es:            dd  DS_TASK_3                                           ;  72:ES
   111 000004FC 3F000000            <1> .cs:            dd  CS_TASK_3                                           ;  76:CS
   112 00000500 47000000            <1> .ss:            dd  DS_TASK_3                                           ;  80:SS
   113 00000504 47000000            <1> .ds:            dd  DS_TASK_3                                           ;  84:DS
   114 00000508 47000000            <1> .fs:            dd  DS_TASK_3                                           ;  88:FS
   115 0000050C 47000000            <1> .gs:            dd  DS_TASK_3                                           ;  92:GS
   116 00000510 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
   117 00000514 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
   118 00000518 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
   119                              <1> 
   120                              <1> ;********************************************************************************************************
   121                              <1> ;グローバルディスクリプタテーブル
   122                              <1> ;********************************************************************************************************
   123 00000588 0000000000000000    <1> GDT:            dq  0x_0000_0000_0000_0000                              ;NULL
   124 00000590 FFFF0000009ACF00    <1> .cs_kernel:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
   125 00000598 FFFF00000092CF00    <1> .ds_kernel:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
   126 000005A0 0000000000820000    <1> .ldt:           dq  0x_0000_8200_0000_0000                              ;LDTディスクリプタ
   127 000005A8 6700000000890000    <1> .tss_0:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   128 000005B0 6700000000890000    <1> .tss_1:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   129 000005B8 6700000000890000    <1> .tss_2:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   130 000005C0 6700000000890000    <1> .tss_3:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   131 000005C8 0000080004EC0000    <1> .call_gate:     dq  0x_0000_EC04_0008_0000                              ;386コールゲート(DPL=3, count=4, SEL=8)
   132                              <1> .end:
   133                              <1> 
   134                              <1> CS_KERNEL       equ .cs_kernel  - GDT
   135                              <1> DS_KERNEL       equ .ds_kernel  - GDT
   136                              <1> SS_LDT          equ .ldt        - GDT
   137                              <1> SS_TASK_0       equ .tss_0      - GDT
   138                              <1> SS_TASK_1       equ .tss_1      - GDT
   139                              <1> SS_TASK_2       equ .tss_2      - GDT
   140                              <1> SS_TASK_3       equ .tss_3      - GDT
   141                              <1> SS_GATE_0       equ .call_gate  - GDT
   142                              <1> 
   143 000005D0 4700                <1> GDTR:           dw  GDT.end - GDT - 1
   144 000005D2 [88050000]          <1>                 dd  GDT
   145                              <1> 
   146                              <1> 
   147                              <1> ;********************************************************************************************************
   148                              <1> ;ローカルディスクリプタテーブル
   149                              <1> ;********************************************************************************************************
   150 000005D6 0000000000000000    <1> LDT:            dq  0x_0000_0000_0000_0000                              ;NULL
   151 000005DE FFFF0000009ACF00    <1> .cs_task_0:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
   152 000005E6 FFFF00000092CF00    <1> .ds_task_0:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
   153 000005EE FFFF000000FACF00    <1> .cs_task_1:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   154 000005F6 FFFF000000F2CF00    <1> .ds_task_1:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   155 000005FE FFFF000000FACF00    <1> .cs_task_2:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   156 00000606 FFFF000000F2CF00    <1> .ds_task_2:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   157 0000060E FFFF000000FACF00    <1> .cs_task_3:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   158 00000616 FFFF000000F2CF00    <1> .ds_task_3:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   159                              <1> .end:
   160                              <1> 
   161                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                              ;タスク0用CSセレクタ
   162                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                              ;タスク0用DSセレクタ
   163                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                          ;タスク1用CSセレクタ
   164                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                          ;タスク1用DSセレクタ
   165                              <1> CS_TASK_2       equ (.cs_task_2 - LDT) | 4 | 3                          ;タスク2用CSセレクタ
   166                              <1> DS_TASK_2       equ (.ds_task_2 - LDT) | 4 | 3                          ;タスク2用DSセレクタ
   167                              <1> CS_TASK_3       equ (.cs_task_3 - LDT) | 4 | 3                          ;タスク3用CSセレクタ
   168                              <1> DS_TASK_3       equ (.ds_task_3 - LDT) | 4 | 3                          ;タスク3用DSセレクタ
   169                              <1> 
   170                              <1> LDT_LIMIT       equ .end        - LDT - 1
   148                                  %include        "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 0000061E 60                  <1>         pushad
     6 0000061F 1E                  <1>         push    ds
     7 00000620 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 00000621 66B81000            <1>         mov     ax, 0x0010
    13 00000625 8ED8                <1>         mov     ds, ax
    14 00000627 8EC0                <1>         mov     es, ax
    15                              <1>         
    16                              <1>         ;---------------------------------------
    17                              <1>         ;TICK
    18                              <1>         ;---------------------------------------
    19 00000629 FF05[74060000]      <1>         inc     dword [TIMER_COUNT]             ;TIMER_COUNT++; //割り込み回数の更新
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;割り込みフラグをクリア(EOI)
    23                              <1>         ;---------------------------------------
    24                              <1>         outp 0x20, 0x20
    24 0000062F B020                <2>  mov al, %2
    24 00000631 E620                <2>  out %1, al
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;タスクの切り替え
    28                              <1>         ;---------------------------------------
    29 00000633 660F00C8            <1>         str     ax                              ;AX = TR; //現在のタスクレジスタ
    30 00000637 6683F820            <1>         cmp     ax, SS_TASK_0                   ;case(AX)
    31 0000063B 7415                <1>         je      .11L                            ;{
    32 0000063D 6683F828            <1>         cmp     ax, SS_TASK_1
    33 00000641 7418                <1>         je      .12L
    34 00000643 6683F830            <1>         cmp     ax, SS_TASK_2
    35 00000647 741B                <1>         je      .13L
    36                              <1>                                                 ;       default:
    37 00000649 EA000000002000      <1>         jmp     SS_TASK_0:0                     ;       //タスク0に切り替え
    38 00000650 EB1B                <1>         jmp     .10E                            ;       break;
    39                              <1> .11L:                                           ;       case SS_TASK_0:
    40 00000652 EA000000002800      <1>         jmp     SS_TASK_1:0                     ;       //タスク1に切り替え
    41 00000659 EB12                <1>         jmp     .10E                            ;       break;
    42                              <1> .12L:                                           ;       case SS_TASK_1:
    43 0000065B EA000000003000      <1>         jmp     SS_TASK_2:0                     ;       //タスク2に切り替え
    44 00000662 EB09                <1>         jmp     .10E                            ;       break;
    45                              <1> .13L:                                           ;       case SS_TASK_2:
    46 00000664 EA000000003800      <1>         jmp     SS_TASK_3:0                     ;       //タスク3に切り替え
    47 0000066B EB00                <1>         jmp     .10E                            ;       break;
    48                              <1> .10E:                                           ;}
    49                              <1> 
    50                              <1>         ;---------------------------------------
    51                              <1>         ;レジスタの復帰
    52                              <1>         ;---------------------------------------
    53 0000066D 07                  <1>         pop     es
    54 0000066E 1F                  <1>         pop     ds
    55 0000066F 61                  <1>         popad
    56                              <1>         
    57 00000670 CF                  <1>         iret
    58                              <1> 
    59                              <1>         ;---------------------------------------
    60                              <1>         ;データ
    61                              <1>         ;---------------------------------------
    62 00000671 00<rept>            <1> ALIGN   4, db   0
    63 00000674 0000000000000000    <1> TIMER_COUNT:    dq  0
   149                                  %include        "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;文字列の表示
     4                              <1>         ;---------------------------------------
     5 0000067C 68[AC060000]6A076A- <1>         cdecl   SS_GATE_0:0, 63, 0 , 0x07, .s0  ;draw_str();
     5 00000684 006A3F9A0000000040- <1>
     5 0000068D 006683C410          <1>
     6                              <1> 
     7                              <1> .10L:                                           ;while(1)
     8                              <1>                                                 ;{
     9                              <1> 
    10                              <1>         ;---------------------------------------
    11                              <1>         ;時刻の表示
    12                              <1>         ;---------------------------------------
    13 00000692 A1[24020000]        <1>         mov     eax, [RTC_TIME]                 ;       //時刻の取得
    14 00000697 5068000700006A006A- <1>         cdecl   draw_time, 72, 0, 0x0700, eax   ;       //時刻の表示
    14 000006A0 48E8E50600006683C4- <1>
    14 000006A9 10                  <1>
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;タスクの呼び出し
    18                              <1>         ;---------------------------------------       
    19                              <1>         ;jmp     SS_TASK_0:0                     ;       //タスク0へのジャンプ
    20                              <1> 
    21 000006AA EBE6                <1>         jmp     .10L                            ;}
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;データ
    25                              <1>         ;---------------------------------------
    26 000006AC 5461736B2D3100      <1> .s0:    db  "Task-1", 0
   150                                  %include        "tasks/task_2.s"
     1                              <1> task_2:
     2 000006B3 68[76070000]6A076A- <1>         cdecl   draw_str, 63, 1, 0x07, .s0      ;   draw_str(.s0);
     2 000006BB 016A3FE87003000066- <1>
     2 000006C4 83C410              <1>
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;FPU
     6                              <1>         ;---------------------------------------
     7                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
     8                              <1>                                     ;       ST0|        ST1|        ST2|        ST3|        ST4|        ST5|
     9                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    10 000006C7 DB05[64070000]      <1>         fild    dword [.c1000]      ;      1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    11 000006CD D9EB                <1>         fldpi                       ;        pi|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    12 000006CF DA35[68070000]      <1>         fidiv   dword [.c180]       ;    pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    13 000006D5 D9EB                <1>         fldpi                       ;        pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    14 000006D7 DCC0                <1>         fadd    st0, st0            ;      2*pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    15 000006D9 D9EE                <1>         fldz                        ;     θ = 0|       2*pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|
    16                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    17                              <1> 
    18                              <1> .10L:                                           ;while(1)
    19                              <1>                                                 ;{
    20                              <1> 
    21                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    22                              <1>                                     ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    23                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    24 000006DB D8C2                <1>         fadd    st0, ST2            ;θ =  θ + d|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    25 000006DD D9F8                <1>         fprem                       ;    MOD(θ)|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    26                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    27                              <1>                                     ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    28 000006DF D9C0                <1>         fld     st0                 ;         θ|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    29 000006E1 D9FE                <1>         fsin                        ;    sin(θ)|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    30 000006E3 D8CC                <1>         fmul    st0, st4            ;ST4*sin(θ)|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    31 000006E5 DF35[6C070000]      <1>         fbstp   [.bcd]              ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    32                              <1> 
    33                              <1>         ;---------------------------------------
    34                              <1>         ;CPU
    35                              <1>         ;---------------------------------------
    36                              <1>         ;---------------------------------------
    37                              <1>         ;数値出力
    38                              <1>         ;---------------------------------------
    39 000006EB A1[6C070000]        <1>         mov     eax, [.bcd]                     ;   EAX = 1000* sin(t);
    40 000006F0 89C3                <1>         mov     ebx, eax                        ;   EBX = EAX;
    41                              <1> 
    42 000006F2 250F0F0000          <1>         and     eax, 0x0F0F                     ;   //上位4ビットをマスク
    43 000006F7 0D30300000          <1>         or      eax, 0x3030                     ;   //上位4ビットに0x3を設定
    44                              <1> 
    45 000006FC C1EB04              <1>         shr     ebx, 4                          ;   EBX >> 4;
    46 000006FF 81E30F0F0000        <1>         and     ebx, 0x0F0F                     ;   //上位4ビットをマスク
    47 00000705 81CB30300000        <1>         or      ebx, 0x3030                     ;   //上位4ビットに0x3を設定
    48                              <1> 
    49 0000070B 883D[7E070000]      <1>         mov     [.s2 + 0], bh                   ;   //1桁目
    50 00000711 8825[80070000]      <1>         mov     [.s3 + 0], ah                   ;   //小数1桁目
    51 00000717 881D[81070000]      <1>         mov     [.s3 + 1], bl                   ;   //小数2桁目
    52 0000071D A2[82070000]        <1>         mov     [.s3 + 2], al                   ;   //小数3桁目
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;符号チェック
    56                              <1>         ;---------------------------------------
    57 00000722 B807000000          <1>         mov     eax, 7                          ;   //bt命令準備(取り出しbit番号指定)
    58 00000727 0FA305[75070000]    <1>         bt      [.bcd + 9], eax                 ;   CF = bcd[9] & 0x80;
    59 0000072E 7209                <1>         jc      .10F                            ;   if(CF)
    60                              <1>                                                 ;   {
    61 00000730 C605[7D070000]2B    <1>         mov     [.s1 + 0], byte '+'             ;       *s1 = '+';
    62 00000737 EB07                <1>         jmp     .10E                            ;   }
    63                              <1> .10F:                                           ;   else
    64                              <1>                                                 ;   {
    65 00000739 C605[7D070000]2D    <1>         mov     [.s1 + 0], byte '-'             ;       *s1 = '-';
    66                              <1> .10E:                                           ;   }
    67                              <1> 
    68 00000740 68[7D070000]6A076A- <1>         cdecl   draw_str, 72, 1, 0x07, .s1      ;   draw_str(.s1);
    68 00000748 016A48E8E302000066- <1>
    68 00000751 83C410              <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;ウェイト
    72                              <1>         ;---------------------------------------
    73 00000754 6A0AE8C50A00006683- <1>         cdecl   wait_tick, 10                   ;   wait_tick(10);
    73 0000075D C404                <1>
    74                              <1> 
    75 0000075F E977FFFFFF          <1>         jmp     .10L                            ;}
    76                              <1> 
    77                              <1>         ;---------------------------------------
    78                              <1>         ;データ
    79                              <1>         ;---------------------------------------
    80                              <1> ALIGN   4,  db  0
    81 00000764 E8030000            <1> .c1000:     dd  1000
    82 00000768 B4000000            <1> .c180:      dd  180
    83 0000076C 00<rept>            <1> .bcd:   times 10    db  0x00
    84 00000776 5461736B2D3200      <1> .s0:    db  "Task-2", 0
    85 0000077D 2D                  <1> .s1:    db  "-"
    86 0000077E 302E                <1> .s2:    db  "0."
    87 00000780 30303000            <1> .s3:    db  "000", 0
   151                                  %include        "tasks/task_3.s"
     1                              <1> task_3:
     2 00000784 68[4A080000]6A076A- <1>         cdecl   draw_str, 63, 2, 0x07, .s0      ;   draw_str(.s0);
     2 0000078C 026A3FE89F02000066- <1>
     2 00000795 83C410              <1>
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;FPU
     6                              <1>         ;---------------------------------------
     7                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
     8                              <1>                                     ;       ST0|        ST1|        ST2|        ST3|        ST4|        ST5|
     9                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    10 00000798 DB05[38080000]      <1>         fild    dword [.c1000]      ;      1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    11 0000079E D9EB                <1>         fldpi                       ;        pi|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    12 000007A0 DA35[3C080000]      <1>         fidiv   dword [.c180]       ;    pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    13 000007A6 D9EB                <1>         fldpi                       ;        pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    14 000007A8 DCC0                <1>         fadd    st0, st0            ;      2*pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    15 000007AA D9EE                <1>         fldz                        ;     θ = 0|       2*pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|
    16                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    17                              <1> 
    18                              <1> .10L:                                           ;while(1)
    19                              <1>                                                 ;{
    20                              <1> 
    21                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    22                              <1>                                     ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    23                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    24 000007AC D8C2                <1>         fadd    st0, ST2            ;θ =  θ + d|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    25 000007AE D9F8                <1>         fprem                       ;    MOD(θ)|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    26                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    27                              <1>                                     ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    28 000007B0 D9C0                <1>         fld     st0                 ;         θ|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    29 000007B2 D9FF                <1>         fcos                        ;    cos(θ)|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    30 000007B4 D8CC                <1>         fmul    st0, st4            ;ST4*cos(θ)|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    31 000007B6 DF35[40080000]      <1>         fbstp   [.bcd]              ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    32                              <1> 
    33                              <1>         ;---------------------------------------
    34                              <1>         ;CPU
    35                              <1>         ;---------------------------------------
    36                              <1>         ;---------------------------------------
    37                              <1>         ;数値出力
    38                              <1>         ;---------------------------------------
    39 000007BC A1[40080000]        <1>         mov     eax, [.bcd]                     ;   EAX = 1000* sin(t);
    40 000007C1 89C3                <1>         mov     ebx, eax                        ;   EBX = EAX;
    41                              <1> 
    42 000007C3 250F0F0000          <1>         and     eax, 0x0F0F                     ;   //上位4ビットをマスク
    43 000007C8 0D30300000          <1>         or      eax, 0x3030                     ;   //上位4ビットに0x3を設定
    44                              <1> 
    45 000007CD C1EB04              <1>         shr     ebx, 4                          ;   EBX >> 4;
    46 000007D0 81E30F0F0000        <1>         and     ebx, 0x0F0F                     ;   //上位4ビットをマスク
    47 000007D6 81CB30300000        <1>         or      ebx, 0x3030                     ;   //上位4ビットに0x3を設定
    48                              <1> 
    49 000007DC 883D[52080000]      <1>         mov     [.s2 + 0], bh                   ;   //1桁目
    50 000007E2 8825[54080000]      <1>         mov     [.s3 + 0], ah                   ;   //小数1桁目
    51 000007E8 881D[55080000]      <1>         mov     [.s3 + 1], bl                   ;   //小数2桁目
    52 000007EE A2[56080000]        <1>         mov     [.s3 + 2], al                   ;   //小数3桁目
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;符号チェック
    56                              <1>         ;---------------------------------------
    57 000007F3 B807000000          <1>         mov     eax, 7                          ;   //bt命令準備(取り出しbit番号指定)
    58 000007F8 0FA305[49080000]    <1>         bt      [.bcd + 9], eax                 ;   CF = bcd[9] & 0x80;
    59 000007FF 7209                <1>         jc      .10F                            ;   if(CF)
    60                              <1>                                                 ;   {
    61 00000801 C605[51080000]2B    <1>         mov     [.s1 + 0], byte '+'             ;       *s1 = '+';
    62 00000808 EB07                <1>         jmp     .10E                            ;   }
    63                              <1> .10F:                                           ;   else
    64                              <1>                                                 ;   {
    65 0000080A C605[51080000]2D    <1>         mov     [.s1 + 0], byte '-'             ;       *s1 = '-';
    66                              <1> .10E:                                           ;   }
    67                              <1> 
    68 00000811 68[51080000]6A076A- <1>         cdecl   draw_str, 72, 2, 0x07, .s1      ;   draw_str(.s1);
    68 00000819 026A48E81202000066- <1>
    68 00000822 83C410              <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;ウェイト
    72                              <1>         ;---------------------------------------
    73 00000825 6A0AE8F40900006683- <1>         cdecl   wait_tick, 10                   ;   wait_tick(10);
    73 0000082E C404                <1>
    74                              <1> 
    75 00000830 E977FFFFFF          <1>         jmp     .10L                            ;}
    76                              <1> 
    77                              <1>         ;---------------------------------------
    78                              <1>         ;データ
    79                              <1>         ;---------------------------------------
    80 00000835 00<rept>            <1> ALIGN   4,  db  0
    81 00000838 E8030000            <1> .c1000:     dd  1000
    82 0000083C B4000000            <1> .c180:      dd  180
    83 00000840 00<rept>            <1> .bcd:   times 10    db  0x00
    84 0000084A 5461736B2D3300      <1> .s0:    db  "Task-3", 0
    85 00000851 2D                  <1> .s1:    db  "-"
    86 00000852 302E                <1> .s2:    db  "0."
    87 00000854 30303000            <1> .s3:    db  "000", 0
   152                                  
   153                                  ;********************************************************************************************************
   154                                  ;モジュール
   155                                  ;********************************************************************************************************
   156                                  %include        "..\modules\protect\vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 読み込みプレーン(0~3)
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000858 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000859 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 0000085B 6650                <1>         push    ax
    14 0000085D 6652                <1>         push    dx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;読み込みプレーンの選択
    18                              <1>         ;---------------------------------------
    19 0000085F 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    20 00000862 80E403              <1>         and     ah, 0x03                        ;AH &= 0x03; //余計なビットをマスク
    21 00000865 B004                <1>         mov     al, 0x04                        ;AL = 読み込みマップ選択レジスタ
    22 00000867 66BACE03            <1>         mov     dx, 0x03CE                      ;DX = グラフィックス制御ポート
    23 0000086B 66EF                <1>         out     dx, ax                          ;//ポート出力
    24                              <1>         
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 0000086D 665A                <1>         pop     dx
    29 0000086F 6658                <1>         pop     ax
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;スタックフレームの破棄
    33                              <1>         ;---------------------------------------
    34 00000871 89EC                <1>         mov     esp, ebp
    35 00000873 5D                  <1>         pop     ebp
    36                              <1> 
    37 00000874 C3                  <1>         ret
    38                              <1> 
    39                              <1> vga_set_write_plane:
    40                              <1>         ;-----------------------------------
    41                              <1>         ;スタックフレームの構築
    42                              <1>         ;-----------------------------------
    43                              <1>                                             ;   + 8| 書き込みプレーン
    44                              <1>                                             ;   + 4| IP(戻り番号)
    45 00000875 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    46 00000876 89E5                <1>         mov    ebp, esp                     ;------|---------
    47                              <1> 
    48                              <1>         ;-----------------------------------
    49                              <1>         ;レジスタの保存
    50                              <1>         ;-----------------------------------
    51 00000878 6650                <1>         push    ax
    52 0000087A 6652                <1>         push    dx
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;読み込みプレーンの選択
    56                              <1>         ;---------------------------------------
    57 0000087C 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    58 0000087F 80E40F              <1>         and     ah, 0x0F                        ;AH &= 0x03; //余計なビットをマスク
    59 00000882 B002                <1>         mov     al, 0x02                        ;AL = 読み込みマップ選択レジスタ
    60 00000884 66BAC403            <1>         mov     dx, 0x03C4                      ;DX = グラフィックス制御ポート
    61 00000888 66EF                <1>         out     dx, ax                          ;//ポート出力
    62                              <1>         
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 0000088A 665A                <1>         pop     dx
    67 0000088C 6658                <1>         pop     ax
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;スタックフレームの破棄
    71                              <1>         ;---------------------------------------
    72 0000088E 89EC                <1>         mov     esp, ebp
    73 00000890 5D                  <1>         pop     ebp
    74                              <1> 
    75 00000891 C3                  <1>         ret
    76                              <1> 
    77                              <1> vram_font_copy:
    78                              <1>         ;-----------------------------------
    79                              <1>         ;スタックフレームの構築
    80                              <1>         ;-----------------------------------
    81                              <1>                                             ;EBP+20| 描画色
    82                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
    83                              <1>                                             ;EBP+12| VRAMアドレス
    84                              <1>                                             ;   + 8| FONTアドレス
    85                              <1>                                             ;   + 4| IP(戻り番号)
    86 00000892 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    87 00000893 89E5                <1>         mov    ebp, esp                     ;------|---------
    88                              <1> 
    89                              <1>         ;-----------------------------------
    90                              <1>         ;レジスタの保存
    91                              <1>         ;-----------------------------------
    92 00000895 50                  <1>         push    eax
    93 00000896 53                  <1>         push    ebx
    94 00000897 51                  <1>         push    ecx
    95 00000898 57                  <1>         push    edi
    96 00000899 52                  <1>         push    edx
    97 0000089A 56                  <1>         push    esi
    98                              <1> 
    99                              <1>         ;---------------------------------------
   100                              <1>         ;引数を変数に代入
   101                              <1>         ;---------------------------------------
   102 0000089B 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = フォントアドレス;
   103 0000089E 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   104 000008A1 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   105 000008A5 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   106                              <1> 
   107                              <1>         ;---------------------------------------
   108                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   109                              <1>         ;---------------------------------------
   110 000008A9 84C7                <1>         test    bh, al                          ;ZF = (背景色 & プレーン)
   111 000008AB 0F94C6              <1>         setz    dh                              ;if(ZF == 1){ DH = 0x00; }else{ DH = 0x01;}
   112 000008AE FECE                <1>         dec     dh                              ;DH--; // 0xFF or 0x00
   113                              <1> 
   114 000008B0 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   115 000008B2 0F94C2              <1>         setz    dl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   116 000008B5 FECA                <1>         dec     dl                              ;DL--; //0xFF or 0x00
   117                              <1> 
   118                              <1>         ;---------------------------------------
   119                              <1>         ;16ビットフォントのコピー
   120                              <1>         ;---------------------------------------
   121 000008B7 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
   122                              <1> 
   123 000008B8 B910000000          <1>         mov     ecx, 16                         ;ECX = 16; //16ドット
   124                              <1> .10L:                                           ;do
   125                              <1>                                                 ;{
   126                              <1>         ;---------------------------------------
   127                              <1>         ;フォントマスクの作成
   128                              <1>         ;---------------------------------------
   129 000008BD AC                  <1>         lodsb                                   ;   AL = *ESI++; //フォント
   130 000008BE 88C4                <1>         mov     ah, al                          ;   AH = AL;
   131 000008C0 F6D4                <1>         not     ah                              ;   AH ~= AH; //!フォント(ビット反転)
   132                              <1> 
   133                              <1>         ;---------------------------------------
   134                              <1>         ;前景色
   135                              <1>         ;---------------------------------------
   136 000008C2 20D0                <1>         and     al, dl                          ;   AL = 前景色 & フォント;
   137                              <1> 
   138                              <1>         ;---------------------------------------
   139                              <1>         ;背景色
   140                              <1>         ;---------------------------------------
   141 000008C4 F7C310000000        <1>         test    ebx, 0x0010                     ;if(透過モード)
   142 000008CA 7404                <1>         jz      .11F                            ;{
   143 000008CC 2227                <1>         and     ah, [edi]                       ;   AH = !フォント & [EDI] //現在値
   144 000008CE EB02                <1>         jmp     .11E                            ;}
   145                              <1> .11F:                                           ;else
   146                              <1>                                                 ;{
   147 000008D0 20F4                <1>         and     ah, dh                          ;   AH = !フォント & 背景色
   148                              <1> .11E:                                           ;}
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;前景色と背景色を合成
   152                              <1>         ;---------------------------------------
   153 000008D2 08E0                <1>         or  al, ah                              ;   AL = 背景 | 前景;
   154                              <1> 
   155                              <1>         ;---------------------------------------
   156                              <1>         ;新しい値を出力（VRAMに代入)
   157                              <1>         ;---------------------------------------
   158 000008D4 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //プレーンに書き込む
   159                              <1> 
   160 000008D6 83C750              <1>         add     edi, 80                         ;   EDI += 80;
   161 000008D9 E2E2                <1>         loop    .10L                            ;}while(--ECX);
   162                              <1> .10E:
   163                              <1>         ;---------------------------------------
   164                              <1>         ;レジスタの復帰
   165                              <1>         ;---------------------------------------
   166 000008DB 5E                  <1>         pop     esi
   167 000008DC 5A                  <1>         pop     edx
   168 000008DD 5F                  <1>         pop     edi
   169 000008DE 59                  <1>         pop     ecx
   170 000008DF 5B                  <1>         pop     ebx
   171 000008E0 58                  <1>         pop     eax
   172                              <1> 
   173                              <1>         ;---------------------------------------
   174                              <1>         ;スタックフレームの破棄
   175                              <1>         ;---------------------------------------
   176 000008E1 89EC                <1>         mov     esp, ebp
   177 000008E3 5D                  <1>         pop     ebp
   178                              <1> 
   179 000008E4 C3                  <1>         ret
   180                              <1> 
   181                              <1> vram_bit_copy:
   182                              <1>         ;-----------------------------------
   183                              <1>         ;スタックフレームの構築
   184                              <1>         ;-----------------------------------
   185                              <1>                                             ;EBP+20| 描画色
   186                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
   187                              <1>                                             ;EBP+12| VRAMアドレス
   188                              <1>                                             ;   + 8| 出力ビットパターン
   189                              <1>                                             ;   + 4| IP(戻り番号)
   190 000008E5 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
   191 000008E6 89E5                <1>         mov    ebp, esp                     ;------|---------
   192                              <1> 
   193                              <1>         ;-----------------------------------
   194                              <1>         ;レジスタの保存
   195                              <1>         ;-----------------------------------
   196 000008E8 50                  <1>         push    eax
   197 000008E9 53                  <1>         push    ebx
   198 000008EA 57                  <1>         push    edi
   199                              <1> 
   200                              <1>         ;---------------------------------------
   201                              <1>         ;引数を変数に代入
   202                              <1>         ;---------------------------------------
   203 000008EB 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   204 000008EE 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   205 000008F2 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   206                              <1> 
   207                              <1>         ;---------------------------------------
   208                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   209                              <1>         ;---------------------------------------
   210 000008F6 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   211 000008F8 0F94C3              <1>         setz    bl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   212 000008FB FECB                <1>         dec     bl                              ;DL--; //0xFF or 0x00
   213                              <1> 
   214                              <1>         ;---------------------------------------
   215                              <1>         ;背景のマスクを作成
   216                              <1>         ;---------------------------------------
   217 000008FD 8A4508              <1>         mov     al, [ebp + 8]                   ;AL = 出力ビットパターン;
   218 00000900 88C4                <1>         mov     ah, al                          ;AH ~= AL; //!出力ビットパターン(ビット反転)
   219 00000902 F6D4                <1>         not     ah
   220                              <1> 
   221                              <1>         ;---------------------------------------
   222                              <1>         ;背景色
   223                              <1>         ;---------------------------------------
   224 00000904 2227                <1>         and     ah, [edi]                       ;AH = 現在値 & !出力ビットパターン
   225 00000906 20D8                <1>         and     al, bl                          ;AL = 表示色 & 出力ビットパターン
   226 00000908 08E0                <1>         or      al, ah                          ;AL |= AH;
   227 0000090A 8807                <1>         mov     [edi], al                       ;[EDI] = BL; //プレーンに書き込む
   228                              <1> 
   229                              <1>         ;---------------------------------------
   230                              <1>         ;レジスタの復帰
   231                              <1>         ;---------------------------------------
   232 0000090C 5F                  <1>         pop     edi
   233 0000090D 5B                  <1>         pop     ebx
   234 0000090E 58                  <1>         pop     eax
   235                              <1> 
   236                              <1>         ;---------------------------------------
   237                              <1>         ;スタックフレームの破棄
   238                              <1>         ;---------------------------------------
   239 0000090F 89EC                <1>         mov     esp, ebp
   240 00000911 5D                  <1>         pop     ebp
   241                              <1> 
   242 00000912 C3                  <1>         ret
   157                                  %include        "..\modules\protect\draw_char.s"
     1                              <1> draw_char:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +20| 文字
     6                              <1>                                             ;   +16| 描画色
     7                              <1>                                             ;   +12| 行(0~29)
     8                              <1>                                             ;   + 8| 列(0~79)
     9                              <1>                                             ;   + 4| IP(戻り番号)
    10 00000913 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    11 00000914 89E5                <1>         mov    ebp, esp                     ;------|---------
    12                              <1> 
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000916 53                  <1>         push    ebx
    17 00000917 57                  <1>         push    edi
    18 00000918 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 00000919 0FB67514            <1>         movzx   esi, byte [ebp +20]             ;CL = 文字コード;
    24 0000091D C1E604              <1>         shl     esi, 4                          ;CL *= 16; //1文字16バイト
    25 00000920 0335[20020000]      <1>         add     esi, [FONT_ADR]                 ;ESI = フォントアドレス;
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;コピー先アドレスを取得
    29                              <1>         ;adr = 0xA0000 + (640 / 8 * 16) * y + x
    30                              <1>         ;---------------------------------------
    31 00000926 8B7D0C              <1>         mov     edi, [ebp +12]                  ;Y(行)
    32 00000929 C1E708              <1>         shl     edi, 8                          ;EDI = Y * 256;
    33 0000092C 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]  ;EDI = Y * 4 + Y;
    34 00000933 037D08              <1>         add     edi, [ebp + 8]                  ;X(列)
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;同期処理(リソース解法待ち(ビジーウェイト))
    38                              <1>         ;---------------------------------------
    39                              <1> %ifdef  USE_TEST_AND_SET
    40 00000936 68[EC090000]E83308- <1>         cdecl   test_and_set, IN_USE            ;//リソースの空き待ち
    40 0000093E 00006683C404        <1>
    41                              <1> %endif
    42                              <1> 
    43                              <1>         ;---------------------------------------
    44                              <1>         ;1文字文のフォントを出力
    45                              <1>         ;---------------------------------------
    46 00000944 0FB75D10            <1>         movzx   ebx, word [ebp +16]             ; //表示色
    47                              <1> 
    48 00000948 6A03E809FFFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;//読み込みプレーン:輝度(I)
    48 00000951 C404                <1>
    49 00000953 6A08E81BFFFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;//書き込みプレーン:輝度(I)
    49 0000095C C404                <1>
    50 0000095E 536A085756E82AFFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x08, ebx
    50 00000967 FF6683C410          <1>
    51                              <1>         
    52 0000096C 6A02E8E5FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;//読み込みプレーン:赤(R)
    52 00000975 C404                <1>
    53 00000977 6A04E8F7FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;//書き込みプレーン:赤(R)
    53 00000980 C404                <1>
    54 00000982 536A045756E806FFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x04, ebx
    54 0000098B FF6683C410          <1>
    55                              <1> 
    56 00000990 6A01E8C1FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;//読み込みプレーン:緑(G)
    56 00000999 C404                <1>
    57 0000099B 6A02E8D3FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;//書き込みプレーン:緑(G)
    57 000009A4 C404                <1>
    58 000009A6 536A025756E8E2FEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x02, ebx
    58 000009AF FF6683C410          <1>
    59                              <1> 
    60 000009B4 6A00E89DFEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;//読み込みプレーン:青(B)
    60 000009BD C404                <1>
    61 000009BF 6A01E8AFFEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;//書き込みプレーン:青(B)
    61 000009C8 C404                <1>
    62 000009CA 536A015756E8BEFEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x01, ebx
    62 000009D3 FF6683C410          <1>
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;同期処理(リソース解法)
    66                              <1>         ;---------------------------------------
    67                              <1> %ifdef  USE_TEST_AND_SET
    68 000009D8 C705[EC090000]0000- <1>         mov     [IN_USE], dword 0               ;変数のクリア
    68 000009E0 0000                <1>
    69                              <1> %endif
    70                              <1> 
    71                              <1>         ;---------------------------------------
    72                              <1>         ;レジスタの復帰
    73                              <1>         ;---------------------------------------
    74 000009E2 5E                  <1>         pop     esi
    75 000009E3 5F                  <1>         pop     edi
    76 000009E4 5B                  <1>         pop     ebx
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 000009E5 89EC                <1>         mov     esp, ebp
    82 000009E7 5D                  <1>         pop     ebp
    83                              <1> 
    84 000009E8 C3                  <1>         ret
    85                              <1> 
    86                              <1>         ;---------------------------------------
    87                              <1>         ;データ
    88                              <1>         ;---------------------------------------
    89 000009E9 00<rept>            <1> ALIGN   4,      db      0
    90 000009EC 00000000            <1> IN_USE:         dd      0
   158                                  %include        "..\modules\protect\draw_font.s"
     1                              <1> draw_font:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 000009F0 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 000009F1 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 000009F3 50                  <1>         push    eax
    15 000009F4 53                  <1>         push    ebx
    16 000009F5 51                  <1>         push    ecx
    17 000009F6 57                  <1>         push    edi
    18 000009F7 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 000009F8 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 000009FB 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;コピー先アドレスを取得
    28                              <1>         ;---------------------------------------
    29 000009FE B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 00000A03 81F900010000        <1> .10L:   cmp     ecx, 256                        ;    ECX < 256;
    31 00000A09 731F                <1>         jae     .10E                            ;
    32                              <1>                                                 ;    ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示する桁位置を計算
    36                              <1>         ;---------------------------------------
    37 00000A0B 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 00000A0D 83E00F              <1>         and     eax, 0x0F                       ;   EAX &= 0x0F;
    39 00000A10 01F0                <1>         add     eax, esi                        ;   EAX += X;
    40                              <1>         ;---------------------------------------
    41                              <1>         ;表示する行位置を計算
    42                              <1>         ;---------------------------------------
    43 00000A12 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    44 00000A14 C1EB04              <1>         shr     ebx, 4                          ;   EBX /= 16;
    45 00000A17 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    46                              <1>         
    47 00000A19 516A075350E8F0FEFF- <1>         cdecl   draw_char, eax, ebx, 0x07, ecx  ;   draw_char();
    47 00000A22 FF6683C410          <1>
    48                              <1> 
    49 00000A27 41                  <1>         inc     ecx                             ;   //for(... ECX++)
    50 00000A28 EBD9                <1>         jmp     .10L                            ;
    51                              <1> .10E:                                           ;}
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;レジスタの復帰
    55                              <1>         ;---------------------------------------
    56 00000A2A 5E                  <1>         pop     esi
    57 00000A2B 5F                  <1>         pop     edi
    58 00000A2C 59                  <1>         pop     ecx
    59 00000A2D 5B                  <1>         pop     ebx
    60 00000A2E 58                  <1>         pop     eax
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;スタックフレームの破棄
    64                              <1>         ;---------------------------------------
    65 00000A2F 89EC                <1>         mov     esp, ebp
    66 00000A31 5D                  <1>         pop     ebp
    67                              <1> 
    68 00000A32 C3                  <1>         ret
   159                                  %include        "..\modules\protect\draw_str.s"
     1                              <1> draw_str:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000A33 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000A34 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000A36 50                  <1>         push    eax
    15 00000A37 53                  <1>         push    ebx
    16 00000A38 51                  <1>         push    ecx
    17 00000A39 52                  <1>         push    edx
    18 00000A3A 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 00000A3B 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = 列;
    24 00000A3E 8B550C              <1>         mov     edx, [ebp +12]                  ;EDX = 行;
    25 00000A41 0FB75D10            <1>         movzx   ebx, word [ebp + 16]            ;EBX = 表示色;
    26 00000A45 8B7514              <1>         mov     esi, [ebp +20]                  ;ESI = 文字列へのアドレス;
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字列を表示
    30                              <1>         ;---------------------------------------
    31 00000A48 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
    32                              <1> .10L:                                           ;do
    33                              <1>                                                 ;{
    34 00000A49 AC                  <1>         lodsb                                   ;   AL = *ESI++;
    35 00000A4A 3C00                <1>         cmp     al, 0                           ;   if(0 == AL)
    36 00000A4C 741A                <1>         je  .10E                                ;       break;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;システムコールを利用して文字を出力する
    40                              <1>         ;---------------------------------------
    41                              <1> %ifdef  USE_SYSTEM_CALL
    42 00000A4E CD81                <1>         int     0x81                            ;       sys_call(1, X, Y, 色, 文字);
    43                              <1> %else
    44                              <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;       draw_char();
    45                              <1> %endif
    46                              <1> 
    47                              <1>         ;---------------------------------------
    48                              <1>         ;文字の表示位置を更新
    49                              <1>         ;---------------------------------------
    50 00000A50 41                  <1>         inc     ecx                             ;   ECX++; //列を加算
    51 00000A51 83F950              <1>         cmp     ecx, 80                         ;   if(80 <= ECX) //80文字以上?
    52 00000A54 7C10                <1>         jl      .12E                            ;   {
    53 00000A56 B900000000          <1>         mov     ecx, 0                          ;       ECX = 0; //列を初期化
    54 00000A5B 42                  <1>         inc     edx                             ;       EDX++; //行を加算
    55 00000A5C 83FA1E              <1>         cmp     edx, 30                         ;       if(30 <= EDX) //30行以上?
    56 00000A5F 7C05                <1>         jl      .12E                            ;       {
    57 00000A61 BA00000000          <1>         mov     edx, 0                          ;           EDX = 0;
    58                              <1>                                                 ;       }
    59                              <1> .12E:                                           ;   }
    60 00000A66 EBE1                <1>         jmp     .10L                            ;
    61                              <1> .10E:                                           ;}while(1);
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 00000A68 5E                  <1>         pop     esi
    67 00000A69 5A                  <1>         pop     edx
    68 00000A6A 59                  <1>         pop     ecx
    69 00000A6B 5B                  <1>         pop     ebx
    70 00000A6C 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 00000A6D 89EC                <1>         mov     esp, ebp
    76 00000A6F 5D                  <1>         pop     ebp
    77                              <1> 
    78 00000A70 C3                  <1>         ret
   160                                  %include        "..\modules\protect\draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000A71 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000A72 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000A74 50                  <1>         push    eax
    15 00000A75 53                  <1>         push    ebx
    16 00000A76 51                  <1>         push    ecx
    17 00000A77 52                  <1>         push    edx
    18 00000A78 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 00000A79 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 00000A7C 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;カラーバーを表示
    28                              <1>         ;---------------------------------------
    29 00000A7F B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 00000A84 83F910              <1> .10L:   cmp     ecx, 16                         ;    ECX < 16;
    31 00000A87 732E                <1>         jae     .10E
    32                              <1>                                                 ;ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示位置を計算(列)
    36                              <1>         ;---------------------------------------
    37 00000A89 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 00000A8B 83E001              <1>         and     eax, 0x01                       ;   EAX &= 0x01;
    39 00000A8E C1E003              <1>         shl     eax, 3                          ;   EAX *= 8; //8文字分乗算
    40 00000A91 01F0                <1>         add     eax, esi                        ;   EAX += X;
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;表示位置を計算(行)
    44                              <1>         ;---------------------------------------
    45 00000A93 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    46 00000A95 D1EB                <1>         shr     ebx, 1                          ;   EBX /= 2;
    47 00000A97 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    48                              <1> 
    49                              <1>         ;---------------------------------------
    50                              <1>         ;描画色を計算
    51                              <1>         ;---------------------------------------
    52 00000A99 89CA                <1>         mov     edx, ecx                        ;   EDX = ECX;
    53 00000A9B D1E2                <1>         shl     edx, 1                          ;   EDX *= 2;
    54 00000A9D 8B92[C90A0000]      <1>         mov     edx, [.t0 + edx]                ;   EDX += Y;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;カラーバーを表示
    58                              <1>         ;---------------------------------------
    59 00000AA3 68[C00A0000]525350- <1>         cdecl   draw_str, eax, ebx, edx, .s0    ;   draw_str();
    59 00000AAB E883FFFFFF6683C410  <1>
    60                              <1> 
    61 00000AB4 41                  <1>         inc     ecx                             ;   //for(...ECX++
    62 00000AB5 EBCD                <1>         jmp     .10L                            ;
    63                              <1> .10E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;レジスタの復帰
    67                              <1>         ;---------------------------------------
    68 00000AB7 5E                  <1>         pop     esi
    69 00000AB8 5A                  <1>         pop     edx
    70 00000AB9 59                  <1>         pop     ecx
    71 00000ABA 5B                  <1>         pop     ebx
    72 00000ABB 58                  <1>         pop     eax
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;スタックフレームの破棄
    76                              <1>         ;---------------------------------------
    77 00000ABC 89EC                <1>         mov     esp, ebp
    78 00000ABE 5D                  <1>         pop     ebp
    79                              <1> 
    80 00000ABF C3                  <1>         ret
    81                              <1> 
    82                              <1>         ;---------------------------------------
    83                              <1>         ;データ
    84                              <1>         ;---------------------------------------
    85 00000AC0 202020202020202000  <1> .s0:    db  '        ', 0                       ;8文字分のスペース(表示色だけを変更)
    86                              <1> 
    87 00000AC9 00000008            <1> .t0:    dw  0x0000, 0x0800                      ;カラーバーの背景色
    88 00000ACD 00010009            <1>         dw  0x0100, 0x0900
    89 00000AD1 0002000A            <1>         dw  0x0200, 0x0A00
    90 00000AD5 0003000B            <1>         dw  0x0300, 0x0B00
    91 00000AD9 0004000C            <1>         dw  0x0400, 0x0C00
    92 00000ADD 0005000D            <1>         dw  0x0500, 0x0D00
    93 00000AE1 0006000E            <1>         dw  0x0600, 0x0E00
    94 00000AE5 0007000F            <1>         dw  0x0700, 0x0F00
   161                                  %include        "..\modules\protect\draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +16| 色
     6                              <1>                                             ;   +12| Y(行)
     7                              <1>                                             ;   + 8| X(列)
     8                              <1>                                             ;   + 4| IP(戻り番号)
     9 00000AE9 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    10 00000AEA 89E5                <1>         mov    ebp, esp                     ;------|---------
    11                              <1> 
    12                              <1>         ;-----------------------------------
    13                              <1>         ;レジスタの保存
    14                              <1>         ;-----------------------------------
    15 00000AEC 50                  <1>         push    eax
    16 00000AED 53                  <1>         push    ebx
    17 00000AEE 51                  <1>         push    ecx
    18 00000AEF 57                  <1>         push    edi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;描画位置のメモリアドレスを計算
    22                              <1>         ;---------------------------------------
    23                              <1>         ;---------------------------------------
    24                              <1>         ;Y座標を80倍する(640/8)
    25                              <1>         ;---------------------------------------
    26 00000AF0 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y座標;
    27 00000AF3 C1E704              <1>         shl     edi, 4                          ;EDI *= 16;
    28 00000AF6 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000] ;EDI = 0xA_0000[EDI * 4 + EDI];
    29                              <1>         
    30                              <1>         ;---------------------------------------
    31                              <1>         ;X座標を1/8して加算
    32                              <1>         ;---------------------------------------
    33 00000AFD 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;EBX = X座標;
    34 00000B00 89D9                <1>         mov     ecx, ebx                        ;ECX = X座標; //一時保存
    35 00000B02 C1EB03              <1>         shr     ebx, 3                          ;EBX /= 8;
    36 00000B05 01DF                <1>         add     edi, ebx                        ;EDI += EBX;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;X座標を8で割った余りからビット位置を計算(出力ビットパターン)
    40                              <1>         ;(0=0x80, 1=0x40,... 7=0x01)
    41                              <1>         ;---------------------------------------
    42 00000B07 83E107              <1>         and     ecx, 0x07                       ;ECX = X & 0x07;
    43 00000B0A BB80000000          <1>         mov     ebx, 0x80                       ;EBX = 0x80;
    44 00000B0F D3EB                <1>         shr     ebx, cl                         ;EBX >>= ECX;
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;色を指定
    48                              <1>         ;---------------------------------------
    49 00000B11 8B4D10              <1>         mov     ecx, [ebp +16]                  ;表示色
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;プレーンごとに出力
    53                              <1>         ;---------------------------------------
    54 00000B14 6A03E83DFDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;輝度(I)プレーンを選択
    54 00000B1D C404                <1>
    55 00000B1F 6A08E84FFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;輝度(I)プレーンを選択
    55 00000B28 C404                <1>
    56 00000B2A 516A085753E8B1FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    56 00000B33 FF6683C410          <1>
    57                              <1> 
    58 00000B38 6A02E819FDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;赤(R)プレーンを選択
    58 00000B41 C404                <1>
    59 00000B43 6A04E82BFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;赤(R)プレーンを選択
    59 00000B4C C404                <1>
    60 00000B4E 516A045753E88DFDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    60 00000B57 FF6683C410          <1>
    61                              <1> 
    62 00000B5C 6A01E8F5FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;緑(G)プレーンを選択
    62 00000B65 C404                <1>
    63 00000B67 6A02E807FDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;緑(G)プレーンを選択
    63 00000B70 C404                <1>
    64 00000B72 516A025753E869FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    64 00000B7B FF6683C410          <1>
    65                              <1> 
    66 00000B80 6A00E8D1FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;青(B)プレーンを選択
    66 00000B89 C404                <1>
    67 00000B8B 6A01E8E3FCFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;青(B)プレーンを選択
    67 00000B94 C404                <1>
    68 00000B96 516A015753E845FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    68 00000B9F FF6683C410          <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;レジスタの復帰
    72                              <1>         ;---------------------------------------
    73 00000BA4 5F                  <1>         pop     edi
    74 00000BA5 59                  <1>         pop     ecx
    75 00000BA6 5B                  <1>         pop     ebx
    76 00000BA7 58                  <1>         pop     eax
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 00000BA8 89EC                <1>         mov     esp, ebp
    82 00000BAA 5D                  <1>         pop     ebp
    83                              <1> 
    84 00000BAB C3                  <1>         ret
   162                                  %include        "..\modules\protect\draw_line.s"
     1                              <1> draw_line:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000BAC 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000BAD 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;変数を定義
    16                              <1>         ;-----------------------------------
    17 00000BAF 6A00                <1>         push    dword 0                     ;   - 4| sum = 0; //相対軸の積算値
    18 00000BB1 6A00                <1>         push    dword 0                     ;   - 8| x0 = 0; //X座標
    19 00000BB3 6A00                <1>         push    dword 0                     ;   -12| dx = 0; //X増分
    20 00000BB5 6A00                <1>         push    dword 0                     ;   -16| inc_x = 0; //X座標増分(基準軸:1 or -1)
    21 00000BB7 6A00                <1>         push    dword 0                     ;   -20| y0 = 0; //Y座標
    22 00000BB9 6A00                <1>         push    dword 0                     ;   -24| dy = 0; //Y増分
    23 00000BBB 6A00                <1>         push    dword 0                     ;   -28| inc_y = 0; //Y座標増分(基準軸:1 or -1)
    24                              <1> 
    25                              <1>         ;-----------------------------------
    26                              <1>         ;レジスタの保存
    27                              <1>         ;-----------------------------------
    28 00000BBD 50                  <1>         push    eax
    29 00000BBE 53                  <1>         push    ebx
    30 00000BBF 51                  <1>         push    ecx
    31 00000BC0 57                  <1>         push    edi
    32 00000BC1 52                  <1>         push    edx
    33 00000BC2 56                  <1>         push    esi
    34                              <1> 
    35                              <1>         ;---------------------------------------
    36                              <1>         ;幅を計算(X軸)
    37                              <1>         ;---------------------------------------
    38 00000BC3 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    39 00000BC6 8B5D10              <1>         mov     ebx, [ebp +16]                  ;EBX = X1;
    40 00000BC9 29C3                <1>         sub     ebx, eax                        ;EBX = X1 - X0; //幅
    41 00000BCB 7D09                <1>         jge     .10F                            ;if(幅 < 0)
    42                              <1>                                                 ;{
    43 00000BCD F7DB                <1>         neg     ebx                             ;   幅 *= -1;
    44 00000BCF BEFFFFFFFF          <1>         mov     esi, -1                         ;   //X座標の増分
    45 00000BD4 EB05                <1>         jmp     .10E                            ;}
    46                              <1> .10F:                                           ;else
    47                              <1>                                                 ;{
    48 00000BD6 BE01000000          <1>         mov     esi, 1                          ;   //X座標の増分
    49                              <1> .10E:                                           ;}
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;高さを計算(Y軸)
    53                              <1>         ;---------------------------------------
    54 00000BDB 8B4D0C              <1>         mov     ecx, [ebp +12]                  ;ECX = Y0;
    55 00000BDE 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    56 00000BE1 29CA                <1>         sub     edx, ecx                        ;EDX = Y1 - Y0; //高さ
    57 00000BE3 7D09                <1>         jge     .20F                            ;if(高さ < 0)
    58                              <1>                                                 ;{
    59 00000BE5 F7DA                <1>         neg     edx                             ;   高さ *= -1;
    60 00000BE7 BFFFFFFFFF          <1>         mov     edi, -1                         ;   //Y座標の増分
    61 00000BEC EB05                <1>         jmp     .20E                            ;}
    62                              <1> .20F:                                           ;else
    63                              <1>                                                 ;{
    64 00000BEE BF01000000          <1>         mov     edi, 1                          ;   //Y座標の増分
    65                              <1> .20E:                                           ;}
    66                              <1>         
    67                              <1>         ;---------------------------------------
    68                              <1>         ;X軸
    69                              <1>         ;---------------------------------------
    70 00000BF3 8945F8              <1>         mov     [ebp - 8], eax                  ;//X軸:開始座標
    71 00000BF6 895DF4              <1>         mov     [ebp -12], ebx                  ;//X軸:描画幅
    72 00000BF9 8975F0              <1>         mov     [ebp -16], esi                  ;//X軸:増分(基準軸:1 or -1)
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;Y軸
    76                              <1>         ;---------------------------------------
    77 00000BFC 894DEC              <1>         mov     [ebp -20], ecx                  ;//Y軸:開始座標
    78 00000BFF 8955E8              <1>         mov     [ebp -24], edx                  ;//Y軸:描画幅
    79 00000C02 897DE4              <1>         mov     [ebp -28], edi                  ;//Y軸:増分(基準軸:1 or -1)
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;基準軸を決める
    83                              <1>         ;---------------------------------------
    84 00000C05 39D3                <1>         cmp     ebx, edx                        ;if(幅 <= 高さ)
    85 00000C07 7F08                <1>         jg      .22F                            ;{
    86                              <1>         
    87 00000C09 8D75EC              <1>         lea     esi, [ebp -20]                  ;   //X軸が基準軸
    88 00000C0C 8D7DF8              <1>         lea     edi, [ebp - 8]                  ;   //Y軸が相対軸
    89                              <1> 
    90 00000C0F EB06                <1>         jmp     .22E                            ;}
    91                              <1> .22F:                                           ;else
    92                              <1>                                                 ;{
    93 00000C11 8D75F8              <1>         lea     esi, [ebp - 8]                  ;   //Y軸が基準軸
    94 00000C14 8D7DEC              <1>         lea     edi, [ebp -20]                  ;   //X軸が相対軸
    95                              <1> .22E:                                           ;}
    96                              <1> 
    97                              <1>         ;---------------------------------------
    98                              <1>         ;繰り返し回数(基準軸のドット数)(基準軸の長さが0な場合,繰り返し回数を1に設定し,1ピクセルの点を描画)
    99                              <1>         ;---------------------------------------
   100 00000C17 8B4EFC              <1>         mov     ecx, [esi - 4]                  ;ECX = 基準軸描画幅
   101 00000C1A 83F900              <1>         cmp     ecx, 0                          ;if(0 == ECX)
   102 00000C1D 7505                <1>         jnz     .30E                            ;{
   103 00000C1F B901000000          <1>         mov     ecx, 1                          ;   ECX = 1;
   104                              <1> .30E:                                           ;}
   105                              <1> 
   106                              <1>         ;---------------------------------------
   107                              <1>         ;線を描画
   108                              <1>         ;---------------------------------------
   109                              <1> .50L:                                           ;do
   110                              <1>                                                 ;{
   111                              <1>         
   112                              <1>         ;---------------------------------------
   113                              <1>         ;同期処理
   114                              <1>         ;---------------------------------------
   115                              <1> %ifdef  USE_SYSTEM_CALL
   116 00000C24 89C8                <1>         mov     eax, ecx                        ;       //繰り返し回数を保存
   117                              <1> 
   118 00000C26 8B5D18              <1>         mov     ebx, [ebp +24]                  ;       EBX = 表示色;
   119 00000C29 8B4DF8              <1>         mov     ecx, [ebp - 8]                  ;       ECX = X座標;
   120 00000C2C 8B55EC              <1>         mov     edx, [ebp -20]                  ;       ECX = Y座標;
   121 00000C2F CD82                <1>         int     0x82                            ;       sys_call(1, X, Y, 色, 文字); //BX(C), CX(X), DX(Y)
   122                              <1> 
   123 00000C31 89C1                <1>         mov     ecx, eax
   124                              <1> %else
   127                              <1>         cdecl   draw_pixel, dword [ebp - 8],                             dword [ebp -20],                             dword [ebp +24]     ;   //点の描画
   128                              <1> %endif
   129                              <1> 
   130                              <1>         ;---------------------------------------
   131                              <1>         ;基準軸を更新
   132                              <1>         ;---------------------------------------
   133 00000C33 8B46F8              <1>         mov     eax, [esi - 8]                  ;   EAX = 基準軸増加(1 or -1);
   134 00000C36 0106                <1>         add     [esi - 0], eax                  ;
   135                              <1> 
   136                              <1>         ;---------------------------------------
   137                              <1>         ;相対軸を更新
   138                              <1>         ;---------------------------------------
   139 00000C38 8B45FC              <1>         mov     eax, [ebp - 4]                  ;   EAX = sum;  //相対軸の積算値
   140 00000C3B 0347FC              <1>         add     eax, [edi - 4]                  ;   EAX += dy;  //増加(相対軸の描画幅)
   141                              <1> 
   142 00000C3E 8B5EFC              <1>         mov     ebx, [esi - 4]                  ;   EBX = dx;   //増分(基準軸の描画幅)
   143                              <1> 
   144 00000C41 39D8                <1>         cmp     eax, ebx                        ;   if(積算値 <= 相対軸の増分)
   145 00000C43 7C07                <1>         jl      .52E                            ;   {
   146 00000C45 29D8                <1>         sub     eax, ebx                        ;       EAX -= EBX; //積算値から相対軸の増分を減算
   147                              <1>                                                 ;       //相対軸の座標を更新(1ドット分)
   148 00000C47 8B5FF8              <1>         mov     ebx, [edi - 8]                  ;       EBX = 相対軸増分;
   149 00000C4A 011F                <1>         add     [edi - 0], ebx                  ;       相対軸座標 = EBX;
   150                              <1> .52E:                                           ;   }
   151                              <1> 
   152 00000C4C 8945FC              <1>         mov     [ebp - 4], eax                  ;//積算値を更新
   153                              <1> 
   154 00000C4F E2D3                <1>         loop    .50L
   155                              <1> .50E:                                           ;} while(ループ回数--);
   156                              <1> 
   157                              <1>         ;---------------------------------------
   158                              <1>         ;レジスタの復帰
   159                              <1>         ;---------------------------------------
   160 00000C51 5E                  <1>         pop     esi
   161 00000C52 5A                  <1>         pop     edx
   162 00000C53 5F                  <1>         pop     edi
   163 00000C54 59                  <1>         pop     ecx
   164 00000C55 5B                  <1>         pop     ebx
   165 00000C56 58                  <1>         pop     eax
   166                              <1> 
   167                              <1>         ;---------------------------------------
   168                              <1>         ;スタックフレームの破棄
   169                              <1>         ;---------------------------------------
   170 00000C57 89EC                <1>         mov     esp, ebp
   171 00000C59 5D                  <1>         pop     ebp
   172                              <1> 
   173 00000C5A C3                  <1>         ret
   163                                  %include        "..\modules\protect\draw_rect.s"
     1                              <1> draw_rect:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000C5B 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000C5C 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000C5E 50                  <1>         push    eax
    17 00000C5F 53                  <1>         push    ebx
    18 00000C60 51                  <1>         push    ecx
    19 00000C61 52                  <1>         push    edx
    20 00000C62 56                  <1>         push    esi
    21                              <1> 
    22                              <1>         ;---------------------------------------
    23                              <1>         ;変数に引数を代入
    24                              <1>         ;---------------------------------------
    25 00000C63 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    26 00000C66 8B5D0C              <1>         mov     ebx, [ebp +12]                  ;EBX = Y0;
    27 00000C69 8B4D10              <1>         mov     ecx, [ebp +16]                  ;ECX = X1;
    28 00000C6C 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    29 00000C6F 8B7518              <1>         mov     esi, [ebp +24]                  ;ESI = 色;
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;座標軸の大小を確定
    33                              <1>         ;---------------------------------------
    34 00000C72 39C8                <1>         cmp     eax, ecx                        ;if(X1 < X0)
    35 00000C74 7C01                <1>         jl      .10E                            ;{
    36 00000C76 91                  <1>         xchg    eax, ecx                        ;   //X0とX1を入れ替える;
    37                              <1> .10E:                                           ;}
    38                              <1> 
    39 00000C77 39D3                <1>         cmp     ebx, edx                        ;if(Y1 < Y0)
    40 00000C79 7C02                <1>         jl      .20E                            ;{
    41 00000C7B 87DA                <1>         xchg    ebx, edx                        ;   //Y0とY1を入れ替える;
    42                              <1> .20E:                                           ;}
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;矩形を描画
    46                              <1>         ;---------------------------------------
    47 00000C7D 5653515350E825FFFF- <1>         cdecl   draw_line, eax, ebx, ecx, ebx, esi  ;上線
    47 00000C86 FF6683C414          <1>
    48 00000C8B 5652505350E817FFFF- <1>         cdecl   draw_line, eax, ebx, eax, edx, esi  ;左線
    48 00000C94 FF6683C414          <1>
    49                              <1> 
    50 00000C99 4A                  <1>         dec     edx                                 ;EDX--; //下線は1ドット上げる
    51 00000C9A 5652515250E808FFFF- <1>         cdecl   draw_line, eax, edx, ecx, edx, esi  ;下線
    51 00000CA3 FF6683C414          <1>
    52 00000CA8 42                  <1>         inc     edx
    53                              <1> 
    54 00000CA9 49                  <1>         dec     ecx                                 ;ECX--; //右線は1ドット左に移動
    55 00000CAA 5652515351E8F8FEFF- <1>         cdecl   draw_line, ecx, ebx, ecx, edx, esi  ;右線
    55 00000CB3 FF6683C414          <1>
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの復帰
    59                              <1>         ;---------------------------------------
    60 00000CB8 5E                  <1>         pop     esi
    61 00000CB9 5A                  <1>         pop     edx
    62 00000CBA 59                  <1>         pop     ecx
    63 00000CBB 5B                  <1>         pop     ebx
    64 00000CBC 58                  <1>         pop     eax
    65                              <1> 
    66                              <1>         ;---------------------------------------
    67                              <1>         ;スタックフレームの破棄
    68                              <1>         ;---------------------------------------
    69 00000CBD 89EC                <1>         mov     esp, ebp
    70 00000CBF 5D                  <1>         pop     ebp
    71                              <1> 
    72 00000CC0 C3                  <1>         ret
   164                                  %include        "..\modules\protect\itoa.s"
     1                              <1> itoa:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000CC1 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000CC2 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000CC4 50                  <1>         push    eax
    18 00000CC5 53                  <1>         push    ebx
    19 00000CC6 51                  <1>         push    ecx
    20 00000CC7 52                  <1>         push    edx
    21 00000CC8 56                  <1>         push    esi
    22 00000CC9 57                  <1>         push    edi
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;引数の取得
    26                              <1>         ;---------------------------------------
    27 00000CCA 8B4508              <1>         mov     eax, [ebp + 8]                  ;eax(val) =  数値;
    28 00000CCD 8B750C              <1>         mov     esi, [ebp + 12]                 ;esi(dst) = バッファアドレス;
    29 00000CD0 8B4D10              <1>         mov     ecx, [ebp + 16]                 ;ecx(size) = バッファサイズ;
    30                              <1> 
    31 00000CD3 89F7                <1>         mov     edi, esi                        ;edi = esi(dst); //バッファの最後尾
    32 00000CD5 01CF                <1>         add     edi, ecx                        ;edi(dst) = edi + ecx - 1;
    33 00000CD7 4F                  <1>         dec     edi
    34                              <1> 
    35 00000CD8 8B5D18              <1>         mov     ebx, [ebp + 24]            ;flags = オプション;
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;符号付き判定
    39                              <1>         ;---------------------------------------
    40 00000CDB F7C301000000        <1>         test    ebx, 0b0001                      ;if(flags & 0x01) //符号付き
    41 00000CE1 7408                <1> .10Q:   je      .10E                            ;{
    42 00000CE3 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    43 00000CE6 7D03                <1> .12Q:   jge     .12E                            ;   {
    44 00000CE8 83CB02              <1>         or      ebx, 0b0010                     ;       flags |= 2; //符号表示
    45                              <1> .12E:                                           ;   }
    46                              <1> .10E:                                           ;}
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;符号付き判定
    50                              <1>         ;---------------------------------------
    51 00000CEB F7C302000000        <1>         test    ebx, 0b0010                     ;if(flags & 0x02) //符号出力判定
    52 00000CF1 7410                <1> .20Q:   je      .20E                            ;{
    53 00000CF3 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    54 00000CF6 7D07                <1> .22Q:   jge     .22F                            ;   {
    55 00000CF8 F7D8                <1>         neg     eax                             ;       val *= -1; //符号反転
    56 00000CFA C6062D              <1>         mov     [esi], byte '-'                 ;       *dst = '-'; //符号表示
    57 00000CFD EB03                <1>         jmp     .22E                            ;   }
    58                              <1> .22F:                                           ;   else
    59                              <1>                                                 ;   {
    60 00000CFF C6062B              <1>         mov     [esi], byte '+'                 ;       *dst = '+'; //符号表示
    61                              <1> .22E:                                           ;   }
    62 00000D02 49                  <1>         dec     ecx                             ;   size--;     //残りバッファサイズの減算
    63                              <1> .20E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;ASCII変換
    67                              <1>         ;---------------------------------------
    68 00000D03 8B5D14              <1>         mov     ebx, [ebp + 20]                 ;BX = 基数;
    69                              <1> .30L:                                           ;do
    70                              <1>                                                 ;{
    71 00000D06 BA00000000          <1>         mov     edx, 0                          ;
    72 00000D0B F7F3                <1>         div     ebx                             ;   DX = DX:AX % 基数;
    73                              <1>                                                 ;   AX = DX:AX / 基数;
    74                              <1>                                                 ;
    75 00000D0D 89D6                <1>         mov     esi, edx                        ;   //テーブル参照
    76 00000D0F 8A96[3A0D0000]      <1>         mov     dl, byte [.ascii + esi]         ;   DL = ASCII[DX]
    77                              <1>                                                 ;
    78 00000D15 8817                <1>         mov     [edi], dl                       ;   *dst = DL;
    79 00000D17 4F                  <1>         dec     edi                             ;   dst--;
    80                              <1>                                                 ;
    81 00000D18 83F800              <1>         cmp     eax, 0                          ;
    82 00000D1B E0E9                <1>         loopnz  .30L                            ;}while(AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;---------------------------------------
    86                              <1>         ;空欄を埋める
    87                              <1>         ;---------------------------------------
    88 00000D1D 83F900              <1>         cmp     ecx, 0                          ;if(size)
    89 00000D20 740E                <1> .40Q:   je      .40E                            ;{
    90 00000D22 B020                <1>         mov     al, ' '                         ;       AL = ' '; // ' 'で埋める(デフォルト値)
    91 00000D24 66837D1804          <1>         cmp     [ebp + 24], word 0b0100         ;       if(flags & 0x04)
    92 00000D29 7502                <1> .42Q:   jne     .42E                            ;           {
    93 00000D2B B030                <1>         mov     al, '0'                         ;               AL = '0'; // '0'で埋める
    94                              <1> .42E:                                           ;           }
    95 00000D2D FD                  <1>         std                                     ;       // DF = 1(-方向)
    96 00000D2E F3AA                <1>         rep     stosb                           ;       while(--CX) *DI -- = AL;
    97                              <1> .40E:                                           ;}
    98                              <1>         
    99                              <1>         ;---------------------------------------
   100                              <1>         ;レジスタの復帰
   101                              <1>         ;---------------------------------------
   102 00000D30 5F                  <1>         pop     edi
   103 00000D31 5E                  <1>         pop     esi
   104 00000D32 5A                  <1>         pop     edx
   105 00000D33 59                  <1>         pop     ecx
   106 00000D34 5B                  <1>         pop     ebx
   107 00000D35 58                  <1>         pop     eax
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;スタックフレームの破棄
   111                              <1>         ;---------------------------------------
   112 00000D36 89EC                <1>         mov     esp, ebp
   113 00000D38 5D                  <1>         pop     ebp
   114                              <1> 
   115 00000D39 C3                  <1>         ret
   116                              <1> 
   117 00000D3A 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   117 00000D43 39414243444546      <1>
   165                                  %include        "..\modules\protect\rtc.s"
     1                              <1> rtc_get_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 保存先アドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000D4A 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000D4B 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000D4D 53                  <1>         push    ebx
    14                              <1> 
    15                              <1>         ;---------------------------------------
    16                              <1>         ;RTCから必要な情報を取得
    17                              <1>         ;---------------------------------------
    18 00000D4E B00A                <1>         mov     al, 0x0A                        ;//レジスタA
    19 00000D50 E670                <1>         out     0x70, al                        ;outp(0x70, AL);
    20 00000D52 E471                <1>         in      al, 0x71                        ;AL = レジスタA
    21 00000D54 A880                <1>         test    al, 0x80                        ;if(UIP) //更新中
    22 00000D56 7407                <1>         je      .10F                            ;{
    23 00000D58 B801000000          <1>         mov     eax, 1                          ;   return 0; //データ更新中
    24 00000D5D EB27                <1>         jmp     .10E                            ;}
    25                              <1> .10F:                                           ;else
    26                              <1>                                                 ;{
    27 00000D5F B004                <1>         mov     al, 0x04                        ;   AL = 0x04;
    28 00000D61 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    29 00000D63 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //時データ
    30                              <1> 
    31 00000D65 C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    32                              <1> 
    33 00000D68 B002                <1>         mov     al, 0x02                        ;   AL = 0x02;
    34 00000D6A E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    35 00000D6C E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //分データ
    36                              <1> 
    37 00000D6E C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    38                              <1> 
    39                              <1>                                                 ;   RAM[0x00]:秒
    40 00000D71 B000                <1>         mov     al, 0x00                        ;   AL = 0x00;
    41 00000D73 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    42 00000D75 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //秒データ
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;有効なデータのみをアドレス先へ保存
    46                              <1>         ;---------------------------------------
    47 00000D77 25FFFFFF00          <1>         and     eax, 0x00_FF_FF_FF              ;//下位3バイトのみ有効
    48                              <1> 
    49 00000D7C 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;dst = 保存先;
    50 00000D7F 8903                <1>         mov     [ebx], eax                      ;[dst] = 時刻;
    51                              <1>         
    52 00000D81 B801000000          <1>         mov     eax, 1                          ;   return 1; //正常終了
    53                              <1> .10E:                                           ;}
    54                              <1> 
    55                              <1>         ;---------------------------------------
    56                              <1>         ;レジスタの復帰
    57                              <1>         ;---------------------------------------
    58 00000D86 5B                  <1>         pop     ebx
    59                              <1> 
    60                              <1>         ;---------------------------------------
    61                              <1>         ;スタックフレームの破棄
    62                              <1>         ;---------------------------------------
    63 00000D87 89EC                <1>         mov     esp, ebp
    64 00000D89 5D                  <1>         pop     ebp
    65                              <1> 
    66 00000D8A C3                  <1>         ret
   166                                  %include        "..\modules\protect\draw_time.s"
     1                              <1> draw_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000D8B 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000D8C 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000D8E 50                  <1>         push    eax
    18 00000D8F 53                  <1>         push    ebx
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;数字を文字に変換
    22                              <1>         ;---------------------------------------
    23 00000D90 8B4514              <1>         mov     eax, [ebp +20]                  ;EAX = 時刻データ;
    24                              <1> 
    25 00000D93 0FB6D8              <1>         movzx   ebx, al                         ;EBX = 秒;
    26 00000D96 6A046A106A0268-     <1>         cdecl   itoa, ebx, .sec, 2, 16, 0b0100  ;//文字を変換
    26 00000D9D [FD0D0000]53E81AFF- <1>
    26 00000DA5 FFFF6683C414        <1>
    27                              <1> 
    28 00000DAB 88E3                <1>         mov     bl, ah                          ;EBX = 分;
    29 00000DAD 6A046A106A0268-     <1>         cdecl   itoa, ebx, .min, 2, 16, 0b0100  ;//文字に変換
    29 00000DB4 [FA0D0000]53E803FF- <1>
    29 00000DBC FFFF6683C414        <1>
    30                              <1> 
    31 00000DC2 C1E810              <1>         shr     eax, 16                         ;EBX = 時;
    32 00000DC5 6A046A106A0268-     <1>         cdecl   itoa, eax, .hour, 2, 16, 0b0100 ;//文字に変換
    32 00000DCC [F70D0000]50E8EBFE- <1>
    32 00000DD4 FFFF6683C414        <1>
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;文字列を表示
    36                              <1>         ;---------------------------------------
    37 00000DDA 68[F70D0000]FF7510- <1>         cdecl   draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    37 00000DE2 FF750CFF7508E846FC- <1>
    37 00000DEB FFFF6683C410        <1>
    38                              <1>         
    39                              <1>         ;---------------------------------------
    40                              <1>         ;レジスタの復帰
    41                              <1>         ;---------------------------------------
    42 00000DF1 5B                  <1>         pop     ebx
    43 00000DF2 58                  <1>         pop     eax
    44                              <1> 
    45                              <1>         ;---------------------------------------
    46                              <1>         ;スタックフレームの破棄
    47                              <1>         ;---------------------------------------
    48 00000DF3 89EC                <1>         mov     esp, ebp
    49 00000DF5 5D                  <1>         pop     ebp
    50                              <1> 
    51 00000DF6 C3                  <1>         ret
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;データ
    55                              <1>         ;---------------------------------------
    56 00000DF7 5A5A3A              <1>         .hour:  db  "ZZ:"
    57 00000DFA 5A5A3A              <1>         .min:   db  "ZZ:"
    58 00000DFD 5A5A00              <1>         .sec:   db  "ZZ", 0
   167                                  %include        "..\modules\protect\interrupt.s"
     1                              <1> int_stop:
     2 00000E00 FB                  <1>         sti                                     ;//割り込み許可
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;EAXで示される文字列を表示
     6                              <1>         ;---------------------------------------
     7 00000E01 50680F0600006A0F6A- <1>         cdecl   draw_str, 25, 15, 0x060F, eax   ;draw_str(EAX);
     7 00000E0A 19E823FCFFFF6683C4- <1>
     7 00000E13 10                  <1>
     8                              <1>         
     9                              <1>         ;---------------------------------------
    10                              <1>         ;スタックのデータを文字列に変換
    11                              <1>         ;---------------------------------------
    12 00000E14 8B0424              <1>         mov     eax, [esp + 0]                  ;EAX = ESP[ 0];
    13 00000E17 6A046A106A0868-     <1>         cdecl   itoa, eax, .p1, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    13 00000E1E [DC0E0000]50E899FE- <1>
    13 00000E26 FFFF6683C414        <1>
    14                              <1> 
    15 00000E2C 8B442404            <1>         mov     eax, [esp + 4]                  ;EAX = ESP[ 4];
    16 00000E30 6A046A106A0868-     <1>         cdecl   itoa, eax, .p2, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    16 00000E37 [ED0E0000]50E880FE- <1>
    16 00000E3F FFFF6683C414        <1>
    17                              <1> 
    18 00000E45 8B442408            <1>         mov     eax, [esp + 8]                  ;EAX = ESP[ 8];
    19 00000E49 6A046A106A0868-     <1>         cdecl   itoa, eax, .p3, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    19 00000E50 [FE0E0000]50E867FE- <1>
    19 00000E58 FFFF6683C414        <1>
    20                              <1> 
    21 00000E5E 8B44240C            <1>         mov     eax, [esp +12]                  ;EAX = ESP[12];
    22 00000E62 6A046A106A0868-     <1>         cdecl   itoa, eax, .p4, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    22 00000E69 [0F0F0000]50E84EFE- <1>
    22 00000E71 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;文字列の表示
    26                              <1>         ;---------------------------------------
    27 00000E77 68[D50E0000]68040F- <1>         cdecl   draw_str, 25, 16, 0x0F04, .s1,  ;draw_str("ESP+ 0:-------- ");
    27 00000E7F 00006A106A19E8A9FB- <1>
    27 00000E88 FFFF6683C410        <1>
    28 00000E8E 68[E60E0000]68040F- <1>         cdecl   draw_str, 25, 17, 0x0F04, .s2   ;draw_str("   + 4:-------- ");
    28 00000E96 00006A116A19E892FB- <1>
    28 00000E9F FFFF6683C410        <1>
    29 00000EA5 68[F70E0000]68040F- <1>         cdecl   draw_str, 25, 18, 0x0F04, .s3,  ;draw_str("   + 8:-------- ");
    29 00000EAD 00006A126A19E87BFB- <1>
    29 00000EB6 FFFF6683C410        <1>
    30 00000EBC 68[080F0000]68040F- <1>         cdecl   draw_str, 25, 19, 0x0F04, .s4   ;draw_str("   +12:-------- ");        
    30 00000EC4 00006A136A19E864FB- <1>
    30 00000ECD FFFF6683C410        <1>
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;無限ループ
    34                              <1>         ;---------------------------------------
    35 00000ED3 EBFE                <1>         jmp     $                               ;while(1); //無限ループ
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;データ
    39                              <1>         ;---------------------------------------
    40 00000ED5 4553502B20303A      <1> .s1:    db  "ESP+ 0:"
    41 00000EDC 2D2D2D2D2D2D2D2D20- <1> .p1:    db  "-------- ", 0
    41 00000EE5 00                  <1>
    42 00000EE6 2020202B20343A      <1> .s2:    db  "   + 4:"
    43 00000EED 2D2D2D2D2D2D2D2D20- <1> .p2:    db  "-------- ", 0
    43 00000EF6 00                  <1>
    44 00000EF7 2020202B20383A      <1> .s3:    db  "   + 8:"
    45 00000EFE 2D2D2D2D2D2D2D2D20- <1> .p3:    db  "-------- ", 0
    45 00000F07 00                  <1>
    46 00000F08 2020202B31323A      <1> .s4:    db  "   +12:"
    47 00000F0F 2D2D2D2D2D2D2D2D20- <1> .p4:    db  "-------- ", 0
    47 00000F18 00                  <1>
    48                              <1> 
    49                              <1> int_default:
    50                              <1>         ;---------------------------------------
    51                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
    52                              <1>         ;---------------------------------------
    53 00000F19 9C                  <1>         pushf                                   ;//EFLAGS(IF=0)
    54 00000F1A 0E                  <1>         push    cs                              ;//cs
    55 00000F1B 68[000E0000]        <1>         push    int_stop                        ;//スタック表示処理
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み種別を登録して復帰
    59                              <1>         ;---------------------------------------
    60 00000F20 B8[260F0000]        <1>         mov     eax, .s0                        ;//割り込み種別
    61 00000F25 CF                  <1>         iret                                    ;スタックされている場所に復帰
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;データ
    65                              <1>         ;---------------------------------------
    66 00000F26 203C2020202053544F- <1> .s0:    db  " <    STOP    > ", 0
    66 00000F2F 50202020203E2000    <1>
    67                              <1> 
    68                              <1> ;********************************************************************************************************
    69                              <1> ;割り込みベクタの初期化
    70                              <1> ;********************************************************************************************************
    71 00000F37 90                  <1> ALIGN   4
    72 00000F38 FF07                <1> IDTR:   dw      8 * 256 - 1                     ;idt_limit
    73 00000F3A 00001000            <1>         dd      VECT_BASE                       ;idt_location
    74                              <1> 
    75                              <1> ;********************************************************************************************************
    76                              <1> ;割り込みテーブルを初期化
    77                              <1> ;********************************************************************************************************
    78                              <1> init_int:
    79                              <1>         ;---------------------------------------
    80                              <1>         ;レジスタの保存
    81                              <1>         ;---------------------------------------
    82 00000F3E 50                  <1>         push    eax
    83 00000F3F 53                  <1>         push    ebx
    84 00000F40 51                  <1>         push    ecx
    85 00000F41 57                  <1>         push    edi
    86                              <1> 
    87                              <1>         ;---------------------------------------
    88                              <1>         ;全ての割り込みにデフォルト処理を設定
    89                              <1>         ;---------------------------------------
    90 00000F42 8D05[190F0000]      <1>         lea     eax, [int_default]              ;EAX = 割り込み処理アドレス;
    91 00000F48 BB008E0800          <1>         mov     ebx, 0x0008_8E00                ;EBX = セグメントセレクタ;
    92 00000F4D 6693                <1>         xchg    ax, bx                          ;//下位ワード(2バイト)を交換(割り込みゲートディスクリプタの形式に合わせる)
    93                              <1> 
    94 00000F4F B900010000          <1>         mov     ecx, 256                        ;ECX = 割り込みベクタ数
    95 00000F54 BF00001000          <1>         mov     edi, VECT_BASE                  ;EDI = 割り込みベクタテーブル
    96                              <1> 
    97                              <1> .10L:                                           ;do
    98                              <1>                                                 ;{
    99 00000F59 891F                <1>         mov     [edi + 0], ebx                  ;       [EDI + 0] = 割り込みディスクリプタ(下位)
   100 00000F5B 894704              <1>         mov     [edi + 4], eax                  ;       [EDI + 4] = 割り込みディスクリプタ(上位)
   101 00000F5E 83C708              <1>         add     edi, 8                          ;       EDI += 8;
   102 00000F61 E2F6                <1>         loop    .10L                            ;}while(ECX--);
   103                              <1> 
   104                              <1>         ;---------------------------------------
   105                              <1>         ;割り込みディスクリプタの設定
   106                              <1>         ;---------------------------------------
   107 00000F63 0F011D[380F0000]    <1>         lidt    [IDTR]                          ;//割り込みディスクリプタテーブルをロード
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;データ
   111                              <1>         ;---------------------------------------
   112 00000F6A 5F                  <1>         pop     edi
   113 00000F6B 59                  <1>         pop     ecx
   114 00000F6C 5B                  <1>         pop     ebx
   115 00000F6D 58                  <1>         pop     eax
   116                              <1> 
   117 00000F6E C3                  <1>         ret
   118                              <1> 
   119                              <1> int_zero_div:
   120                              <1>         ;---------------------------------------
   121                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
   122                              <1>         ;---------------------------------------
   123 00000F6F 9C                  <1>         pushf                                   ;//EFLAGS
   124 00000F70 0E                  <1>         push    cs                              ;//CS
   125 00000F71 68[000E0000]        <1>         push    int_stop                        ;//スタック表示処理
   126                              <1> 
   127                              <1>         ;---------------------------------------
   128                              <1>         ;割り込み種別を登録して復帰
   129                              <1>         ;---------------------------------------
   130 00000F76 B8[7C0F0000]        <1>         mov     eax, .s0                        ;//割り込み種別
   131 00000F7B CF                  <1>         iret
   132                              <1> 
   133 00000F7C 203C20205A45524F20- <1> .s0:    db      " <  ZERO DIV  > ", 0
   133 00000F85 44495620203E2000    <1>
   168                                  %include        "..\modules\protect\pic.s"
     1                              <1> init_pic:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000F8D 50                  <1>         push    eax
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;マスタの設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x20, 0x11                      ;//MASTER.ICW1 = 0x11;
    10 00000F8E B011                <2>  mov al, %2
    10 00000F90 E620                <2>  out %1, al
    11                              <1>         outp    0x21, 0x20                      ;//MASTER.ICW2 = 0x20;
    11 00000F92 B020                <2>  mov al, %2
    11 00000F94 E621                <2>  out %1, al
    12                              <1>         outp    0x21, 0x04                      ;//MASTER.ICW3 = 0x04;
    12 00000F96 B004                <2>  mov al, %2
    12 00000F98 E621                <2>  out %1, al
    13                              <1>         outp    0x21, 0x05                      ;//MASTER.ICW4 = 0x05;
    13 00000F9A B005                <2>  mov al, %2
    13 00000F9C E621                <2>  out %1, al
    14                              <1>         outp    0x21, 0xEF                      ;//マスタ割り込みマスク
    14 00000F9E B0EF                <2>  mov al, %2
    14 00000FA0 E621                <2>  out %1, al
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;スレーブの設定
    18                              <1>         ;---------------------------------------
    19                              <1>         outp    0xA0, 0x11                      ;//SLAVE.ICW1 = 0x11;
    19 00000FA2 B011                <2>  mov al, %2
    19 00000FA4 E6A0                <2>  out %1, al
    20                              <1>         outp    0xA1, 0x28                      ;//SLAVE.ICW2 = 0x28;
    20 00000FA6 B028                <2>  mov al, %2
    20 00000FA8 E6A1                <2>  out %1, al
    21                              <1>         outp    0xA1, 0x02                      ;//SLAVE.ICW3 = 0x02;
    21 00000FAA B002                <2>  mov al, %2
    21 00000FAC E6A1                <2>  out %1, al
    22                              <1>         outp    0xA1, 0x01                      ;//SLAVE.ICW4 = 0x01;
    22 00000FAE B001                <2>  mov al, %2
    22 00000FB0 E6A1                <2>  out %1, al
    23                              <1>         outp    0xA1, 0xEF                      ;//マスタ割り込みマスク
    23 00000FB2 B0EF                <2>  mov al, %2
    23 00000FB4 E6A1                <2>  out %1, al
    24                              <1> 
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00000FB6 58                  <1>         pop     eax
    29                              <1> 
    30 00000FB7 C3                  <1>         ret
   169                                  %include        "..\modules\protect\int_rtc.s"
     1                              <1> int_rtc:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000FB8 60                  <1>         pusha
     6 00000FB9 1E                  <1>         push    ds
     7 00000FBA 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントセレクタの設定
    11                              <1>         ;---------------------------------------
    12 00000FBB 66B81000            <1>         mov     ax, 0x0010
    13 00000FBF 8ED8                <1>         mov     ds, ax
    14 00000FC1 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;RTCから時刻を取得
    18                              <1>         ;---------------------------------------
    19 00000FC3 68[24020000]E87DFD- <1>         cdecl   rtc_get_time, RTC_TIME          ;EAX = get_time(&RTC_TIME);
    19 00000FCB FFFF6683C404        <1>
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;RTCの割り込み要因を取得
    23                              <1>         ;---------------------------------------
    24                              <1>         outp    0x70, 0x0C                      ;outp(0x70, 0x0C); //レジスタCを選択
    24 00000FD1 B00C                <2>  mov al, %2
    24 00000FD3 E670                <2>  out %1, al
    25 00000FD5 E471                <1>         in      al, 0x71                        ;AL = port(0x71);
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;割り込みフラグをクリア(EOI)
    29                              <1>         ;---------------------------------------
    30 00000FD7 B020                <1>         mov     al, 0x20                        ;AL = EOIコマンド;
    31 00000FD9 E6A0                <1>         out     0xA0, al                        ;outp(0xA0, AL); //スレーブPIC
    32 00000FDB E620                <1>         out     0x20, al                        ;outp(0x20, AL); //マスタPIC
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;レジスタの復帰
    36                              <1>         ;---------------------------------------
    37 00000FDD 07                  <1>         pop     es
    38 00000FDE 1F                  <1>         pop     ds
    39 00000FDF 61                  <1>         popa
    40                              <1> 
    41 00000FE0 CF                  <1>         iret                                    ;割り込み処理の終了
    42                              <1> 
    43                              <1> rtc_int_en:
    44                              <1>         ;-----------------------------------
    45                              <1>         ;スタックフレームの構築
    46                              <1>         ;-----------------------------------
    47                              <1>                                             ;   + 8| 指定されたビット
    48                              <1>                                             ;   + 4| IP(戻り番号)
    49 00000FE1 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    50 00000FE2 89E5                <1>         mov     ebp, esp                    ;------|---------
    51                              <1> 
    52                              <1>         ;---------------------------------------
    53                              <1>         ;レジスタの保存
    54                              <1>         ;---------------------------------------
    55 00000FE4 50                  <1>         push    eax
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み許可認定(RTCの内部レジスタBのUIE(更新終了割り込み許可)ビットをセット)
    59                              <1>         ;---------------------------------------
    60                              <1>         outp    0x70, 0x0B                      ;outp(0x70, AL); //レジスタBを選択
    60 00000FE5 B00B                <2>  mov al, %2
    60 00000FE7 E670                <2>  out %1, al
    61                              <1> 
    62 00000FE9 E471                <1>         in      al, 0x71                        ;AL = port(0x71); //レジスタBの
    63 00000FEB 0A4508              <1>         or      al, [ebp + 8]                   ;AL |= ビット; //指定されたビットをセット
    64                              <1> 
    65 00000FEE E671                <1>         out     0x71, al                        ;outp(0x71, AL); //レジスタBに書き込み
    66                              <1> 
    67                              <1>         ;---------------------------------------
    68                              <1>         ;レジスタの復帰
    69                              <1>         ;---------------------------------------
    70 00000FF0 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 00000FF1 89EC                <1>         mov     esp, ebp
    76 00000FF3 5D                  <1>         pop     ebp
    77                              <1> 
    78 00000FF4 C3                  <1>         ret
   170                                  %include        "..\modules\protect\ring_buff.s"
     1                              <1> ring_rd:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| 読み込んだデータの保存先アドレス
     6                              <1>                                             ;   + 8| リングバッファ
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000FF5 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
     9 00000FF6 89E5                <1>         mov     ebp, esp                    ;------|---------
    10                              <1> 
    11                              <1>         ;---------------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;---------------------------------------
    14 00000FF8 60                  <1>         pusha
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;引数を取得
    18                              <1>         ;---------------------------------------
    19 00000FF9 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    20 00000FFC 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = データアドレス;
    21                              <1>         
    22                              <1>         ;---------------------------------------
    23                              <1>         ;読み込み位置を確認
    24                              <1>         ;---------------------------------------
    25 00000FFF B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    26 00001004 8B1E                <1>         mov     ebx, [esi + ring_buff.rp]       ;EBX = rp; //読み込み位置
    27 00001006 3B5E04              <1>         cmp     ebx, [esi + ring_buff.wp]       ;if(EBX != wp) //書き込み位置と異なる
    28 00001009 7411                <1>         je      .10E                            ;{
    29                              <1>         
    30 0000100B 8A441E08            <1>         mov     al, [esi + ring_buff.item + ebx];   AL = BUFF[rp]; //キーコードを保存
    31                              <1> 
    32 0000100F 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //データを保存
    33                              <1> 
    34 00001011 43                  <1>         inc     ebx                             ;   EBX++; //次の読み込み位置
    35 00001012 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= 0x0F; //サイズの制限
    36 00001015 891E                <1>         mov     [esi + ring_buff.rp], ebx       ;   wp = EBX; //読み込み位置を保存
    37                              <1> 
    38 00001017 B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //データあり
    39                              <1> .10E:                                           ;}
    40                              <1> 
    41                              <1>         ;---------------------------------------
    42                              <1>         ;レジスタの復帰
    43                              <1>         ;---------------------------------------
    44 0000101C 61                  <1>         popa
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;スタックフレームの破棄
    48                              <1>         ;---------------------------------------
    49 0000101D 89EC                <1>         mov     esp, ebp
    50 0000101F 5D                  <1>         pop     ebp
    51                              <1> 
    52 00001020 C3                  <1>         ret
    53                              <1> 
    54                              <1> ring_wr:
    55                              <1>         ;-----------------------------------
    56                              <1>         ;スタックフレームの構築
    57                              <1>         ;-----------------------------------
    58                              <1>                                             ;   +12| 書き込むデータ
    59                              <1>                                             ;   + 8| リングバッファ
    60                              <1>                                             ;   + 4| IP(戻り番号)
    61 00001021 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    62 00001022 89E5                <1>         mov     ebp, esp                    ;------|---------
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;レジスタの保存
    66                              <1>         ;---------------------------------------
    67 00001024 60                  <1>         pusha
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;引数を取得
    71                              <1>         ;---------------------------------------
    72 00001025 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    73                              <1>         
    74                              <1>         ;---------------------------------------
    75                              <1>         ;書き込み位置を確認
    76                              <1>         ;---------------------------------------
    77 00001028 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    78 0000102D 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
    79 00001030 89D9                <1>         mov     ecx, ebx                        ;ECX = EBX;
    80 00001032 41                  <1>         inc     ecx                             ;ECX++;
    81 00001033 83E10F              <1>         and     ecx, RING_INDEX_MASK            ;ECX &= 0x0F //サイズの制限
    82                              <1>         
    83 00001036 3B0E                <1>         cmp     ecx, [esi + ring_buff.rp]       ;if(ECX != rp) //読み込み位置と異なる
    84 00001038 740F                <1>         je      .10E                            ;{
    85                              <1>         
    86 0000103A 8A450C              <1>         mov     al, [ebp +12]                   ;   AL = データ;
    87                              <1> 
    88 0000103D 88441E08            <1>         mov     [esi + ring_buff.item + ebx], al;   BUFF[wp] = AL; //キーコードを保存
    89 00001041 894E04              <1>         mov     [esi + ring_buff.wp], ecx       ;   wp = ECX; //書き込み位置を保存
    90 00001044 B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //成功
    91                              <1> .10E:                                           ;}
    92                              <1> 
    93                              <1>         ;---------------------------------------
    94                              <1>         ;レジスタの復帰
    95                              <1>         ;---------------------------------------
    96 00001049 61                  <1>         popa
    97                              <1>         
    98                              <1>         ;---------------------------------------
    99                              <1>         ;スタックフレームの破棄
   100                              <1>         ;---------------------------------------
   101 0000104A 89EC                <1>         mov     esp, ebp
   102 0000104C 5D                  <1>         pop     ebp
   103                              <1> 
   104 0000104D C3                  <1>         ret
   105                              <1> 
   106                              <1> draw_key:
   107                              <1>         ;-----------------------------------
   108                              <1>         ;スタックフレームの構築
   109                              <1>         ;-----------------------------------
   110                              <1>                                             ;   +16| リングブッファ
   111                              <1>                                             ;   +12| Y(行)
   112                              <1>                                             ;   + 8| X(列)
   113                              <1>                                             ;   + 4| IP(戻り番号)
   114 0000104E 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
   115 0000104F 89E5                <1>         mov     ebp, esp                    ;------|---------
   116                              <1> 
   117                              <1>         ;---------------------------------------
   118                              <1>         ;レジスタの保存
   119                              <1>         ;---------------------------------------
   120 00001051 60                  <1>         pusha
   121                              <1> 
   122                              <1>         ;---------------------------------------
   123                              <1>         ;引数を取得
   124                              <1>         ;---------------------------------------
   125 00001052 8B7508              <1>         mov     esi, [ebp + 8]                  ;EDX = X(列);
   126 00001055 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行);
   127 00001058 8B7510              <1>         mov     esi, [ebp +16]                  ;ESI = リングブッファ;
   128                              <1>         
   129                              <1>         ;---------------------------------------
   130                              <1>         ;リングブッファの情報を取得
   131                              <1>         ;---------------------------------------
   132 0000105B 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
   133 0000105E 8D7608              <1>         lea     esi, [esi + ring_buff.item]     ;ESI = &KEY_BUFF[EBX];
   134 00001061 B910000000          <1>         mov     ecx, RING_ITEM_SIZE             ;ECX = RING_ITEM_SIZE; //要素数
   135                              <1> 
   136                              <1> .10L:                                           ;do
   137                              <1>                                                 ;{
   138 00001066 4B                  <1>         dec     ebx                             ;   EBX--;
   139 00001067 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= RING_INDEX_MASK;
   140 0000106A 8A041E              <1>         mov     al, [esi + ebx]                 ;   EAX = KEY_BUFF[EBX];
   141                              <1> 
   142 0000106D 6A046A106A0268-     <1>         cdecl   itoa, eax, .tmp, 2, 16, 0b0100  ;   //キーコードを文字列に変換
   142 00001074 [9E100000]50E843FC- <1>
   142 0000107C FFFF6683C414        <1>
   143 00001082 68[9E100000]6A0257- <1>         cdecl   draw_str, edx, edi, 0x02, .tmp  ;   //変換した文字列を表示
   143 0000108A 52E8A3F9FFFF6683C4- <1>
   143 00001093 10                  <1>
   144                              <1> 
   145 00001094 83C203              <1>         add     edx, 3                          ;   //表示位置を更新(3文字分)
   146                              <1> 
   147 00001097 E2CD                <1>         loop    .10L
   148                              <1> .10E:                                           ;}while(ECX--);        
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;レジスタの復帰
   152                              <1>         ;---------------------------------------
   153 00001099 61                  <1>         popa
   154                              <1>         
   155                              <1>         ;---------------------------------------
   156                              <1>         ;スタックフレームの破棄
   157                              <1>         ;---------------------------------------
   158 0000109A 89EC                <1>         mov     esp, ebp
   159 0000109C 5D                  <1>         pop     ebp
   160                              <1> 
   161 0000109D C3                  <1>         ret
   162                              <1> 
   163                              <1>         ;---------------------------------------
   164                              <1>         ;データ
   165                              <1>         ;---------------------------------------
   166 0000109E 2D2D2000            <1> .tmp    db  "-- ", 0
   171                                  %include        "..\modules\protect\int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000010A2 60                  <1>         pusha
     6 000010A3 1E                  <1>         push    ds
     7 000010A4 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 000010A5 66B81000            <1>         mov     ax, 0x0010
    13 000010A9 8ED8                <1>         mov     ds, ax
    14 000010AB 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;KBCのブッファ読み取り
    18                              <1>         ;---------------------------------------
    19 000010AD E460                <1>         in      al, 0x60                        ; AL = キーコードの取得
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;キーコードの保存
    23                              <1>         ;---------------------------------------
    24 000010AF 5068[C8100000]E867- <1>         cdecl   ring_wr, _KEY_BUFF, eax         ;ring_wr(_KEY_BUFF, EAX); //キーコードの保存
    24 000010B7 FFFFFF6683C408      <1>
    25                              <1>         
    26                              <1>         ;---------------------------------------
    27                              <1>         ;割り込み終了コマンド送信
    28                              <1>         ;---------------------------------------
    29                              <1>         outp    0x20, 0x20                      ;outp(); //マスタPIC:EOIコマンド
    29 000010BE B020                <2>  mov al, %2
    29 000010C0 E620                <2>  out %1, al
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;レジスタの復帰
    33                              <1>         ;---------------------------------------
    34 000010C2 07                  <1>         pop     es
    35 000010C3 1F                  <1>         pop     ds
    36 000010C4 61                  <1>         popa
    37                              <1> 
    38 000010C5 CF                  <1>         iret                                    ;割り込みからの復帰
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;データ
    42                              <1>         ;---------------------------------------
    43                              <1> 
    44 000010C6 00<rept>            <1> ALIGN   4, db   0
    45 000010C8 00<rept>            <1> _KEY_BUFF:  times   ring_buff_size  db  0
   172                                  %include        "..\modules\protect\timer.s"
     1                              <1> int_en_timer0:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000010E0 50                  <1>         push    eax                              ;//outp用
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;タイマーICのカウンタ0を設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x43, 0b_00_11_010_0            ;//カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    10 000010E1 B034                <2>  mov al, %2
    10 000010E3 E643                <2>  out %1, al
    11                              <1>         outp    0x40, 0x9C                      ;//下位バイト
    11 000010E5 B09C                <2>  mov al, %2
    11 000010E7 E640                <2>  out %1, al
    12                              <1>         outp    0x40, 0x2E                      ;//上位バイト
    12 000010E9 B02E                <2>  mov al, %2
    12 000010EB E640                <2>  out %1, al
    13                              <1> 
    14                              <1>         ;---------------------------------------
    15                              <1>         ;レジスタの復帰
    16                              <1>         ;---------------------------------------
    17 000010ED 58                  <1>         pop     eax
    18                              <1> 
    19 000010EE C3                  <1>         ret
   173                                  %include        "..\modules\protect\draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000010EF 60                  <1>         pushad
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;引数を取得
     9                              <1>         ;---------------------------------------
    10 000010F0 A1[74060000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = タイマー割り込みカウンタ
    11 000010F5 C1E804              <1>         shr     eax, 4                          ;EAX /= 4; //16で除算
    12 000010F8 3B05[20110000]      <1>         cmp     eax, [.index]                   ;if(EAX != 前回値)
    13 000010FE 741E                <1>         je      .10E                            ;{
    14                              <1>         
    15 00001100 A3[20110000]        <1>         mov     [.index], eax                   ;   前回値 = EAX;
    16 00001105 83E003              <1>         and     eax, 0x03                       ;   EAX &= 0x03; //0~3に限定
    17                              <1> 
    18 00001108 8A80[24110000]      <1>         mov     al, [.table + eax]              ;   AL = table[index];
    19 0000110E 506A0F6A1D6A00E8F9- <1>         cdecl   draw_char, 0 ,29, 0x000F, eax   ;   draw_char(); //文字を表示
    19 00001117 F7FFFF6683C410      <1>
    20                              <1> 
    21                              <1> .10E:                                           ;}    
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;レジスタの復帰
    25                              <1>         ;---------------------------------------
    26 0000111E 61                  <1>         popad
    27                              <1> 
    28 0000111F C3                  <1>         ret
    29                              <1> 
    30                              <1>         ;---------------------------------------
    31                              <1>         ;データ
    32                              <1>         ;---------------------------------------
    33                              <1> ALIGN   4,  db  0
    34 00001120 00000000            <1> .index:     dd  0                               ;前回値
    35 00001124 7C2F2D5C            <1> .table:     db  "|/-\"                          ;表示キャラクタ
   174                                  %include        "..\modules\protect\call_gate.s"
     1                              <1> call_gate:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| X(列)
     6                              <1>                                             ;   +16| Y(行)
     7                              <1>                                             ;   +20| 色
     8                              <1>                                             ;   +24| 文字
     9                              <1>                                             ;   + 8| CS(コードセグメント)
    10                              <1>                                             ;   + 4| EIP(戻り番号)
    11 00001128 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    12 00001129 89E5                <1>         mov    ebp, esp                     ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 0000112B 60                  <1>         pusha
    18 0000112C 1E                  <1>         push    ds
    19 0000112D 06                  <1>         push    es
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;データ用セグメントの設定
    23                              <1>         ;---------------------------------------
    24 0000112E 66B81000            <1>         mov     ax, 0x0010
    25 00001132 8ED8                <1>         mov     ds, ax
    26 00001134 8EC0                <1>         mov     es, ax
    27                              <1>         
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字を表示
    30                              <1>         ;---------------------------------------
    31 00001136 8B450C              <1>         mov     eax, dword [ebp +12]            ;EAX = X(列);
    32 00001139 8B5D10              <1>         mov     ebx, dword [ebp +16]            ;EBX = Y(行);
    33 0000113C 8B4D14              <1>         mov     ecx, dword [ebp +20]            ;ECX = 色;
    34 0000113F 8B5518              <1>         mov     edx, dword [ebp +24]            ;EDX = 文字;
    35 00001142 52515350E8E8F8FFFF- <1>         cdecl   draw_str, eax, ebx, ecx, edx    ;draw_str();
    35 0000114B 6683C410            <1>
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;レジスタの復帰
    39                              <1>         ;---------------------------------------
    40 0000114F 07                  <1>         pop     es
    41 00001150 1F                  <1>         pop     ds
    42 00001151 61                  <1>         popa
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;スタックフレームの破棄
    46                              <1>         ;---------------------------------------
    47 00001152 89EC                <1>         mov     esp, ebp
    48 00001154 5D                  <1>         pop     ebp
    49                              <1> 
    50 00001155 CA1000              <1>         retf 4 * 4
   175                                  %include        "..\modules\protect\trap_gate.s"
     1                              <1> trap_gate_81:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;1文字出力
     4                              <1>         ;---------------------------------------
     5 00001158 50535251E8B2F7FFFF- <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;//1文字出力
     5 00001161 6683C410            <1>
     6                              <1> 
     7 00001165 CF                  <1>         iret
     8                              <1> 
     9                              <1> trap_gate_82:
    10                              <1>         ;---------------------------------------
    11                              <1>         ;点の描画
    12                              <1>         ;---------------------------------------
    13 00001166 535251E87BF9FFFF66- <1>         cdecl   draw_pixel, ecx, edx, ebx       ;//点の描画
    13 0000116F 83C40C              <1>
    14                              <1> 
    15 00001172 CF                  <1>         iret
   176                                  %include        "..\modules\protect\test_and_set.s"
     1                              <1> test_and_set:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| ローカル変数のアドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00001173 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00001174 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00001176 50                  <1>         push    eax
    14 00001177 53                  <1>         push    ebx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;テストアンドセット
    18                              <1>         ;---------------------------------------
    19 00001178 B800000000          <1>         mov     eax, 0                          ;local = 0;
    20 0000117D 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;global = アドレス;
    21                              <1> 
    22                              <1> .10L:                                           ;while(1)
    23                              <1>                                                 ;{
    24 00001180 F00FAB03            <1>         lock    bts [ebx], eax                  ;   CF = TEST_AND_SET(IN_USE, 1);
    25 00001184 7307                <1>         jnc     .10E                            ;   if(0 == CF)
    26                              <1>                                                 ;   break;
    27                              <1> 
    28                              <1> .12L:                                           ;   while(1)
    29                              <1>                                                 ;   {
    30 00001186 0FA303              <1>         bt      [ebx], eax                      ;       CF = TEST(IN_USE, 1);
    31 00001189 72FB                <1>         jc      .12L                            ;       if(0 == CF)
    32                              <1>                                                 ;       break;
    33 0000118B EBF3                <1>         jmp     .10L                            ;   }
    34                              <1> .10E:                                           ;}
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;レジスタの復帰
    38                              <1>         ;---------------------------------------
    39 0000118D 5B                  <1>         pop     ebx
    40 0000118E 58                  <1>         pop     eax
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;スタックフレームの破棄
    44                              <1>         ;---------------------------------------
    45 0000118F 89EC                <1>         mov     esp, ebp
    46 00001191 5D                  <1>         pop     ebp
    47                              <1> 
    48 00001192 C3                  <1>         ret
   177                                  %include        "..\modules\protect\int_nm.s"
     1                              <1> get_tss_base:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;TSSセレクタで指定されているTSSディスクリプタからTSSベースアドレスを取得し、EAXに代入。
     4                              <1>         ;---------------------------------------
     5 00001193 8B83[8A050000]      <1>         mov     eax, [GDT + ebx + 2]            ;EAX = TSS[23:0];
     6 00001199 C1E008              <1>         shl     eax, 8                          ;EAX << 8;
     7 0000119C 8A83[8F050000]      <1>         mov     al, [GDT + ebx + 7]             ;AL = TSS[31:24];
     8 000011A2 C1C808              <1>         ror     eax, 8                          ;EAX >>= 8; //循環
     9                              <1> 
    10 000011A5 C3                  <1>         ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1>         ;---------------------------------------
    14                              <1>         ;EAXレジスタに設定されたTSSディスクリプタのベースアドレスを参照して、FPUコンテキストを保存し、保存済みフラグをセット。
    15                              <1>         ;---------------------------------------
    16 000011A6 DD7068              <1>         fnsave  [eax + 104]                     ;//FPUコンテキストを保存
    17 000011A9 C780D4000000010000- <1>         mov     [eax + 104 + 108], dword 1      ;saved = 1; //フラグをセット
    17 000011B2 00                  <1>
    18                              <1> 
    19 000011B3 C3                  <1>         ret
    20                              <1> 
    21                              <1> load_fpu_context:
    22                              <1>         ;---------------------------------------
    23                              <1>         ;FPUコンテキストを復帰する。保存済みフラグがセットされていなければFPUを初期化する。
    24                              <1>         ;---------------------------------------
    25 000011B4 83B8D400000000      <1>         cmp     [eax + 104 + 108], dword 0      ;if(0 == saved)
    26 000011BB 7504                <1>         jne     .10F                            ;{
    27 000011BD DBE3                <1>         fninit                                  ;   //FPUの初期化
    28 000011BF EB03                <1>         jmp     .10E                            ;}
    29                              <1> .10F:                                           ;else
    30                              <1>                                                 ;{
    31 000011C1 DD6068              <1>         frstor  [eax + 104]                     ;   //FPUコンテキストを復帰
    32                              <1> .10E:                                           ;}
    33                              <1> 
    34 000011C4 C3                  <1>         ret
    35                              <1> 
    36                              <1> int_nm:
    37                              <1>         ;-----------------------------------
    38                              <1>         ;レジスタの保存
    39                              <1>         ;-----------------------------------
    40 000011C5 60                  <1>         pusha
    41 000011C6 1E                  <1>         push    ds
    42 000011C7 06                  <1>         push    es
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;カーネル用セレクタを設定
    46                              <1>         ;---------------------------------------
    47 000011C8 66B81000            <1>         mov     ax, DS_KERNEL                   ;0x10と同じ
    48 000011CC 8ED8                <1>         mov     ds, ax
    49 000011CE 8EC0                <1>         mov     es, ax
    50                              <1>         
    51                              <1>         ;---------------------------------------
    52                              <1>         ;タスクスイッチフラグをクリア
    53                              <1>         ;---------------------------------------
    54 000011D0 0F06                <1>         clts                                    ;CR0.TS = 0;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;前回/今回FPUを使用するタスク
    58                              <1>         ;---------------------------------------
    59 000011D2 8B3D[1C120000]      <1>         mov     edi, [.last_tss]                ;EDI = 前回FPUを使用したタスクのTSS
    60 000011D8 0F00CE              <1>         str     esi                             ;ESI = 今回FPUを使用したタスクのTSS
    61 000011DB 83E6F8              <1>         and     esi, ~0x0007                    ;//特権レベルとTI(Table Indicator:テーブル指定)bitをマスクして除外
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;FPUの初回利用をチェック
    65                              <1>         ;---------------------------------------
    66 000011DE 83FF00              <1>         cmp     edi, 0                          ;if(0 != EDI) //前回使用したタスク
    67 000011E1 7420                <1>         je      .10F                            ;{
    68                              <1>         
    69 000011E3 39FE                <1>         cmp     esi, edi                        ;   if(ESI != EDI) //異なるタスク
    70 000011E5 741A                <1>         je      .12E                            ;   {
    71                              <1>         
    72 000011E7 FA                  <1>         cli                                     ;       //割り込み禁止
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;前回のFPUコンテキストを保存
    76                              <1>         ;---------------------------------------
    77 000011E8 89FB                <1>         mov     ebx, edi                        ;       EBX = EDI; //前回のタスク
    78 000011EA E8A4FFFFFF          <1>         call    get_tss_base                    ;       EAX = get_tss_base(TSSセレクタインデックス(前回)); //TSSアドレスを取得
    79 000011EF E8B2FFFFFF          <1>         call    save_fpu_context                ;       save_fpu_context(); //FPUコンテキスを保存
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;今回のFPUコンテキストを復帰
    83                              <1>         ;---------------------------------------
    84 000011F4 89F3                <1>         mov     ebx, esi                        ;       EBX = ESI; //今回のタスク
    85 000011F6 E898FFFFFF          <1>         call    get_tss_base                    ;       EAX = get_tss_base(TSSセレクタインデックス(今回)); //TSSアドレスを取得
    86 000011FB E8B4FFFFFF          <1>         call    load_fpu_context                ;       load_fpu_context(); //FPUコンテキスを復帰
    87                              <1> 
    88 00001200 FB                  <1>         sti                                     ;       //割り込み許可
    89                              <1> .12E:                                           ;   }
    90 00001201 EB0E                <1>         jmp     .10E                            ;}
    91                              <1> .10F:                                           ;else
    92                              <1>                                                 ;{
    93                              <1>         
    94 00001203 FA                  <1>         cli                                     ;   //割り込み禁止
    95                              <1> 
    96                              <1>         ;---------------------------------------
    97                              <1>         ;今回のFPUコンテキストを復帰
    98                              <1>         ;---------------------------------------
    99 00001204 89F3                <1>         mov     ebx, esi                        ;   EBX = ESI; //今回のタスク
   100 00001206 E888FFFFFF          <1>         call    get_tss_base                    ;   EAX = get_tss_base(TSSセレクタインデックス(今回)); //TSSアドレスを取得
   101 0000120B E8A4FFFFFF          <1>         call    load_fpu_context                ;   load_fpu_context(); //FPUコンテキスを復帰
   102                              <1> 
   103 00001210 FB                  <1>         sti                                     ;   //割り込み許可
   104                              <1> .10E:                                           ;}
   105                              <1> 
   106 00001211 8935[1C120000]      <1>         mov     [.last_tss], esi                ;//FPUを使用したタスクを保存
   107                              <1> 
   108                              <1>         ;---------------------------------------
   109                              <1>         ;レジスタの復帰
   110                              <1>         ;---------------------------------------
   111 00001217 07                  <1>         pop     es
   112 00001218 1F                  <1>         pop     ds
   113 00001219 61                  <1>         popa
   114                              <1> 
   115 0000121A CF                  <1>         iret
   116                              <1> 
   117 0000121B 00                  <1> ALIGN   4,  db  0
   118 0000121C 00000000            <1> .last_tss:  dd  0
   178                                  %include        "..\modules\protect\wait_tick.s"
     1                              <1> wait_tick:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| ウェイト
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00001220 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00001221 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00001223 50                  <1>         push    eax
    14 00001224 51                  <1>         push    ecx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;ウェイト
    18                              <1>         ;---------------------------------------
    19 00001225 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = ウェイト回数
    20 00001228 A1[74060000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = TIMER;
    21                              <1>                                                 ;do
    22                              <1>                                                 ;{
    23 0000122D 3905[74060000]      <1> .10L:   cmp     [TIMER_COUNT], eax              ;   while(TIMER_COUNT == EAX){} //タイマ割り込みでループを出る
    24 00001233 74F8                <1>         je      .10L
    25 00001235 40                  <1>         inc     eax                             ;   EAX++;
    26 00001236 E2F5                <1>         loop    .10L                            ;}while(ECX--);
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;レジスタの復帰
    30                              <1>         ;---------------------------------------
    31 00001238 59                  <1>         pop     ecx
    32 00001239 58                  <1>         pop     eax
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;スタックフレームの破棄
    36                              <1>         ;---------------------------------------
    37 0000123A 89EC                <1>         mov     esp, ebp
    38 0000123C 5D                  <1>         pop     ebp
    39                              <1> 
    40 0000123D C3                  <1>         ret
   179                                  
   180                                  ;********************************************************************************************************
   181                                  ;パディング
   182                                  ;********************************************************************************************************
   183 0000123E 00<rept>                        times KERNEL_SIZE - ($ - $$)    db 0    ;パディング
