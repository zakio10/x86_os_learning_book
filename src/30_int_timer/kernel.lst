     1                                  ;********************************************************************************************************
     2                                  ;マクロ
     3                                  ;********************************************************************************************************
     4                                  %include        "..\include\define.s"
     1                              <1> VECT_BASE       equ     0x0010_0000             ;0010_0000:0010_07FF
     2                              <1> 
     3                              <1> SECT_SIZE   equ     (512)                   ;セクタサイズ
     4                              <1> 
     5                              <1> BOOT_LOAD   equ     0x7C00                  ;ブートプログラムのロード位置
     6                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)
     7                              <1> BOOT_SIZE   equ     (1024 * 8)              ;ブートコードサイズ
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     9                              <1> 
    10                              <1> KERNEL_LOAD equ     0x0010_1000
    11                              <1> KERNEL_SIZE equ     (1024*8)                ;カーネルサイズ
    12                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> STACK_BASE  equ     0x0010_3000             ;タスク用スタックエリア
    15                              <1> STACK_SIZE  equ     1024                    ;スタックサイズ
    16                              <1> 
    17                              <1> SP_TASK_0   equ     STACK_BASE + (STACK_SIZE * 1)
    18                              <1> SP_TASK_2   equ     STACK_BASE + (STACK_SIZE * 2)
    19                              <1> 
    20                              <1> E820_RECORD_SIZE    equ 20
     5                                  %include        "..\include\macro.s"
     1                              <1> %define     RING_ITEM_SIZE  (1 << 4)
     2                              <1> %define     RING_INDEX_MASK (RING_ITEM_SIZE - 1)
     3                              <1> 
     4                              <1> struc drive
     5 00000000 <res 00000002>      <1>         .no         resw    1                       ;ドライブ番号
     6 00000002 <res 00000002>      <1>         .cyln       resw    1                       ;シリンダ
     7 00000004 <res 00000002>      <1>         .head       resw    1                       ;ヘッド
     8 00000006 <res 00000002>      <1>         .sect       resw    1                       ;セクタ
     9                              <1> endstruc
    10                              <1> 
    11                              <1> struc ring_buff
    12 00000000 <res 00000004>      <1>         .rp         resd    1                       ;RP:書き込み位置
    13 00000004 <res 00000004>      <1>         .wp         resd    1                       ;WP:読み込み位置
    14 00000008 <res 00000010>      <1>         .item       resb    RING_ITEM_SIZE          ;ブッファ
    15                              <1> endstruc
    16                              <1> 
    17                              <1> %macro  cdecl   1-*.nolist
    18                              <1> 
    19                              <1>     %rep    %0 - 1
    20                              <1>         push    %{-1:-1}
    21                              <1>         %rotate -1
    22                              <1>     %endrep
    23                              <1>     %rotate -1
    24                              <1> 
    25                              <1>         call    %1
    26                              <1> 
    27                              <1>     %if 1 < %0
    28                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    29                              <1>     %endif
    30                              <1> 
    31                              <1> %endmacro
    32                              <1> 
    33                              <1> %macro  set_vect    1-*
    34                              <1>         push    eax
    35                              <1>         push    edi
    36                              <1> 
    37                              <1>         mov     edi, VECT_BASE + (%1 * 8)           ;ベクタアドレス
    38                              <1>         mov     eax, %2
    39                              <1> 
    40                              <1>     %if 3 == %0
    41                              <1>         mov     [edi + 4], %3                       ;フラグ
    42                              <1>     %endif
    43                              <1> 
    44                              <1>         mov     [edi + 0], ax                       ;例外アドレス[15:0]
    45                              <1>         shr     eax, 16
    46                              <1>         mov     [edi + 6], ax                       ;6はエンディアン(?) 例外アドレス[31:16]
    47                              <1> 
    48                              <1>         pop     edi
    49                              <1>         pop     eax
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro  outp    2
    53                              <1>         mov     al, %2
    54                              <1>         out     %1, al
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro  set_desc    2-*
    58                              <1>         push    eax
    59                              <1>         push    edi
    60                              <1> 
    61                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
    62                              <1>         mov     eax, %2                             ;ベースアドレス
    63                              <1> 
    64                              <1>     %if 3 == %0
    65                              <1>         mov     [edi + 0], %3                       ;リミット
    66                              <1>     %endif
    67                              <1>     
    68                              <1>         mov     [edi + 2], ax                       ;ベース([15: 0])
    69                              <1>         shr     eax, 16
    70                              <1>         mov     [edi + 4], al                       ;ベース([23:16])
    71                              <1>         mov     [edi + 7], ah                       ;ベース([31:24])
    72                              <1> 
    73                              <1>         pop     edi
    74                              <1>         pop     eax
    75                              <1> %endmacro
     6                                  
     7                                          ORG     KERNEL_LOAD                             ;カーネルのロードアドレス
     8                                  
     9                                  [BITS 32]
    10                                  ;********************************************************************************************************
    11                                  ;エントリポイント
    12                                  ;********************************************************************************************************
    13                                  kernel:
    14                                          ;---------------------------------------
    15                                          ;フォントアドレスを取得
    16                                          ;---------------------------------------
    17 00000000 BE007E0000                      mov     esi, BOOT_LOAD + SECT_SIZE      ;ESI = 0x7C00 + 512
    18 00000005 0FB706                          movzx   eax, word [esi + 0]             ;EAX = [ESI + 0] //セグメント
    19 00000008 0FB75E02                        movzx   ebx, word [esi + 2]             ;EBX = [ESI + 2] //オフセット
    20 0000000C C1E004                          shl     eax, 4                          ;EAX << 4;
    21 0000000F 01D8                            add     eax, ebx                        ;EAX += EBX;
    22 00000011 A3[2C010000]                    mov     [FONT_ADR], eax                 ;FONT_ADR[0] = EAX;
    23                                  
    24                                          ;---------------------------------------
    25                                          ;初期化
    26                                          ;---------------------------------------
    27 00000016 E8EF070000                      cdecl   init_int                        ;//割り込みベクタの初期化
    28 0000001B E839080000                      cdecl   init_pic                        ;//割り込みコントローラの初期化
    29                                  
    30                                          set_vect        0x00, int_zero_div      ;割り込み処理の登録:0除算
    30 00000020 50                  <1>  push eax
    30 00000021 57                  <1>  push edi
    30                              <1> 
    30 00000022 BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    30 00000027 B8[3B080000]        <1>  mov eax, %2
    30                              <1> 
    30                              <1>  %if 3 == %0
    30                              <1>  mov [edi + 4], %3
    30                              <1>  %endif
    30                              <1> 
    30 0000002C 668907              <1>  mov [edi + 0], ax
    30 0000002F C1E810              <1>  shr eax, 16
    30 00000032 66894706            <1>  mov [edi + 6], ax
    30                              <1> 
    30 00000036 5F                  <1>  pop edi
    30 00000037 58                  <1>  pop eax
    31                                          set_vect        0x20, int_timer         ;割り込み処理の登録:タイマー
    31 00000038 50                  <1>  push eax
    31 00000039 57                  <1>  push edi
    31                              <1> 
    31 0000003A BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    31 0000003F B8[AC090000]        <1>  mov eax, %2
    31                              <1> 
    31                              <1>  %if 3 == %0
    31                              <1>  mov [edi + 4], %3
    31                              <1>  %endif
    31                              <1> 
    31 00000044 668907              <1>  mov [edi + 0], ax
    31 00000047 C1E810              <1>  shr eax, 16
    31 0000004A 66894706            <1>  mov [edi + 6], ax
    31                              <1> 
    31 0000004E 5F                  <1>  pop edi
    31 0000004F 58                  <1>  pop eax
    32                                          set_vect        0x21, int_keyboard      ;割り込み処理の登録:KBC
    32 00000050 50                  <1>  push eax
    32 00000051 57                  <1>  push edi
    32                              <1> 
    32 00000052 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    32 00000057 B8[6E090000]        <1>  mov eax, %2
    32                              <1> 
    32                              <1>  %if 3 == %0
    32                              <1>  mov [edi + 4], %3
    32                              <1>  %endif
    32                              <1> 
    32 0000005C 668907              <1>  mov [edi + 0], ax
    32 0000005F C1E810              <1>  shr eax, 16
    32 00000062 66894706            <1>  mov [edi + 6], ax
    32                              <1> 
    32 00000066 5F                  <1>  pop edi
    32 00000067 58                  <1>  pop eax
    33                                          set_vect        0x28, int_rtc           ;割り込み処理の登録:RTC
    33 00000068 50                  <1>  push eax
    33 00000069 57                  <1>  push edi
    33                              <1> 
    33 0000006A BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    33 0000006F B8[84080000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if 3 == %0
    33                              <1>  mov [edi + 4], %3
    33                              <1>  %endif
    33                              <1> 
    33 00000074 668907              <1>  mov [edi + 0], ax
    33 00000077 C1E810              <1>  shr eax, 16
    33 0000007A 66894706            <1>  mov [edi + 6], ax
    33                              <1> 
    33 0000007E 5F                  <1>  pop edi
    33 0000007F 58                  <1>  pop eax
    34                                  
    35                                          ;---------------------------------------
    36                                          ;デバイスの割り込み許可
    37                                          ;---------------------------------------
    38 00000080 6A10E8260800006683-             cdecl   rtc_int_en, 0x10                ;rtc_int_en(UIE); //更新サイクル終了割り込み許可
    38 00000089 C404               
    39 0000008B E840090000                      cdecl   int_en_timer0                   ;//タイマー(カウンタ0)割り込み許可
    40                                  
    41                                          ;---------------------------------------
    42                                          ;IMR(割り込みマスクレジスタ)の設定
    43                                          ;---------------------------------------
    44                                          outp    0x21, 0b_1111_1000              ;//割り込み有効:スレーブPIC/KBC/タイマー
    44 00000090 B0F8                <1>  mov al, %2
    44 00000092 E621                <1>  out %1, al
    45                                          outp    0xA1, 0b_1111_1110              ;//割り込み有効:RTC
    45 00000094 B0FE                <1>  mov al, %2
    45 00000096 E6A1                <1>  out %1, al
    46                                  
    47                                          ;---------------------------------------
    48                                          ;CPUの割り込み許可
    49                                          ;---------------------------------------
    50 00000098 FB                              sti                                      ;//割り込み許可
    51                                  
    52                                          ;---------------------------------------
    53                                          ;フォントの一覧表示
    54                                          ;---------------------------------------
    55 00000099 6A0D6A3FE80B020000-             cdecl   draw_font, 63, 13               ;//フォントの一覧表示
    55 000000A2 6683C408           
    56 000000A6 6A046A3FE88A020000-             cdecl   draw_color_bar, 63, 4           ;//カラーバーの表示
    56 000000AF 6683C408           
    57                                  
    58                                          ;---------------------------------------
    59                                          ;文字列の表示
    60                                          ;---------------------------------------
    61 000000B3 68[15010000]680F01-             cdecl   draw_str, 25, 14, 0x010F, .s0   ;draw_str();
    61 000000BB 00006A0E6A19E82A02-
    61 000000C4 00006683C410       
    62                                  
    63                                          ;---------------------------------------
    64                                          ;時刻の表示
    65                                          ;---------------------------------------
    66                                  .10L:                                           ;do
    67                                                                                  ;{
    68 000000CA A1[30010000]                    mov     eax, [RTC_TIME]                 ;       //時刻の取得
    69 000000CF 5068000700006A006A-             cdecl   draw_time, 72, 0, 0x0700, eax   ;       //時刻の表示
    69 000000D8 48E8780500006683C4-
    69 000000E1 10                 
    70                                  
    71 000000E2 E8F8080000                      cdecl   draw_rotation_bar               ;       //回転する棒を表示
    72                                  
    73 000000E7 68[26010000]68-                 cdecl   ring_rd, _KEY_BUFF, .int_key    ;       EAX = ring_rd(buff, &int_key);
    73 000000ED [94090000]E8CB0700-
    73 000000F5 006683C408         
    74 000000FA 83F800                          cmp     eax, 0                          ;       if(EAX != 0)
    75 000000FD 7412                            je      .10E                            ;       {
    76 000000FF 68[94090000]6A1D6A-             cdecl   draw_key, 2, 29, _KEY_BUFF      ;               ring_show(key_buff); //全要素を表示
    76 00000107 02E80D0800006683C4-
    76 00000110 0C                 
    77                                  .10E:                                           ;       }
    78                                  
    79 00000111 EBB7                            jmp     .10L                            ;}while(1);
    80                                  
    81                                          ;---------------------------------------
    82                                          ;処理の終了
    83                                          ;---------------------------------------
    84 00000113 EBFE                            jmp     $                               ;while(1) //無限ループ
    85                                  
    86                                  
    87                                  
    88 00000115 2048656C6C6F2C206B-     .s0:    db      " Hello, kernel! ", 0
    88 0000011E 65726E656C212000   
    89                                  
    90 00000126 00000000                .int_key:       dd      0
    91                                  
    92 0000012A 00<rept>                ALIGN   4, db   0
    93 0000012C 00000000                FONT_ADR:       dd      0
    94 00000130 00000000                RTC_TIME:       dd      0
    95                                  
    96                                  ;********************************************************************************************************
    97                                  ;モジュール
    98                                  ;********************************************************************************************************
    99                                  %include        "..\modules\protect\vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 読み込みプレーン(0~3)
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000134 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000135 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000137 6650                <1>         push    ax
    14 00000139 6652                <1>         push    dx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;読み込みプレーンの選択
    18                              <1>         ;---------------------------------------
    19 0000013B 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    20 0000013E 80E403              <1>         and     ah, 0x03                        ;AH &= 0x03; //余計なビットをマスク
    21 00000141 B004                <1>         mov     al, 0x04                        ;AL = 読み込みマップ選択レジスタ
    22 00000143 66BACE03            <1>         mov     dx, 0x03CE                      ;DX = グラフィックス制御ポート
    23 00000147 66EF                <1>         out     dx, ax                          ;//ポート出力
    24                              <1>         
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00000149 665A                <1>         pop     dx
    29 0000014B 6658                <1>         pop     ax
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;スタックフレームの破棄
    33                              <1>         ;---------------------------------------
    34 0000014D 89EC                <1>         mov     esp, ebp
    35 0000014F 5D                  <1>         pop     ebp
    36                              <1> 
    37 00000150 C3                  <1>         ret
    38                              <1> 
    39                              <1> vga_set_write_plane:
    40                              <1>         ;-----------------------------------
    41                              <1>         ;スタックフレームの構築
    42                              <1>         ;-----------------------------------
    43                              <1>                                             ;   + 8| 書き込みプレーン
    44                              <1>                                             ;   + 4| IP(戻り番号)
    45 00000151 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    46 00000152 89E5                <1>         mov    ebp, esp                     ;------|---------
    47                              <1> 
    48                              <1>         ;-----------------------------------
    49                              <1>         ;レジスタの保存
    50                              <1>         ;-----------------------------------
    51 00000154 6650                <1>         push    ax
    52 00000156 6652                <1>         push    dx
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;読み込みプレーンの選択
    56                              <1>         ;---------------------------------------
    57 00000158 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    58 0000015B 80E40F              <1>         and     ah, 0x0F                        ;AH &= 0x03; //余計なビットをマスク
    59 0000015E B002                <1>         mov     al, 0x02                        ;AL = 読み込みマップ選択レジスタ
    60 00000160 66BAC403            <1>         mov     dx, 0x03C4                      ;DX = グラフィックス制御ポート
    61 00000164 66EF                <1>         out     dx, ax                          ;//ポート出力
    62                              <1>         
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 00000166 665A                <1>         pop     dx
    67 00000168 6658                <1>         pop     ax
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;スタックフレームの破棄
    71                              <1>         ;---------------------------------------
    72 0000016A 89EC                <1>         mov     esp, ebp
    73 0000016C 5D                  <1>         pop     ebp
    74                              <1> 
    75 0000016D C3                  <1>         ret
    76                              <1> 
    77                              <1> vram_font_copy:
    78                              <1>         ;-----------------------------------
    79                              <1>         ;スタックフレームの構築
    80                              <1>         ;-----------------------------------
    81                              <1>                                             ;EBP+20| 描画色
    82                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
    83                              <1>                                             ;EBP+12| VRAMアドレス
    84                              <1>                                             ;   + 8| FONTアドレス
    85                              <1>                                             ;   + 4| IP(戻り番号)
    86 0000016E 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    87 0000016F 89E5                <1>         mov    ebp, esp                     ;------|---------
    88                              <1> 
    89                              <1>         ;-----------------------------------
    90                              <1>         ;レジスタの保存
    91                              <1>         ;-----------------------------------
    92 00000171 50                  <1>         push    eax
    93 00000172 53                  <1>         push    ebx
    94 00000173 51                  <1>         push    ecx
    95 00000174 57                  <1>         push    edi
    96 00000175 52                  <1>         push    edx
    97 00000176 56                  <1>         push    esi
    98                              <1> 
    99                              <1>         ;---------------------------------------
   100                              <1>         ;引数を変数に代入
   101                              <1>         ;---------------------------------------
   102 00000177 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = フォントアドレス;
   103 0000017A 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   104 0000017D 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   105 00000181 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   106                              <1> 
   107                              <1>         ;---------------------------------------
   108                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   109                              <1>         ;---------------------------------------
   110 00000185 84C7                <1>         test    bh, al                          ;ZF = (背景色 & プレーン)
   111 00000187 0F94C6              <1>         setz    dh                              ;if(ZF == 1){ DH = 0x00; }else{ DH = 0x01;}
   112 0000018A FECE                <1>         dec     dh                              ;DH--; // 0xFF or 0x00
   113                              <1> 
   114 0000018C 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   115 0000018E 0F94C2              <1>         setz    dl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   116 00000191 FECA                <1>         dec     dl                              ;DL--; //0xFF or 0x00
   117                              <1> 
   118                              <1>         ;---------------------------------------
   119                              <1>         ;16ビットフォントのコピー
   120                              <1>         ;---------------------------------------
   121 00000193 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
   122                              <1> 
   123 00000194 B910000000          <1>         mov     ecx, 16                         ;ECX = 16; //16ドット
   124                              <1> .10L:                                           ;do
   125                              <1>                                                 ;{
   126                              <1>         ;---------------------------------------
   127                              <1>         ;フォントマスクの作成
   128                              <1>         ;---------------------------------------
   129 00000199 AC                  <1>         lodsb                                   ;   AL = *ESI++; //フォント
   130 0000019A 88C4                <1>         mov     ah, al                          ;   AH = AL;
   131 0000019C F6D4                <1>         not     ah                              ;   AH ~= AH; //!フォント(ビット反転)
   132                              <1> 
   133                              <1>         ;---------------------------------------
   134                              <1>         ;前景色
   135                              <1>         ;---------------------------------------
   136 0000019E 20D0                <1>         and     al, dl                          ;   AL = 前景色 & フォント;
   137                              <1> 
   138                              <1>         ;---------------------------------------
   139                              <1>         ;背景色
   140                              <1>         ;---------------------------------------
   141 000001A0 F7C310000000        <1>         test    ebx, 0x0010                     ;if(透過モード)
   142 000001A6 7404                <1>         jz      .11F                            ;{
   143 000001A8 2227                <1>         and     ah, [edi]                       ;   AH = !フォント & [EDI] //現在値
   144 000001AA EB02                <1>         jmp     .11E                            ;}
   145                              <1> .11F:                                           ;else
   146                              <1>                                                 ;{
   147 000001AC 20F4                <1>         and     ah, dh                          ;   AH = !フォント & 背景色
   148                              <1> .11E:                                           ;}
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;前景色と背景色を合成
   152                              <1>         ;---------------------------------------
   153 000001AE 08E0                <1>         or  al, ah                              ;   AL = 背景 | 前景;
   154                              <1> 
   155                              <1>         ;---------------------------------------
   156                              <1>         ;新しい値を出力（VRAMに代入)
   157                              <1>         ;---------------------------------------
   158 000001B0 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //プレーンに書き込む
   159                              <1> 
   160 000001B2 83C750              <1>         add     edi, 80                         ;   EDI += 80;
   161 000001B5 E2E2                <1>         loop    .10L                            ;}while(--ECX);
   162                              <1> .10E:
   163                              <1>         ;---------------------------------------
   164                              <1>         ;レジスタの復帰
   165                              <1>         ;---------------------------------------
   166 000001B7 5E                  <1>         pop     esi
   167 000001B8 5A                  <1>         pop     edx
   168 000001B9 5F                  <1>         pop     edi
   169 000001BA 59                  <1>         pop     ecx
   170 000001BB 5B                  <1>         pop     ebx
   171 000001BC 58                  <1>         pop     eax
   172                              <1> 
   173                              <1>         ;---------------------------------------
   174                              <1>         ;スタックフレームの破棄
   175                              <1>         ;---------------------------------------
   176 000001BD 89EC                <1>         mov     esp, ebp
   177 000001BF 5D                  <1>         pop     ebp
   178                              <1> 
   179 000001C0 C3                  <1>         ret
   180                              <1> 
   181                              <1> vram_bit_copy:
   182                              <1>         ;-----------------------------------
   183                              <1>         ;スタックフレームの構築
   184                              <1>         ;-----------------------------------
   185                              <1>                                             ;EBP+20| 描画色
   186                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
   187                              <1>                                             ;EBP+12| VRAMアドレス
   188                              <1>                                             ;   + 8| 出力ビットパターン
   189                              <1>                                             ;   + 4| IP(戻り番号)
   190 000001C1 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
   191 000001C2 89E5                <1>         mov    ebp, esp                     ;------|---------
   192                              <1> 
   193                              <1>         ;-----------------------------------
   194                              <1>         ;レジスタの保存
   195                              <1>         ;-----------------------------------
   196 000001C4 50                  <1>         push    eax
   197 000001C5 53                  <1>         push    ebx
   198 000001C6 57                  <1>         push    edi
   199                              <1> 
   200                              <1>         ;---------------------------------------
   201                              <1>         ;引数を変数に代入
   202                              <1>         ;---------------------------------------
   203 000001C7 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   204 000001CA 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   205 000001CE 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   206                              <1> 
   207                              <1>         ;---------------------------------------
   208                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   209                              <1>         ;---------------------------------------
   210 000001D2 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   211 000001D4 0F94C3              <1>         setz    bl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   212 000001D7 FECB                <1>         dec     bl                              ;DL--; //0xFF or 0x00
   213                              <1> 
   214                              <1>         ;---------------------------------------
   215                              <1>         ;背景のマスクを作成
   216                              <1>         ;---------------------------------------
   217 000001D9 8A4508              <1>         mov     al, [ebp + 8]                   ;AL = 出力ビットパターン;
   218 000001DC 88C4                <1>         mov     ah, al                          ;AH ~= AL; //!出力ビットパターン(ビット反転)
   219 000001DE F6D4                <1>         not     ah
   220                              <1> 
   221                              <1>         ;---------------------------------------
   222                              <1>         ;背景色
   223                              <1>         ;---------------------------------------
   224 000001E0 2227                <1>         and     ah, [edi]                       ;AH = 現在値 & !出力ビットパターン
   225 000001E2 20D8                <1>         and     al, bl                          ;AL = 表示色 & 出力ビットパターン
   226 000001E4 08E0                <1>         or      al, ah                          ;AL |= AH;
   227 000001E6 8807                <1>         mov     [edi], al                       ;[EDI] = BL; //プレーンに書き込む
   228                              <1> 
   229                              <1>         ;---------------------------------------
   230                              <1>         ;レジスタの復帰
   231                              <1>         ;---------------------------------------
   232 000001E8 5F                  <1>         pop     edi
   233 000001E9 5B                  <1>         pop     ebx
   234 000001EA 58                  <1>         pop     eax
   235                              <1> 
   236                              <1>         ;---------------------------------------
   237                              <1>         ;スタックフレームの破棄
   238                              <1>         ;---------------------------------------
   239 000001EB 89EC                <1>         mov     esp, ebp
   240 000001ED 5D                  <1>         pop     ebp
   241                              <1> 
   242 000001EE C3                  <1>         ret
   100                                  %include        "..\modules\protect\draw_char.s"
     1                              <1> draw_char:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +20| 文字
     6                              <1>                                             ;   +16| 描画色
     7                              <1>                                             ;   +12| 行(0~29)
     8                              <1>                                             ;   + 8| 列(0~79)
     9                              <1>                                             ;   + 4| IP(戻り番号)
    10 000001EF 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    11 000001F0 89E5                <1>         mov    ebp, esp                     ;------|---------
    12                              <1> 
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 000001F2 53                  <1>         push    ebx
    17 000001F3 57                  <1>         push    edi
    18 000001F4 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 000001F5 0FB67514            <1>         movzx   esi, byte [ebp +20]             ;CL = 文字コード;
    24 000001F9 C1E604              <1>         shl     esi, 4                          ;CL *= 16; //1文字16バイト
    25 000001FC 0335[2C010000]      <1>         add     esi, [FONT_ADR]                 ;ESI = フォントアドレス;
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;コピー先アドレスを取得
    29                              <1>         ;adr = 0xA0000 + (640 / 8 * 16) * y + x
    30                              <1>         ;---------------------------------------
    31 00000202 8B7D0C              <1>         mov     edi, [ebp +12]                  ;Y(行)
    32 00000205 C1E708              <1>         shl     edi, 8                          ;EDI = Y * 256;
    33 00000208 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]  ;EDI = Y * 4 + Y;
    34 0000020F 037D08              <1>         add     edi, [ebp + 8]                  ;X(列)
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;1文字文のフォントを出力
    38                              <1>         ;---------------------------------------
    39 00000212 0FB75D10            <1>         movzx   ebx, word [ebp +16]             ; //表示色
    40                              <1> 
    41 00000216 6A03E817FFFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;//読み込みプレーン:輝度(I)
    41 0000021F C404                <1>
    42 00000221 6A08E829FFFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;//書き込みプレーン:輝度(I)
    42 0000022A C404                <1>
    43 0000022C 536A085756E838FFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x08, ebx
    43 00000235 FF6683C410          <1>
    44                              <1>         
    45 0000023A 6A02E8F3FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;//読み込みプレーン:赤(R)
    45 00000243 C404                <1>
    46 00000245 6A04E805FFFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;//書き込みプレーン:赤(R)
    46 0000024E C404                <1>
    47 00000250 536A045756E814FFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x04, ebx
    47 00000259 FF6683C410          <1>
    48                              <1> 
    49 0000025E 6A01E8CFFEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;//読み込みプレーン:緑(G)
    49 00000267 C404                <1>
    50 00000269 6A02E8E1FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;//書き込みプレーン:緑(G)
    50 00000272 C404                <1>
    51 00000274 536A025756E8F0FEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x02, ebx
    51 0000027D FF6683C410          <1>
    52                              <1> 
    53 00000282 6A00E8ABFEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;//読み込みプレーン:青(B)
    53 0000028B C404                <1>
    54 0000028D 6A01E8BDFEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;//書き込みプレーン:青(B)
    54 00000296 C404                <1>
    55 00000298 536A015756E8CCFEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x01, ebx
    55 000002A1 FF6683C410          <1>
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの復帰
    59                              <1>         ;---------------------------------------
    60 000002A6 5E                  <1>         pop     esi
    61 000002A7 5F                  <1>         pop     edi
    62 000002A8 5B                  <1>         pop     ebx
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;スタックフレームの破棄
    66                              <1>         ;---------------------------------------
    67 000002A9 89EC                <1>         mov     esp, ebp
    68 000002AB 5D                  <1>         pop     ebp
    69                              <1> 
    70 000002AC C3                  <1>         ret
   101                                  %include        "..\modules\protect\draw_font.s"
     1                              <1> draw_font:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 000002AD 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 000002AE 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 000002B0 50                  <1>         push    eax
    15 000002B1 53                  <1>         push    ebx
    16 000002B2 51                  <1>         push    ecx
    17 000002B3 57                  <1>         push    edi
    18 000002B4 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 000002B5 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 000002B8 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;コピー先アドレスを取得
    28                              <1>         ;---------------------------------------
    29 000002BB B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 000002C0 81F900010000        <1> .10L:   cmp     ecx, 256                        ;    ECX < 256;
    31 000002C6 731F                <1>         jae     .10E                            ;
    32                              <1>                                                 ;    ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示する桁位置を計算
    36                              <1>         ;---------------------------------------
    37 000002C8 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 000002CA 83E00F              <1>         and     eax, 0x0F                       ;   EAX &= 0x0F;
    39 000002CD 01F0                <1>         add     eax, esi                        ;   EAX += X;
    40                              <1>         ;---------------------------------------
    41                              <1>         ;表示する行位置を計算
    42                              <1>         ;---------------------------------------
    43 000002CF 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    44 000002D1 C1EB04              <1>         shr     ebx, 4                          ;   EBX /= 16;
    45 000002D4 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    46                              <1>         
    47 000002D6 516A075350E80FFFFF- <1>         cdecl   draw_char, eax, ebx, 0x07, ecx  ;   draw_char();
    47 000002DF FF6683C410          <1>
    48                              <1> 
    49 000002E4 41                  <1>         inc     ecx                             ;   //for(... ECX++)
    50 000002E5 EBD9                <1>         jmp     .10L                            ;
    51                              <1> .10E:                                           ;}
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;レジスタの復帰
    55                              <1>         ;---------------------------------------
    56 000002E7 5E                  <1>         pop     esi
    57 000002E8 5F                  <1>         pop     edi
    58 000002E9 59                  <1>         pop     ecx
    59 000002EA 5B                  <1>         pop     ebx
    60 000002EB 58                  <1>         pop     eax
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;スタックフレームの破棄
    64                              <1>         ;---------------------------------------
    65 000002EC 89EC                <1>         mov     esp, ebp
    66 000002EE 5D                  <1>         pop     ebp
    67                              <1> 
    68 000002EF C3                  <1>         ret
   102                                  %include        "..\modules\protect\draw_str.s"
     1                              <1> draw_str:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 000002F0 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 000002F1 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 000002F3 50                  <1>         push    eax
    15 000002F4 53                  <1>         push    ebx
    16 000002F5 51                  <1>         push    ecx
    17 000002F6 52                  <1>         push    edx
    18 000002F7 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 000002F8 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = 列;
    24 000002FB 8B550C              <1>         mov     edx, [ebp +12]                  ;EDX = 行;
    25 000002FE 0FB75D10            <1>         movzx   ebx, word [ebp + 16]            ;EBX = 表示色;
    26 00000302 8B7514              <1>         mov     esi, [ebp +20]                  ;ESI = 文字列へのアドレス;
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字列を表示
    30                              <1>         ;---------------------------------------
    31 00000305 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
    32                              <1> .10L:                                           ;do
    33                              <1>                                                 ;{
    34 00000306 AC                  <1>         lodsb                                   ;   AL = *ESI++;
    35 00000307 3C00                <1>         cmp     al, 0                           ;   if(0 == AL)
    36 00000309 7425                <1>         je  .10E                                ;       break;
    37                              <1> 
    38 0000030B 50535251E8DBFEFFFF- <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;   draw_char();
    38 00000314 6683C410            <1>
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;文字の表示位置を更新
    42                              <1>         ;---------------------------------------
    43 00000318 41                  <1>         inc     ecx                             ;   ECX++; //列を加算
    44 00000319 83F950              <1>         cmp     ecx, 80                         ;   if(80 <= ECX) //80文字以上?
    45 0000031C 7C10                <1>         jl      .12E                            ;   {
    46 0000031E B900000000          <1>         mov     ecx, 0                          ;       ECX = 0; //列を初期化
    47 00000323 42                  <1>         inc     edx                             ;       EDX++; //行を加算
    48 00000324 83FA1E              <1>         cmp     edx, 30                         ;       if(30 <= EDX) //30行以上?
    49 00000327 7C05                <1>         jl      .12E                            ;       {
    50 00000329 BA00000000          <1>         mov     edx, 0                          ;           EDX = 0;
    51                              <1>                                                 ;       }
    52                              <1> .12E:                                           ;   }
    53 0000032E EBD6                <1>         jmp     .10L                            ;
    54                              <1> .10E:                                           ;}while(1);
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;レジスタの復帰
    58                              <1>         ;---------------------------------------
    59 00000330 5E                  <1>         pop     esi
    60 00000331 5A                  <1>         pop     edx
    61 00000332 59                  <1>         pop     ecx
    62 00000333 5B                  <1>         pop     ebx
    63 00000334 58                  <1>         pop     eax
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;スタックフレームの破棄
    67                              <1>         ;---------------------------------------
    68 00000335 89EC                <1>         mov     esp, ebp
    69 00000337 5D                  <1>         pop     ebp
    70                              <1> 
    71 00000338 C3                  <1>         ret
   103                                  %include        "..\modules\protect\draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000339 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 0000033A 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 0000033C 50                  <1>         push    eax
    15 0000033D 53                  <1>         push    ebx
    16 0000033E 51                  <1>         push    ecx
    17 0000033F 52                  <1>         push    edx
    18 00000340 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 00000341 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 00000344 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;カラーバーを表示
    28                              <1>         ;---------------------------------------
    29 00000347 B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 0000034C 83F910              <1> .10L:   cmp     ecx, 16                         ;    ECX < 16;
    31 0000034F 732E                <1>         jae     .10E
    32                              <1>                                                 ;ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示位置を計算(列)
    36                              <1>         ;---------------------------------------
    37 00000351 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 00000353 83E001              <1>         and     eax, 0x01                       ;   EAX &= 0x01;
    39 00000356 C1E003              <1>         shl     eax, 3                          ;   EAX *= 8; //8文字分乗算
    40 00000359 01F0                <1>         add     eax, esi                        ;   EAX += X;
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;表示位置を計算(行)
    44                              <1>         ;---------------------------------------
    45 0000035B 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    46 0000035D D1EB                <1>         shr     ebx, 1                          ;   EBX /= 2;
    47 0000035F 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    48                              <1> 
    49                              <1>         ;---------------------------------------
    50                              <1>         ;描画色を計算
    51                              <1>         ;---------------------------------------
    52 00000361 89CA                <1>         mov     edx, ecx                        ;   EDX = ECX;
    53 00000363 D1E2                <1>         shl     edx, 1                          ;   EDX *= 2;
    54 00000365 8B92[91030000]      <1>         mov     edx, [.t0 + edx]                ;   EDX += Y;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;カラーバーを表示
    58                              <1>         ;---------------------------------------
    59 0000036B 68[88030000]525350- <1>         cdecl   draw_str, eax, ebx, edx, .s0    ;   draw_str();
    59 00000373 E878FFFFFF6683C410  <1>
    60                              <1> 
    61 0000037C 41                  <1>         inc     ecx                             ;   //for(...ECX++
    62 0000037D EBCD                <1>         jmp     .10L                            ;
    63                              <1> .10E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;レジスタの復帰
    67                              <1>         ;---------------------------------------
    68 0000037F 5E                  <1>         pop     esi
    69 00000380 5A                  <1>         pop     edx
    70 00000381 59                  <1>         pop     ecx
    71 00000382 5B                  <1>         pop     ebx
    72 00000383 58                  <1>         pop     eax
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;スタックフレームの破棄
    76                              <1>         ;---------------------------------------
    77 00000384 89EC                <1>         mov     esp, ebp
    78 00000386 5D                  <1>         pop     ebp
    79                              <1> 
    80 00000387 C3                  <1>         ret
    81                              <1> 
    82                              <1>         ;---------------------------------------
    83                              <1>         ;データ
    84                              <1>         ;---------------------------------------
    85 00000388 202020202020202000  <1> .s0:    db  '        ', 0                       ;8文字分のスペース(表示色だけを変更)
    86                              <1> 
    87 00000391 00000008            <1> .t0:    dw  0x0000, 0x0800                      ;カラーバーの背景色
    88 00000395 00010009            <1>         dw  0x0100, 0x0900
    89 00000399 0002000A            <1>         dw  0x0200, 0x0A00
    90 0000039D 0003000B            <1>         dw  0x0300, 0x0B00
    91 000003A1 0004000C            <1>         dw  0x0400, 0x0C00
    92 000003A5 0005000D            <1>         dw  0x0500, 0x0D00
    93 000003A9 0006000E            <1>         dw  0x0600, 0x0E00
    94 000003AD 0007000F            <1>         dw  0x0700, 0x0F00
   104                                  %include        "..\modules\protect\draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +16| 色
     6                              <1>                                             ;   +12| Y(行)
     7                              <1>                                             ;   + 8| X(列)
     8                              <1>                                             ;   + 4| IP(戻り番号)
     9 000003B1 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    10 000003B2 89E5                <1>         mov    ebp, esp                     ;------|---------
    11                              <1> 
    12                              <1>         ;-----------------------------------
    13                              <1>         ;レジスタの保存
    14                              <1>         ;-----------------------------------
    15 000003B4 50                  <1>         push    eax
    16 000003B5 53                  <1>         push    ebx
    17 000003B6 51                  <1>         push    ecx
    18 000003B7 57                  <1>         push    edi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;描画位置のメモリアドレスを計算
    22                              <1>         ;---------------------------------------
    23                              <1>         ;---------------------------------------
    24                              <1>         ;Y座標を80倍する(640/8)
    25                              <1>         ;---------------------------------------
    26 000003B8 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y座標;
    27 000003BB C1E704              <1>         shl     edi, 4                          ;EDI *= 16;
    28 000003BE 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000] ;EDI = 0xA_0000[EDI * 4 + EDI];
    29                              <1>         
    30                              <1>         ;---------------------------------------
    31                              <1>         ;X座標を1/8して加算
    32                              <1>         ;---------------------------------------
    33 000003C5 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;EBX = X座標;
    34 000003C8 89D9                <1>         mov     ecx, ebx                        ;ECX = X座標; //一時保存
    35 000003CA C1EB03              <1>         shr     ebx, 3                          ;EBX /= 8;
    36 000003CD 01DF                <1>         add     edi, ebx                        ;EDI += EBX;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;X座標を8で割った余りからビット位置を計算(出力ビットパターン)
    40                              <1>         ;(0=0x80, 1=0x40,... 7=0x01)
    41                              <1>         ;---------------------------------------
    42 000003CF 83E107              <1>         and     ecx, 0x07                       ;ECX = X & 0x07;
    43 000003D2 BB80000000          <1>         mov     ebx, 0x80                       ;EBX = 0x80;
    44 000003D7 D3EB                <1>         shr     ebx, cl                         ;EBX >>= ECX;
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;色を指定
    48                              <1>         ;---------------------------------------
    49 000003D9 8B4D10              <1>         mov     ecx, [ebp +16]                  ;表示色
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;プレーンごとに出力
    53                              <1>         ;---------------------------------------
    54 000003DC 6A03E851FDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;輝度(I)プレーンを選択
    54 000003E5 C404                <1>
    55 000003E7 6A08E863FDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;輝度(I)プレーンを選択
    55 000003F0 C404                <1>
    56 000003F2 516A085753E8C5FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    56 000003FB FF6683C410          <1>
    57                              <1> 
    58 00000400 6A02E82DFDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;赤(R)プレーンを選択
    58 00000409 C404                <1>
    59 0000040B 6A04E83FFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;赤(R)プレーンを選択
    59 00000414 C404                <1>
    60 00000416 516A045753E8A1FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    60 0000041F FF6683C410          <1>
    61                              <1> 
    62 00000424 6A01E809FDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;緑(G)プレーンを選択
    62 0000042D C404                <1>
    63 0000042F 6A02E81BFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;緑(G)プレーンを選択
    63 00000438 C404                <1>
    64 0000043A 516A025753E87DFDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    64 00000443 FF6683C410          <1>
    65                              <1> 
    66 00000448 6A00E8E5FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;青(B)プレーンを選択
    66 00000451 C404                <1>
    67 00000453 6A01E8F7FCFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;青(B)プレーンを選択
    67 0000045C C404                <1>
    68 0000045E 516A015753E859FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    68 00000467 FF6683C410          <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;レジスタの復帰
    72                              <1>         ;---------------------------------------
    73 0000046C 5F                  <1>         pop     edi
    74 0000046D 59                  <1>         pop     ecx
    75 0000046E 5B                  <1>         pop     ebx
    76 0000046F 58                  <1>         pop     eax
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 00000470 89EC                <1>         mov     esp, ebp
    82 00000472 5D                  <1>         pop     ebp
    83                              <1> 
    84 00000473 C3                  <1>         ret
   105                                  %include        "..\modules\protect\draw_line.s"
     1                              <1> draw_line:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000474 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000475 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;変数を定義
    16                              <1>         ;-----------------------------------
    17 00000477 6A00                <1>         push    dword 0                     ;   - 4| sum = 0; //相対軸の積算値
    18 00000479 6A00                <1>         push    dword 0                     ;   - 8| x0 = 0; //X座標
    19 0000047B 6A00                <1>         push    dword 0                     ;   -12| dx = 0; //X増分
    20 0000047D 6A00                <1>         push    dword 0                     ;   -16| inc_x = 0; //X座標増分(基準軸:1 or -1)
    21 0000047F 6A00                <1>         push    dword 0                     ;   -20| y0 = 0; //Y座標
    22 00000481 6A00                <1>         push    dword 0                     ;   -24| dy = 0; //Y増分
    23 00000483 6A00                <1>         push    dword 0                     ;   -28| inc_y = 0; //Y座標増分(基準軸:1 or -1)
    24                              <1> 
    25                              <1>         ;-----------------------------------
    26                              <1>         ;レジスタの保存
    27                              <1>         ;-----------------------------------
    28 00000485 50                  <1>         push    eax
    29 00000486 53                  <1>         push    ebx
    30 00000487 51                  <1>         push    ecx
    31 00000488 57                  <1>         push    edi
    32 00000489 52                  <1>         push    edx
    33 0000048A 56                  <1>         push    esi
    34                              <1> 
    35                              <1>         ;---------------------------------------
    36                              <1>         ;幅を計算(X軸)
    37                              <1>         ;---------------------------------------
    38 0000048B 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    39 0000048E 8B5D10              <1>         mov     ebx, [ebp +16]                  ;EBX = X1;
    40 00000491 29C3                <1>         sub     ebx, eax                        ;EBX = X1 - X0; //幅
    41 00000493 7D09                <1>         jge     .10F                            ;if(幅 < 0)
    42                              <1>                                                 ;{
    43 00000495 F7DB                <1>         neg     ebx                             ;   幅 *= -1;
    44 00000497 BEFFFFFFFF          <1>         mov     esi, -1                         ;   //X座標の増分
    45 0000049C EB05                <1>         jmp     .10E                            ;}
    46                              <1> .10F:                                           ;else
    47                              <1>                                                 ;{
    48 0000049E BE01000000          <1>         mov     esi, 1                          ;   //X座標の増分
    49                              <1> .10E:                                           ;}
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;高さを計算(Y軸)
    53                              <1>         ;---------------------------------------
    54 000004A3 8B4D0C              <1>         mov     ecx, [ebp +12]                  ;ECX = Y0;
    55 000004A6 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    56 000004A9 29CA                <1>         sub     edx, ecx                        ;EDX = Y1 - Y0; //高さ
    57 000004AB 7D09                <1>         jge     .20F                            ;if(高さ < 0)
    58                              <1>                                                 ;{
    59 000004AD F7DA                <1>         neg     edx                             ;   高さ *= -1;
    60 000004AF BFFFFFFFFF          <1>         mov     edi, -1                         ;   //Y座標の増分
    61 000004B4 EB05                <1>         jmp     .20E                            ;}
    62                              <1> .20F:                                           ;else
    63                              <1>                                                 ;{
    64 000004B6 BF01000000          <1>         mov     edi, 1                          ;   //Y座標の増分
    65                              <1> .20E:                                           ;}
    66                              <1>         
    67                              <1>         ;---------------------------------------
    68                              <1>         ;X軸
    69                              <1>         ;---------------------------------------
    70 000004BB 8945F8              <1>         mov     [ebp - 8], eax                  ;//X軸:開始座標
    71 000004BE 895DF4              <1>         mov     [ebp -12], ebx                  ;//X軸:描画幅
    72 000004C1 8975F0              <1>         mov     [ebp -16], esi                  ;//X軸:増分(基準軸:1 or -1)
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;Y軸
    76                              <1>         ;---------------------------------------
    77 000004C4 894DEC              <1>         mov     [ebp -20], ecx                  ;//Y軸:開始座標
    78 000004C7 8955E8              <1>         mov     [ebp -24], edx                  ;//Y軸:描画幅
    79 000004CA 897DE4              <1>         mov     [ebp -28], edi                  ;//Y軸:増分(基準軸:1 or -1)
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;基準軸を決める
    83                              <1>         ;---------------------------------------
    84 000004CD 39D3                <1>         cmp     ebx, edx                        ;if(幅 <= 高さ)
    85 000004CF 7F08                <1>         jg      .22F                            ;{
    86                              <1>         
    87 000004D1 8D75EC              <1>         lea     esi, [ebp -20]                  ;   //X軸が基準軸
    88 000004D4 8D7DF8              <1>         lea     edi, [ebp - 8]                  ;   //Y軸が相対軸
    89                              <1> 
    90 000004D7 EB06                <1>         jmp     .22E                            ;}
    91                              <1> .22F:                                           ;else
    92                              <1>                                                 ;{
    93 000004D9 8D75F8              <1>         lea     esi, [ebp - 8]                  ;   //Y軸が基準軸
    94 000004DC 8D7DEC              <1>         lea     edi, [ebp -20]                  ;   //X軸が相対軸
    95                              <1> .22E:                                           ;}
    96                              <1> 
    97                              <1>         ;---------------------------------------
    98                              <1>         ;繰り返し回数(基準軸のドット数)(基準軸の長さが0な場合,繰り返し回数を1に設定し,1ピクセルの点を描画)
    99                              <1>         ;---------------------------------------
   100 000004DF 8B4EFC              <1>         mov     ecx, [esi - 4]                  ;ECX = 基準軸描画幅
   101 000004E2 83F900              <1>         cmp     ecx, 0                          ;if(0 == ECX)
   102 000004E5 7505                <1>         jnz     .30E                            ;{
   103 000004E7 B901000000          <1>         mov     ecx, 1                          ;   ECX = 1;
   104                              <1> .30E:                                           ;}
   105                              <1> 
   106                              <1>         ;---------------------------------------
   107                              <1>         ;線を描画
   108                              <1>         ;---------------------------------------
   109                              <1> .50L:                                           ;do
   110                              <1>                                                 ;{
   113 000004EC FF7518FF75ECFF75F8- <1>         cdecl   draw_pixel, dword [ebp - 8],                             dword [ebp -20],                             dword [ebp +24]     ;   //点の描画
   113 000004F5 E8B7FEFFFF6683C40C  <1>
   114                              <1> 
   115                              <1>         ;---------------------------------------
   116                              <1>         ;基準軸を更新
   117                              <1>         ;---------------------------------------
   118 000004FE 8B46F8              <1>         mov     eax, [esi - 8]                  ;   EAX = 基準軸増加(1 or -1);
   119 00000501 0106                <1>         add     [esi - 0], eax                  ;
   120                              <1> 
   121                              <1>         ;---------------------------------------
   122                              <1>         ;相対軸を更新
   123                              <1>         ;---------------------------------------
   124 00000503 8B45FC              <1>         mov     eax, [ebp - 4]                  ;   EAX = sum;  //相対軸の積算値
   125 00000506 0347FC              <1>         add     eax, [edi - 4]                  ;   EAX += dy;  //増加(相対軸の描画幅)
   126                              <1> 
   127 00000509 8B5EFC              <1>         mov     ebx, [esi - 4]                  ;   EBX = dx;   //増分(基準軸の描画幅)
   128                              <1> 
   129 0000050C 39D8                <1>         cmp     eax, ebx                        ;   if(積算値 <= 相対軸の増分)
   130 0000050E 7C07                <1>         jl      .52E                            ;   {
   131 00000510 29D8                <1>         sub     eax, ebx                        ;       EAX -= EBX; //積算値から相対軸の増分を減算
   132                              <1>                                                 ;       //相対軸の座標を更新(1ドット分)
   133 00000512 8B5FF8              <1>         mov     ebx, [edi - 8]                  ;       EBX = 相対軸増分;
   134 00000515 011F                <1>         add     [edi - 0], ebx                  ;       相対軸座標 = EBX;
   135                              <1> .52E:                                           ;   }
   136                              <1> 
   137 00000517 8945FC              <1>         mov     [ebp - 4], eax                  ;//積算値を更新
   138                              <1> 
   139 0000051A E2D0                <1>         loop    .50L
   140                              <1> .50E:                                           ;} while(ループ回数--);
   141                              <1> 
   142                              <1>         ;---------------------------------------
   143                              <1>         ;レジスタの復帰
   144                              <1>         ;---------------------------------------
   145 0000051C 5E                  <1>         pop     esi
   146 0000051D 5A                  <1>         pop     edx
   147 0000051E 5F                  <1>         pop     edi
   148 0000051F 59                  <1>         pop     ecx
   149 00000520 5B                  <1>         pop     ebx
   150 00000521 58                  <1>         pop     eax
   151                              <1> 
   152                              <1>         ;---------------------------------------
   153                              <1>         ;スタックフレームの破棄
   154                              <1>         ;---------------------------------------
   155 00000522 89EC                <1>         mov     esp, ebp
   156 00000524 5D                  <1>         pop     ebp
   157                              <1> 
   158 00000525 C3                  <1>         ret
   106                                  %include        "..\modules\protect\draw_rect.s"
     1                              <1> draw_rect:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000526 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000527 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000529 50                  <1>         push    eax
    17 0000052A 53                  <1>         push    ebx
    18 0000052B 51                  <1>         push    ecx
    19 0000052C 52                  <1>         push    edx
    20 0000052D 56                  <1>         push    esi
    21                              <1> 
    22                              <1>         ;---------------------------------------
    23                              <1>         ;変数に引数を代入
    24                              <1>         ;---------------------------------------
    25 0000052E 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    26 00000531 8B5D0C              <1>         mov     ebx, [ebp +12]                  ;EBX = Y0;
    27 00000534 8B4D10              <1>         mov     ecx, [ebp +16]                  ;ECX = X1;
    28 00000537 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    29 0000053A 8B7518              <1>         mov     esi, [ebp +24]                  ;ESI = 色;
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;座標軸の大小を確定
    33                              <1>         ;---------------------------------------
    34 0000053D 39C8                <1>         cmp     eax, ecx                        ;if(X1 < X0)
    35 0000053F 7C01                <1>         jl      .10E                            ;{
    36 00000541 91                  <1>         xchg    eax, ecx                        ;   //X0とX1を入れ替える;
    37                              <1> .10E:                                           ;}
    38                              <1> 
    39 00000542 39D3                <1>         cmp     ebx, edx                        ;if(Y1 < Y0)
    40 00000544 7C02                <1>         jl      .20E                            ;{
    41 00000546 87DA                <1>         xchg    ebx, edx                        ;   //Y0とY1を入れ替える;
    42                              <1> .20E:                                           ;}
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;矩形を描画
    46                              <1>         ;---------------------------------------
    47 00000548 5653515350E822FFFF- <1>         cdecl   draw_line, eax, ebx, ecx, ebx, esi  ;上線
    47 00000551 FF6683C414          <1>
    48 00000556 5652505350E814FFFF- <1>         cdecl   draw_line, eax, ebx, eax, edx, esi  ;左線
    48 0000055F FF6683C414          <1>
    49                              <1> 
    50 00000564 4A                  <1>         dec     edx                                 ;EDX--; //下線は1ドット上げる
    51 00000565 5652515250E805FFFF- <1>         cdecl   draw_line, eax, edx, ecx, edx, esi  ;下線
    51 0000056E FF6683C414          <1>
    52 00000573 42                  <1>         inc     edx
    53                              <1> 
    54 00000574 49                  <1>         dec     ecx                                 ;ECX--; //右線は1ドット左に移動
    55 00000575 5652515351E8F5FEFF- <1>         cdecl   draw_line, ecx, ebx, ecx, edx, esi  ;右線
    55 0000057E FF6683C414          <1>
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの復帰
    59                              <1>         ;---------------------------------------
    60 00000583 5E                  <1>         pop     esi
    61 00000584 5A                  <1>         pop     edx
    62 00000585 59                  <1>         pop     ecx
    63 00000586 5B                  <1>         pop     ebx
    64 00000587 58                  <1>         pop     eax
    65                              <1> 
    66                              <1>         ;---------------------------------------
    67                              <1>         ;スタックフレームの破棄
    68                              <1>         ;---------------------------------------
    69 00000588 89EC                <1>         mov     esp, ebp
    70 0000058A 5D                  <1>         pop     ebp
    71                              <1> 
    72 0000058B C3                  <1>         ret
   107                                  %include        "..\modules\protect\itoa.s"
     1                              <1> itoa:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 0000058C 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 0000058D 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 0000058F 50                  <1>         push    eax
    18 00000590 53                  <1>         push    ebx
    19 00000591 51                  <1>         push    ecx
    20 00000592 52                  <1>         push    edx
    21 00000593 56                  <1>         push    esi
    22 00000594 57                  <1>         push    edi
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;引数の取得
    26                              <1>         ;---------------------------------------
    27 00000595 8B4508              <1>         mov     eax, [ebp + 8]                  ;eax(val) =  数値;
    28 00000598 8B750C              <1>         mov     esi, [ebp + 12]                 ;esi(dst) = バッファアドレス;
    29 0000059B 8B4D10              <1>         mov     ecx, [ebp + 16]                 ;ecx(size) = バッファサイズ;
    30                              <1> 
    31 0000059E 89F7                <1>         mov     edi, esi                        ;edi = esi(dst); //バッファの最後尾
    32 000005A0 01CF                <1>         add     edi, ecx                        ;edi(dst) = edi + ecx - 1;
    33 000005A2 4F                  <1>         dec     edi
    34                              <1> 
    35 000005A3 8B5D18              <1>         mov     ebx, [ebp + 24]            ;flags = オプション;
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;符号付き判定
    39                              <1>         ;---------------------------------------
    40 000005A6 F7C301000000        <1>         test    ebx, 0b0001                      ;if(flags & 0x01) //符号付き
    41 000005AC 7408                <1> .10Q:   je      .10E                            ;{
    42 000005AE 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    43 000005B1 7D03                <1> .12Q:   jge     .12E                            ;   {
    44 000005B3 83CB02              <1>         or      ebx, 0b0010                     ;       flags |= 2; //符号表示
    45                              <1> .12E:                                           ;   }
    46                              <1> .10E:                                           ;}
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;符号付き判定
    50                              <1>         ;---------------------------------------
    51 000005B6 F7C302000000        <1>         test    ebx, 0b0010                     ;if(flags & 0x02) //符号出力判定
    52 000005BC 7410                <1> .20Q:   je      .20E                            ;{
    53 000005BE 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    54 000005C1 7D07                <1> .22Q:   jge     .22F                            ;   {
    55 000005C3 F7D8                <1>         neg     eax                             ;       val *= -1; //符号反転
    56 000005C5 C6062D              <1>         mov     [esi], byte '-'                 ;       *dst = '-'; //符号表示
    57 000005C8 EB03                <1>         jmp     .22E                            ;   }
    58                              <1> .22F:                                           ;   else
    59                              <1>                                                 ;   {
    60 000005CA C6062B              <1>         mov     [esi], byte '+'                 ;       *dst = '+'; //符号表示
    61                              <1> .22E:                                           ;   }
    62 000005CD 49                  <1>         dec     ecx                             ;   size--;     //残りバッファサイズの減算
    63                              <1> .20E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;ASCII変換
    67                              <1>         ;---------------------------------------
    68 000005CE 8B5D14              <1>         mov     ebx, [ebp + 20]                 ;BX = 基数;
    69                              <1> .30L:                                           ;do
    70                              <1>                                                 ;{
    71 000005D1 BA00000000          <1>         mov     edx, 0                          ;
    72 000005D6 F7F3                <1>         div     ebx                             ;   DX = DX:AX % 基数;
    73                              <1>                                                 ;   AX = DX:AX / 基数;
    74                              <1>                                                 ;
    75 000005D8 89D6                <1>         mov     esi, edx                        ;   //テーブル参照
    76 000005DA 8A96[05060000]      <1>         mov     dl, byte [.ascii + esi]         ;   DL = ASCII[DX]
    77                              <1>                                                 ;
    78 000005E0 8817                <1>         mov     [edi], dl                       ;   *dst = DL;
    79 000005E2 4F                  <1>         dec     edi                             ;   dst--;
    80                              <1>                                                 ;
    81 000005E3 83F800              <1>         cmp     eax, 0                          ;
    82 000005E6 E0E9                <1>         loopnz  .30L                            ;}while(AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;---------------------------------------
    86                              <1>         ;空欄を埋める
    87                              <1>         ;---------------------------------------
    88 000005E8 83F900              <1>         cmp     ecx, 0                          ;if(size)
    89 000005EB 740E                <1> .40Q:   je      .40E                            ;{
    90 000005ED B020                <1>         mov     al, ' '                         ;       AL = ' '; // ' 'で埋める(デフォルト値)
    91 000005EF 66837D1804          <1>         cmp     [ebp + 24], word 0b0100         ;       if(flags & 0x04)
    92 000005F4 7502                <1> .42Q:   jne     .42E                            ;           {
    93 000005F6 B030                <1>         mov     al, '0'                         ;               AL = '0'; // '0'で埋める
    94                              <1> .42E:                                           ;           }
    95 000005F8 FD                  <1>         std                                     ;       // DF = 1(-方向)
    96 000005F9 F3AA                <1>         rep     stosb                           ;       while(--CX) *DI -- = AL;
    97                              <1> .40E:                                           ;}
    98                              <1>         
    99                              <1>         ;---------------------------------------
   100                              <1>         ;レジスタの復帰
   101                              <1>         ;---------------------------------------
   102 000005FB 5F                  <1>         pop     edi
   103 000005FC 5E                  <1>         pop     esi
   104 000005FD 5A                  <1>         pop     edx
   105 000005FE 59                  <1>         pop     ecx
   106 000005FF 5B                  <1>         pop     ebx
   107 00000600 58                  <1>         pop     eax
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;スタックフレームの破棄
   111                              <1>         ;---------------------------------------
   112 00000601 89EC                <1>         mov     esp, ebp
   113 00000603 5D                  <1>         pop     ebp
   114                              <1> 
   115 00000604 C3                  <1>         ret
   116                              <1> 
   117 00000605 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   117 0000060E 39414243444546      <1>
   108                                  %include        "..\modules\protect\rtc.s"
     1                              <1> rtc_get_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 保存先アドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000615 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000616 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000618 53                  <1>         push    ebx
    14                              <1> 
    15                              <1>         ;---------------------------------------
    16                              <1>         ;RTCから必要な情報を取得
    17                              <1>         ;---------------------------------------
    18 00000619 B00A                <1>         mov     al, 0x0A                        ;//レジスタA
    19 0000061B E670                <1>         out     0x70, al                        ;outp(0x70, AL);
    20 0000061D E471                <1>         in      al, 0x71                        ;AL = レジスタA
    21 0000061F A880                <1>         test    al, 0x80                        ;if(UIP) //更新中
    22 00000621 7407                <1>         je      .10F                            ;{
    23 00000623 B801000000          <1>         mov     eax, 1                          ;   return 0; //データ更新中
    24 00000628 EB27                <1>         jmp     .10E                            ;}
    25                              <1> .10F:                                           ;else
    26                              <1>                                                 ;{
    27 0000062A B004                <1>         mov     al, 0x04                        ;   AL = 0x04;
    28 0000062C E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    29 0000062E E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //時データ
    30                              <1> 
    31 00000630 C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    32                              <1> 
    33 00000633 B002                <1>         mov     al, 0x02                        ;   AL = 0x02;
    34 00000635 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    35 00000637 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //分データ
    36                              <1> 
    37 00000639 C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    38                              <1> 
    39                              <1>                                                 ;   RAM[0x00]:秒
    40 0000063C B000                <1>         mov     al, 0x00                        ;   AL = 0x00;
    41 0000063E E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    42 00000640 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //秒データ
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;有効なデータのみをアドレス先へ保存
    46                              <1>         ;---------------------------------------
    47 00000642 25FFFFFF00          <1>         and     eax, 0x00_FF_FF_FF              ;//下位3バイトのみ有効
    48                              <1> 
    49 00000647 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;dst = 保存先;
    50 0000064A 8903                <1>         mov     [ebx], eax                      ;[dst] = 時刻;
    51                              <1>         
    52 0000064C B801000000          <1>         mov     eax, 1                          ;   return 1; //正常終了
    53                              <1> .10E:                                           ;}
    54                              <1> 
    55                              <1>         ;---------------------------------------
    56                              <1>         ;レジスタの復帰
    57                              <1>         ;---------------------------------------
    58 00000651 5B                  <1>         pop     ebx
    59                              <1> 
    60                              <1>         ;---------------------------------------
    61                              <1>         ;スタックフレームの破棄
    62                              <1>         ;---------------------------------------
    63 00000652 89EC                <1>         mov     esp, ebp
    64 00000654 5D                  <1>         pop     ebp
    65                              <1> 
    66 00000655 C3                  <1>         ret
   109                                  %include        "..\modules\protect\draw_time.s"
     1                              <1> draw_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000656 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000657 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000659 50                  <1>         push    eax
    18 0000065A 53                  <1>         push    ebx
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;数字を文字に変換
    22                              <1>         ;---------------------------------------
    23 0000065B 8B4514              <1>         mov     eax, [ebp +20]                  ;EAX = 時刻データ;
    24                              <1> 
    25 0000065E 0FB6D8              <1>         movzx   ebx, al                         ;EBX = 秒;
    26 00000661 6A046A106A0268-     <1>         cdecl   itoa, ebx, .sec, 2, 16, 0b0100  ;//文字を変換
    26 00000668 [C8060000]53E81AFF- <1>
    26 00000670 FFFF6683C414        <1>
    27                              <1> 
    28 00000676 88E3                <1>         mov     bl, ah                          ;EBX = 分;
    29 00000678 6A046A106A0268-     <1>         cdecl   itoa, ebx, .min, 2, 16, 0b0100  ;//文字に変換
    29 0000067F [C5060000]53E803FF- <1>
    29 00000687 FFFF6683C414        <1>
    30                              <1> 
    31 0000068D C1E810              <1>         shr     eax, 16                         ;EBX = 時;
    32 00000690 6A046A106A0268-     <1>         cdecl   itoa, eax, .hour, 2, 16, 0b0100 ;//文字に変換
    32 00000697 [C2060000]50E8EBFE- <1>
    32 0000069F FFFF6683C414        <1>
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;文字列を表示
    36                              <1>         ;---------------------------------------
    37 000006A5 68[C2060000]FF7510- <1>         cdecl   draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    37 000006AD FF750CFF7508E838FC- <1>
    37 000006B6 FFFF6683C410        <1>
    38                              <1>         
    39                              <1>         ;---------------------------------------
    40                              <1>         ;レジスタの復帰
    41                              <1>         ;---------------------------------------
    42 000006BC 5B                  <1>         pop     ebx
    43 000006BD 58                  <1>         pop     eax
    44                              <1> 
    45                              <1>         ;---------------------------------------
    46                              <1>         ;スタックフレームの破棄
    47                              <1>         ;---------------------------------------
    48 000006BE 89EC                <1>         mov     esp, ebp
    49 000006C0 5D                  <1>         pop     ebp
    50                              <1> 
    51 000006C1 C3                  <1>         ret
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;データ
    55                              <1>         ;---------------------------------------
    56 000006C2 5A5A3A              <1>         .hour:  db  "ZZ:"
    57 000006C5 5A5A3A              <1>         .min:   db  "ZZ:"
    58 000006C8 5A5A00              <1>         .sec:   db  "ZZ", 0
   110                                  %include        "..\modules\protect\interrupt.s"
     1                              <1> int_stop:
     2 000006CB FB                  <1>         sti                                     ;//割り込み許可
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;EAXで示される文字列を表示
     6                              <1>         ;---------------------------------------
     7 000006CC 50680F0600006A0F6A- <1>         cdecl   draw_str, 25, 15, 0x060F, eax   ;draw_str(EAX);
     7 000006D5 19E815FCFFFF6683C4- <1>
     7 000006DE 10                  <1>
     8                              <1>         
     9                              <1>         ;---------------------------------------
    10                              <1>         ;スタックのデータを文字列に変換
    11                              <1>         ;---------------------------------------
    12 000006DF 8B0424              <1>         mov     eax, [esp + 0]                  ;EAX = ESP[ 0];
    13 000006E2 6A046A106A0868-     <1>         cdecl   itoa, eax, .p1, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    13 000006E9 [A7070000]50E899FE- <1>
    13 000006F1 FFFF6683C414        <1>
    14                              <1> 
    15 000006F7 8B442404            <1>         mov     eax, [esp + 4]                  ;EAX = ESP[ 4];
    16 000006FB 6A046A106A0868-     <1>         cdecl   itoa, eax, .p2, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    16 00000702 [B8070000]50E880FE- <1>
    16 0000070A FFFF6683C414        <1>
    17                              <1> 
    18 00000710 8B442408            <1>         mov     eax, [esp + 8]                  ;EAX = ESP[ 8];
    19 00000714 6A046A106A0868-     <1>         cdecl   itoa, eax, .p3, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    19 0000071B [C9070000]50E867FE- <1>
    19 00000723 FFFF6683C414        <1>
    20                              <1> 
    21 00000729 8B44240C            <1>         mov     eax, [esp +12]                  ;EAX = ESP[12];
    22 0000072D 6A046A106A0868-     <1>         cdecl   itoa, eax, .p4, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    22 00000734 [DA070000]50E84EFE- <1>
    22 0000073C FFFF6683C414        <1>
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;文字列の表示
    26                              <1>         ;---------------------------------------
    27 00000742 68[A0070000]68040F- <1>         cdecl   draw_str, 25, 16, 0x0F04, .s1,  ;draw_str("ESP+ 0:-------- ");
    27 0000074A 00006A106A19E89BFB- <1>
    27 00000753 FFFF6683C410        <1>
    28 00000759 68[B1070000]68040F- <1>         cdecl   draw_str, 25, 17, 0x0F04, .s2   ;draw_str("   + 4:-------- ");
    28 00000761 00006A116A19E884FB- <1>
    28 0000076A FFFF6683C410        <1>
    29 00000770 68[C2070000]68040F- <1>         cdecl   draw_str, 25, 18, 0x0F04, .s3,  ;draw_str("   + 8:-------- ");
    29 00000778 00006A126A19E86DFB- <1>
    29 00000781 FFFF6683C410        <1>
    30 00000787 68[D3070000]68040F- <1>         cdecl   draw_str, 25, 19, 0x0F04, .s4   ;draw_str("   +12:-------- ");        
    30 0000078F 00006A136A19E856FB- <1>
    30 00000798 FFFF6683C410        <1>
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;無限ループ
    34                              <1>         ;---------------------------------------
    35 0000079E EBFE                <1>         jmp     $                               ;while(1); //無限ループ
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;データ
    39                              <1>         ;---------------------------------------
    40 000007A0 4553502B20303A      <1> .s1:    db  "ESP+ 0:"
    41 000007A7 2D2D2D2D2D2D2D2D20- <1> .p1:    db  "-------- ", 0
    41 000007B0 00                  <1>
    42 000007B1 2020202B20343A      <1> .s2:    db  "   + 4:"
    43 000007B8 2D2D2D2D2D2D2D2D20- <1> .p2:    db  "-------- ", 0
    43 000007C1 00                  <1>
    44 000007C2 2020202B20383A      <1> .s3:    db  "   + 8:"
    45 000007C9 2D2D2D2D2D2D2D2D20- <1> .p3:    db  "-------- ", 0
    45 000007D2 00                  <1>
    46 000007D3 2020202B31323A      <1> .s4:    db  "   +12:"
    47 000007DA 2D2D2D2D2D2D2D2D20- <1> .p4:    db  "-------- ", 0
    47 000007E3 00                  <1>
    48                              <1> 
    49                              <1> int_default:
    50                              <1>         ;---------------------------------------
    51                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
    52                              <1>         ;---------------------------------------
    53 000007E4 9C                  <1>         pushf                                   ;//EFLAGS(IF=0)
    54 000007E5 0E                  <1>         push    cs                              ;//cs
    55 000007E6 68[CB060000]        <1>         push    int_stop                        ;//スタック表示処理
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み種別を登録して復帰
    59                              <1>         ;---------------------------------------
    60 000007EB B8[F1070000]        <1>         mov     eax, .s0                        ;//割り込み種別
    61 000007F0 CF                  <1>         iret                                    ;スタックされている場所に復帰
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;データ
    65                              <1>         ;---------------------------------------
    66 000007F1 203C2020202053544F- <1> .s0:    db  " <    STOP    > ", 0
    66 000007FA 50202020203E2000    <1>
    67                              <1> 
    68                              <1> ;********************************************************************************************************
    69                              <1> ;割り込みベクタの初期化
    70                              <1> ;********************************************************************************************************
    71 00000802 90<rept>            <1> ALIGN   4
    72 00000804 FF07                <1> IDTR:   dw      8 * 256 - 1                     ;idt_limit
    73 00000806 00001000            <1>         dd      VECT_BASE                       ;idt_location
    74                              <1> 
    75                              <1> ;********************************************************************************************************
    76                              <1> ;割り込みテーブルを初期化
    77                              <1> ;********************************************************************************************************
    78                              <1> init_int:
    79                              <1>         ;---------------------------------------
    80                              <1>         ;レジスタの保存
    81                              <1>         ;---------------------------------------
    82 0000080A 50                  <1>         push    eax
    83 0000080B 53                  <1>         push    ebx
    84 0000080C 51                  <1>         push    ecx
    85 0000080D 57                  <1>         push    edi
    86                              <1> 
    87                              <1>         ;---------------------------------------
    88                              <1>         ;全ての割り込みにデフォルト処理を設定
    89                              <1>         ;---------------------------------------
    90 0000080E 8D05[E4070000]      <1>         lea     eax, [int_default]              ;EAX = 割り込み処理アドレス;
    91 00000814 BB008E0800          <1>         mov     ebx, 0x0008_8E00                ;EBX = セグメントセレクタ;
    92 00000819 6693                <1>         xchg    ax, bx                          ;//下位ワード(2バイト)を交換(割り込みゲートディスクリプタの形式に合わせる)
    93                              <1> 
    94 0000081B B900010000          <1>         mov     ecx, 256                        ;ECX = 割り込みベクタ数
    95 00000820 BF00001000          <1>         mov     edi, VECT_BASE                  ;EDI = 割り込みベクタテーブル
    96                              <1> 
    97                              <1> .10L:                                           ;do
    98                              <1>                                                 ;{
    99 00000825 891F                <1>         mov     [edi + 0], ebx                  ;       [EDI + 0] = 割り込みディスクリプタ(下位)
   100 00000827 894704              <1>         mov     [edi + 4], eax                  ;       [EDI + 4] = 割り込みディスクリプタ(上位)
   101 0000082A 83C708              <1>         add     edi, 8                          ;       EDI += 8;
   102 0000082D E2F6                <1>         loop    .10L                            ;}while(ECX--);
   103                              <1> 
   104                              <1>         ;---------------------------------------
   105                              <1>         ;割り込みディスクリプタの設定
   106                              <1>         ;---------------------------------------
   107 0000082F 0F011D[04080000]    <1>         lidt    [IDTR]                          ;//割り込みディスクリプタテーブルをロード
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;データ
   111                              <1>         ;---------------------------------------
   112 00000836 5F                  <1>         pop     edi
   113 00000837 59                  <1>         pop     ecx
   114 00000838 5B                  <1>         pop     ebx
   115 00000839 58                  <1>         pop     eax
   116                              <1> 
   117 0000083A C3                  <1>         ret
   118                              <1> 
   119                              <1> int_zero_div:
   120                              <1>         ;---------------------------------------
   121                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
   122                              <1>         ;---------------------------------------
   123 0000083B 9C                  <1>         pushf                                   ;//EFLAGS
   124 0000083C 0E                  <1>         push    cs                              ;//CS
   125 0000083D 68[CB060000]        <1>         push    int_stop                        ;//スタック表示処理
   126                              <1> 
   127                              <1>         ;---------------------------------------
   128                              <1>         ;割り込み種別を登録して復帰
   129                              <1>         ;---------------------------------------
   130 00000842 B8[48080000]        <1>         mov     eax, .s0                        ;//割り込み種別
   131 00000847 CF                  <1>         iret
   132                              <1> 
   133 00000848 203C20205A45524F20- <1> .s0:    db      " <  ZERO DIV  > ", 0
   133 00000851 44495620203E2000    <1>
   111                                  %include        "..\modules\protect\pic.s"
     1                              <1> init_pic:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000859 50                  <1>         push    eax
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;マスタの設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x20, 0x11                      ;//MASTER.ICW1 = 0x11;
    10 0000085A B011                <2>  mov al, %2
    10 0000085C E620                <2>  out %1, al
    11                              <1>         outp    0x21, 0x20                      ;//MASTER.ICW2 = 0x20;
    11 0000085E B020                <2>  mov al, %2
    11 00000860 E621                <2>  out %1, al
    12                              <1>         outp    0x21, 0x04                      ;//MASTER.ICW3 = 0x04;
    12 00000862 B004                <2>  mov al, %2
    12 00000864 E621                <2>  out %1, al
    13                              <1>         outp    0x21, 0x05                      ;//MASTER.ICW4 = 0x05;
    13 00000866 B005                <2>  mov al, %2
    13 00000868 E621                <2>  out %1, al
    14                              <1>         outp    0x21, 0xEF                      ;//マスタ割り込みマスク
    14 0000086A B0EF                <2>  mov al, %2
    14 0000086C E621                <2>  out %1, al
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;スレーブの設定
    18                              <1>         ;---------------------------------------
    19                              <1>         outp    0xA0, 0x11                      ;//SLAVE.ICW1 = 0x11;
    19 0000086E B011                <2>  mov al, %2
    19 00000870 E6A0                <2>  out %1, al
    20                              <1>         outp    0xA1, 0x28                      ;//SLAVE.ICW2 = 0x28;
    20 00000872 B028                <2>  mov al, %2
    20 00000874 E6A1                <2>  out %1, al
    21                              <1>         outp    0xA1, 0x02                      ;//SLAVE.ICW3 = 0x02;
    21 00000876 B002                <2>  mov al, %2
    21 00000878 E6A1                <2>  out %1, al
    22                              <1>         outp    0xA1, 0x01                      ;//SLAVE.ICW4 = 0x01;
    22 0000087A B001                <2>  mov al, %2
    22 0000087C E6A1                <2>  out %1, al
    23                              <1>         outp    0xA1, 0xEF                      ;//マスタ割り込みマスク
    23 0000087E B0EF                <2>  mov al, %2
    23 00000880 E6A1                <2>  out %1, al
    24                              <1> 
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00000882 58                  <1>         pop     eax
    29                              <1> 
    30 00000883 C3                  <1>         ret
   112                                  %include        "..\modules\protect\int_rtc.s"
     1                              <1> int_rtc:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000884 60                  <1>         pusha
     6 00000885 1E                  <1>         push    ds
     7 00000886 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントセレクタの設定
    11                              <1>         ;---------------------------------------
    12 00000887 66B81000            <1>         mov     ax, 0x0010
    13 0000088B 8ED8                <1>         mov     ds, ax
    14 0000088D 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;RTCから時刻を取得
    18                              <1>         ;---------------------------------------
    19 0000088F 68[30010000]E87CFD- <1>         cdecl   rtc_get_time, RTC_TIME          ;EAX = get_time(&RTC_TIME);
    19 00000897 FFFF6683C404        <1>
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;RTCの割り込み要因を取得
    23                              <1>         ;---------------------------------------
    24                              <1>         outp    0x70, 0x0C                      ;outp(0x70, 0x0C); //レジスタCを選択
    24 0000089D B00C                <2>  mov al, %2
    24 0000089F E670                <2>  out %1, al
    25 000008A1 E471                <1>         in      al, 0x71                        ;AL = port(0x71);
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;割り込みフラグをクリア(EOI)
    29                              <1>         ;---------------------------------------
    30 000008A3 B020                <1>         mov     al, 0x20                        ;AL = EOIコマンド;
    31 000008A5 E6A0                <1>         out     0xA0, al                        ;outp(0xA0, AL); //スレーブPIC
    32 000008A7 E620                <1>         out     0x20, al                        ;outp(0x20, AL); //マスタPIC
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;レジスタの復帰
    36                              <1>         ;---------------------------------------
    37 000008A9 07                  <1>         pop     es
    38 000008AA 1F                  <1>         pop     ds
    39 000008AB 61                  <1>         popa
    40                              <1> 
    41 000008AC CF                  <1>         iret                                    ;割り込み処理の終了
    42                              <1> 
    43                              <1> rtc_int_en:
    44                              <1>         ;-----------------------------------
    45                              <1>         ;スタックフレームの構築
    46                              <1>         ;-----------------------------------
    47                              <1>                                             ;   + 8| 指定されたビット
    48                              <1>                                             ;   + 4| IP(戻り番号)
    49 000008AD 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    50 000008AE 89E5                <1>         mov     ebp, esp                    ;------|---------
    51                              <1> 
    52                              <1>         ;---------------------------------------
    53                              <1>         ;レジスタの保存
    54                              <1>         ;---------------------------------------
    55 000008B0 50                  <1>         push    eax
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み許可認定(RTCの内部レジスタBのUIE(更新終了割り込み許可)ビットをセット)
    59                              <1>         ;---------------------------------------
    60                              <1>         outp    0x70, 0x0B                      ;outp(0x70, AL); //レジスタBを選択
    60 000008B1 B00B                <2>  mov al, %2
    60 000008B3 E670                <2>  out %1, al
    61                              <1> 
    62 000008B5 E471                <1>         in      al, 0x71                        ;AL = port(0x71); //レジスタBの
    63 000008B7 0A4508              <1>         or      al, [ebp + 8]                   ;AL |= ビット; //指定されたビットをセット
    64                              <1> 
    65 000008BA E671                <1>         out     0x71, al                        ;outp(0x71, AL); //レジスタBに書き込み
    66                              <1> 
    67                              <1>         ;---------------------------------------
    68                              <1>         ;レジスタの復帰
    69                              <1>         ;---------------------------------------
    70 000008BC 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 000008BD 89EC                <1>         mov     esp, ebp
    76 000008BF 5D                  <1>         pop     ebp
    77                              <1> 
    78 000008C0 C3                  <1>         ret
   113                                  %include        "..\modules\protect\ring_buff.s"
     1                              <1> ring_rd:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| 読み込んだデータの保存先アドレス
     6                              <1>                                             ;   + 8| リングバッファ
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 000008C1 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
     9 000008C2 89E5                <1>         mov     ebp, esp                    ;------|---------
    10                              <1> 
    11                              <1>         ;---------------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;---------------------------------------
    14 000008C4 60                  <1>         pusha
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;引数を取得
    18                              <1>         ;---------------------------------------
    19 000008C5 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    20 000008C8 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = データアドレス;
    21                              <1>         
    22                              <1>         ;---------------------------------------
    23                              <1>         ;読み込み位置を確認
    24                              <1>         ;---------------------------------------
    25 000008CB B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    26 000008D0 8B1E                <1>         mov     ebx, [esi + ring_buff.rp]       ;EBX = rp; //読み込み位置
    27 000008D2 3B5E04              <1>         cmp     ebx, [esi + ring_buff.wp]       ;if(EBX != wp) //書き込み位置と異なる
    28 000008D5 7411                <1>         je      .10E                            ;{
    29                              <1>         
    30 000008D7 8A441E08            <1>         mov     al, [esi + ring_buff.item + ebx];   AL = BUFF[rp]; //キーコードを保存
    31                              <1> 
    32 000008DB 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //データを保存
    33                              <1> 
    34 000008DD 43                  <1>         inc     ebx                             ;   EBX++; //次の読み込み位置
    35 000008DE 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= 0x0F; //サイズの制限
    36 000008E1 891E                <1>         mov     [esi + ring_buff.rp], ebx       ;   wp = EBX; //読み込み位置を保存
    37                              <1> 
    38 000008E3 B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //データあり
    39                              <1> .10E:                                           ;}
    40                              <1> 
    41                              <1>         ;---------------------------------------
    42                              <1>         ;レジスタの復帰
    43                              <1>         ;---------------------------------------
    44 000008E8 61                  <1>         popa
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;スタックフレームの破棄
    48                              <1>         ;---------------------------------------
    49 000008E9 89EC                <1>         mov     esp, ebp
    50 000008EB 5D                  <1>         pop     ebp
    51                              <1> 
    52 000008EC C3                  <1>         ret
    53                              <1> 
    54                              <1> ring_wr:
    55                              <1>         ;-----------------------------------
    56                              <1>         ;スタックフレームの構築
    57                              <1>         ;-----------------------------------
    58                              <1>                                             ;   +12| 書き込むデータ
    59                              <1>                                             ;   + 8| リングバッファ
    60                              <1>                                             ;   + 4| IP(戻り番号)
    61 000008ED 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    62 000008EE 89E5                <1>         mov     ebp, esp                    ;------|---------
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;レジスタの保存
    66                              <1>         ;---------------------------------------
    67 000008F0 60                  <1>         pusha
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;引数を取得
    71                              <1>         ;---------------------------------------
    72 000008F1 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    73                              <1>         
    74                              <1>         ;---------------------------------------
    75                              <1>         ;書き込み位置を確認
    76                              <1>         ;---------------------------------------
    77 000008F4 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    78 000008F9 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
    79 000008FC 89D9                <1>         mov     ecx, ebx                        ;ECX = EBX;
    80 000008FE 41                  <1>         inc     ecx                             ;ECX++;
    81 000008FF 83E10F              <1>         and     ecx, RING_INDEX_MASK            ;ECX &= 0x0F //サイズの制限
    82                              <1>         
    83 00000902 3B0E                <1>         cmp     ecx, [esi + ring_buff.rp]       ;if(ECX != rp) //読み込み位置と異なる
    84 00000904 740F                <1>         je      .10E                            ;{
    85                              <1>         
    86 00000906 8A450C              <1>         mov     al, [ebp +12]                   ;   AL = データ;
    87                              <1> 
    88 00000909 88441E08            <1>         mov     [esi + ring_buff.item + ebx], al;   BUFF[wp] = AL; //キーコードを保存
    89 0000090D 894E04              <1>         mov     [esi + ring_buff.wp], ecx       ;   wp = ECX; //書き込み位置を保存
    90 00000910 B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //成功
    91                              <1> .10E:                                           ;}
    92                              <1> 
    93                              <1>         ;---------------------------------------
    94                              <1>         ;レジスタの復帰
    95                              <1>         ;---------------------------------------
    96 00000915 61                  <1>         popa
    97                              <1>         
    98                              <1>         ;---------------------------------------
    99                              <1>         ;スタックフレームの破棄
   100                              <1>         ;---------------------------------------
   101 00000916 89EC                <1>         mov     esp, ebp
   102 00000918 5D                  <1>         pop     ebp
   103                              <1> 
   104 00000919 C3                  <1>         ret
   105                              <1> 
   106                              <1> draw_key:
   107                              <1>         ;-----------------------------------
   108                              <1>         ;スタックフレームの構築
   109                              <1>         ;-----------------------------------
   110                              <1>                                             ;   +16| リングブッファ
   111                              <1>                                             ;   +12| Y(行)
   112                              <1>                                             ;   + 8| X(列)
   113                              <1>                                             ;   + 4| IP(戻り番号)
   114 0000091A 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
   115 0000091B 89E5                <1>         mov     ebp, esp                    ;------|---------
   116                              <1> 
   117                              <1>         ;---------------------------------------
   118                              <1>         ;レジスタの保存
   119                              <1>         ;---------------------------------------
   120 0000091D 60                  <1>         pusha
   121                              <1> 
   122                              <1>         ;---------------------------------------
   123                              <1>         ;引数を取得
   124                              <1>         ;---------------------------------------
   125 0000091E 8B7508              <1>         mov     esi, [ebp + 8]                  ;EDX = X(列);
   126 00000921 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行);
   127 00000924 8B7510              <1>         mov     esi, [ebp +16]                  ;ESI = リングブッファ;
   128                              <1>         
   129                              <1>         ;---------------------------------------
   130                              <1>         ;リングブッファの情報を取得
   131                              <1>         ;---------------------------------------
   132 00000927 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
   133 0000092A 8D7608              <1>         lea     esi, [esi + ring_buff.item]     ;ESI = &KEY_BUFF[EBX];
   134 0000092D B910000000          <1>         mov     ecx, RING_ITEM_SIZE             ;ECX = RING_ITEM_SIZE; //要素数
   135                              <1> 
   136                              <1> .10L:                                           ;do
   137                              <1>                                                 ;{
   138 00000932 4B                  <1>         dec     ebx                             ;   EBX--;
   139 00000933 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= RING_INDEX_MASK;
   140 00000936 8A041E              <1>         mov     al, [esi + ebx]                 ;   EAX = KEY_BUFF[EBX];
   141                              <1> 
   142 00000939 6A046A106A0268-     <1>         cdecl   itoa, eax, .tmp, 2, 16, 0b0100  ;   //キーコードを文字列に変換
   142 00000940 [6A090000]50E842FC- <1>
   142 00000948 FFFF6683C414        <1>
   143 0000094E 68[6A090000]6A0257- <1>         cdecl   draw_str, edx, edi, 0x02, .tmp  ;   //変換した文字列を表示
   143 00000956 52E894F9FFFF6683C4- <1>
   143 0000095F 10                  <1>
   144                              <1> 
   145 00000960 83C203              <1>         add     edx, 3                          ;   //表示位置を更新(3文字分)
   146                              <1> 
   147 00000963 E2CD                <1>         loop    .10L
   148                              <1> .10E:                                           ;}while(ECX--);        
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;レジスタの復帰
   152                              <1>         ;---------------------------------------
   153 00000965 61                  <1>         popa
   154                              <1>         
   155                              <1>         ;---------------------------------------
   156                              <1>         ;スタックフレームの破棄
   157                              <1>         ;---------------------------------------
   158 00000966 89EC                <1>         mov     esp, ebp
   159 00000968 5D                  <1>         pop     ebp
   160                              <1> 
   161 00000969 C3                  <1>         ret
   162                              <1> 
   163                              <1>         ;---------------------------------------
   164                              <1>         ;データ
   165                              <1>         ;---------------------------------------
   166 0000096A 2D2D2000            <1> .tmp    db  "-- ", 0
   114                                  %include        "..\modules\protect\int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 0000096E 60                  <1>         pusha
     6 0000096F 1E                  <1>         push    ds
     7 00000970 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 00000971 66B81000            <1>         mov     ax, 0x0010
    13 00000975 8ED8                <1>         mov     ds, ax
    14 00000977 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;KBCのブッファ読み取り
    18                              <1>         ;---------------------------------------
    19 00000979 E460                <1>         in      al, 0x60                        ; AL = キーコードの取得
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;キーコードの保存
    23                              <1>         ;---------------------------------------
    24 0000097B 5068[94090000]E867- <1>         cdecl   ring_wr, _KEY_BUFF, eax         ;ring_wr(_KEY_BUFF, EAX); //キーコードの保存
    24 00000983 FFFFFF6683C408      <1>
    25                              <1>         
    26                              <1>         ;---------------------------------------
    27                              <1>         ;割り込み終了コマンド送信
    28                              <1>         ;---------------------------------------
    29                              <1>         outp    0x20, 0x20                      ;outp(); //マスタPIC:EOIコマンド
    29 0000098A B020                <2>  mov al, %2
    29 0000098C E620                <2>  out %1, al
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;レジスタの復帰
    33                              <1>         ;---------------------------------------
    34 0000098E 07                  <1>         pop     es
    35 0000098F 1F                  <1>         pop     ds
    36 00000990 61                  <1>         popa
    37                              <1> 
    38 00000991 CF                  <1>         iret                                    ;割り込みからの復帰
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;データ
    42                              <1>         ;---------------------------------------
    43                              <1> 
    44 00000992 00<rept>            <1> ALIGN   4, db   0
    45 00000994 00<rept>            <1> _KEY_BUFF:  times   ring_buff_size  db  0
   115                                  %include        ".\modules\int_timer.s"
     1                              <1> int_timer:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000009AC 60                  <1>         pushad
     6 000009AD 1E                  <1>         push    ds
     7 000009AE 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 000009AF 66B81000            <1>         mov     ax, 0x0010
    13 000009B3 8ED8                <1>         mov     ds, ax
    14 000009B5 8EC0                <1>         mov     es, ax
    15                              <1>         
    16                              <1>         ;---------------------------------------
    17                              <1>         ;TICK
    18                              <1>         ;---------------------------------------
    19 000009B7 FF05[C8090000]      <1>         inc     dword [TIMER_COUNT]             ;TIMER_COUNT++; //割り込み回数の更新
    20                              <1> 
    21                              <1>         ;-----------------------------------------
    22                              <1>         ;割り込みフラグをクリア(EOI)
    23                              <1>         ;-----------------------------------------
    24                              <1>         outp 0x20, 0x20
    24 000009BD B020                <2>  mov al, %2
    24 000009BF E620                <2>  out %1, al
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;レジスタの復帰
    28                              <1>         ;---------------------------------------
    29 000009C1 07                  <1>         pop     es
    30 000009C2 1F                  <1>         pop     ds
    31 000009C3 61                  <1>         popad
    32                              <1>         
    33 000009C4 CF                  <1>         iret
    34                              <1> 
    35                              <1>         ;---------------------------------------
    36                              <1>         ;データ
    37                              <1>         ;---------------------------------------
    38 000009C5 00<rept>            <1> ALIGN   4, db   0
    39 000009C8 0000000000000000    <1> TIMER_COUNT:    dq  0
   116                                  %include        "..\modules\protect\timer.s"
     1                              <1> int_en_timer0:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000009D0 50                  <1>         push    eax                              ;//outp用
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;タイマーICのカウンタ0を設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x43, 0b_00_11_010_0            ;//カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    10 000009D1 B034                <2>  mov al, %2
    10 000009D3 E643                <2>  out %1, al
    11                              <1>         outp    0x40, 0x9C                      ;//下位バイト
    11 000009D5 B09C                <2>  mov al, %2
    11 000009D7 E640                <2>  out %1, al
    12                              <1>         outp    0x40, 0x2E                      ;//上位バイト
    12 000009D9 B02E                <2>  mov al, %2
    12 000009DB E640                <2>  out %1, al
    13                              <1> 
    14                              <1>         ;---------------------------------------
    15                              <1>         ;レジスタの復帰
    16                              <1>         ;---------------------------------------
    17 000009DD 58                  <1>         pop     eax
    18                              <1> 
    19 000009DE C3                  <1>         ret
   117                                  %include        "..\modules\protect\draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000009DF 60                  <1>         pushad
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;引数を取得
     9                              <1>         ;---------------------------------------
    10 000009E0 A1[C8090000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = タイマー割り込みカウンタ
    11 000009E5 C1E804              <1>         shr     eax, 4                          ;EAX /= 4; //16で除算
    12 000009E8 3B05[100A0000]      <1>         cmp     eax, [.index]                   ;if(EAX != 前回値)
    13 000009EE 741E                <1>         je      .10E                            ;{
    14                              <1>         
    15 000009F0 A3[100A0000]        <1>         mov     [.index], eax                   ;   前回値 = EAX;
    16 000009F5 83E003              <1>         and     eax, 0x03                       ;   EAX &= 0x03; //0~3に限定
    17                              <1> 
    18 000009F8 8A80[140A0000]      <1>         mov     al, [.table + eax]              ;   AL = table[index];
    19 000009FE 506A0F6A1D6A00E8E5- <1>         cdecl   draw_char, 0 ,29, 0x000F, eax   ;   draw_char(); //文字を表示
    19 00000A07 F7FFFF6683C410      <1>
    20                              <1> 
    21                              <1> .10E:                                           ;}    
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;レジスタの復帰
    25                              <1>         ;---------------------------------------
    26 00000A0E 61                  <1>         popad
    27                              <1> 
    28 00000A0F C3                  <1>         ret
    29                              <1> 
    30                              <1>         ;---------------------------------------
    31                              <1>         ;データ
    32                              <1>         ;---------------------------------------
    33                              <1> ALIGN   4,  db  0
    34 00000A10 00000000            <1> .index:     dd  0                               ;前回値
    35 00000A14 7C2F2D5C            <1> .table:     db  "|/-\"                          ;表示キャラクタ
   118                                  
   119                                  ;********************************************************************************************************
   120                                  ;パディング
   121                                  ;********************************************************************************************************
   122 00000A18 00<rept>                        times KERNEL_SIZE - ($ - $$)    db 0    ;パディング
