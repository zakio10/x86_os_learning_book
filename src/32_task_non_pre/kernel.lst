     1                                  ;********************************************************************************************************
     2                                  ;マクロ
     3                                  ;********************************************************************************************************
     4                                  %include        "..\include\define.s"
     1                              <1> VECT_BASE       equ     0x0010_0000             ;0010_0000:0010_07FF
     2                              <1> 
     3                              <1> SECT_SIZE   equ     (512)                   ;セクタサイズ
     4                              <1> 
     5                              <1> BOOT_LOAD   equ     0x7C00                  ;ブートプログラムのロード位置
     6                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)
     7                              <1> BOOT_SIZE   equ     (1024 * 8)              ;ブートコードサイズ
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     9                              <1> 
    10                              <1> KERNEL_LOAD equ     0x0010_1000
    11                              <1> KERNEL_SIZE equ     (1024*8)                ;カーネルサイズ
    12                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> STACK_BASE  equ     0x0010_3000             ;タスク用スタックエリア
    15                              <1> STACK_SIZE  equ     1024                    ;スタックサイズ
    16                              <1> 
    17                              <1> SP_TASK_0   equ     STACK_BASE + (STACK_SIZE * 1)
    18                              <1> SP_TASK_1   equ     STACK_BASE + (STACK_SIZE * 2)
    19                              <1> 
    20                              <1> E820_RECORD_SIZE    equ 20
     5                                  %include        "..\include\macro.s"
     1                              <1> %define     RING_ITEM_SIZE  (1 << 4)
     2                              <1> %define     RING_INDEX_MASK (RING_ITEM_SIZE - 1)
     3                              <1> 
     4                              <1> struc drive
     5 00000000 <res 00000002>      <1>         .no         resw    1                       ;ドライブ番号
     6 00000002 <res 00000002>      <1>         .cyln       resw    1                       ;シリンダ
     7 00000004 <res 00000002>      <1>         .head       resw    1                       ;ヘッド
     8 00000006 <res 00000002>      <1>         .sect       resw    1                       ;セクタ
     9                              <1> endstruc
    10                              <1> 
    11                              <1> struc ring_buff
    12 00000000 <res 00000004>      <1>         .rp         resd    1                       ;RP:書き込み位置
    13 00000004 <res 00000004>      <1>         .wp         resd    1                       ;WP:読み込み位置
    14 00000008 <res 00000010>      <1>         .item       resb    RING_ITEM_SIZE          ;ブッファ
    15                              <1> endstruc
    16                              <1> 
    17                              <1> %macro  cdecl   1-*.nolist
    18                              <1> 
    19                              <1>     %rep    %0 - 1
    20                              <1>         push    %{-1:-1}
    21                              <1>         %rotate -1
    22                              <1>     %endrep
    23                              <1>     %rotate -1
    24                              <1> 
    25                              <1>         call    %1
    26                              <1> 
    27                              <1>     %if 1 < %0
    28                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    29                              <1>     %endif
    30                              <1> 
    31                              <1> %endmacro
    32                              <1> 
    33                              <1> %macro  set_vect    1-*
    34                              <1>         push    eax
    35                              <1>         push    edi
    36                              <1> 
    37                              <1>         mov     edi, VECT_BASE + (%1 * 8)           ;ベクタアドレス
    38                              <1>         mov     eax, %2
    39                              <1> 
    40                              <1>     %if 3 == %0
    41                              <1>         mov     [edi + 4], %3                       ;フラグ
    42                              <1>     %endif
    43                              <1> 
    44                              <1>         mov     [edi + 0], ax                       ;例外アドレス[15:0]
    45                              <1>         shr     eax, 16
    46                              <1>         mov     [edi + 6], ax                       ;6はエンディアン(?) 例外アドレス[31:16]
    47                              <1> 
    48                              <1>         pop     edi
    49                              <1>         pop     eax
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro  outp    2
    53                              <1>         mov     al, %2
    54                              <1>         out     %1, al
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro  set_desc    2-*
    58                              <1>         push    eax
    59                              <1>         push    edi
    60                              <1> 
    61                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
    62                              <1>         mov     eax, %2                             ;ベースアドレス
    63                              <1> 
    64                              <1>     %if 3 == %0
    65                              <1>         mov     [edi + 0], %3                       ;リミット
    66                              <1>     %endif
    67                              <1>     
    68                              <1>         mov     [edi + 2], ax                       ;ベース([15: 0])
    69                              <1>         shr     eax, 16
    70                              <1>         mov     [edi + 4], al                       ;ベース([23:16])
    71                              <1>         mov     [edi + 7], ah                       ;ベース([31:24])
    72                              <1> 
    73                              <1>         pop     edi
    74                              <1>         pop     eax
    75                              <1> %endmacro
     6                                  
     7                                          ORG     KERNEL_LOAD                             ;カーネルのロードアドレス
     8                                  
     9                                  [BITS 32]
    10                                  ;********************************************************************************************************
    11                                  ;エントリポイント
    12                                  ;********************************************************************************************************
    13                                  kernel:
    14                                          ;---------------------------------------
    15                                          ;フォントアドレスを取得
    16                                          ;---------------------------------------
    17 00000000 BE007E0000                      mov     esi, BOOT_LOAD + SECT_SIZE      ;ESI = 0x7C00 + 512
    18 00000005 0FB706                          movzx   eax, word [esi + 0]             ;EAX = [ESI + 0] //セグメント
    19 00000008 0FB75E02                        movzx   ebx, word [esi + 2]             ;EBX = [ESI + 2] //オフセット
    20 0000000C C1E004                          shl     eax, 4                          ;EAX << 4;
    21 0000000F 01D8                            add     eax, ebx                        ;EAX += EBX;
    22 00000011 A3[9C010000]                    mov     [FONT_ADR], eax                 ;FONT_ADR[0] = EAX;
    23                                  
    24                                          ;---------------------------------------
    25                                          ;TSSディスクリプタの設定
    26                                          ;---------------------------------------
    27                                          set_desc        GDT.tss_0, TSS_0        ;//タスク0用TSSの設定
    27 00000016 50                  <1>  push eax
    27 00000017 57                  <1>  push edi
    27                              <1> 
    27 00000018 BF[94020000]        <1>  mov edi, %1
    27 0000001D B8[A4010000]        <1>  mov eax, %2
    27                              <1> 
    27                              <1>  %if 3 == %0
    27                              <1>  mov [edi + 0], %3
    27                              <1>  %endif
    27                              <1> 
    27 00000022 66894702            <1>  mov [edi + 2], ax
    27 00000026 C1E810              <1>  shr eax, 16
    27 00000029 884704              <1>  mov [edi + 4], al
    27 0000002C 886707              <1>  mov [edi + 7], ah
    27                              <1> 
    27 0000002F 5F                  <1>  pop edi
    27 00000030 58                  <1>  pop eax
    28                                          set_desc        GDT.tss_1, TSS_1        ;//タスク1用TSSの設定
    28 00000031 50                  <1>  push eax
    28 00000032 57                  <1>  push edi
    28                              <1> 
    28 00000033 BF[9C020000]        <1>  mov edi, %1
    28 00000038 B8[0C020000]        <1>  mov eax, %2
    28                              <1> 
    28                              <1>  %if 3 == %0
    28                              <1>  mov [edi + 0], %3
    28                              <1>  %endif
    28                              <1> 
    28 0000003D 66894702            <1>  mov [edi + 2], ax
    28 00000041 C1E810              <1>  shr eax, 16
    28 00000044 884704              <1>  mov [edi + 4], al
    28 00000047 886707              <1>  mov [edi + 7], ah
    28                              <1> 
    28 0000004A 5F                  <1>  pop edi
    28 0000004B 58                  <1>  pop eax
    29                                  
    30                                          ;---------------------------------------
    31                                          ;LDTの設定
    32                                          ;---------------------------------------
    33                                          set_desc        GDT.ldt, LDT, word LDT_LIMIT
    33 0000004C 50                  <1>  push eax
    33 0000004D 57                  <1>  push edi
    33                              <1> 
    33 0000004E BF[8C020000]        <1>  mov edi, %1
    33 00000053 B8[AA020000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if 3 == %0
    33 00000058 66C7072700          <1>  mov [edi + 0], %3
    33                              <1>  %endif
    33                              <1> 
    33 0000005D 66894702            <1>  mov [edi + 2], ax
    33 00000061 C1E810              <1>  shr eax, 16
    33 00000064 884704              <1>  mov [edi + 4], al
    33 00000067 886707              <1>  mov [edi + 7], ah
    33                              <1> 
    33 0000006A 5F                  <1>  pop edi
    33 0000006B 58                  <1>  pop eax
    34                                  
    35                                          ;---------------------------------------
    36                                          ;GDTをロード(再設定)
    37                                          ;---------------------------------------
    38 0000006C 0F0115[A4020000]                lgdt    [GDTR]                          ;//グローバルディスクリプタテーブルをロード
    39                                  
    40                                          ;---------------------------------------
    41                                          ;スタックの設定
    42                                          ;---------------------------------------
    43 00000073 BC00341000                      mov     esp, SP_TASK_0                  ;タスク0用のスタックを設定
    44                                  
    45                                          ;---------------------------------------
    46                                          ;タスクレジスタの初期化
    47                                          ;---------------------------------------
    48 00000078 66B82000                        mov     ax, SS_TASK_0                   ;//タスクレジスタの設定
    49 0000007C 0F00D8                          ltr     ax
    50                                  
    51                                          ;---------------------------------------
    52                                          ;初期化
    53                                          ;---------------------------------------
    54 0000007F E862090000                      cdecl   init_int                        ;//割り込みベクタの初期化
    55 00000084 E8AC090000                      cdecl   init_pic                        ;//割り込みコントローラの初期化
    56                                  
    57                                          set_vect        0x00, int_zero_div      ;割り込み処理の登録:0除算
    57 00000089 50                  <1>  push eax
    57 0000008A 57                  <1>  push edi
    57                              <1> 
    57 0000008B BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    57 00000090 B8[170A0000]        <1>  mov eax, %2
    57                              <1> 
    57                              <1>  %if 3 == %0
    57                              <1>  mov [edi + 4], %3
    57                              <1>  %endif
    57                              <1> 
    57 00000095 668907              <1>  mov [edi + 0], ax
    57 00000098 C1E810              <1>  shr eax, 16
    57 0000009B 66894706            <1>  mov [edi + 6], ax
    57                              <1> 
    57 0000009F 5F                  <1>  pop edi
    57 000000A0 58                  <1>  pop eax
    58                                          set_vect        0x20, int_timer         ;割り込み処理の登録:タイマー
    58 000000A1 50                  <1>  push eax
    58 000000A2 57                  <1>  push edi
    58                              <1> 
    58 000000A3 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    58 000000A8 B8[D2020000]        <1>  mov eax, %2
    58                              <1> 
    58                              <1>  %if 3 == %0
    58                              <1>  mov [edi + 4], %3
    58                              <1>  %endif
    58                              <1> 
    58 000000AD 668907              <1>  mov [edi + 0], ax
    58 000000B0 C1E810              <1>  shr eax, 16
    58 000000B3 66894706            <1>  mov [edi + 6], ax
    58                              <1> 
    58 000000B7 5F                  <1>  pop edi
    58 000000B8 58                  <1>  pop eax
    59                                          set_vect        0x21, int_keyboard      ;割り込み処理の登録:KBC
    59 000000B9 50                  <1>  push eax
    59 000000BA 57                  <1>  push edi
    59                              <1> 
    59 000000BB BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    59 000000C0 B8[4A0B0000]        <1>  mov eax, %2
    59                              <1> 
    59                              <1>  %if 3 == %0
    59                              <1>  mov [edi + 4], %3
    59                              <1>  %endif
    59                              <1> 
    59 000000C5 668907              <1>  mov [edi + 0], ax
    59 000000C8 C1E810              <1>  shr eax, 16
    59 000000CB 66894706            <1>  mov [edi + 6], ax
    59                              <1> 
    59 000000CF 5F                  <1>  pop edi
    59 000000D0 58                  <1>  pop eax
    60                                          set_vect        0x28, int_rtc           ;割り込み処理の登録:RTC
    60 000000D1 50                  <1>  push eax
    60 000000D2 57                  <1>  push edi
    60                              <1> 
    60 000000D3 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    60 000000D8 B8[600A0000]        <1>  mov eax, %2
    60                              <1> 
    60                              <1>  %if 3 == %0
    60                              <1>  mov [edi + 4], %3
    60                              <1>  %endif
    60                              <1> 
    60 000000DD 668907              <1>  mov [edi + 0], ax
    60 000000E0 C1E810              <1>  shr eax, 16
    60 000000E3 66894706            <1>  mov [edi + 6], ax
    60                              <1> 
    60 000000E7 5F                  <1>  pop edi
    60 000000E8 58                  <1>  pop eax
    61                                  
    62                                          ;---------------------------------------
    63                                          ;デバイスの割り込み許可
    64                                          ;---------------------------------------
    65 000000E9 6A10E8990900006683-             cdecl   rtc_int_en, 0x10                ;rtc_int_en(UIE); //更新サイクル終了割り込み許可
    65 000000F2 C404               
    66 000000F4 E88F0A0000                      cdecl   int_en_timer0                   ;//タイマー(カウンタ0)割り込み許可
    67                                  
    68                                          ;---------------------------------------
    69                                          ;IMR(割り込みマスクレジスタ)の設定
    70                                          ;---------------------------------------
    71                                          outp    0x21, 0b_1111_1000              ;//割り込み有効:スレーブPIC/KBC/タイマー
    71 000000F9 B0F8                <1>  mov al, %2
    71 000000FB E621                <1>  out %1, al
    72                                          outp    0xA1, 0b_1111_1110              ;//割り込み有効:RTC
    72 000000FD B0FE                <1>  mov al, %2
    72 000000FF E6A1                <1>  out %1, al
    73                                  
    74                                          ;---------------------------------------
    75                                          ;CPUの割り込み許可
    76                                          ;---------------------------------------
    77 00000101 FB                              sti                                      ;//割り込み許可
    78                                  
    79                                          ;---------------------------------------
    80                                          ;フォントの一覧表示
    81                                          ;---------------------------------------
    82 00000102 6A0D6A3FE87E030000-             cdecl   draw_font, 63, 13               ;//フォントの一覧表示
    82 0000010B 6683C408           
    83 0000010F 6A046A3FE8FD030000-             cdecl   draw_color_bar, 63, 4           ;//カラーバーの表示
    83 00000118 6683C408           
    84                                  
    85                                          ;---------------------------------------
    86                                          ;文字列の表示
    87                                          ;---------------------------------------
    88 0000011C 68[85010000]680F01-             cdecl   draw_str, 25, 14, 0x010F, .s0   ;draw_str();
    88 00000124 00006A0E6A19E89D03-
    88 0000012D 00006683C410       
    89                                  
    90                                          ;---------------------------------------
    91                                          ;タスクの呼び出し
    92                                          ;---------------------------------------
    93 00000133 9A000000002800                  call    SS_TASK_1:0                     ;//タスクの呼び出し
    94                                  
    95                                          ;---------------------------------------
    96                                          ;時刻の表示
    97                                          ;---------------------------------------
    98                                  .10L:                                           ;do
    99                                                                                  ;{
   100 0000013A A1[A0010000]                    mov     eax, [RTC_TIME]                 ;       //時刻の取得
   101 0000013F 5068000700006A006A-             cdecl   draw_time, 72, 0, 0x0700, eax   ;       //時刻の表示
   101 00000148 48E8E40600006683C4-
   101 00000151 10                 
   102                                  
   103 00000152 E8400A0000                      cdecl   draw_rotation_bar               ;       //回転する棒を表示
   104                                  
   105 00000157 68[96010000]68-                 cdecl   ring_rd, _KEY_BUFF, .int_key    ;       EAX = ring_rd(buff, &int_key);
   105 0000015D [700B0000]E8370900-
   105 00000165 006683C408         
   106 0000016A 83F800                          cmp     eax, 0                          ;       if(EAX != 0)
   107 0000016D 7412                            je      .10E                            ;       {
   108 0000016F 68[700B0000]6A1D6A-             cdecl   draw_key, 2, 29, _KEY_BUFF      ;               ring_show(key_buff); //全要素を表示
   108 00000177 02E8790900006683C4-
   108 00000180 0C                 
   109                                  .10E:                                           ;       }
   110                                  
   111 00000181 EBB7                            jmp     .10L                            ;}while(1);
   112                                  
   113                                          ;---------------------------------------
   114                                          ;処理の終了
   115                                          ;---------------------------------------
   116 00000183 EBFE                            jmp     $                               ;while(1) //無限ループ
   117                                  
   118                                  
   119                                  
   120 00000185 2048656C6C6F2C206B-     .s0:    db      " Hello, kernel! ", 0
   120 0000018E 65726E656C212000   
   121                                  
   122 00000196 00000000                .int_key:       dd      0
   123                                  
   124 0000019A 00<rept>                ALIGN   4, db   0
   125 0000019C 00000000                FONT_ADR:       dd      0
   126 000001A0 00000000                RTC_TIME:       dd      0
   127                                  
   128                                  ;********************************************************************************************************
   129                                  ;タスク
   130                                  ;********************************************************************************************************
   131                                  %include        "descriptor.s"
     1                              <1> ;********************************************************************************************************
     2                              <1> ;TSS
     3                              <1> ;********************************************************************************************************
     4                              <1> TSS_0:
     5 000001A4 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
     6 000001A8 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                                     ;*  4:ESP0
     7 000001AC 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
     8 000001B0 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
     9 000001B4 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    10 000001B8 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    11 000001BC 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    12 000001C0 00000000            <1> .cr3:           dd  0                                                   ;  28:CR3(PDBR)
    13 000001C4 00000000            <1> .eip:           dd  0                                                   ;  32:EIP
    14 000001C8 00000000            <1> .eflags:        dd  0                                                   ;  36:EFLAGS
    15 000001CC 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    16 000001D0 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    17 000001D4 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    18 000001D8 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    19 000001DC 00000000            <1> .esp:           dd  0                                                   ;  56:ESP
    20 000001E0 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    21 000001E4 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    22 000001E8 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    23 000001EC 00000000            <1> .es:            dd  0                                                   ;  72:ES
    24 000001F0 00000000            <1> .cs:            dd  0                                                   ;  76:CS
    25 000001F4 00000000            <1> .ss:            dd  0                                                   ;  80:SS
    26 000001F8 00000000            <1> .ds:            dd  0                                                   ;  84:DS
    27 000001FC 00000000            <1> .fs:            dd  0                                                   ;  88:FS
    28 00000200 00000000            <1> .gs:            dd  0                                                   ;  92:GS
    29 00000204 00000000            <1> .ldt:           dd  0                                                   ;* 96:LDTセグメントセレクタ
    30 00000208 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    31                              <1> 
    32                              <1> TSS_1:
    33 0000020C 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    34 00000210 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                                     ;*  4:ESP0
    35 00000214 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    36 00000218 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    37 0000021C 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    38 00000220 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    39 00000224 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    40 00000228 00000000            <1> .cr3:           dd  0                                                   ;  28:CR3(PDBR)
    41 0000022C [F4020000]          <1> .eip:           dd  task_1                                              ;  32:EIP
    42 00000230 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
    43 00000234 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    44 00000238 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    45 0000023C 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    46 00000240 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    47 00000244 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56:ESP
    48 00000248 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    49 0000024C 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    50 00000250 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    51 00000254 24000000            <1> .es:            dd  DS_TASK_1                                           ;  72:ES
    52 00000258 1C000000            <1> .cs:            dd  CS_TASK_1                                           ;  76:CS
    53 0000025C 24000000            <1> .ss:            dd  DS_TASK_1                                           ;  80:SS
    54 00000260 24000000            <1> .ds:            dd  DS_TASK_1                                           ;  84:DS
    55 00000264 24000000            <1> .fs:            dd  DS_TASK_1                                           ;  88:FS
    56 00000268 24000000            <1> .gs:            dd  DS_TASK_1                                           ;  92:GS
    57 0000026C 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
    58 00000270 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    59                              <1> 
    60                              <1> ;********************************************************************************************************
    61                              <1> ;グローバルディスクリプタテーブル
    62                              <1> ;********************************************************************************************************
    63 00000274 0000000000000000    <1> GDT:            dq  0x_0000_0000_0000_0000                              ;NULL
    64 0000027C FFFF0000009ACF00    <1> .cs_kernel:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
    65 00000284 FFFF00000092CF00    <1> .ds_kernel:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
    66 0000028C 0000000000820000    <1> .ldt:           dq  0x_0000_8200_0000_0000                              ;LDTディスクリプタ
    67 00000294 6700000000890000    <1> .tss_0:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
    68 0000029C 6700000000890000    <1> .tss_1:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
    69                              <1> .end:
    70                              <1> 
    71                              <1> CS_KERNEL       equ .cs_kernel  - GDT
    72                              <1> DS_KERNEL       equ .ds_kernel  - GDT
    73                              <1> SS_LDT          equ .ldt        - GDT
    74                              <1> SS_TASK_0       equ .tss_0      - GDT
    75                              <1> SS_TASK_1       equ .tss_1      - GDT
    76                              <1> 
    77 000002A4 2F00                <1> GDTR:           dw  GDT.end - GDT - 1
    78 000002A6 [74020000]          <1>                 dd  GDT
    79                              <1> 
    80                              <1> 
    81                              <1> ;********************************************************************************************************
    82                              <1> ;ローカルディスクリプタテーブル
    83                              <1> ;********************************************************************************************************
    84 000002AA 0000000000000000    <1> LDT:            dq  0x_0000_0000_0000_0000                              ;NULL
    85 000002B2 FFFF0000009ACF00    <1> .cs_task_0:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
    86 000002BA FFFF00000092CF00    <1> .ds_task_0:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
    87 000002C2 FFFF0000009ACF00    <1> .cs_task_1:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
    88 000002CA FFFF00000092CF00    <1> .ds_task_1:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
    89                              <1> .end:
    90                              <1> 
    91                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                              ;タスク0用CSセレクタ
    92                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                              ;タスク0用DSセレクタ
    93                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4                              ;タスク1用CSセレクタ
    94                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4                              ;タスク1用DSセレクタ
    95                              <1> 
    96                              <1> LDT_LIMIT       equ .end        - LDT - 1
   132                                  %include        "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000002D2 60                  <1>         pushad
     6 000002D3 1E                  <1>         push    ds
     7 000002D4 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 000002D5 66B81000            <1>         mov     ax, 0x0010
    13 000002D9 8ED8                <1>         mov     ds, ax
    14 000002DB 8EC0                <1>         mov     es, ax
    15                              <1>         
    16                              <1>         ;---------------------------------------
    17                              <1>         ;TICK
    18                              <1>         ;---------------------------------------
    19 000002DD FF05[EC020000]      <1>         inc     dword [TIMER_COUNT]             ;TIMER_COUNT++; //割り込み回数の更新
    20                              <1> 
    21                              <1>         ;-----------------------------------------
    22                              <1>         ;割り込みフラグをクリア(EOI)
    23                              <1>         ;-----------------------------------------
    24                              <1>         outp 0x20, 0x20
    24 000002E3 B020                <2>  mov al, %2
    24 000002E5 E620                <2>  out %1, al
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;レジスタの復帰
    28                              <1>         ;---------------------------------------
    29 000002E7 07                  <1>         pop     es
    30 000002E8 1F                  <1>         pop     ds
    31 000002E9 61                  <1>         popad
    32                              <1>         
    33 000002EA CF                  <1>         iret
    34                              <1> 
    35                              <1>         ;---------------------------------------
    36                              <1>         ;データ
    37                              <1>         ;---------------------------------------
    38 000002EB 00                  <1> ALIGN   4, db   0
    39 000002EC 0000000000000000    <1> TIMER_COUNT:    dq  0
   133                                  %include        "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;文字列の表示
     4                              <1>         ;---------------------------------------
     5 000002F4 68[09030000]6A076A- <1>         cdecl   draw_str, 63, 0, 0x07, .s0      ;draw_str();
     5 000002FC 006A3FE8C801000066- <1>
     5 00000305 83C410              <1>
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;タスクの終了
     9                              <1>         ;---------------------------------------
    10 00000308 CF                  <1>         iret
    11                              <1> 
    12                              <1>         ;---------------------------------------
    13                              <1>         ;データ
    14                              <1>         ;---------------------------------------
    15 00000309 5461736B2D3100      <1> .s0:    db  "Task-1", 0
   134                                  
   135                                  ;********************************************************************************************************
   136                                  ;モジュール
   137                                  ;********************************************************************************************************
   138                                  %include        "..\modules\protect\vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 読み込みプレーン(0~3)
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000310 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000311 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000313 6650                <1>         push    ax
    14 00000315 6652                <1>         push    dx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;読み込みプレーンの選択
    18                              <1>         ;---------------------------------------
    19 00000317 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    20 0000031A 80E403              <1>         and     ah, 0x03                        ;AH &= 0x03; //余計なビットをマスク
    21 0000031D B004                <1>         mov     al, 0x04                        ;AL = 読み込みマップ選択レジスタ
    22 0000031F 66BACE03            <1>         mov     dx, 0x03CE                      ;DX = グラフィックス制御ポート
    23 00000323 66EF                <1>         out     dx, ax                          ;//ポート出力
    24                              <1>         
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00000325 665A                <1>         pop     dx
    29 00000327 6658                <1>         pop     ax
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;スタックフレームの破棄
    33                              <1>         ;---------------------------------------
    34 00000329 89EC                <1>         mov     esp, ebp
    35 0000032B 5D                  <1>         pop     ebp
    36                              <1> 
    37 0000032C C3                  <1>         ret
    38                              <1> 
    39                              <1> vga_set_write_plane:
    40                              <1>         ;-----------------------------------
    41                              <1>         ;スタックフレームの構築
    42                              <1>         ;-----------------------------------
    43                              <1>                                             ;   + 8| 書き込みプレーン
    44                              <1>                                             ;   + 4| IP(戻り番号)
    45 0000032D 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    46 0000032E 89E5                <1>         mov    ebp, esp                     ;------|---------
    47                              <1> 
    48                              <1>         ;-----------------------------------
    49                              <1>         ;レジスタの保存
    50                              <1>         ;-----------------------------------
    51 00000330 6650                <1>         push    ax
    52 00000332 6652                <1>         push    dx
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;読み込みプレーンの選択
    56                              <1>         ;---------------------------------------
    57 00000334 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    58 00000337 80E40F              <1>         and     ah, 0x0F                        ;AH &= 0x03; //余計なビットをマスク
    59 0000033A B002                <1>         mov     al, 0x02                        ;AL = 読み込みマップ選択レジスタ
    60 0000033C 66BAC403            <1>         mov     dx, 0x03C4                      ;DX = グラフィックス制御ポート
    61 00000340 66EF                <1>         out     dx, ax                          ;//ポート出力
    62                              <1>         
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 00000342 665A                <1>         pop     dx
    67 00000344 6658                <1>         pop     ax
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;スタックフレームの破棄
    71                              <1>         ;---------------------------------------
    72 00000346 89EC                <1>         mov     esp, ebp
    73 00000348 5D                  <1>         pop     ebp
    74                              <1> 
    75 00000349 C3                  <1>         ret
    76                              <1> 
    77                              <1> vram_font_copy:
    78                              <1>         ;-----------------------------------
    79                              <1>         ;スタックフレームの構築
    80                              <1>         ;-----------------------------------
    81                              <1>                                             ;EBP+20| 描画色
    82                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
    83                              <1>                                             ;EBP+12| VRAMアドレス
    84                              <1>                                             ;   + 8| FONTアドレス
    85                              <1>                                             ;   + 4| IP(戻り番号)
    86 0000034A 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    87 0000034B 89E5                <1>         mov    ebp, esp                     ;------|---------
    88                              <1> 
    89                              <1>         ;-----------------------------------
    90                              <1>         ;レジスタの保存
    91                              <1>         ;-----------------------------------
    92 0000034D 50                  <1>         push    eax
    93 0000034E 53                  <1>         push    ebx
    94 0000034F 51                  <1>         push    ecx
    95 00000350 57                  <1>         push    edi
    96 00000351 52                  <1>         push    edx
    97 00000352 56                  <1>         push    esi
    98                              <1> 
    99                              <1>         ;---------------------------------------
   100                              <1>         ;引数を変数に代入
   101                              <1>         ;---------------------------------------
   102 00000353 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = フォントアドレス;
   103 00000356 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   104 00000359 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   105 0000035D 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   106                              <1> 
   107                              <1>         ;---------------------------------------
   108                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   109                              <1>         ;---------------------------------------
   110 00000361 84C7                <1>         test    bh, al                          ;ZF = (背景色 & プレーン)
   111 00000363 0F94C6              <1>         setz    dh                              ;if(ZF == 1){ DH = 0x00; }else{ DH = 0x01;}
   112 00000366 FECE                <1>         dec     dh                              ;DH--; // 0xFF or 0x00
   113                              <1> 
   114 00000368 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   115 0000036A 0F94C2              <1>         setz    dl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   116 0000036D FECA                <1>         dec     dl                              ;DL--; //0xFF or 0x00
   117                              <1> 
   118                              <1>         ;---------------------------------------
   119                              <1>         ;16ビットフォントのコピー
   120                              <1>         ;---------------------------------------
   121 0000036F FC                  <1>         cld                                     ;DF = 0; //アドレス加算
   122                              <1> 
   123 00000370 B910000000          <1>         mov     ecx, 16                         ;ECX = 16; //16ドット
   124                              <1> .10L:                                           ;do
   125                              <1>                                                 ;{
   126                              <1>         ;---------------------------------------
   127                              <1>         ;フォントマスクの作成
   128                              <1>         ;---------------------------------------
   129 00000375 AC                  <1>         lodsb                                   ;   AL = *ESI++; //フォント
   130 00000376 88C4                <1>         mov     ah, al                          ;   AH = AL;
   131 00000378 F6D4                <1>         not     ah                              ;   AH ~= AH; //!フォント(ビット反転)
   132                              <1> 
   133                              <1>         ;---------------------------------------
   134                              <1>         ;前景色
   135                              <1>         ;---------------------------------------
   136 0000037A 20D0                <1>         and     al, dl                          ;   AL = 前景色 & フォント;
   137                              <1> 
   138                              <1>         ;---------------------------------------
   139                              <1>         ;背景色
   140                              <1>         ;---------------------------------------
   141 0000037C F7C310000000        <1>         test    ebx, 0x0010                     ;if(透過モード)
   142 00000382 7404                <1>         jz      .11F                            ;{
   143 00000384 2227                <1>         and     ah, [edi]                       ;   AH = !フォント & [EDI] //現在値
   144 00000386 EB02                <1>         jmp     .11E                            ;}
   145                              <1> .11F:                                           ;else
   146                              <1>                                                 ;{
   147 00000388 20F4                <1>         and     ah, dh                          ;   AH = !フォント & 背景色
   148                              <1> .11E:                                           ;}
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;前景色と背景色を合成
   152                              <1>         ;---------------------------------------
   153 0000038A 08E0                <1>         or  al, ah                              ;   AL = 背景 | 前景;
   154                              <1> 
   155                              <1>         ;---------------------------------------
   156                              <1>         ;新しい値を出力（VRAMに代入)
   157                              <1>         ;---------------------------------------
   158 0000038C 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //プレーンに書き込む
   159                              <1> 
   160 0000038E 83C750              <1>         add     edi, 80                         ;   EDI += 80;
   161 00000391 E2E2                <1>         loop    .10L                            ;}while(--ECX);
   162                              <1> .10E:
   163                              <1>         ;---------------------------------------
   164                              <1>         ;レジスタの復帰
   165                              <1>         ;---------------------------------------
   166 00000393 5E                  <1>         pop     esi
   167 00000394 5A                  <1>         pop     edx
   168 00000395 5F                  <1>         pop     edi
   169 00000396 59                  <1>         pop     ecx
   170 00000397 5B                  <1>         pop     ebx
   171 00000398 58                  <1>         pop     eax
   172                              <1> 
   173                              <1>         ;---------------------------------------
   174                              <1>         ;スタックフレームの破棄
   175                              <1>         ;---------------------------------------
   176 00000399 89EC                <1>         mov     esp, ebp
   177 0000039B 5D                  <1>         pop     ebp
   178                              <1> 
   179 0000039C C3                  <1>         ret
   180                              <1> 
   181                              <1> vram_bit_copy:
   182                              <1>         ;-----------------------------------
   183                              <1>         ;スタックフレームの構築
   184                              <1>         ;-----------------------------------
   185                              <1>                                             ;EBP+20| 描画色
   186                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
   187                              <1>                                             ;EBP+12| VRAMアドレス
   188                              <1>                                             ;   + 8| 出力ビットパターン
   189                              <1>                                             ;   + 4| IP(戻り番号)
   190 0000039D 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
   191 0000039E 89E5                <1>         mov    ebp, esp                     ;------|---------
   192                              <1> 
   193                              <1>         ;-----------------------------------
   194                              <1>         ;レジスタの保存
   195                              <1>         ;-----------------------------------
   196 000003A0 50                  <1>         push    eax
   197 000003A1 53                  <1>         push    ebx
   198 000003A2 57                  <1>         push    edi
   199                              <1> 
   200                              <1>         ;---------------------------------------
   201                              <1>         ;引数を変数に代入
   202                              <1>         ;---------------------------------------
   203 000003A3 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   204 000003A6 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   205 000003AA 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   206                              <1> 
   207                              <1>         ;---------------------------------------
   208                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   209                              <1>         ;---------------------------------------
   210 000003AE 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   211 000003B0 0F94C3              <1>         setz    bl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   212 000003B3 FECB                <1>         dec     bl                              ;DL--; //0xFF or 0x00
   213                              <1> 
   214                              <1>         ;---------------------------------------
   215                              <1>         ;背景のマスクを作成
   216                              <1>         ;---------------------------------------
   217 000003B5 8A4508              <1>         mov     al, [ebp + 8]                   ;AL = 出力ビットパターン;
   218 000003B8 88C4                <1>         mov     ah, al                          ;AH ~= AL; //!出力ビットパターン(ビット反転)
   219 000003BA F6D4                <1>         not     ah
   220                              <1> 
   221                              <1>         ;---------------------------------------
   222                              <1>         ;背景色
   223                              <1>         ;---------------------------------------
   224 000003BC 2227                <1>         and     ah, [edi]                       ;AH = 現在値 & !出力ビットパターン
   225 000003BE 20D8                <1>         and     al, bl                          ;AL = 表示色 & 出力ビットパターン
   226 000003C0 08E0                <1>         or      al, ah                          ;AL |= AH;
   227 000003C2 8807                <1>         mov     [edi], al                       ;[EDI] = BL; //プレーンに書き込む
   228                              <1> 
   229                              <1>         ;---------------------------------------
   230                              <1>         ;レジスタの復帰
   231                              <1>         ;---------------------------------------
   232 000003C4 5F                  <1>         pop     edi
   233 000003C5 5B                  <1>         pop     ebx
   234 000003C6 58                  <1>         pop     eax
   235                              <1> 
   236                              <1>         ;---------------------------------------
   237                              <1>         ;スタックフレームの破棄
   238                              <1>         ;---------------------------------------
   239 000003C7 89EC                <1>         mov     esp, ebp
   240 000003C9 5D                  <1>         pop     ebp
   241                              <1> 
   242 000003CA C3                  <1>         ret
   139                                  %include        "..\modules\protect\draw_char.s"
     1                              <1> draw_char:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +20| 文字
     6                              <1>                                             ;   +16| 描画色
     7                              <1>                                             ;   +12| 行(0~29)
     8                              <1>                                             ;   + 8| 列(0~79)
     9                              <1>                                             ;   + 4| IP(戻り番号)
    10 000003CB 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    11 000003CC 89E5                <1>         mov    ebp, esp                     ;------|---------
    12                              <1> 
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 000003CE 53                  <1>         push    ebx
    17 000003CF 57                  <1>         push    edi
    18 000003D0 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 000003D1 0FB67514            <1>         movzx   esi, byte [ebp +20]             ;CL = 文字コード;
    24 000003D5 C1E604              <1>         shl     esi, 4                          ;CL *= 16; //1文字16バイト
    25 000003D8 0335[9C010000]      <1>         add     esi, [FONT_ADR]                 ;ESI = フォントアドレス;
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;コピー先アドレスを取得
    29                              <1>         ;adr = 0xA0000 + (640 / 8 * 16) * y + x
    30                              <1>         ;---------------------------------------
    31 000003DE 8B7D0C              <1>         mov     edi, [ebp +12]                  ;Y(行)
    32 000003E1 C1E708              <1>         shl     edi, 8                          ;EDI = Y * 256;
    33 000003E4 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]  ;EDI = Y * 4 + Y;
    34 000003EB 037D08              <1>         add     edi, [ebp + 8]                  ;X(列)
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;1文字文のフォントを出力
    38                              <1>         ;---------------------------------------
    39 000003EE 0FB75D10            <1>         movzx   ebx, word [ebp +16]             ; //表示色
    40                              <1> 
    41 000003F2 6A03E817FFFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;//読み込みプレーン:輝度(I)
    41 000003FB C404                <1>
    42 000003FD 6A08E829FFFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;//書き込みプレーン:輝度(I)
    42 00000406 C404                <1>
    43 00000408 536A085756E838FFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x08, ebx
    43 00000411 FF6683C410          <1>
    44                              <1>         
    45 00000416 6A02E8F3FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;//読み込みプレーン:赤(R)
    45 0000041F C404                <1>
    46 00000421 6A04E805FFFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;//書き込みプレーン:赤(R)
    46 0000042A C404                <1>
    47 0000042C 536A045756E814FFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x04, ebx
    47 00000435 FF6683C410          <1>
    48                              <1> 
    49 0000043A 6A01E8CFFEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;//読み込みプレーン:緑(G)
    49 00000443 C404                <1>
    50 00000445 6A02E8E1FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;//書き込みプレーン:緑(G)
    50 0000044E C404                <1>
    51 00000450 536A025756E8F0FEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x02, ebx
    51 00000459 FF6683C410          <1>
    52                              <1> 
    53 0000045E 6A00E8ABFEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;//読み込みプレーン:青(B)
    53 00000467 C404                <1>
    54 00000469 6A01E8BDFEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;//書き込みプレーン:青(B)
    54 00000472 C404                <1>
    55 00000474 536A015756E8CCFEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x01, ebx
    55 0000047D FF6683C410          <1>
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの復帰
    59                              <1>         ;---------------------------------------
    60 00000482 5E                  <1>         pop     esi
    61 00000483 5F                  <1>         pop     edi
    62 00000484 5B                  <1>         pop     ebx
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;スタックフレームの破棄
    66                              <1>         ;---------------------------------------
    67 00000485 89EC                <1>         mov     esp, ebp
    68 00000487 5D                  <1>         pop     ebp
    69                              <1> 
    70 00000488 C3                  <1>         ret
   140                                  %include        "..\modules\protect\draw_font.s"
     1                              <1> draw_font:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000489 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 0000048A 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 0000048C 50                  <1>         push    eax
    15 0000048D 53                  <1>         push    ebx
    16 0000048E 51                  <1>         push    ecx
    17 0000048F 57                  <1>         push    edi
    18 00000490 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 00000491 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 00000494 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;コピー先アドレスを取得
    28                              <1>         ;---------------------------------------
    29 00000497 B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 0000049C 81F900010000        <1> .10L:   cmp     ecx, 256                        ;    ECX < 256;
    31 000004A2 731F                <1>         jae     .10E                            ;
    32                              <1>                                                 ;    ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示する桁位置を計算
    36                              <1>         ;---------------------------------------
    37 000004A4 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 000004A6 83E00F              <1>         and     eax, 0x0F                       ;   EAX &= 0x0F;
    39 000004A9 01F0                <1>         add     eax, esi                        ;   EAX += X;
    40                              <1>         ;---------------------------------------
    41                              <1>         ;表示する行位置を計算
    42                              <1>         ;---------------------------------------
    43 000004AB 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    44 000004AD C1EB04              <1>         shr     ebx, 4                          ;   EBX /= 16;
    45 000004B0 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    46                              <1>         
    47 000004B2 516A075350E80FFFFF- <1>         cdecl   draw_char, eax, ebx, 0x07, ecx  ;   draw_char();
    47 000004BB FF6683C410          <1>
    48                              <1> 
    49 000004C0 41                  <1>         inc     ecx                             ;   //for(... ECX++)
    50 000004C1 EBD9                <1>         jmp     .10L                            ;
    51                              <1> .10E:                                           ;}
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;レジスタの復帰
    55                              <1>         ;---------------------------------------
    56 000004C3 5E                  <1>         pop     esi
    57 000004C4 5F                  <1>         pop     edi
    58 000004C5 59                  <1>         pop     ecx
    59 000004C6 5B                  <1>         pop     ebx
    60 000004C7 58                  <1>         pop     eax
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;スタックフレームの破棄
    64                              <1>         ;---------------------------------------
    65 000004C8 89EC                <1>         mov     esp, ebp
    66 000004CA 5D                  <1>         pop     ebp
    67                              <1> 
    68 000004CB C3                  <1>         ret
   141                                  %include        "..\modules\protect\draw_str.s"
     1                              <1> draw_str:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 000004CC 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 000004CD 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 000004CF 50                  <1>         push    eax
    15 000004D0 53                  <1>         push    ebx
    16 000004D1 51                  <1>         push    ecx
    17 000004D2 52                  <1>         push    edx
    18 000004D3 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 000004D4 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = 列;
    24 000004D7 8B550C              <1>         mov     edx, [ebp +12]                  ;EDX = 行;
    25 000004DA 0FB75D10            <1>         movzx   ebx, word [ebp + 16]            ;EBX = 表示色;
    26 000004DE 8B7514              <1>         mov     esi, [ebp +20]                  ;ESI = 文字列へのアドレス;
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字列を表示
    30                              <1>         ;---------------------------------------
    31 000004E1 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
    32                              <1> .10L:                                           ;do
    33                              <1>                                                 ;{
    34 000004E2 AC                  <1>         lodsb                                   ;   AL = *ESI++;
    35 000004E3 3C00                <1>         cmp     al, 0                           ;   if(0 == AL)
    36 000004E5 7425                <1>         je  .10E                                ;       break;
    37                              <1> 
    38 000004E7 50535251E8DBFEFFFF- <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;   draw_char();
    38 000004F0 6683C410            <1>
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;文字の表示位置を更新
    42                              <1>         ;---------------------------------------
    43 000004F4 41                  <1>         inc     ecx                             ;   ECX++; //列を加算
    44 000004F5 83F950              <1>         cmp     ecx, 80                         ;   if(80 <= ECX) //80文字以上?
    45 000004F8 7C10                <1>         jl      .12E                            ;   {
    46 000004FA B900000000          <1>         mov     ecx, 0                          ;       ECX = 0; //列を初期化
    47 000004FF 42                  <1>         inc     edx                             ;       EDX++; //行を加算
    48 00000500 83FA1E              <1>         cmp     edx, 30                         ;       if(30 <= EDX) //30行以上?
    49 00000503 7C05                <1>         jl      .12E                            ;       {
    50 00000505 BA00000000          <1>         mov     edx, 0                          ;           EDX = 0;
    51                              <1>                                                 ;       }
    52                              <1> .12E:                                           ;   }
    53 0000050A EBD6                <1>         jmp     .10L                            ;
    54                              <1> .10E:                                           ;}while(1);
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;レジスタの復帰
    58                              <1>         ;---------------------------------------
    59 0000050C 5E                  <1>         pop     esi
    60 0000050D 5A                  <1>         pop     edx
    61 0000050E 59                  <1>         pop     ecx
    62 0000050F 5B                  <1>         pop     ebx
    63 00000510 58                  <1>         pop     eax
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;スタックフレームの破棄
    67                              <1>         ;---------------------------------------
    68 00000511 89EC                <1>         mov     esp, ebp
    69 00000513 5D                  <1>         pop     ebp
    70                              <1> 
    71 00000514 C3                  <1>         ret
   142                                  %include        "..\modules\protect\draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000515 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000516 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000518 50                  <1>         push    eax
    15 00000519 53                  <1>         push    ebx
    16 0000051A 51                  <1>         push    ecx
    17 0000051B 52                  <1>         push    edx
    18 0000051C 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 0000051D 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 00000520 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;カラーバーを表示
    28                              <1>         ;---------------------------------------
    29 00000523 B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 00000528 83F910              <1> .10L:   cmp     ecx, 16                         ;    ECX < 16;
    31 0000052B 732E                <1>         jae     .10E
    32                              <1>                                                 ;ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示位置を計算(列)
    36                              <1>         ;---------------------------------------
    37 0000052D 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 0000052F 83E001              <1>         and     eax, 0x01                       ;   EAX &= 0x01;
    39 00000532 C1E003              <1>         shl     eax, 3                          ;   EAX *= 8; //8文字分乗算
    40 00000535 01F0                <1>         add     eax, esi                        ;   EAX += X;
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;表示位置を計算(行)
    44                              <1>         ;---------------------------------------
    45 00000537 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    46 00000539 D1EB                <1>         shr     ebx, 1                          ;   EBX /= 2;
    47 0000053B 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    48                              <1> 
    49                              <1>         ;---------------------------------------
    50                              <1>         ;描画色を計算
    51                              <1>         ;---------------------------------------
    52 0000053D 89CA                <1>         mov     edx, ecx                        ;   EDX = ECX;
    53 0000053F D1E2                <1>         shl     edx, 1                          ;   EDX *= 2;
    54 00000541 8B92[6D050000]      <1>         mov     edx, [.t0 + edx]                ;   EDX += Y;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;カラーバーを表示
    58                              <1>         ;---------------------------------------
    59 00000547 68[64050000]525350- <1>         cdecl   draw_str, eax, ebx, edx, .s0    ;   draw_str();
    59 0000054F E878FFFFFF6683C410  <1>
    60                              <1> 
    61 00000558 41                  <1>         inc     ecx                             ;   //for(...ECX++
    62 00000559 EBCD                <1>         jmp     .10L                            ;
    63                              <1> .10E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;レジスタの復帰
    67                              <1>         ;---------------------------------------
    68 0000055B 5E                  <1>         pop     esi
    69 0000055C 5A                  <1>         pop     edx
    70 0000055D 59                  <1>         pop     ecx
    71 0000055E 5B                  <1>         pop     ebx
    72 0000055F 58                  <1>         pop     eax
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;スタックフレームの破棄
    76                              <1>         ;---------------------------------------
    77 00000560 89EC                <1>         mov     esp, ebp
    78 00000562 5D                  <1>         pop     ebp
    79                              <1> 
    80 00000563 C3                  <1>         ret
    81                              <1> 
    82                              <1>         ;---------------------------------------
    83                              <1>         ;データ
    84                              <1>         ;---------------------------------------
    85 00000564 202020202020202000  <1> .s0:    db  '        ', 0                       ;8文字分のスペース(表示色だけを変更)
    86                              <1> 
    87 0000056D 00000008            <1> .t0:    dw  0x0000, 0x0800                      ;カラーバーの背景色
    88 00000571 00010009            <1>         dw  0x0100, 0x0900
    89 00000575 0002000A            <1>         dw  0x0200, 0x0A00
    90 00000579 0003000B            <1>         dw  0x0300, 0x0B00
    91 0000057D 0004000C            <1>         dw  0x0400, 0x0C00
    92 00000581 0005000D            <1>         dw  0x0500, 0x0D00
    93 00000585 0006000E            <1>         dw  0x0600, 0x0E00
    94 00000589 0007000F            <1>         dw  0x0700, 0x0F00
   143                                  %include        "..\modules\protect\draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +16| 色
     6                              <1>                                             ;   +12| Y(行)
     7                              <1>                                             ;   + 8| X(列)
     8                              <1>                                             ;   + 4| IP(戻り番号)
     9 0000058D 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    10 0000058E 89E5                <1>         mov    ebp, esp                     ;------|---------
    11                              <1> 
    12                              <1>         ;-----------------------------------
    13                              <1>         ;レジスタの保存
    14                              <1>         ;-----------------------------------
    15 00000590 50                  <1>         push    eax
    16 00000591 53                  <1>         push    ebx
    17 00000592 51                  <1>         push    ecx
    18 00000593 57                  <1>         push    edi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;描画位置のメモリアドレスを計算
    22                              <1>         ;---------------------------------------
    23                              <1>         ;---------------------------------------
    24                              <1>         ;Y座標を80倍する(640/8)
    25                              <1>         ;---------------------------------------
    26 00000594 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y座標;
    27 00000597 C1E704              <1>         shl     edi, 4                          ;EDI *= 16;
    28 0000059A 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000] ;EDI = 0xA_0000[EDI * 4 + EDI];
    29                              <1>         
    30                              <1>         ;---------------------------------------
    31                              <1>         ;X座標を1/8して加算
    32                              <1>         ;---------------------------------------
    33 000005A1 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;EBX = X座標;
    34 000005A4 89D9                <1>         mov     ecx, ebx                        ;ECX = X座標; //一時保存
    35 000005A6 C1EB03              <1>         shr     ebx, 3                          ;EBX /= 8;
    36 000005A9 01DF                <1>         add     edi, ebx                        ;EDI += EBX;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;X座標を8で割った余りからビット位置を計算(出力ビットパターン)
    40                              <1>         ;(0=0x80, 1=0x40,... 7=0x01)
    41                              <1>         ;---------------------------------------
    42 000005AB 83E107              <1>         and     ecx, 0x07                       ;ECX = X & 0x07;
    43 000005AE BB80000000          <1>         mov     ebx, 0x80                       ;EBX = 0x80;
    44 000005B3 D3EB                <1>         shr     ebx, cl                         ;EBX >>= ECX;
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;色を指定
    48                              <1>         ;---------------------------------------
    49 000005B5 8B4D10              <1>         mov     ecx, [ebp +16]                  ;表示色
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;プレーンごとに出力
    53                              <1>         ;---------------------------------------
    54 000005B8 6A03E851FDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;輝度(I)プレーンを選択
    54 000005C1 C404                <1>
    55 000005C3 6A08E863FDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;輝度(I)プレーンを選択
    55 000005CC C404                <1>
    56 000005CE 516A085753E8C5FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    56 000005D7 FF6683C410          <1>
    57                              <1> 
    58 000005DC 6A02E82DFDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;赤(R)プレーンを選択
    58 000005E5 C404                <1>
    59 000005E7 6A04E83FFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;赤(R)プレーンを選択
    59 000005F0 C404                <1>
    60 000005F2 516A045753E8A1FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    60 000005FB FF6683C410          <1>
    61                              <1> 
    62 00000600 6A01E809FDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;緑(G)プレーンを選択
    62 00000609 C404                <1>
    63 0000060B 6A02E81BFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;緑(G)プレーンを選択
    63 00000614 C404                <1>
    64 00000616 516A025753E87DFDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    64 0000061F FF6683C410          <1>
    65                              <1> 
    66 00000624 6A00E8E5FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;青(B)プレーンを選択
    66 0000062D C404                <1>
    67 0000062F 6A01E8F7FCFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;青(B)プレーンを選択
    67 00000638 C404                <1>
    68 0000063A 516A015753E859FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    68 00000643 FF6683C410          <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;レジスタの復帰
    72                              <1>         ;---------------------------------------
    73 00000648 5F                  <1>         pop     edi
    74 00000649 59                  <1>         pop     ecx
    75 0000064A 5B                  <1>         pop     ebx
    76 0000064B 58                  <1>         pop     eax
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 0000064C 89EC                <1>         mov     esp, ebp
    82 0000064E 5D                  <1>         pop     ebp
    83                              <1> 
    84 0000064F C3                  <1>         ret
   144                                  %include        "..\modules\protect\draw_line.s"
     1                              <1> draw_line:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000650 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000651 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;変数を定義
    16                              <1>         ;-----------------------------------
    17 00000653 6A00                <1>         push    dword 0                     ;   - 4| sum = 0; //相対軸の積算値
    18 00000655 6A00                <1>         push    dword 0                     ;   - 8| x0 = 0; //X座標
    19 00000657 6A00                <1>         push    dword 0                     ;   -12| dx = 0; //X増分
    20 00000659 6A00                <1>         push    dword 0                     ;   -16| inc_x = 0; //X座標増分(基準軸:1 or -1)
    21 0000065B 6A00                <1>         push    dword 0                     ;   -20| y0 = 0; //Y座標
    22 0000065D 6A00                <1>         push    dword 0                     ;   -24| dy = 0; //Y増分
    23 0000065F 6A00                <1>         push    dword 0                     ;   -28| inc_y = 0; //Y座標増分(基準軸:1 or -1)
    24                              <1> 
    25                              <1>         ;-----------------------------------
    26                              <1>         ;レジスタの保存
    27                              <1>         ;-----------------------------------
    28 00000661 50                  <1>         push    eax
    29 00000662 53                  <1>         push    ebx
    30 00000663 51                  <1>         push    ecx
    31 00000664 57                  <1>         push    edi
    32 00000665 52                  <1>         push    edx
    33 00000666 56                  <1>         push    esi
    34                              <1> 
    35                              <1>         ;---------------------------------------
    36                              <1>         ;幅を計算(X軸)
    37                              <1>         ;---------------------------------------
    38 00000667 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    39 0000066A 8B5D10              <1>         mov     ebx, [ebp +16]                  ;EBX = X1;
    40 0000066D 29C3                <1>         sub     ebx, eax                        ;EBX = X1 - X0; //幅
    41 0000066F 7D09                <1>         jge     .10F                            ;if(幅 < 0)
    42                              <1>                                                 ;{
    43 00000671 F7DB                <1>         neg     ebx                             ;   幅 *= -1;
    44 00000673 BEFFFFFFFF          <1>         mov     esi, -1                         ;   //X座標の増分
    45 00000678 EB05                <1>         jmp     .10E                            ;}
    46                              <1> .10F:                                           ;else
    47                              <1>                                                 ;{
    48 0000067A BE01000000          <1>         mov     esi, 1                          ;   //X座標の増分
    49                              <1> .10E:                                           ;}
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;高さを計算(Y軸)
    53                              <1>         ;---------------------------------------
    54 0000067F 8B4D0C              <1>         mov     ecx, [ebp +12]                  ;ECX = Y0;
    55 00000682 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    56 00000685 29CA                <1>         sub     edx, ecx                        ;EDX = Y1 - Y0; //高さ
    57 00000687 7D09                <1>         jge     .20F                            ;if(高さ < 0)
    58                              <1>                                                 ;{
    59 00000689 F7DA                <1>         neg     edx                             ;   高さ *= -1;
    60 0000068B BFFFFFFFFF          <1>         mov     edi, -1                         ;   //Y座標の増分
    61 00000690 EB05                <1>         jmp     .20E                            ;}
    62                              <1> .20F:                                           ;else
    63                              <1>                                                 ;{
    64 00000692 BF01000000          <1>         mov     edi, 1                          ;   //Y座標の増分
    65                              <1> .20E:                                           ;}
    66                              <1>         
    67                              <1>         ;---------------------------------------
    68                              <1>         ;X軸
    69                              <1>         ;---------------------------------------
    70 00000697 8945F8              <1>         mov     [ebp - 8], eax                  ;//X軸:開始座標
    71 0000069A 895DF4              <1>         mov     [ebp -12], ebx                  ;//X軸:描画幅
    72 0000069D 8975F0              <1>         mov     [ebp -16], esi                  ;//X軸:増分(基準軸:1 or -1)
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;Y軸
    76                              <1>         ;---------------------------------------
    77 000006A0 894DEC              <1>         mov     [ebp -20], ecx                  ;//Y軸:開始座標
    78 000006A3 8955E8              <1>         mov     [ebp -24], edx                  ;//Y軸:描画幅
    79 000006A6 897DE4              <1>         mov     [ebp -28], edi                  ;//Y軸:増分(基準軸:1 or -1)
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;基準軸を決める
    83                              <1>         ;---------------------------------------
    84 000006A9 39D3                <1>         cmp     ebx, edx                        ;if(幅 <= 高さ)
    85 000006AB 7F08                <1>         jg      .22F                            ;{
    86                              <1>         
    87 000006AD 8D75EC              <1>         lea     esi, [ebp -20]                  ;   //X軸が基準軸
    88 000006B0 8D7DF8              <1>         lea     edi, [ebp - 8]                  ;   //Y軸が相対軸
    89                              <1> 
    90 000006B3 EB06                <1>         jmp     .22E                            ;}
    91                              <1> .22F:                                           ;else
    92                              <1>                                                 ;{
    93 000006B5 8D75F8              <1>         lea     esi, [ebp - 8]                  ;   //Y軸が基準軸
    94 000006B8 8D7DEC              <1>         lea     edi, [ebp -20]                  ;   //X軸が相対軸
    95                              <1> .22E:                                           ;}
    96                              <1> 
    97                              <1>         ;---------------------------------------
    98                              <1>         ;繰り返し回数(基準軸のドット数)(基準軸の長さが0な場合,繰り返し回数を1に設定し,1ピクセルの点を描画)
    99                              <1>         ;---------------------------------------
   100 000006BB 8B4EFC              <1>         mov     ecx, [esi - 4]                  ;ECX = 基準軸描画幅
   101 000006BE 83F900              <1>         cmp     ecx, 0                          ;if(0 == ECX)
   102 000006C1 7505                <1>         jnz     .30E                            ;{
   103 000006C3 B901000000          <1>         mov     ecx, 1                          ;   ECX = 1;
   104                              <1> .30E:                                           ;}
   105                              <1> 
   106                              <1>         ;---------------------------------------
   107                              <1>         ;線を描画
   108                              <1>         ;---------------------------------------
   109                              <1> .50L:                                           ;do
   110                              <1>                                                 ;{
   113 000006C8 FF7518FF75ECFF75F8- <1>         cdecl   draw_pixel, dword [ebp - 8],                             dword [ebp -20],                             dword [ebp +24]     ;   //点の描画
   113 000006D1 E8B7FEFFFF6683C40C  <1>
   114                              <1> 
   115                              <1>         ;---------------------------------------
   116                              <1>         ;基準軸を更新
   117                              <1>         ;---------------------------------------
   118 000006DA 8B46F8              <1>         mov     eax, [esi - 8]                  ;   EAX = 基準軸増加(1 or -1);
   119 000006DD 0106                <1>         add     [esi - 0], eax                  ;
   120                              <1> 
   121                              <1>         ;---------------------------------------
   122                              <1>         ;相対軸を更新
   123                              <1>         ;---------------------------------------
   124 000006DF 8B45FC              <1>         mov     eax, [ebp - 4]                  ;   EAX = sum;  //相対軸の積算値
   125 000006E2 0347FC              <1>         add     eax, [edi - 4]                  ;   EAX += dy;  //増加(相対軸の描画幅)
   126                              <1> 
   127 000006E5 8B5EFC              <1>         mov     ebx, [esi - 4]                  ;   EBX = dx;   //増分(基準軸の描画幅)
   128                              <1> 
   129 000006E8 39D8                <1>         cmp     eax, ebx                        ;   if(積算値 <= 相対軸の増分)
   130 000006EA 7C07                <1>         jl      .52E                            ;   {
   131 000006EC 29D8                <1>         sub     eax, ebx                        ;       EAX -= EBX; //積算値から相対軸の増分を減算
   132                              <1>                                                 ;       //相対軸の座標を更新(1ドット分)
   133 000006EE 8B5FF8              <1>         mov     ebx, [edi - 8]                  ;       EBX = 相対軸増分;
   134 000006F1 011F                <1>         add     [edi - 0], ebx                  ;       相対軸座標 = EBX;
   135                              <1> .52E:                                           ;   }
   136                              <1> 
   137 000006F3 8945FC              <1>         mov     [ebp - 4], eax                  ;//積算値を更新
   138                              <1> 
   139 000006F6 E2D0                <1>         loop    .50L
   140                              <1> .50E:                                           ;} while(ループ回数--);
   141                              <1> 
   142                              <1>         ;---------------------------------------
   143                              <1>         ;レジスタの復帰
   144                              <1>         ;---------------------------------------
   145 000006F8 5E                  <1>         pop     esi
   146 000006F9 5A                  <1>         pop     edx
   147 000006FA 5F                  <1>         pop     edi
   148 000006FB 59                  <1>         pop     ecx
   149 000006FC 5B                  <1>         pop     ebx
   150 000006FD 58                  <1>         pop     eax
   151                              <1> 
   152                              <1>         ;---------------------------------------
   153                              <1>         ;スタックフレームの破棄
   154                              <1>         ;---------------------------------------
   155 000006FE 89EC                <1>         mov     esp, ebp
   156 00000700 5D                  <1>         pop     ebp
   157                              <1> 
   158 00000701 C3                  <1>         ret
   145                                  %include        "..\modules\protect\draw_rect.s"
     1                              <1> draw_rect:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000702 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000703 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000705 50                  <1>         push    eax
    17 00000706 53                  <1>         push    ebx
    18 00000707 51                  <1>         push    ecx
    19 00000708 52                  <1>         push    edx
    20 00000709 56                  <1>         push    esi
    21                              <1> 
    22                              <1>         ;---------------------------------------
    23                              <1>         ;変数に引数を代入
    24                              <1>         ;---------------------------------------
    25 0000070A 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    26 0000070D 8B5D0C              <1>         mov     ebx, [ebp +12]                  ;EBX = Y0;
    27 00000710 8B4D10              <1>         mov     ecx, [ebp +16]                  ;ECX = X1;
    28 00000713 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    29 00000716 8B7518              <1>         mov     esi, [ebp +24]                  ;ESI = 色;
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;座標軸の大小を確定
    33                              <1>         ;---------------------------------------
    34 00000719 39C8                <1>         cmp     eax, ecx                        ;if(X1 < X0)
    35 0000071B 7C01                <1>         jl      .10E                            ;{
    36 0000071D 91                  <1>         xchg    eax, ecx                        ;   //X0とX1を入れ替える;
    37                              <1> .10E:                                           ;}
    38                              <1> 
    39 0000071E 39D3                <1>         cmp     ebx, edx                        ;if(Y1 < Y0)
    40 00000720 7C02                <1>         jl      .20E                            ;{
    41 00000722 87DA                <1>         xchg    ebx, edx                        ;   //Y0とY1を入れ替える;
    42                              <1> .20E:                                           ;}
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;矩形を描画
    46                              <1>         ;---------------------------------------
    47 00000724 5653515350E822FFFF- <1>         cdecl   draw_line, eax, ebx, ecx, ebx, esi  ;上線
    47 0000072D FF6683C414          <1>
    48 00000732 5652505350E814FFFF- <1>         cdecl   draw_line, eax, ebx, eax, edx, esi  ;左線
    48 0000073B FF6683C414          <1>
    49                              <1> 
    50 00000740 4A                  <1>         dec     edx                                 ;EDX--; //下線は1ドット上げる
    51 00000741 5652515250E805FFFF- <1>         cdecl   draw_line, eax, edx, ecx, edx, esi  ;下線
    51 0000074A FF6683C414          <1>
    52 0000074F 42                  <1>         inc     edx
    53                              <1> 
    54 00000750 49                  <1>         dec     ecx                                 ;ECX--; //右線は1ドット左に移動
    55 00000751 5652515351E8F5FEFF- <1>         cdecl   draw_line, ecx, ebx, ecx, edx, esi  ;右線
    55 0000075A FF6683C414          <1>
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの復帰
    59                              <1>         ;---------------------------------------
    60 0000075F 5E                  <1>         pop     esi
    61 00000760 5A                  <1>         pop     edx
    62 00000761 59                  <1>         pop     ecx
    63 00000762 5B                  <1>         pop     ebx
    64 00000763 58                  <1>         pop     eax
    65                              <1> 
    66                              <1>         ;---------------------------------------
    67                              <1>         ;スタックフレームの破棄
    68                              <1>         ;---------------------------------------
    69 00000764 89EC                <1>         mov     esp, ebp
    70 00000766 5D                  <1>         pop     ebp
    71                              <1> 
    72 00000767 C3                  <1>         ret
   146                                  %include        "..\modules\protect\itoa.s"
     1                              <1> itoa:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000768 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000769 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 0000076B 50                  <1>         push    eax
    18 0000076C 53                  <1>         push    ebx
    19 0000076D 51                  <1>         push    ecx
    20 0000076E 52                  <1>         push    edx
    21 0000076F 56                  <1>         push    esi
    22 00000770 57                  <1>         push    edi
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;引数の取得
    26                              <1>         ;---------------------------------------
    27 00000771 8B4508              <1>         mov     eax, [ebp + 8]                  ;eax(val) =  数値;
    28 00000774 8B750C              <1>         mov     esi, [ebp + 12]                 ;esi(dst) = バッファアドレス;
    29 00000777 8B4D10              <1>         mov     ecx, [ebp + 16]                 ;ecx(size) = バッファサイズ;
    30                              <1> 
    31 0000077A 89F7                <1>         mov     edi, esi                        ;edi = esi(dst); //バッファの最後尾
    32 0000077C 01CF                <1>         add     edi, ecx                        ;edi(dst) = edi + ecx - 1;
    33 0000077E 4F                  <1>         dec     edi
    34                              <1> 
    35 0000077F 8B5D18              <1>         mov     ebx, [ebp + 24]            ;flags = オプション;
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;符号付き判定
    39                              <1>         ;---------------------------------------
    40 00000782 F7C301000000        <1>         test    ebx, 0b0001                      ;if(flags & 0x01) //符号付き
    41 00000788 7408                <1> .10Q:   je      .10E                            ;{
    42 0000078A 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    43 0000078D 7D03                <1> .12Q:   jge     .12E                            ;   {
    44 0000078F 83CB02              <1>         or      ebx, 0b0010                     ;       flags |= 2; //符号表示
    45                              <1> .12E:                                           ;   }
    46                              <1> .10E:                                           ;}
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;符号付き判定
    50                              <1>         ;---------------------------------------
    51 00000792 F7C302000000        <1>         test    ebx, 0b0010                     ;if(flags & 0x02) //符号出力判定
    52 00000798 7410                <1> .20Q:   je      .20E                            ;{
    53 0000079A 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    54 0000079D 7D07                <1> .22Q:   jge     .22F                            ;   {
    55 0000079F F7D8                <1>         neg     eax                             ;       val *= -1; //符号反転
    56 000007A1 C6062D              <1>         mov     [esi], byte '-'                 ;       *dst = '-'; //符号表示
    57 000007A4 EB03                <1>         jmp     .22E                            ;   }
    58                              <1> .22F:                                           ;   else
    59                              <1>                                                 ;   {
    60 000007A6 C6062B              <1>         mov     [esi], byte '+'                 ;       *dst = '+'; //符号表示
    61                              <1> .22E:                                           ;   }
    62 000007A9 49                  <1>         dec     ecx                             ;   size--;     //残りバッファサイズの減算
    63                              <1> .20E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;ASCII変換
    67                              <1>         ;---------------------------------------
    68 000007AA 8B5D14              <1>         mov     ebx, [ebp + 20]                 ;BX = 基数;
    69                              <1> .30L:                                           ;do
    70                              <1>                                                 ;{
    71 000007AD BA00000000          <1>         mov     edx, 0                          ;
    72 000007B2 F7F3                <1>         div     ebx                             ;   DX = DX:AX % 基数;
    73                              <1>                                                 ;   AX = DX:AX / 基数;
    74                              <1>                                                 ;
    75 000007B4 89D6                <1>         mov     esi, edx                        ;   //テーブル参照
    76 000007B6 8A96[E1070000]      <1>         mov     dl, byte [.ascii + esi]         ;   DL = ASCII[DX]
    77                              <1>                                                 ;
    78 000007BC 8817                <1>         mov     [edi], dl                       ;   *dst = DL;
    79 000007BE 4F                  <1>         dec     edi                             ;   dst--;
    80                              <1>                                                 ;
    81 000007BF 83F800              <1>         cmp     eax, 0                          ;
    82 000007C2 E0E9                <1>         loopnz  .30L                            ;}while(AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;---------------------------------------
    86                              <1>         ;空欄を埋める
    87                              <1>         ;---------------------------------------
    88 000007C4 83F900              <1>         cmp     ecx, 0                          ;if(size)
    89 000007C7 740E                <1> .40Q:   je      .40E                            ;{
    90 000007C9 B020                <1>         mov     al, ' '                         ;       AL = ' '; // ' 'で埋める(デフォルト値)
    91 000007CB 66837D1804          <1>         cmp     [ebp + 24], word 0b0100         ;       if(flags & 0x04)
    92 000007D0 7502                <1> .42Q:   jne     .42E                            ;           {
    93 000007D2 B030                <1>         mov     al, '0'                         ;               AL = '0'; // '0'で埋める
    94                              <1> .42E:                                           ;           }
    95 000007D4 FD                  <1>         std                                     ;       // DF = 1(-方向)
    96 000007D5 F3AA                <1>         rep     stosb                           ;       while(--CX) *DI -- = AL;
    97                              <1> .40E:                                           ;}
    98                              <1>         
    99                              <1>         ;---------------------------------------
   100                              <1>         ;レジスタの復帰
   101                              <1>         ;---------------------------------------
   102 000007D7 5F                  <1>         pop     edi
   103 000007D8 5E                  <1>         pop     esi
   104 000007D9 5A                  <1>         pop     edx
   105 000007DA 59                  <1>         pop     ecx
   106 000007DB 5B                  <1>         pop     ebx
   107 000007DC 58                  <1>         pop     eax
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;スタックフレームの破棄
   111                              <1>         ;---------------------------------------
   112 000007DD 89EC                <1>         mov     esp, ebp
   113 000007DF 5D                  <1>         pop     ebp
   114                              <1> 
   115 000007E0 C3                  <1>         ret
   116                              <1> 
   117 000007E1 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   117 000007EA 39414243444546      <1>
   147                                  %include        "..\modules\protect\rtc.s"
     1                              <1> rtc_get_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 保存先アドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 000007F1 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 000007F2 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 000007F4 53                  <1>         push    ebx
    14                              <1> 
    15                              <1>         ;---------------------------------------
    16                              <1>         ;RTCから必要な情報を取得
    17                              <1>         ;---------------------------------------
    18 000007F5 B00A                <1>         mov     al, 0x0A                        ;//レジスタA
    19 000007F7 E670                <1>         out     0x70, al                        ;outp(0x70, AL);
    20 000007F9 E471                <1>         in      al, 0x71                        ;AL = レジスタA
    21 000007FB A880                <1>         test    al, 0x80                        ;if(UIP) //更新中
    22 000007FD 7407                <1>         je      .10F                            ;{
    23 000007FF B801000000          <1>         mov     eax, 1                          ;   return 0; //データ更新中
    24 00000804 EB27                <1>         jmp     .10E                            ;}
    25                              <1> .10F:                                           ;else
    26                              <1>                                                 ;{
    27 00000806 B004                <1>         mov     al, 0x04                        ;   AL = 0x04;
    28 00000808 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    29 0000080A E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //時データ
    30                              <1> 
    31 0000080C C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    32                              <1> 
    33 0000080F B002                <1>         mov     al, 0x02                        ;   AL = 0x02;
    34 00000811 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    35 00000813 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //分データ
    36                              <1> 
    37 00000815 C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    38                              <1> 
    39                              <1>                                                 ;   RAM[0x00]:秒
    40 00000818 B000                <1>         mov     al, 0x00                        ;   AL = 0x00;
    41 0000081A E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    42 0000081C E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //秒データ
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;有効なデータのみをアドレス先へ保存
    46                              <1>         ;---------------------------------------
    47 0000081E 25FFFFFF00          <1>         and     eax, 0x00_FF_FF_FF              ;//下位3バイトのみ有効
    48                              <1> 
    49 00000823 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;dst = 保存先;
    50 00000826 8903                <1>         mov     [ebx], eax                      ;[dst] = 時刻;
    51                              <1>         
    52 00000828 B801000000          <1>         mov     eax, 1                          ;   return 1; //正常終了
    53                              <1> .10E:                                           ;}
    54                              <1> 
    55                              <1>         ;---------------------------------------
    56                              <1>         ;レジスタの復帰
    57                              <1>         ;---------------------------------------
    58 0000082D 5B                  <1>         pop     ebx
    59                              <1> 
    60                              <1>         ;---------------------------------------
    61                              <1>         ;スタックフレームの破棄
    62                              <1>         ;---------------------------------------
    63 0000082E 89EC                <1>         mov     esp, ebp
    64 00000830 5D                  <1>         pop     ebp
    65                              <1> 
    66 00000831 C3                  <1>         ret
   148                                  %include        "..\modules\protect\draw_time.s"
     1                              <1> draw_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000832 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000833 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000835 50                  <1>         push    eax
    18 00000836 53                  <1>         push    ebx
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;数字を文字に変換
    22                              <1>         ;---------------------------------------
    23 00000837 8B4514              <1>         mov     eax, [ebp +20]                  ;EAX = 時刻データ;
    24                              <1> 
    25 0000083A 0FB6D8              <1>         movzx   ebx, al                         ;EBX = 秒;
    26 0000083D 6A046A106A0268-     <1>         cdecl   itoa, ebx, .sec, 2, 16, 0b0100  ;//文字を変換
    26 00000844 [A4080000]53E81AFF- <1>
    26 0000084C FFFF6683C414        <1>
    27                              <1> 
    28 00000852 88E3                <1>         mov     bl, ah                          ;EBX = 分;
    29 00000854 6A046A106A0268-     <1>         cdecl   itoa, ebx, .min, 2, 16, 0b0100  ;//文字に変換
    29 0000085B [A1080000]53E803FF- <1>
    29 00000863 FFFF6683C414        <1>
    30                              <1> 
    31 00000869 C1E810              <1>         shr     eax, 16                         ;EBX = 時;
    32 0000086C 6A046A106A0268-     <1>         cdecl   itoa, eax, .hour, 2, 16, 0b0100 ;//文字に変換
    32 00000873 [9E080000]50E8EBFE- <1>
    32 0000087B FFFF6683C414        <1>
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;文字列を表示
    36                              <1>         ;---------------------------------------
    37 00000881 68[9E080000]FF7510- <1>         cdecl   draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    37 00000889 FF750CFF7508E838FC- <1>
    37 00000892 FFFF6683C410        <1>
    38                              <1>         
    39                              <1>         ;---------------------------------------
    40                              <1>         ;レジスタの復帰
    41                              <1>         ;---------------------------------------
    42 00000898 5B                  <1>         pop     ebx
    43 00000899 58                  <1>         pop     eax
    44                              <1> 
    45                              <1>         ;---------------------------------------
    46                              <1>         ;スタックフレームの破棄
    47                              <1>         ;---------------------------------------
    48 0000089A 89EC                <1>         mov     esp, ebp
    49 0000089C 5D                  <1>         pop     ebp
    50                              <1> 
    51 0000089D C3                  <1>         ret
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;データ
    55                              <1>         ;---------------------------------------
    56 0000089E 5A5A3A              <1>         .hour:  db  "ZZ:"
    57 000008A1 5A5A3A              <1>         .min:   db  "ZZ:"
    58 000008A4 5A5A00              <1>         .sec:   db  "ZZ", 0
   149                                  %include        "..\modules\protect\interrupt.s"
     1                              <1> int_stop:
     2 000008A7 FB                  <1>         sti                                     ;//割り込み許可
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;EAXで示される文字列を表示
     6                              <1>         ;---------------------------------------
     7 000008A8 50680F0600006A0F6A- <1>         cdecl   draw_str, 25, 15, 0x060F, eax   ;draw_str(EAX);
     7 000008B1 19E815FCFFFF6683C4- <1>
     7 000008BA 10                  <1>
     8                              <1>         
     9                              <1>         ;---------------------------------------
    10                              <1>         ;スタックのデータを文字列に変換
    11                              <1>         ;---------------------------------------
    12 000008BB 8B0424              <1>         mov     eax, [esp + 0]                  ;EAX = ESP[ 0];
    13 000008BE 6A046A106A0868-     <1>         cdecl   itoa, eax, .p1, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    13 000008C5 [83090000]50E899FE- <1>
    13 000008CD FFFF6683C414        <1>
    14                              <1> 
    15 000008D3 8B442404            <1>         mov     eax, [esp + 4]                  ;EAX = ESP[ 4];
    16 000008D7 6A046A106A0868-     <1>         cdecl   itoa, eax, .p2, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    16 000008DE [94090000]50E880FE- <1>
    16 000008E6 FFFF6683C414        <1>
    17                              <1> 
    18 000008EC 8B442408            <1>         mov     eax, [esp + 8]                  ;EAX = ESP[ 8];
    19 000008F0 6A046A106A0868-     <1>         cdecl   itoa, eax, .p3, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    19 000008F7 [A5090000]50E867FE- <1>
    19 000008FF FFFF6683C414        <1>
    20                              <1> 
    21 00000905 8B44240C            <1>         mov     eax, [esp +12]                  ;EAX = ESP[12];
    22 00000909 6A046A106A0868-     <1>         cdecl   itoa, eax, .p4, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    22 00000910 [B6090000]50E84EFE- <1>
    22 00000918 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;文字列の表示
    26                              <1>         ;---------------------------------------
    27 0000091E 68[7C090000]68040F- <1>         cdecl   draw_str, 25, 16, 0x0F04, .s1,  ;draw_str("ESP+ 0:-------- ");
    27 00000926 00006A106A19E89BFB- <1>
    27 0000092F FFFF6683C410        <1>
    28 00000935 68[8D090000]68040F- <1>         cdecl   draw_str, 25, 17, 0x0F04, .s2   ;draw_str("   + 4:-------- ");
    28 0000093D 00006A116A19E884FB- <1>
    28 00000946 FFFF6683C410        <1>
    29 0000094C 68[9E090000]68040F- <1>         cdecl   draw_str, 25, 18, 0x0F04, .s3,  ;draw_str("   + 8:-------- ");
    29 00000954 00006A126A19E86DFB- <1>
    29 0000095D FFFF6683C410        <1>
    30 00000963 68[AF090000]68040F- <1>         cdecl   draw_str, 25, 19, 0x0F04, .s4   ;draw_str("   +12:-------- ");        
    30 0000096B 00006A136A19E856FB- <1>
    30 00000974 FFFF6683C410        <1>
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;無限ループ
    34                              <1>         ;---------------------------------------
    35 0000097A EBFE                <1>         jmp     $                               ;while(1); //無限ループ
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;データ
    39                              <1>         ;---------------------------------------
    40 0000097C 4553502B20303A      <1> .s1:    db  "ESP+ 0:"
    41 00000983 2D2D2D2D2D2D2D2D20- <1> .p1:    db  "-------- ", 0
    41 0000098C 00                  <1>
    42 0000098D 2020202B20343A      <1> .s2:    db  "   + 4:"
    43 00000994 2D2D2D2D2D2D2D2D20- <1> .p2:    db  "-------- ", 0
    43 0000099D 00                  <1>
    44 0000099E 2020202B20383A      <1> .s3:    db  "   + 8:"
    45 000009A5 2D2D2D2D2D2D2D2D20- <1> .p3:    db  "-------- ", 0
    45 000009AE 00                  <1>
    46 000009AF 2020202B31323A      <1> .s4:    db  "   +12:"
    47 000009B6 2D2D2D2D2D2D2D2D20- <1> .p4:    db  "-------- ", 0
    47 000009BF 00                  <1>
    48                              <1> 
    49                              <1> int_default:
    50                              <1>         ;---------------------------------------
    51                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
    52                              <1>         ;---------------------------------------
    53 000009C0 9C                  <1>         pushf                                   ;//EFLAGS(IF=0)
    54 000009C1 0E                  <1>         push    cs                              ;//cs
    55 000009C2 68[A7080000]        <1>         push    int_stop                        ;//スタック表示処理
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み種別を登録して復帰
    59                              <1>         ;---------------------------------------
    60 000009C7 B8[CD090000]        <1>         mov     eax, .s0                        ;//割り込み種別
    61 000009CC CF                  <1>         iret                                    ;スタックされている場所に復帰
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;データ
    65                              <1>         ;---------------------------------------
    66 000009CD 203C2020202053544F- <1> .s0:    db  " <    STOP    > ", 0
    66 000009D6 50202020203E2000    <1>
    67                              <1> 
    68                              <1> ;********************************************************************************************************
    69                              <1> ;割り込みベクタの初期化
    70                              <1> ;********************************************************************************************************
    71 000009DE 90<rept>            <1> ALIGN   4
    72 000009E0 FF07                <1> IDTR:   dw      8 * 256 - 1                     ;idt_limit
    73 000009E2 00001000            <1>         dd      VECT_BASE                       ;idt_location
    74                              <1> 
    75                              <1> ;********************************************************************************************************
    76                              <1> ;割り込みテーブルを初期化
    77                              <1> ;********************************************************************************************************
    78                              <1> init_int:
    79                              <1>         ;---------------------------------------
    80                              <1>         ;レジスタの保存
    81                              <1>         ;---------------------------------------
    82 000009E6 50                  <1>         push    eax
    83 000009E7 53                  <1>         push    ebx
    84 000009E8 51                  <1>         push    ecx
    85 000009E9 57                  <1>         push    edi
    86                              <1> 
    87                              <1>         ;---------------------------------------
    88                              <1>         ;全ての割り込みにデフォルト処理を設定
    89                              <1>         ;---------------------------------------
    90 000009EA 8D05[C0090000]      <1>         lea     eax, [int_default]              ;EAX = 割り込み処理アドレス;
    91 000009F0 BB008E0800          <1>         mov     ebx, 0x0008_8E00                ;EBX = セグメントセレクタ;
    92 000009F5 6693                <1>         xchg    ax, bx                          ;//下位ワード(2バイト)を交換(割り込みゲートディスクリプタの形式に合わせる)
    93                              <1> 
    94 000009F7 B900010000          <1>         mov     ecx, 256                        ;ECX = 割り込みベクタ数
    95 000009FC BF00001000          <1>         mov     edi, VECT_BASE                  ;EDI = 割り込みベクタテーブル
    96                              <1> 
    97                              <1> .10L:                                           ;do
    98                              <1>                                                 ;{
    99 00000A01 891F                <1>         mov     [edi + 0], ebx                  ;       [EDI + 0] = 割り込みディスクリプタ(下位)
   100 00000A03 894704              <1>         mov     [edi + 4], eax                  ;       [EDI + 4] = 割り込みディスクリプタ(上位)
   101 00000A06 83C708              <1>         add     edi, 8                          ;       EDI += 8;
   102 00000A09 E2F6                <1>         loop    .10L                            ;}while(ECX--);
   103                              <1> 
   104                              <1>         ;---------------------------------------
   105                              <1>         ;割り込みディスクリプタの設定
   106                              <1>         ;---------------------------------------
   107 00000A0B 0F011D[E0090000]    <1>         lidt    [IDTR]                          ;//割り込みディスクリプタテーブルをロード
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;データ
   111                              <1>         ;---------------------------------------
   112 00000A12 5F                  <1>         pop     edi
   113 00000A13 59                  <1>         pop     ecx
   114 00000A14 5B                  <1>         pop     ebx
   115 00000A15 58                  <1>         pop     eax
   116                              <1> 
   117 00000A16 C3                  <1>         ret
   118                              <1> 
   119                              <1> int_zero_div:
   120                              <1>         ;---------------------------------------
   121                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
   122                              <1>         ;---------------------------------------
   123 00000A17 9C                  <1>         pushf                                   ;//EFLAGS
   124 00000A18 0E                  <1>         push    cs                              ;//CS
   125 00000A19 68[A7080000]        <1>         push    int_stop                        ;//スタック表示処理
   126                              <1> 
   127                              <1>         ;---------------------------------------
   128                              <1>         ;割り込み種別を登録して復帰
   129                              <1>         ;---------------------------------------
   130 00000A1E B8[240A0000]        <1>         mov     eax, .s0                        ;//割り込み種別
   131 00000A23 CF                  <1>         iret
   132                              <1> 
   133 00000A24 203C20205A45524F20- <1> .s0:    db      " <  ZERO DIV  > ", 0
   133 00000A2D 44495620203E2000    <1>
   150                                  %include        "..\modules\protect\pic.s"
     1                              <1> init_pic:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000A35 50                  <1>         push    eax
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;マスタの設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x20, 0x11                      ;//MASTER.ICW1 = 0x11;
    10 00000A36 B011                <2>  mov al, %2
    10 00000A38 E620                <2>  out %1, al
    11                              <1>         outp    0x21, 0x20                      ;//MASTER.ICW2 = 0x20;
    11 00000A3A B020                <2>  mov al, %2
    11 00000A3C E621                <2>  out %1, al
    12                              <1>         outp    0x21, 0x04                      ;//MASTER.ICW3 = 0x04;
    12 00000A3E B004                <2>  mov al, %2
    12 00000A40 E621                <2>  out %1, al
    13                              <1>         outp    0x21, 0x05                      ;//MASTER.ICW4 = 0x05;
    13 00000A42 B005                <2>  mov al, %2
    13 00000A44 E621                <2>  out %1, al
    14                              <1>         outp    0x21, 0xEF                      ;//マスタ割り込みマスク
    14 00000A46 B0EF                <2>  mov al, %2
    14 00000A48 E621                <2>  out %1, al
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;スレーブの設定
    18                              <1>         ;---------------------------------------
    19                              <1>         outp    0xA0, 0x11                      ;//SLAVE.ICW1 = 0x11;
    19 00000A4A B011                <2>  mov al, %2
    19 00000A4C E6A0                <2>  out %1, al
    20                              <1>         outp    0xA1, 0x28                      ;//SLAVE.ICW2 = 0x28;
    20 00000A4E B028                <2>  mov al, %2
    20 00000A50 E6A1                <2>  out %1, al
    21                              <1>         outp    0xA1, 0x02                      ;//SLAVE.ICW3 = 0x02;
    21 00000A52 B002                <2>  mov al, %2
    21 00000A54 E6A1                <2>  out %1, al
    22                              <1>         outp    0xA1, 0x01                      ;//SLAVE.ICW4 = 0x01;
    22 00000A56 B001                <2>  mov al, %2
    22 00000A58 E6A1                <2>  out %1, al
    23                              <1>         outp    0xA1, 0xEF                      ;//マスタ割り込みマスク
    23 00000A5A B0EF                <2>  mov al, %2
    23 00000A5C E6A1                <2>  out %1, al
    24                              <1> 
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00000A5E 58                  <1>         pop     eax
    29                              <1> 
    30 00000A5F C3                  <1>         ret
   151                                  %include        "..\modules\protect\int_rtc.s"
     1                              <1> int_rtc:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000A60 60                  <1>         pusha
     6 00000A61 1E                  <1>         push    ds
     7 00000A62 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントセレクタの設定
    11                              <1>         ;---------------------------------------
    12 00000A63 66B81000            <1>         mov     ax, 0x0010
    13 00000A67 8ED8                <1>         mov     ds, ax
    14 00000A69 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;RTCから時刻を取得
    18                              <1>         ;---------------------------------------
    19 00000A6B 68[A0010000]E87CFD- <1>         cdecl   rtc_get_time, RTC_TIME          ;EAX = get_time(&RTC_TIME);
    19 00000A73 FFFF6683C404        <1>
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;RTCの割り込み要因を取得
    23                              <1>         ;---------------------------------------
    24                              <1>         outp    0x70, 0x0C                      ;outp(0x70, 0x0C); //レジスタCを選択
    24 00000A79 B00C                <2>  mov al, %2
    24 00000A7B E670                <2>  out %1, al
    25 00000A7D E471                <1>         in      al, 0x71                        ;AL = port(0x71);
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;割り込みフラグをクリア(EOI)
    29                              <1>         ;---------------------------------------
    30 00000A7F B020                <1>         mov     al, 0x20                        ;AL = EOIコマンド;
    31 00000A81 E6A0                <1>         out     0xA0, al                        ;outp(0xA0, AL); //スレーブPIC
    32 00000A83 E620                <1>         out     0x20, al                        ;outp(0x20, AL); //マスタPIC
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;レジスタの復帰
    36                              <1>         ;---------------------------------------
    37 00000A85 07                  <1>         pop     es
    38 00000A86 1F                  <1>         pop     ds
    39 00000A87 61                  <1>         popa
    40                              <1> 
    41 00000A88 CF                  <1>         iret                                    ;割り込み処理の終了
    42                              <1> 
    43                              <1> rtc_int_en:
    44                              <1>         ;-----------------------------------
    45                              <1>         ;スタックフレームの構築
    46                              <1>         ;-----------------------------------
    47                              <1>                                             ;   + 8| 指定されたビット
    48                              <1>                                             ;   + 4| IP(戻り番号)
    49 00000A89 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    50 00000A8A 89E5                <1>         mov     ebp, esp                    ;------|---------
    51                              <1> 
    52                              <1>         ;---------------------------------------
    53                              <1>         ;レジスタの保存
    54                              <1>         ;---------------------------------------
    55 00000A8C 50                  <1>         push    eax
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み許可認定(RTCの内部レジスタBのUIE(更新終了割り込み許可)ビットをセット)
    59                              <1>         ;---------------------------------------
    60                              <1>         outp    0x70, 0x0B                      ;outp(0x70, AL); //レジスタBを選択
    60 00000A8D B00B                <2>  mov al, %2
    60 00000A8F E670                <2>  out %1, al
    61                              <1> 
    62 00000A91 E471                <1>         in      al, 0x71                        ;AL = port(0x71); //レジスタBの
    63 00000A93 0A4508              <1>         or      al, [ebp + 8]                   ;AL |= ビット; //指定されたビットをセット
    64                              <1> 
    65 00000A96 E671                <1>         out     0x71, al                        ;outp(0x71, AL); //レジスタBに書き込み
    66                              <1> 
    67                              <1>         ;---------------------------------------
    68                              <1>         ;レジスタの復帰
    69                              <1>         ;---------------------------------------
    70 00000A98 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 00000A99 89EC                <1>         mov     esp, ebp
    76 00000A9B 5D                  <1>         pop     ebp
    77                              <1> 
    78 00000A9C C3                  <1>         ret
   152                                  %include        "..\modules\protect\ring_buff.s"
     1                              <1> ring_rd:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| 読み込んだデータの保存先アドレス
     6                              <1>                                             ;   + 8| リングバッファ
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000A9D 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
     9 00000A9E 89E5                <1>         mov     ebp, esp                    ;------|---------
    10                              <1> 
    11                              <1>         ;---------------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;---------------------------------------
    14 00000AA0 60                  <1>         pusha
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;引数を取得
    18                              <1>         ;---------------------------------------
    19 00000AA1 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    20 00000AA4 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = データアドレス;
    21                              <1>         
    22                              <1>         ;---------------------------------------
    23                              <1>         ;読み込み位置を確認
    24                              <1>         ;---------------------------------------
    25 00000AA7 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    26 00000AAC 8B1E                <1>         mov     ebx, [esi + ring_buff.rp]       ;EBX = rp; //読み込み位置
    27 00000AAE 3B5E04              <1>         cmp     ebx, [esi + ring_buff.wp]       ;if(EBX != wp) //書き込み位置と異なる
    28 00000AB1 7411                <1>         je      .10E                            ;{
    29                              <1>         
    30 00000AB3 8A441E08            <1>         mov     al, [esi + ring_buff.item + ebx];   AL = BUFF[rp]; //キーコードを保存
    31                              <1> 
    32 00000AB7 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //データを保存
    33                              <1> 
    34 00000AB9 43                  <1>         inc     ebx                             ;   EBX++; //次の読み込み位置
    35 00000ABA 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= 0x0F; //サイズの制限
    36 00000ABD 891E                <1>         mov     [esi + ring_buff.rp], ebx       ;   wp = EBX; //読み込み位置を保存
    37                              <1> 
    38 00000ABF B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //データあり
    39                              <1> .10E:                                           ;}
    40                              <1> 
    41                              <1>         ;---------------------------------------
    42                              <1>         ;レジスタの復帰
    43                              <1>         ;---------------------------------------
    44 00000AC4 61                  <1>         popa
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;スタックフレームの破棄
    48                              <1>         ;---------------------------------------
    49 00000AC5 89EC                <1>         mov     esp, ebp
    50 00000AC7 5D                  <1>         pop     ebp
    51                              <1> 
    52 00000AC8 C3                  <1>         ret
    53                              <1> 
    54                              <1> ring_wr:
    55                              <1>         ;-----------------------------------
    56                              <1>         ;スタックフレームの構築
    57                              <1>         ;-----------------------------------
    58                              <1>                                             ;   +12| 書き込むデータ
    59                              <1>                                             ;   + 8| リングバッファ
    60                              <1>                                             ;   + 4| IP(戻り番号)
    61 00000AC9 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    62 00000ACA 89E5                <1>         mov     ebp, esp                    ;------|---------
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;レジスタの保存
    66                              <1>         ;---------------------------------------
    67 00000ACC 60                  <1>         pusha
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;引数を取得
    71                              <1>         ;---------------------------------------
    72 00000ACD 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    73                              <1>         
    74                              <1>         ;---------------------------------------
    75                              <1>         ;書き込み位置を確認
    76                              <1>         ;---------------------------------------
    77 00000AD0 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    78 00000AD5 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
    79 00000AD8 89D9                <1>         mov     ecx, ebx                        ;ECX = EBX;
    80 00000ADA 41                  <1>         inc     ecx                             ;ECX++;
    81 00000ADB 83E10F              <1>         and     ecx, RING_INDEX_MASK            ;ECX &= 0x0F //サイズの制限
    82                              <1>         
    83 00000ADE 3B0E                <1>         cmp     ecx, [esi + ring_buff.rp]       ;if(ECX != rp) //読み込み位置と異なる
    84 00000AE0 740F                <1>         je      .10E                            ;{
    85                              <1>         
    86 00000AE2 8A450C              <1>         mov     al, [ebp +12]                   ;   AL = データ;
    87                              <1> 
    88 00000AE5 88441E08            <1>         mov     [esi + ring_buff.item + ebx], al;   BUFF[wp] = AL; //キーコードを保存
    89 00000AE9 894E04              <1>         mov     [esi + ring_buff.wp], ecx       ;   wp = ECX; //書き込み位置を保存
    90 00000AEC B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //成功
    91                              <1> .10E:                                           ;}
    92                              <1> 
    93                              <1>         ;---------------------------------------
    94                              <1>         ;レジスタの復帰
    95                              <1>         ;---------------------------------------
    96 00000AF1 61                  <1>         popa
    97                              <1>         
    98                              <1>         ;---------------------------------------
    99                              <1>         ;スタックフレームの破棄
   100                              <1>         ;---------------------------------------
   101 00000AF2 89EC                <1>         mov     esp, ebp
   102 00000AF4 5D                  <1>         pop     ebp
   103                              <1> 
   104 00000AF5 C3                  <1>         ret
   105                              <1> 
   106                              <1> draw_key:
   107                              <1>         ;-----------------------------------
   108                              <1>         ;スタックフレームの構築
   109                              <1>         ;-----------------------------------
   110                              <1>                                             ;   +16| リングブッファ
   111                              <1>                                             ;   +12| Y(行)
   112                              <1>                                             ;   + 8| X(列)
   113                              <1>                                             ;   + 4| IP(戻り番号)
   114 00000AF6 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
   115 00000AF7 89E5                <1>         mov     ebp, esp                    ;------|---------
   116                              <1> 
   117                              <1>         ;---------------------------------------
   118                              <1>         ;レジスタの保存
   119                              <1>         ;---------------------------------------
   120 00000AF9 60                  <1>         pusha
   121                              <1> 
   122                              <1>         ;---------------------------------------
   123                              <1>         ;引数を取得
   124                              <1>         ;---------------------------------------
   125 00000AFA 8B7508              <1>         mov     esi, [ebp + 8]                  ;EDX = X(列);
   126 00000AFD 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行);
   127 00000B00 8B7510              <1>         mov     esi, [ebp +16]                  ;ESI = リングブッファ;
   128                              <1>         
   129                              <1>         ;---------------------------------------
   130                              <1>         ;リングブッファの情報を取得
   131                              <1>         ;---------------------------------------
   132 00000B03 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
   133 00000B06 8D7608              <1>         lea     esi, [esi + ring_buff.item]     ;ESI = &KEY_BUFF[EBX];
   134 00000B09 B910000000          <1>         mov     ecx, RING_ITEM_SIZE             ;ECX = RING_ITEM_SIZE; //要素数
   135                              <1> 
   136                              <1> .10L:                                           ;do
   137                              <1>                                                 ;{
   138 00000B0E 4B                  <1>         dec     ebx                             ;   EBX--;
   139 00000B0F 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= RING_INDEX_MASK;
   140 00000B12 8A041E              <1>         mov     al, [esi + ebx]                 ;   EAX = KEY_BUFF[EBX];
   141                              <1> 
   142 00000B15 6A046A106A0268-     <1>         cdecl   itoa, eax, .tmp, 2, 16, 0b0100  ;   //キーコードを文字列に変換
   142 00000B1C [460B0000]50E842FC- <1>
   142 00000B24 FFFF6683C414        <1>
   143 00000B2A 68[460B0000]6A0257- <1>         cdecl   draw_str, edx, edi, 0x02, .tmp  ;   //変換した文字列を表示
   143 00000B32 52E894F9FFFF6683C4- <1>
   143 00000B3B 10                  <1>
   144                              <1> 
   145 00000B3C 83C203              <1>         add     edx, 3                          ;   //表示位置を更新(3文字分)
   146                              <1> 
   147 00000B3F E2CD                <1>         loop    .10L
   148                              <1> .10E:                                           ;}while(ECX--);        
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;レジスタの復帰
   152                              <1>         ;---------------------------------------
   153 00000B41 61                  <1>         popa
   154                              <1>         
   155                              <1>         ;---------------------------------------
   156                              <1>         ;スタックフレームの破棄
   157                              <1>         ;---------------------------------------
   158 00000B42 89EC                <1>         mov     esp, ebp
   159 00000B44 5D                  <1>         pop     ebp
   160                              <1> 
   161 00000B45 C3                  <1>         ret
   162                              <1> 
   163                              <1>         ;---------------------------------------
   164                              <1>         ;データ
   165                              <1>         ;---------------------------------------
   166 00000B46 2D2D2000            <1> .tmp    db  "-- ", 0
   153                                  %include        "..\modules\protect\int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000B4A 60                  <1>         pusha
     6 00000B4B 1E                  <1>         push    ds
     7 00000B4C 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 00000B4D 66B81000            <1>         mov     ax, 0x0010
    13 00000B51 8ED8                <1>         mov     ds, ax
    14 00000B53 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;KBCのブッファ読み取り
    18                              <1>         ;---------------------------------------
    19 00000B55 E460                <1>         in      al, 0x60                        ; AL = キーコードの取得
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;キーコードの保存
    23                              <1>         ;---------------------------------------
    24 00000B57 5068[700B0000]E867- <1>         cdecl   ring_wr, _KEY_BUFF, eax         ;ring_wr(_KEY_BUFF, EAX); //キーコードの保存
    24 00000B5F FFFFFF6683C408      <1>
    25                              <1>         
    26                              <1>         ;---------------------------------------
    27                              <1>         ;割り込み終了コマンド送信
    28                              <1>         ;---------------------------------------
    29                              <1>         outp    0x20, 0x20                      ;outp(); //マスタPIC:EOIコマンド
    29 00000B66 B020                <2>  mov al, %2
    29 00000B68 E620                <2>  out %1, al
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;レジスタの復帰
    33                              <1>         ;---------------------------------------
    34 00000B6A 07                  <1>         pop     es
    35 00000B6B 1F                  <1>         pop     ds
    36 00000B6C 61                  <1>         popa
    37                              <1> 
    38 00000B6D CF                  <1>         iret                                    ;割り込みからの復帰
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;データ
    42                              <1>         ;---------------------------------------
    43                              <1> 
    44 00000B6E 00<rept>            <1> ALIGN   4, db   0
    45 00000B70 00<rept>            <1> _KEY_BUFF:  times   ring_buff_size  db  0
   154                                  %include        "..\modules\protect\timer.s"
     1                              <1> int_en_timer0:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000B88 50                  <1>         push    eax                              ;//outp用
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;タイマーICのカウンタ0を設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x43, 0b_00_11_010_0            ;//カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    10 00000B89 B034                <2>  mov al, %2
    10 00000B8B E643                <2>  out %1, al
    11                              <1>         outp    0x40, 0x9C                      ;//下位バイト
    11 00000B8D B09C                <2>  mov al, %2
    11 00000B8F E640                <2>  out %1, al
    12                              <1>         outp    0x40, 0x2E                      ;//上位バイト
    12 00000B91 B02E                <2>  mov al, %2
    12 00000B93 E640                <2>  out %1, al
    13                              <1> 
    14                              <1>         ;---------------------------------------
    15                              <1>         ;レジスタの復帰
    16                              <1>         ;---------------------------------------
    17 00000B95 58                  <1>         pop     eax
    18                              <1> 
    19 00000B96 C3                  <1>         ret
   155                                  %include        "..\modules\protect\draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000B97 60                  <1>         pushad
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;引数を取得
     9                              <1>         ;---------------------------------------
    10 00000B98 A1[EC020000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = タイマー割り込みカウンタ
    11 00000B9D C1E804              <1>         shr     eax, 4                          ;EAX /= 4; //16で除算
    12 00000BA0 3B05[C80B0000]      <1>         cmp     eax, [.index]                   ;if(EAX != 前回値)
    13 00000BA6 741E                <1>         je      .10E                            ;{
    14                              <1>         
    15 00000BA8 A3[C80B0000]        <1>         mov     [.index], eax                   ;   前回値 = EAX;
    16 00000BAD 83E003              <1>         and     eax, 0x03                       ;   EAX &= 0x03; //0~3に限定
    17                              <1> 
    18 00000BB0 8A80[CC0B0000]      <1>         mov     al, [.table + eax]              ;   AL = table[index];
    19 00000BB6 506A0F6A1D6A00E809- <1>         cdecl   draw_char, 0 ,29, 0x000F, eax   ;   draw_char(); //文字を表示
    19 00000BBF F8FFFF6683C410      <1>
    20                              <1> 
    21                              <1> .10E:                                           ;}    
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;レジスタの復帰
    25                              <1>         ;---------------------------------------
    26 00000BC6 61                  <1>         popad
    27                              <1> 
    28 00000BC7 C3                  <1>         ret
    29                              <1> 
    30                              <1>         ;---------------------------------------
    31                              <1>         ;データ
    32                              <1>         ;---------------------------------------
    33                              <1> ALIGN   4,  db  0
    34 00000BC8 00000000            <1> .index:     dd  0                               ;前回値
    35 00000BCC 7C2F2D5C            <1> .table:     db  "|/-\"                          ;表示キャラクタ
   156                                  
   157                                  ;********************************************************************************************************
   158                                  ;パディング
   159                                  ;********************************************************************************************************
   160 00000BD0 00<rept>                        times KERNEL_SIZE - ($ - $$)    db 0    ;パディング
