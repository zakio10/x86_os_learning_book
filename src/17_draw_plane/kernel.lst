     1                                  %include    "..\include\define.s"
     1                              <1> SECT_SIZE   equ     (512)                   ;セクタサイズ
     2                              <1> 
     3                              <1> BOOT_LOAD   equ     0x7C00                  ;ブートプログラムのロード位置
     4                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)
     5                              <1> BOOT_SIZE   equ     (1024 * 8)              ;ブートコードサイズ
     6                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     7                              <1> 
     8                              <1> KERNEL_LOAD equ     0x0010_1000
     9                              <1> KERNEL_SIZE equ     (1024*8)                ;カーネルサイズ
    10                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)
    11                              <1> 
    12                              <1> E820_RECORD_SIZE    equ 20
     2                                  %include    "..\include\macro.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1>         .no         resw    1           ;ドライブ番号
     3 00000002 <res 00000002>      <1>         .cyln       resw    1           ;シリンダ
     4 00000004 <res 00000002>      <1>         .head       resw    1           ;ヘッド
     5 00000006 <res 00000002>      <1>         .sect       resw    1           ;セクタ
     6                              <1> endstruc
     7                              <1> 
     8                              <1> %macro  cdecl   1-*.nolist
     9                              <1> 
    10                              <1>     %rep    %0 - 1
    11                              <1>         push    %{-1:-1}
    12                              <1>         %rotate -1
    13                              <1>     %endrep
    14                              <1>     %rotate -1
    15                              <1> 
    16                              <1>         call    %1
    17                              <1> 
    18                              <1>     %if 1 < %0
    19                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    20                              <1>     %endif
    21                              <1> 
    22                              <1> %endmacro
     3                                  
     4                                          ORG     KERNEL_LOAD                             ;カーネルのロードアドレス
     5                                  
     6                                  [BITS 32]
     7                                  ;********************************************************************************************************
     8                                  ;エントリポイント
     9                                  ;********************************************************************************************************
    10                                  kernel:
    11                                          ;---------------------------------------
    12                                          ;フォントアドレスを取得
    13                                          ;---------------------------------------
    14 00000000 BE007E0000                      mov     esi, BOOT_LOAD + SECT_SIZE      ;ESI = 0x7C00 + 512
    15 00000005 0FB706                          movzx   eax, word [esi + 0]             ;EAX = [ESI + 0] //セグメント
    16 00000008 0FB75E02                        movzx   ebx, word [esi + 2]             ;EBX = [ESI + 2] //オフセット
    17 0000000C C1E004                          shl     eax, 4                          ;EAX << 4;
    18 0000000F 01D8                            add     eax, ebx                        ;EAX += EBX;
    19 00000011 A3[D8000000]                    mov     [FONT_ADR], eax                 ;FONT_ADR[0] = EAX;
    20                                  
    21                                          ;---------------------------------------
    22                                          ;8ビットの横線
    23                                          ;---------------------------------------
    24 00000016 B407                            mov     ah, 0x07                        ;AH = 書き込みプレーンの指定(Bit:----IRGB)
    25 00000018 B002                            mov     al, 0x02                        ;AL = マップマスクレジスタ(書き込みプレーンを指定)
    26 0000001A 66BAC403                        mov     dx, 0x03C4                      ;DX = シーケンサ制御ポート
    27 0000001E 66EF                            out     dx, ax                          ;//ポート出力
    28                                  
    29 00000020 C60500000A00FF                  mov     [0x000A_0000 + 0], byte 0xFF    ;//8ドットの横線
    30                                  
    31 00000027 B404                            mov     ah, 0x04                        ;AH = 書き込みプレーンを指定(Bit:----IRGB)
    32 00000029 66EF                            out     dx, ax                          ;//ポート出力
    33                                          
    34 0000002B C60501000A00FF                  mov     [0x000A_0000 + 1], byte 0xFF    ;//8ドットの横線
    35                                  
    36 00000032 B402                            mov     ah, 0x02                        ;AH = 書き込みプレーンを指定(Bit:----IRGB)
    37 00000034 66EF                            out     dx, ax                          ;//ポート出力
    38                                  
    39 00000036 C60502000A00FF                  mov     [0x000A_0000 + 2], byte 0xFF    ;//8ドットの横線
    40                                  
    41 0000003D B401                            mov     ah, 0x01                        ;AH = 書き込みプレーンを指定(Bit:----IRGB)
    42 0000003F 66EF                            out     dx, ax                          ;//ポート出力
    43                                  
    44 00000041 C60503000A00FF                  mov     [0x000A_0000 + 3], byte 0xFF    ;//8ドットの横線
    45                                  
    46                                          ;---------------------------------------
    47                                          ;画面を横切る横線
    48                                          ;---------------------------------------
    49 00000048 B402                            mov     ah, 0x02                        ;AH = 書き込みプレーンを指定(Bit:----IRGB)
    50 0000004A 66EF                            out     dx, ax                          ;//ポート出力
    51                                  
    52 0000004C 8D3D50000A00                    lea     edi, [0x000A_0000 + 80]         ;EDI = VRAMアドレス;
    53 00000052 B950000000                      mov     ecx, 80                         ;ECX = 繰り返し回数;
    54 00000057 B0FF                            mov     al, 0xFF                        ;AL = ビットパターン;
    55 00000059 F3AA                            rep stosb                               ;*EDI++ = AL;
    56                                  
    57                                          ;---------------------------------------
    58                                          ;2行目に8ドットの矩形
    59                                          ;---------------------------------------
    60 0000005B BF01000000                      mov     edi, 1                          ;EDI = 行数;
    61                                  
    62 00000060 C1E708                          shl     edi, 8                          ;EDI *= 256;
    63 00000063 8DBCBF00000A00                  lea     edi, [edi*4 + edi + 0x000A_0000];EDI = VRAMアドレス;
    64                                  
    65 0000006A 66C707FF00                      mov     [edi + (80 * 0)], word 0xFF
    66 0000006F 66C74750FF00                    mov     [edi + (80 * 1)], word 0xFF
    67 00000075 66C787A0000000FF00              mov     [edi + (80 * 2)], word 0xFF
    68 0000007E 66C787F0000000FF00              mov     [edi + (80 * 3)], word 0xFF
    69 00000087 66C78740010000FF00              mov     [edi + (80 * 4)], word 0xFF
    70 00000090 66C78790010000FF00              mov     [edi + (80 * 5)], word 0xFF
    71 00000099 66C787E0010000FF00              mov     [edi + (80 * 6)], word 0xFF
    72 000000A2 66C78730020000FF00              mov     [edi + (80 * 7)], word 0xFF
    73                                  
    74                                          ;---------------------------------------
    75                                          ;3行目に文字を描画
    76                                          ;---------------------------------------
    77 000000AB BE41000000                      mov     esi, 'A'                        ;ESI = 文字コード;
    78 000000B0 C1E604                          shl     esi, 4                          ;ESI *= 16;
    79 000000B3 0335[D8000000]                  add     esi, [FONT_ADR]                 ;ESI = FONT_ADR[文字コード];
    80                                  
    81 000000B9 BF02000000                      mov     edi, 2                          ;EDI = 行数;
    82 000000BE C1E708                          shl     edi, 8                          ;EDI *= 256;
    83 000000C1 8DBCBF00000A00                  lea     edi, [edi * 4 + edi + 0x000A_0000]
    84                                                                                  ;EDI = VRAMアドレス;
    85 000000C8 B910000000                      mov     ecx, 16                         ;ECX = 16;
    86                                  .10L:                                           ;do
    87                                                                                  ;{
    88 000000CD A4                              movsb                                   ;       *EDI++ = *ESI++;
    89 000000CE 83C74F                          add     edi, 80 - 1                     ;       EDI += 79; //1ドット分
    90 000000D1 E2FA                            loop    .10L                            ;}while(--ECX);
    91                                  
    92                                          ;---------------------------------------
    93                                          ;処理の終了
    94                                          ;---------------------------------------
    95 000000D3 EBFE                            jmp     $                               ;while(1) //無限ループ
    96                                  
    97 000000D5 00<rept>                ALIGN   4, db   0
    98 000000D8 00000000                FONT_ADR:       dd      0
    99                                  
   100                                          
   101                                  ;********************************************************************************************************
   102                                  ;パディング
   103                                  ;********************************************************************************************************
   104 000000DC 00<rept>                        times KERNEL_SIZE - ($ - $$)    db 0    ;パディング
