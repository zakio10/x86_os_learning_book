     1                                  ;********************************************************************************************************
     2                                  ;マクロ
     3                                  ;********************************************************************************************************
     4                                  %define         USE_SYSTEM_CALL
     5                                  %define         USE_TEST_AND_SET
     6                                  
     7                                  %include        "..\include\define.s"
     1                              <1> VECT_BASE   equ     0x0010_0000             ;0010_0000:0010_07FF
     2                              <1> 
     3                              <1> SECT_SIZE   equ     (512)                   ;セクタサイズ
     4                              <1> 
     5                              <1> BOOT_LOAD   equ     0x7C00                  ;ブートプログラムのロード位置
     6                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)
     7                              <1> BOOT_SIZE   equ     (1024 * 8)              ;ブートコードサイズ
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     9                              <1> 
    10                              <1> KERNEL_LOAD equ     0x0010_1000
    11                              <1> KERNEL_SIZE equ     (1024*8)                ;カーネルサイズ
    12                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> STACK_BASE  equ     0x0010_3000             ;タスク用スタックエリア
    15                              <1> STACK_SIZE  equ     1024                    ;スタックサイズ
    16                              <1> 
    17                              <1> CR3_BASE    equ     0x0010_5000             ;ページ変換テーブル:タスク3用
    18                              <1> 
    19                              <1> SP_TASK_0   equ     STACK_BASE + (STACK_SIZE * 1)
    20                              <1> SP_TASK_1   equ     STACK_BASE + (STACK_SIZE * 2)
    21                              <1> SP_TASK_2   equ     STACK_BASE + (STACK_SIZE * 3)
    22                              <1> SP_TASK_3   equ     STACK_BASE + (STACK_SIZE * 4)
    23                              <1> 
    24                              <1> E820_RECORD_SIZE    equ 20
     8                                  %include        "..\include\macro.s"
     1                              <1> %define     RING_ITEM_SIZE  (1 << 4)
     2                              <1> %define     RING_INDEX_MASK (RING_ITEM_SIZE - 1)
     3                              <1> 
     4                              <1> struc rose
     5 00000000 <res 00000004>      <1>         .x0         resd    1                       ;左上座標:X0
     6 00000004 <res 00000004>      <1>         .y0         resd    1                       ;左上座標:Y0
     7 00000008 <res 00000004>      <1>         .x1         resd    1                       ;右下座標:X1
     8 0000000C <res 00000004>      <1>         .y1         resd    1                       ;右下座標:Y1
     9                              <1> 
    10 00000010 <res 00000004>      <1>         .n          resd    1                       ;変数:n
    11 00000014 <res 00000004>      <1>         .d          resd    1                       ;変数:d
    12                              <1> 
    13 00000018 <res 00000004>      <1>         .color_x    resd    1                       ;描画色:X座標
    14 0000001C <res 00000004>      <1>         .color_y    resd    1                       ;描画色:Y座標
    15 00000020 <res 00000004>      <1>         .color_z    resd    1                       ;描画色:枠
    16 00000024 <res 00000004>      <1>         .color_s    resd    1                       ;描画色:文字
    17 00000028 <res 00000004>      <1>         .color_f    resd    1                       ;描画色:グラフ描画色
    18 0000002C <res 00000004>      <1>         .color_b    resd    1                       ;描画色:グラフ消去色
    19                              <1> 
    20 00000030 <res 00000010>      <1>         .title      resb    16                      ;タイトル
    21                              <1> 
    22                              <1> endstruc
    23                              <1> 
    24                              <1> struc drive
    25 00000000 <res 00000002>      <1>         .no         resw    1                       ;ドライブ番号
    26 00000002 <res 00000002>      <1>         .cyln       resw    1                       ;シリンダ
    27 00000004 <res 00000002>      <1>         .head       resw    1                       ;ヘッド
    28 00000006 <res 00000002>      <1>         .sect       resw    1                       ;セクタ
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc ring_buff
    32 00000000 <res 00000004>      <1>         .rp         resd    1                       ;RP:書き込み位置
    33 00000004 <res 00000004>      <1>         .wp         resd    1                       ;WP:読み込み位置
    34 00000008 <res 00000010>      <1>         .item       resb    RING_ITEM_SIZE          ;ブッファ
    35                              <1> endstruc
    36                              <1> 
    37                              <1> %macro  cdecl   1-*.nolist
    38                              <1> 
    39                              <1>     %rep    %0 - 1
    40                              <1>         push    %{-1:-1}
    41                              <1>         %rotate -1
    42                              <1>     %endrep
    43                              <1>     %rotate -1
    44                              <1> 
    45                              <1>         call    %1
    46                              <1> 
    47                              <1>     %if 1 < %0
    48                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    49                              <1>     %endif
    50                              <1> 
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro  set_vect    1-*
    54                              <1>         push    eax
    55                              <1>         push    edi
    56                              <1> 
    57                              <1>         mov     edi, VECT_BASE + (%1 * 8)           ;ベクタアドレス
    58                              <1>         mov     eax, %2
    59                              <1> 
    60                              <1>     %if 3 == %0
    61                              <1>         mov     [edi + 4], %3                       ;フラグ
    62                              <1>     %endif
    63                              <1> 
    64                              <1>         mov     [edi + 0], ax                       ;例外アドレス[15:0]
    65                              <1>         shr     eax, 16
    66                              <1>         mov     [edi + 6], ax                       ;6はエンディアン(?) 例外アドレス[31:16]
    67                              <1> 
    68                              <1>         pop     edi
    69                              <1>         pop     eax
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro  outp    2
    73                              <1>         mov     al, %2
    74                              <1>         out     %1, al
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_desc    2-*
    78                              <1>         push    eax
    79                              <1>         push    edi
    80                              <1> 
    81                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
    82                              <1>         mov     eax, %2                             ;ベースアドレス
    83                              <1> 
    84                              <1>     %if 3 == %0
    85                              <1>         mov     [edi + 0], %3                       ;リミット
    86                              <1>     %endif
    87                              <1>     
    88                              <1>         mov     [edi + 2], ax                       ;ベース([15: 0])
    89                              <1>         shr     eax, 16
    90                              <1>         mov     [edi + 4], al                       ;ベース([23:16])
    91                              <1>         mov     [edi + 7], ah                       ;ベース([31:24])
    92                              <1> 
    93                              <1>         pop     edi
    94                              <1>         pop     eax
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> %macro  set_gate    2-*
    98                              <1>         push    eax
    99                              <1>         push    edi
   100                              <1> 
   101                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
   102                              <1>         mov     eax, %2                             ;ベースアドレス
   103                              <1> 
   104                              <1>         mov     [edi + 0], ax                       ;ベース([15:0])
   105                              <1>         shr     eax, 16
   106                              <1>         mov     [edi + 6], ax                       ;ベース([31:16])
   107                              <1> 
   108                              <1>         pop     edi
   109                              <1>         pop     eax
   110                              <1> %endmacro
     9                                  
    10                                          ORG     KERNEL_LOAD                             ;カーネルのロードアドレス
    11                                  
    12                                  [BITS 32]
    13                                  ;********************************************************************************************************
    14                                  ;エントリポイント
    15                                  ;********************************************************************************************************
    16                                  kernel:
    17                                          ;---------------------------------------
    18                                          ;フォントアドレスを取得
    19                                          ;---------------------------------------
    20 00000000 BE007E0000                      mov     esi, BOOT_LOAD + SECT_SIZE      ;ESI = 0x7C00 + 512
    21 00000005 0FB706                          movzx   eax, word [esi + 0]             ;EAX = [ESI + 0] //セグメント
    22 00000008 0FB75E02                        movzx   ebx, word [esi + 2]             ;EBX = [ESI + 2] //オフセット
    23 0000000C C1E004                          shl     eax, 4                          ;EAX << 4;
    24 0000000F 01D8                            add     eax, ebx                        ;EAX += EBX;
    25 00000011 A3[38020000]                    mov     [FONT_ADR], eax                 ;FONT_ADR[0] = EAX;
    26                                  
    27                                          ;---------------------------------------
    28                                          ;TSSディスクリプタの設定
    29                                          ;---------------------------------------
    30                                          set_desc        GDT.tss_0, TSS_0        ;//タスク0用TSSの設定
    30 00000016 50                  <1>  push eax
    30 00000017 57                  <1>  push edi
    30                              <1> 
    30 00000018 BF[C0050000]        <1>  mov edi, %1
    30 0000001D B8[40020000]        <1>  mov eax, %2
    30                              <1> 
    30                              <1>  %if 3 == %0
    30                              <1>  mov [edi + 0], %3
    30                              <1>  %endif
    30                              <1> 
    30 00000022 66894702            <1>  mov [edi + 2], ax
    30 00000026 C1E810              <1>  shr eax, 16
    30 00000029 884704              <1>  mov [edi + 4], al
    30 0000002C 886707              <1>  mov [edi + 7], ah
    30                              <1> 
    30 0000002F 5F                  <1>  pop edi
    30 00000030 58                  <1>  pop eax
    31                                          set_desc        GDT.tss_1, TSS_1        ;//タスク1用TSSの設定
    31 00000031 50                  <1>  push eax
    31 00000032 57                  <1>  push edi
    31                              <1> 
    31 00000033 BF[C8050000]        <1>  mov edi, %1
    31 00000038 B8[18030000]        <1>  mov eax, %2
    31                              <1> 
    31                              <1>  %if 3 == %0
    31                              <1>  mov [edi + 0], %3
    31                              <1>  %endif
    31                              <1> 
    31 0000003D 66894702            <1>  mov [edi + 2], ax
    31 00000041 C1E810              <1>  shr eax, 16
    31 00000044 884704              <1>  mov [edi + 4], al
    31 00000047 886707              <1>  mov [edi + 7], ah
    31                              <1> 
    31 0000004A 5F                  <1>  pop edi
    31 0000004B 58                  <1>  pop eax
    32                                          set_desc        GDT.tss_2, TSS_2        ;//タスク1用TSSの設定
    32 0000004C 50                  <1>  push eax
    32 0000004D 57                  <1>  push edi
    32                              <1> 
    32 0000004E BF[D0050000]        <1>  mov edi, %1
    32 00000053 B8[F0030000]        <1>  mov eax, %2
    32                              <1> 
    32                              <1>  %if 3 == %0
    32                              <1>  mov [edi + 0], %3
    32                              <1>  %endif
    32                              <1> 
    32 00000058 66894702            <1>  mov [edi + 2], ax
    32 0000005C C1E810              <1>  shr eax, 16
    32 0000005F 884704              <1>  mov [edi + 4], al
    32 00000062 886707              <1>  mov [edi + 7], ah
    32                              <1> 
    32 00000065 5F                  <1>  pop edi
    32 00000066 58                  <1>  pop eax
    33                                          set_desc        GDT.tss_3, TSS_3        ;//タスク1用TSSの設定
    33 00000067 50                  <1>  push eax
    33 00000068 57                  <1>  push edi
    33                              <1> 
    33 00000069 BF[D8050000]        <1>  mov edi, %1
    33 0000006E B8[C8040000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if 3 == %0
    33                              <1>  mov [edi + 0], %3
    33                              <1>  %endif
    33                              <1> 
    33 00000073 66894702            <1>  mov [edi + 2], ax
    33 00000077 C1E810              <1>  shr eax, 16
    33 0000007A 884704              <1>  mov [edi + 4], al
    33 0000007D 886707              <1>  mov [edi + 7], ah
    33                              <1> 
    33 00000080 5F                  <1>  pop edi
    33 00000081 58                  <1>  pop eax
    34                                  
    35                                          ;---------------------------------------
    36                                          ;コールゲートの設定
    37                                          ;---------------------------------------
    38                                          set_gate        GDT.call_gate, call_gate;コールゲートの設定
    38 00000082 50                  <1>  push eax
    38 00000083 57                  <1>  push edi
    38                              <1> 
    38 00000084 BF[E0050000]        <1>  mov edi, %1
    38 00000089 B8[40120000]        <1>  mov eax, %2
    38                              <1> 
    38 0000008E 668907              <1>  mov [edi + 0], ax
    38 00000091 C1E810              <1>  shr eax, 16
    38 00000094 66894706            <1>  mov [edi + 6], ax
    38                              <1> 
    38 00000098 5F                  <1>  pop edi
    38 00000099 58                  <1>  pop eax
    39                                  
    40                                          ;---------------------------------------
    41                                          ;LDTの設定
    42                                          ;---------------------------------------
    43                                          set_desc        GDT.ldt, LDT, word LDT_LIMIT
    43 0000009A 50                  <1>  push eax
    43 0000009B 57                  <1>  push edi
    43                              <1> 
    43 0000009C BF[B8050000]        <1>  mov edi, %1
    43 000000A1 B8[EE050000]        <1>  mov eax, %2
    43                              <1> 
    43                              <1>  %if 3 == %0
    43 000000A6 66C7074700          <1>  mov [edi + 0], %3
    43                              <1>  %endif
    43                              <1> 
    43 000000AB 66894702            <1>  mov [edi + 2], ax
    43 000000AF C1E810              <1>  shr eax, 16
    43 000000B2 884704              <1>  mov [edi + 4], al
    43 000000B5 886707              <1>  mov [edi + 7], ah
    43                              <1> 
    43 000000B8 5F                  <1>  pop edi
    43 000000B9 58                  <1>  pop eax
    44                                  
    45                                          ;---------------------------------------
    46                                          ;GDTをロード(再設定)
    47                                          ;---------------------------------------
    48 000000BA 0F0115[E8050000]                lgdt    [GDTR]                          ;//グローバルディスクリプタテーブルをロード
    49                                  
    50                                          ;---------------------------------------
    51                                          ;スタックの設定
    52                                          ;---------------------------------------
    53 000000C1 BC00341000                      mov     esp, SP_TASK_0                  ;タスク0用のスタックを設定
    54                                  
    55                                          ;---------------------------------------
    56                                          ;タスクレジスタの初期化
    57                                          ;---------------------------------------
    58 000000C6 66B82000                        mov     ax, SS_TASK_0                   ;//タスクレジスタの設定
    59 000000CA 0F00D8                          ltr     ax
    60                                  
    61                                          ;---------------------------------------
    62                                          ;初期化
    63                                          ;---------------------------------------
    64 000000CD E8840F0000                      cdecl   init_int                        ;//割り込みベクタの初期化
    65 000000D2 E8CE0F0000                      cdecl   init_pic                        ;//割り込みコントローラの初期化
    66 000000D7 E883080000                      cdecl   init_page                       ;ページングの初期化
    67                                  
    68                                          set_vect        0x00, int_zero_div      ;割り込み処理の登録:0除算
    68 000000DC 50                  <1>  push eax
    68 000000DD 57                  <1>  push edi
    68                              <1> 
    68 000000DE BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    68 000000E3 B8[87100000]        <1>  mov eax, %2
    68                              <1> 
    68                              <1>  %if 3 == %0
    68                              <1>  mov [edi + 4], %3
    68                              <1>  %endif
    68                              <1> 
    68 000000E8 668907              <1>  mov [edi + 0], ax
    68 000000EB C1E810              <1>  shr eax, 16
    68 000000EE 66894706            <1>  mov [edi + 6], ax
    68                              <1> 
    68 000000F2 5F                  <1>  pop edi
    68 000000F3 58                  <1>  pop eax
    69                                          set_vect        0x07, int_nm            ;割り込み処理の登録:デバイス使用不可(FPU)
    69 000000F4 50                  <1>  push eax
    69 000000F5 57                  <1>  push edi
    69                              <1> 
    69 000000F6 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    69 000000FB B8[DD120000]        <1>  mov eax, %2
    69                              <1> 
    69                              <1>  %if 3 == %0
    69                              <1>  mov [edi + 4], %3
    69                              <1>  %endif
    69                              <1> 
    69 00000100 668907              <1>  mov [edi + 0], ax
    69 00000103 C1E810              <1>  shr eax, 16
    69 00000106 66894706            <1>  mov [edi + 6], ax
    69                              <1> 
    69 0000010A 5F                  <1>  pop edi
    69 0000010B 58                  <1>  pop eax
    70                                          set_vect        0x20, int_timer         ;割り込み処理の登録:タイマー
    70 0000010C 50                  <1>  push eax
    70 0000010D 57                  <1>  push edi
    70                              <1> 
    70 0000010E BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    70 00000113 B8[36060000]        <1>  mov eax, %2
    70                              <1> 
    70                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 4], %3
    70                              <1>  %endif
    70                              <1> 
    70 00000118 668907              <1>  mov [edi + 0], ax
    70 0000011B C1E810              <1>  shr eax, 16
    70 0000011E 66894706            <1>  mov [edi + 6], ax
    70                              <1> 
    70 00000122 5F                  <1>  pop edi
    70 00000123 58                  <1>  pop eax
    71                                          set_vect        0x21, int_keyboard      ;割り込み処理の登録:KBC
    71 00000124 50                  <1>  push eax
    71 00000125 57                  <1>  push edi
    71                              <1> 
    71 00000126 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    71 0000012B B8[BA110000]        <1>  mov eax, %2
    71                              <1> 
    71                              <1>  %if 3 == %0
    71                              <1>  mov [edi + 4], %3
    71                              <1>  %endif
    71                              <1> 
    71 00000130 668907              <1>  mov [edi + 0], ax
    71 00000133 C1E810              <1>  shr eax, 16
    71 00000136 66894706            <1>  mov [edi + 6], ax
    71                              <1> 
    71 0000013A 5F                  <1>  pop edi
    71 0000013B 58                  <1>  pop eax
    72                                          set_vect        0x28, int_rtc           ;割り込み処理の登録:RTC
    72 0000013C 50                  <1>  push eax
    72 0000013D 57                  <1>  push edi
    72                              <1> 
    72 0000013E BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    72 00000143 B8[D0100000]        <1>  mov eax, %2
    72                              <1> 
    72                              <1>  %if 3 == %0
    72                              <1>  mov [edi + 4], %3
    72                              <1>  %endif
    72                              <1> 
    72 00000148 668907              <1>  mov [edi + 0], ax
    72 0000014B C1E810              <1>  shr eax, 16
    72 0000014E 66894706            <1>  mov [edi + 6], ax
    72                              <1> 
    72 00000152 5F                  <1>  pop edi
    72 00000153 58                  <1>  pop eax
    73                                          set_vect        0x81, trap_gate_81, word 0xEF00 ;トラップゲートの登録:1文字出力
    73 00000154 50                  <1>  push eax
    73 00000155 57                  <1>  push edi
    73                              <1> 
    73 00000156 BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    73 0000015B B8[70120000]        <1>  mov eax, %2
    73                              <1> 
    73                              <1>  %if 3 == %0
    73 00000160 66C7470400EF        <1>  mov [edi + 4], %3
    73                              <1>  %endif
    73                              <1> 
    73 00000166 668907              <1>  mov [edi + 0], ax
    73 00000169 C1E810              <1>  shr eax, 16
    73 0000016C 66894706            <1>  mov [edi + 6], ax
    73                              <1> 
    73 00000170 5F                  <1>  pop edi
    73 00000171 58                  <1>  pop eax
    74                                          set_vect        0x82, trap_gate_82, word 0xEF00 ;トラップゲートの登録:点の描画
    74 00000172 50                  <1>  push eax
    74 00000173 57                  <1>  push edi
    74                              <1> 
    74 00000174 BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    74 00000179 B8[7E120000]        <1>  mov eax, %2
    74                              <1> 
    74                              <1>  %if 3 == %0
    74 0000017E 66C7470400EF        <1>  mov [edi + 4], %3
    74                              <1>  %endif
    74                              <1> 
    74 00000184 668907              <1>  mov [edi + 0], ax
    74 00000187 C1E810              <1>  shr eax, 16
    74 0000018A 66894706            <1>  mov [edi + 6], ax
    74                              <1> 
    74 0000018E 5F                  <1>  pop edi
    74 0000018F 58                  <1>  pop eax
    75                                  
    76                                          ;---------------------------------------
    77                                          ;デバイスの割り込み許可
    78                                          ;---------------------------------------
    79 00000190 6A10E8620F00006683-             cdecl   rtc_int_en, 0x10                ;rtc_int_en(UIE); //更新サイクル終了割り込み許可
    79 00000199 C404               
    80 0000019B E858100000                      cdecl   int_en_timer0                   ;//タイマー(カウンタ0)割り込み許可
    81                                  
    82                                          ;---------------------------------------
    83                                          ;IMR(割り込みマスクレジスタ)の設定
    84                                          ;---------------------------------------
    85                                          outp    0x21, 0b_1111_1000              ;//割り込み有効:スレーブPIC/KBC/タイマー
    85 000001A0 B0F8                <1>  mov al, %2
    85 000001A2 E621                <1>  out %1, al
    86                                          outp    0xA1, 0b_1111_1110              ;//割り込み有効:RTC
    86 000001A4 B0FE                <1>  mov al, %2
    86 000001A6 E6A1                <1>  out %1, al
    87                                  
    88                                          ;---------------------------------------
    89                                          ;CR3レジスタにページング用のベースアドレスをセット
    90                                          ;---------------------------------------
    91 000001A8 B800501000                      mov     eax, CR3_BASE
    92 000001AD 0F22D8                          mov     cr3, eax                        ;//ページテーブルの登録
    93                                  
    94                                          ;---------------------------------------
    95                                          ;CR0レジスタのPEビットを1に設定(ページングの有効化)
    96                                          ;---------------------------------------
    97 000001B0 0F20C0                          mov     eax, cr0                        ;//PGビットをセット
    98 000001B3 0D00000080                      or      eax, (1 << 31)                  ;CR0 |= PG;
    99 000001B8 0F22C0                          mov     cr0, eax
   100 000001BB EB00                            jmp     $ + 2                           ;FLUSH() //キャッシュされた命令を破棄
   101                                  
   102                                          ;---------------------------------------
   103                                          ;CPUの割り込み許可
   104                                          ;---------------------------------------
   105 000001BD FB                              sti                                      ;//割り込み許可
   106                                  
   107                                          ;---------------------------------------
   108                                          ;フォントの一覧表示
   109                                          ;---------------------------------------
   110 000001BE 6A0D6A3FE841090000-             cdecl   draw_font, 63, 13               ;//フォントの一覧表示
   110 000001C7 6683C408           
   111 000001CB 6A046A3FE8B5090000-             cdecl   draw_color_bar, 63, 4           ;//カラーバーの表示
   111 000001D4 6683C408           
   112                                  
   113                                          ;---------------------------------------
   114                                          ;文字列の表示
   115                                          ;---------------------------------------
   116 000001D8 68[22020000]680F01-             cdecl   draw_str, 25, 14, 0x010F, .s0   ;draw_str();
   116 000001E0 00006A0E6A19E86009-
   116 000001E9 00006683C410       
   117                                  
   118                                  .10L:                                           ;while(1)
   119                                                                                  ;{
   120                                          ;---------------------------------------
   121                                          ;タスクの呼び出し
   122                                          ;---------------------------------------
   123                                          ;call    SS_TASK_1:0                     ;       //タスク1へのジャンプ
   124                                  
   125                                          ;---------------------------------------
   126                                          ;回転する棒の表示
   127                                          ;---------------------------------------
   128 000001EF E813100000                      cdecl   draw_rotation_bar               ;       //回転する棒を表示
   129                                  
   130                                          ;---------------------------------------
   131                                          ;キーコードの取得
   132                                          ;---------------------------------------
   133 000001F4 68[33020000]68-                 cdecl   ring_rd, _KEY_BUFF, .int_key    ;       EAX = ring_rd(buff, &int_key);
   133 000001FA [E0110000]E80A0F00-
   133 00000202 006683C408         
   134 00000207 83F800                          cmp     eax, 0                          ;       if(EAX != 0)
   135 0000020A 7412                            je      .10E                            ;       {
   136                                  
   137                                          ;---------------------------------------
   138                                          ;キーコードの表示
   139                                          ;---------------------------------------
   140 0000020C 68[E0110000]6A1D6A-             cdecl   draw_key, 2, 29, _KEY_BUFF      ;               ring_show(key_buff); //全要素を表示
   140 00000214 02E84C0F00006683C4-
   140 0000021D 0C                 
   141                                  .10E:                                           ;       }
   142 0000021E EBCF                            jmp     .10L                            ;}
   143                                  
   144                                          ;---------------------------------------
   145                                          ;処理の終了
   146                                          ;---------------------------------------
   147 00000220 EBFE                            jmp     $                               ;while(1) //無限ループ
   148                                  
   149                                  
   150                                  
   151 00000222 2048656C6C6F2C206B-     .s0:    db      " Hello, kernel! ", 0
   151 0000022B 65726E656C212000   
   152                                  
   153 00000233 00000000                .int_key:       dd      0
   154                                  
   155 00000237 00                      ALIGN   4, db   0
   156 00000238 00000000                FONT_ADR:       dd      0
   157 0000023C 00000000                RTC_TIME:       dd      0
   158                                  
   159                                  ;********************************************************************************************************
   160                                  ;タスク
   161                                  ;********************************************************************************************************
   162                                  %include        "descriptor.s"
     1                              <1> ;********************************************************************************************************
     2                              <1> ;TSS
     3                              <1> ;********************************************************************************************************
     4                              <1> TSS_0:
     5 00000240 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
     6 00000244 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                                     ;*  4:ESP0
     7 00000248 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
     8 0000024C 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
     9 00000250 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    10 00000254 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    11 00000258 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    12 0000025C 00501000            <1> .cr3:           dd  CR3_BASE                                            ;  28:CR3(PDBR)
    13 00000260 00000000            <1> .eip:           dd  0                                                   ;  32:EIP
    14 00000264 00000000            <1> .eflags:        dd  0                                                   ;  36:EFLAGS
    15 00000268 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    16 0000026C 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    17 00000270 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    18 00000274 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    19 00000278 00000000            <1> .esp:           dd  0                                                   ;  56:ESP
    20 0000027C 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    21 00000280 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    22 00000284 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    23 00000288 00000000            <1> .es:            dd  0                                                   ;  72:ES
    24 0000028C 00000000            <1> .cs:            dd  0                                                   ;  76:CS
    25 00000290 00000000            <1> .ss:            dd  0                                                   ;  80:SS
    26 00000294 00000000            <1> .ds:            dd  0                                                   ;  84:DS
    27 00000298 00000000            <1> .fs:            dd  0                                                   ;  88:FS
    28 0000029C 00000000            <1> .gs:            dd  0                                                   ;  92:GS
    29 000002A0 00000000            <1> .ldt:           dd  0                                                   ;* 96:LDTセグメントセレクタ
    30 000002A4 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    31 000002A8 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    32                              <1> 
    33                              <1> TSS_1:
    34 00000318 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    35 0000031C 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                                     ;*  4:ESP0
    36 00000320 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    37 00000324 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    38 00000328 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    39 0000032C 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    40 00000330 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    41 00000334 00501000            <1> .cr3:           dd  CR3_BASE                                            ;  28:CR3(PDBR)
    42 00000338 [94060000]          <1> .eip:           dd  task_1                                              ;  32:EIP
    43 0000033C 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
    44 00000340 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    45 00000344 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    46 00000348 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    47 0000034C 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    48 00000350 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56:ESP
    49 00000354 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    50 00000358 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    51 0000035C 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    52 00000360 27000000            <1> .es:            dd  DS_TASK_1                                           ;  72:ES
    53 00000364 1F000000            <1> .cs:            dd  CS_TASK_1                                           ;  76:CS
    54 00000368 27000000            <1> .ss:            dd  DS_TASK_1                                           ;  80:SS
    55 0000036C 27000000            <1> .ds:            dd  DS_TASK_1                                           ;  84:DS
    56 00000370 27000000            <1> .fs:            dd  DS_TASK_1                                           ;  88:FS
    57 00000374 27000000            <1> .gs:            dd  DS_TASK_1                                           ;  92:GS
    58 00000378 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
    59 0000037C 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    60 00000380 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    61                              <1> 
    62                              <1> TSS_2:
    63 000003F0 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    64 000003F4 003A1000            <1> .esp0:          dd  SP_TASK_2 - 512                                     ;*  4:ESP0
    65 000003F8 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    66 000003FC 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    67 00000400 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    68 00000404 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    69 00000408 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    70 0000040C 00501000            <1> .cr3:           dd  CR3_BASE                                            ;  28:CR3(PDBR)
    71 00000410 [CB060000]          <1> .eip:           dd  task_2                                              ;  32:EIP
    72 00000414 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
    73 00000418 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    74 0000041C 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    75 00000420 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    76 00000424 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    77 00000428 003C1000            <1> .esp:           dd  SP_TASK_2                                           ;  56:ESP
    78 0000042C 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    79 00000430 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    80 00000434 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    81 00000438 37000000            <1> .es:            dd  DS_TASK_2                                           ;  72:ES
    82 0000043C 2F000000            <1> .cs:            dd  CS_TASK_2                                           ;  76:CS
    83 00000440 37000000            <1> .ss:            dd  DS_TASK_2                                           ;  80:SS
    84 00000444 37000000            <1> .ds:            dd  DS_TASK_2                                           ;  84:DS
    85 00000448 37000000            <1> .fs:            dd  DS_TASK_2                                           ;  88:FS
    86 0000044C 37000000            <1> .gs:            dd  DS_TASK_2                                           ;  92:GS
    87 00000450 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
    88 00000454 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    89 00000458 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    90                              <1> 
    91                              <1> TSS_3:
    92 000004C8 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    93 000004CC 003E1000            <1> .esp0:          dd  SP_TASK_3 - 512                                     ;*  4:ESP0
    94 000004D0 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    95 000004D4 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    96 000004D8 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    97 000004DC 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    98 000004E0 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    99 000004E4 00501000            <1> .cr3:           dd  CR3_BASE                                            ;  28:CR3(PDBR)
   100 000004E8 [9C070000]          <1> .eip:           dd  task_3                                              ;  32:EIP
   101 000004EC 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
   102 000004F0 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
   103 000004F4 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
   104 000004F8 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
   105 000004FC 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
   106 00000500 00401000            <1> .esp:           dd  SP_TASK_3                                           ;  56:ESP
   107 00000504 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
   108 00000508 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
   109 0000050C 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
   110 00000510 47000000            <1> .es:            dd  DS_TASK_3                                           ;  72:ES
   111 00000514 3F000000            <1> .cs:            dd  CS_TASK_3                                           ;  76:CS
   112 00000518 47000000            <1> .ss:            dd  DS_TASK_3                                           ;  80:SS
   113 0000051C 47000000            <1> .ds:            dd  DS_TASK_3                                           ;  84:DS
   114 00000520 47000000            <1> .fs:            dd  DS_TASK_3                                           ;  88:FS
   115 00000524 47000000            <1> .gs:            dd  DS_TASK_3                                           ;  92:GS
   116 00000528 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
   117 0000052C 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
   118 00000530 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
   119                              <1> 
   120                              <1> ;********************************************************************************************************
   121                              <1> ;グローバルディスクリプタテーブル
   122                              <1> ;********************************************************************************************************
   123 000005A0 0000000000000000    <1> GDT:            dq  0x_0000_0000_0000_0000                              ;NULL
   124 000005A8 FFFF0000009ACF00    <1> .cs_kernel:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
   125 000005B0 FFFF00000092CF00    <1> .ds_kernel:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
   126 000005B8 0000000000820000    <1> .ldt:           dq  0x_0000_8200_0000_0000                              ;LDTディスクリプタ
   127 000005C0 6700000000890000    <1> .tss_0:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   128 000005C8 6700000000890000    <1> .tss_1:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   129 000005D0 6700000000890000    <1> .tss_2:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   130 000005D8 6700000000890000    <1> .tss_3:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   131 000005E0 0000080004EC0000    <1> .call_gate:     dq  0x_0000_EC04_0008_0000                              ;386コールゲート(DPL=3, count=4, SEL=8)
   132                              <1> .end:
   133                              <1> 
   134                              <1> CS_KERNEL       equ .cs_kernel  - GDT
   135                              <1> DS_KERNEL       equ .ds_kernel  - GDT
   136                              <1> SS_LDT          equ .ldt        - GDT
   137                              <1> SS_TASK_0       equ .tss_0      - GDT
   138                              <1> SS_TASK_1       equ .tss_1      - GDT
   139                              <1> SS_TASK_2       equ .tss_2      - GDT
   140                              <1> SS_TASK_3       equ .tss_3      - GDT
   141                              <1> SS_GATE_0       equ .call_gate  - GDT
   142                              <1> 
   143 000005E8 4700                <1> GDTR:           dw  GDT.end - GDT - 1
   144 000005EA [A0050000]          <1>                 dd  GDT
   145                              <1> 
   146                              <1> 
   147                              <1> ;********************************************************************************************************
   148                              <1> ;ローカルディスクリプタテーブル
   149                              <1> ;********************************************************************************************************
   150 000005EE 0000000000000000    <1> LDT:            dq  0x_0000_0000_0000_0000                              ;NULL
   151 000005F6 FFFF0000009ACF00    <1> .cs_task_0:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
   152 000005FE FFFF00000092CF00    <1> .ds_task_0:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
   153 00000606 FFFF000000FACF00    <1> .cs_task_1:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   154 0000060E FFFF000000F2CF00    <1> .ds_task_1:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   155 00000616 FFFF000000FACF00    <1> .cs_task_2:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   156 0000061E FFFF000000F2CF00    <1> .ds_task_2:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   157 00000626 FFFF000000FACF00    <1> .cs_task_3:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   158 0000062E FFFF000000F2CF00    <1> .ds_task_3:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   159                              <1> .end:
   160                              <1> 
   161                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                              ;タスク0用CSセレクタ
   162                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                              ;タスク0用DSセレクタ
   163                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                          ;タスク1用CSセレクタ
   164                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                          ;タスク1用DSセレクタ
   165                              <1> CS_TASK_2       equ (.cs_task_2 - LDT) | 4 | 3                          ;タスク2用CSセレクタ
   166                              <1> DS_TASK_2       equ (.ds_task_2 - LDT) | 4 | 3                          ;タスク2用DSセレクタ
   167                              <1> CS_TASK_3       equ (.cs_task_3 - LDT) | 4 | 3                          ;タスク3用CSセレクタ
   168                              <1> DS_TASK_3       equ (.ds_task_3 - LDT) | 4 | 3                          ;タスク3用DSセレクタ
   169                              <1> 
   170                              <1> LDT_LIMIT       equ .end        - LDT - 1
   163                                  %include        "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000636 60                  <1>         pushad
     6 00000637 1E                  <1>         push    ds
     7 00000638 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 00000639 66B81000            <1>         mov     ax, 0x0010
    13 0000063D 8ED8                <1>         mov     ds, ax
    14 0000063F 8EC0                <1>         mov     es, ax
    15                              <1>         
    16                              <1>         ;---------------------------------------
    17                              <1>         ;TICK
    18                              <1>         ;---------------------------------------
    19 00000641 FF05[8C060000]      <1>         inc     dword [TIMER_COUNT]             ;TIMER_COUNT++; //割り込み回数の更新
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;割り込みフラグをクリア(EOI)
    23                              <1>         ;---------------------------------------
    24                              <1>         outp 0x20, 0x20
    24 00000647 B020                <2>  mov al, %2
    24 00000649 E620                <2>  out %1, al
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;タスクの切り替え
    28                              <1>         ;---------------------------------------
    29 0000064B 660F00C8            <1>         str     ax                              ;AX = TR; //現在のタスクレジスタ
    30 0000064F 6683F820            <1>         cmp     ax, SS_TASK_0                   ;case(AX)
    31 00000653 7415                <1>         je      .11L                            ;{
    32 00000655 6683F828            <1>         cmp     ax, SS_TASK_1
    33 00000659 7418                <1>         je      .12L
    34 0000065B 6683F830            <1>         cmp     ax, SS_TASK_2
    35 0000065F 741B                <1>         je      .13L
    36                              <1>                                                 ;       default:
    37 00000661 EA000000002000      <1>         jmp     SS_TASK_0:0                     ;       //タスク0に切り替え
    38 00000668 EB1B                <1>         jmp     .10E                            ;       break;
    39                              <1> .11L:                                           ;       case SS_TASK_0:
    40 0000066A EA000000002800      <1>         jmp     SS_TASK_1:0                     ;       //タスク1に切り替え
    41 00000671 EB12                <1>         jmp     .10E                            ;       break;
    42                              <1> .12L:                                           ;       case SS_TASK_1:
    43 00000673 EA000000003000      <1>         jmp     SS_TASK_2:0                     ;       //タスク2に切り替え
    44 0000067A EB09                <1>         jmp     .10E                            ;       break;
    45                              <1> .13L:                                           ;       case SS_TASK_2:
    46 0000067C EA000000003800      <1>         jmp     SS_TASK_3:0                     ;       //タスク3に切り替え
    47 00000683 EB00                <1>         jmp     .10E                            ;       break;
    48                              <1> .10E:                                           ;}
    49                              <1> 
    50                              <1>         ;---------------------------------------
    51                              <1>         ;レジスタの復帰
    52                              <1>         ;---------------------------------------
    53 00000685 07                  <1>         pop     es
    54 00000686 1F                  <1>         pop     ds
    55 00000687 61                  <1>         popad
    56                              <1>         
    57 00000688 CF                  <1>         iret
    58                              <1> 
    59                              <1>         ;---------------------------------------
    60                              <1>         ;データ
    61                              <1>         ;---------------------------------------
    62 00000689 00<rept>            <1> ALIGN   4, db   0
    63 0000068C 0000000000000000    <1> TIMER_COUNT:    dq  0
   164                                  %include        "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;文字列の表示
     4                              <1>         ;---------------------------------------
     5 00000694 68[C4060000]6A076A- <1>         cdecl   SS_GATE_0:0, 63, 0 , 0x07, .s0  ;draw_str();
     5 0000069C 006A3F9A0000000040- <1>
     5 000006A5 006683C410          <1>
     6                              <1> 
     7                              <1> .10L:                                           ;while(1)
     8                              <1>                                                 ;{
     9                              <1> 
    10                              <1>         ;---------------------------------------
    11                              <1>         ;時刻の表示
    12                              <1>         ;---------------------------------------
    13 000006AA A1[3C020000]        <1>         mov     eax, [RTC_TIME]                 ;       //時刻の取得
    14 000006AF 5068000700006A006A- <1>         cdecl   draw_time, 72, 0, 0x0700, eax   ;       //時刻の表示
    14 000006B8 48E8E50700006683C4- <1>
    14 000006C1 10                  <1>
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;タスクの呼び出し
    18                              <1>         ;---------------------------------------       
    19                              <1>         ;jmp     SS_TASK_0:0                     ;       //タスク0へのジャンプ
    20                              <1> 
    21 000006C2 EBE6                <1>         jmp     .10L                            ;}
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;データ
    25                              <1>         ;---------------------------------------
    26 000006C4 5461736B2D3100      <1> .s0:    db  "Task-1", 0
   165                                  %include        "tasks/task_2.s"
     1                              <1> task_2:
     2 000006CB 68[8E070000]6A076A- <1>         cdecl   draw_str, 63, 1, 0x07, .s0      ;   draw_str(.s0);
     2 000006D3 016A3FE87004000066- <1>
     2 000006DC 83C410              <1>
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;FPU
     6                              <1>         ;---------------------------------------
     7                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
     8                              <1>                                     ;       ST0|        ST1|        ST2|        ST3|        ST4|        ST5|
     9                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    10 000006DF DB05[7C070000]      <1>         fild    dword [.c1000]      ;      1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    11 000006E5 D9EB                <1>         fldpi                       ;        pi|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    12 000006E7 DA35[80070000]      <1>         fidiv   dword [.c180]       ;    pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    13 000006ED D9EB                <1>         fldpi                       ;        pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    14 000006EF DCC0                <1>         fadd    st0, st0            ;      2*pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    15 000006F1 D9EE                <1>         fldz                        ;     θ = 0|       2*pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|
    16                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    17                              <1> 
    18                              <1> .10L:                                           ;while(1)
    19                              <1>                                                 ;{
    20                              <1> 
    21                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    22                              <1>                                     ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    23                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    24 000006F3 D8C2                <1>         fadd    st0, ST2            ;θ =  θ + d|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    25 000006F5 D9F8                <1>         fprem                       ;    MOD(θ)|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    26                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    27                              <1>                                     ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    28 000006F7 D9C0                <1>         fld     st0                 ;         θ|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    29 000006F9 D9FE                <1>         fsin                        ;    sin(θ)|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    30 000006FB D8CC                <1>         fmul    st0, st4            ;ST4*sin(θ)|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    31 000006FD DF35[84070000]      <1>         fbstp   [.bcd]              ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    32                              <1> 
    33                              <1>         ;---------------------------------------
    34                              <1>         ;CPU
    35                              <1>         ;---------------------------------------
    36                              <1>         ;---------------------------------------
    37                              <1>         ;数値出力
    38                              <1>         ;---------------------------------------
    39 00000703 A1[84070000]        <1>         mov     eax, [.bcd]                     ;   EAX = 1000* sin(t);
    40 00000708 89C3                <1>         mov     ebx, eax                        ;   EBX = EAX;
    41                              <1> 
    42 0000070A 250F0F0000          <1>         and     eax, 0x0F0F                     ;   //上位4ビットをマスク
    43 0000070F 0D30300000          <1>         or      eax, 0x3030                     ;   //上位4ビットに0x3を設定
    44                              <1> 
    45 00000714 C1EB04              <1>         shr     ebx, 4                          ;   EBX >> 4;
    46 00000717 81E30F0F0000        <1>         and     ebx, 0x0F0F                     ;   //上位4ビットをマスク
    47 0000071D 81CB30300000        <1>         or      ebx, 0x3030                     ;   //上位4ビットに0x3を設定
    48                              <1> 
    49 00000723 883D[96070000]      <1>         mov     [.s2 + 0], bh                   ;   //1桁目
    50 00000729 8825[98070000]      <1>         mov     [.s3 + 0], ah                   ;   //小数1桁目
    51 0000072F 881D[99070000]      <1>         mov     [.s3 + 1], bl                   ;   //小数2桁目
    52 00000735 A2[9A070000]        <1>         mov     [.s3 + 2], al                   ;   //小数3桁目
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;符号チェック
    56                              <1>         ;---------------------------------------
    57 0000073A B807000000          <1>         mov     eax, 7                          ;   //bt命令準備(取り出しbit番号指定)
    58 0000073F 0FA305[8D070000]    <1>         bt      [.bcd + 9], eax                 ;   CF = bcd[9] & 0x80;
    59 00000746 7209                <1>         jc      .10F                            ;   if(CF)
    60                              <1>                                                 ;   {
    61 00000748 C605[95070000]2B    <1>         mov     [.s1 + 0], byte '+'             ;       *s1 = '+';
    62 0000074F EB07                <1>         jmp     .10E                            ;   }
    63                              <1> .10F:                                           ;   else
    64                              <1>                                                 ;   {
    65 00000751 C605[95070000]2D    <1>         mov     [.s1 + 0], byte '-'             ;       *s1 = '-';
    66                              <1> .10E:                                           ;   }
    67                              <1> 
    68 00000758 68[95070000]6A076A- <1>         cdecl   draw_str, 72, 1, 0x07, .s1      ;   draw_str(.s1);
    68 00000760 016A48E8E303000066- <1>
    68 00000769 83C410              <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;ウェイト
    72                              <1>         ;---------------------------------------
    73 0000076C 6A0AE8C50B00006683- <1>         cdecl   wait_tick, 10                   ;   wait_tick(10);
    73 00000775 C404                <1>
    74                              <1> 
    75 00000777 E977FFFFFF          <1>         jmp     .10L                            ;}
    76                              <1> 
    77                              <1>         ;---------------------------------------
    78                              <1>         ;データ
    79                              <1>         ;---------------------------------------
    80                              <1> ALIGN   4,  db  0
    81 0000077C E8030000            <1> .c1000:     dd  1000
    82 00000780 B4000000            <1> .c180:      dd  180
    83 00000784 00<rept>            <1> .bcd:   times 10    db  0x00
    84 0000078E 5461736B2D3200      <1> .s0:    db  "Task-2", 0
    85 00000795 2D                  <1> .s1:    db  "-"
    86 00000796 302E                <1> .s2:    db  "0."
    87 00000798 30303000            <1> .s3:    db  "000", 0
   166                                  %include        "tasks/task_3.s"
     1                              <1> task_3:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;---------------------------------------
     5 0000079C 89E5                <1>         mov     ebp, esp                        ;EBP+ 0| EBP(元の値)
     6                              <1>                                                 ;------|---------
     7 0000079E 6A00                <1>         push    dword 0                         ;   - 4| x0 = 0; //X座標原点
     8 000007A0 6A00                <1>         push    dword 0                         ;   - 8| y0 = 0; //Y座標原点
     9 000007A2 6A00                <1>         push    dword 0                         ;   -12| x  = 0; //X座標描画
    10 000007A4 6A00                <1>         push    dword 0                         ;   -16| y  = 0; //Y座標描画
    11 000007A6 6A00                <1>         push    dword 0                         ;   -20| r  = 0; //角度
    12                              <1> 
    13                              <1>         ;---------------------------------------
    14                              <1>         ;初期化
    15                              <1>         ;---------------------------------------
    16 000007A8 BE[9C080000]        <1>         mov     esi, DRAW_PARAM                 ;ESI = 描画パラメータ
    17                              <1> 
    18                              <1>         ;---------------------------------------
    19                              <1>         ;タイトル表示
    20                              <1>         ;---------------------------------------
    21 000007AD 8B06                <1>         mov     eax, [esi + rose.x0]            ;X0座標
    22 000007AF 8B5E04              <1>         mov     ebx, [esi + rose.y0]            ;Y0座標
    23                              <1> 
    24 000007B2 C1E803              <1>         shr     eax, 3                          ;ESI = EAX / 8; //X座標を文字位置に変換
    25 000007B5 C1EB04              <1>         shr     ebx, 4                          ;EDI = EBX / 16; //Y座標を文字位置に変換
    26 000007B8 4B                  <1>         dec     ebx                             ;//1文字分上に移動
    27 000007B9 8B4E24              <1>         mov     ecx, [esi + rose.color_s]       ;文字色
    28 000007BC 8D5630              <1>         lea     edx, [esi + rose.title]         ;タイトル
    29                              <1> 
    30 000007BF 52515350E883030000- <1>         cdecl   draw_str, eax, ebx, ecx, edx    ;   draw_str(.s0);
    30 000007C8 6683C410            <1>
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;X軸の中点
    34                              <1>         ;---------------------------------------
    35 000007CC 8B06                <1>         mov     eax, [esi + rose.x0]            ;EAX = X0座標;
    36 000007CE 8B5E08              <1>         mov     ebx, [esi + rose.x1]            ;EBX = X1座標;
    37 000007D1 29C3                <1>         sub     ebx, eax                        ;EBX = (X1 - X0);
    38 000007D3 D1EB                <1>         shr     ebx, 1                          ;EBX /= 2;
    39 000007D5 01C3                <1>         add     ebx, eax                        ;EBX += X0;
    40 000007D7 895DFC              <1>         mov     [ebp - 4], ebx                  ;x0 = EBX; //X座標原点;
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;Y軸の中点
    44                              <1>         ;---------------------------------------
    45 000007DA 8B4604              <1>         mov     eax, [esi + rose.y0]            ;EAX = Y0座標;
    46 000007DD 8B5E0C              <1>         mov     ebx, [esi + rose.y1]            ;EBX = Y1座標;
    47 000007E0 29C3                <1>         sub     ebx, eax                        ;EBX = (Y1 - Y0);
    48 000007E2 D1EB                <1>         shr     ebx, 1                          ;EBX /= 2;
    49 000007E4 01C3                <1>         add     ebx, eax                        ;EBX += Y0;
    50 000007E6 895DF8              <1>         mov     [ebp - 8], ebx                  ;y0 = EBX; //Y座標原点;
    51                              <1> 
    52                              <1>         ;---------------------------------------
    53                              <1>         ;X軸の描画
    54                              <1>         ;---------------------------------------
    55 000007E9 8B06                <1>         mov     eax, [esi + rose.x0]            ;EAX = X0座標;
    56 000007EB 8B5DF8              <1>         mov     ebx, [ebp - 8]                  ;EBX = Y軸の中点
    57 000007EE 8B4E08              <1>         mov     ecx, [esi + rose.x1]            ;ECX = X1座標;
    58                              <1> 
    59 000007F1 FF761853515350E8C7- <1>         cdecl   draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]       ;X軸
    59 000007FA 0400006683C414      <1>
    60                              <1>         
    61                              <1>         ;---------------------------------------
    62                              <1>         ;Y軸の描画
    63                              <1>         ;---------------------------------------
    64 00000801 8B4604              <1>         mov     eax, [esi + rose.y0]            ;EAX = Y0座標;
    65 00000804 8B5DFC              <1>         mov     ebx, [ebp - 4]                  ;EBX = X軸の中点
    66 00000807 8B4E0C              <1>         mov     ecx, [esi + rose.y1]            ;ECX = Y1座標;
    67                              <1> 
    68 0000080A FF761C51535053E8AE- <1>         cdecl   draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]       ;Y軸
    68 00000813 0400006683C414      <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;枠の描画
    72                              <1>         ;---------------------------------------
    73 0000081A 8B06                <1>         mov     eax, [esi + rose.x0]            ;X0座標
    74 0000081C 8B5E04              <1>         mov     ebx, [esi + rose.y0]            ;Y0座標
    75 0000081F 8B4E08              <1>         mov     ecx, [esi + rose.x1]            ;X1座標
    76 00000822 8B560C              <1>         mov     edx, [esi + rose.y1]            ;y1座標
    77                              <1> 
    78 00000825 FF762052515350E842- <1>         cdecl   draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]       ;枠
    78 0000082E 0500006683C414      <1>
    79                              <1> 
    80                              <1>         ;---------------------------------------
    81                              <1>         ;振れ幅をX軸の約95%とする
    82                              <1>         ;---------------------------------------
    83 00000835 8B4608              <1>         mov     eax, [esi + rose.x1]            ;EAX = X1座標;
    84 00000838 2B06                <1>         sub     eax, [esi + rose.x0]            ;EAX -= X0座標;
    85 0000083A D1E8                <1>         shr     eax, 1                          ;EAX /= 2; //半分
    86 0000083C 89C3                <1>         mov     ebx, eax                        ;EBX = EAX;
    87 0000083E C1EB04              <1>         shr     ebx, 4                          ;EBX /= 16;
    88 00000841 29D8                <1>         sub     eax, ebx                        ;EAX -= EBX;
    89                              <1> 
    90                              <1>         ;---------------------------------------
    91                              <1>         ;FPUの初期化(パラ曲線の初期化)
    92                              <1>         ;---------------------------------------
    93 00000843 FF7614FF761050E88D- <1>         cdecl   fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]  ;fpu_rose_init(A, n, d);
    93 0000084C 0000006683C40C      <1>
    94                              <1> 
    95                              <1>         ;---------------------------------------
    96                              <1>         ;メインループ
    97                              <1>         ;---------------------------------------
    98                              <1> .10L:                                           ;while(1)
    99                              <1>                                                 ;{
   100                              <1> 
   101                              <1>         ;---------------------------------------
   102                              <1>         ;座標計算
   103                              <1>         ;---------------------------------------
   104 00000853 8D5DF4              <1>         lea     ebx, [ebp -12]                  ;       EBX = &x;
   105 00000856 8D4DF0              <1>         lea     ecx, [ebp -16]                  ;       ECX = &y;
   106 00000859 8B45EC              <1>         mov     eax, [ebp -20]                  ;       EAX = r;
   107                              <1> 
   108 0000085C 505153E89200000066- <1>         cdecl   fpu_rose_update, ebx, ecx, eax  ;       fpu_rose_update(&x, &y, r);
   108 00000865 83C40C              <1>
   109                              <1> 
   110                              <1>         ;---------------------------------------
   111                              <1>         ;角度更新(r = r % 36000)
   112                              <1>         ;---------------------------------------
   113 00000868 BA00000000          <1>         mov     edx, 0                          ;       EDX = 0;
   114 0000086D 40                  <1>         inc     eax                             ;       EAX++;
   115 0000086E BBA08C0000          <1>         mov     ebx, 360 * 100                  ;       EBX = 36000
   116 00000873 F7F3                <1>         div     ebx                             ;       EDX = EDX:EAX % EBX;
   117 00000875 8955EC              <1>         mov     [ebp -20], edx
   118                              <1> 
   119                              <1>         ;---------------------------------------
   120                              <1>         ;ドット描画
   121                              <1>         ;---------------------------------------
   122 00000878 8B4DF4              <1>         mov     ecx, [ebp -12]                  ;       ECX = X座標
   123 0000087B 8B55F0              <1>         mov     edx, [ebp -16]                  ;       ECX = Y座標
   124                              <1> 
   125 0000087E 034DFC              <1>         add     ecx, [ebp - 4]                  ;       ECX += X座標原点;
   126 00000881 0355F8              <1>         add     edx, [ebp - 8]                  ;       EDX += Y座標原点;
   127                              <1> 
   128 00000884 8B5E28              <1>         mov     ebx, [esi + rose.color_f]       ;       EBX = 表示色;
   129 00000887 CD82                <1>         int     0x82                            ;       sys_call_82(表示色, X, Y);
   130                              <1> 
   131                              <1>         ;---------------------------------------
   132                              <1>         ;ウェイト
   133                              <1>         ;---------------------------------------
   134 00000889 6A02E8A80A00006683- <1>         cdecl   wait_tick, 2                    ;   wait_tick(2);
   134 00000892 C404                <1>
   135                              <1> 
   136                              <1>         ;---------------------------------------
   137                              <1>         ;ドット描画(消去)
   138                              <1>         ;---------------------------------------
   139 00000894 8B5E2C              <1>         mov     ebx, [esi + rose.color_b]       ;       EBX = 背景色;
   140 00000897 CD82                <1>         int     0x82                            ;       sys_call_82(背景色, X, Y);
   141                              <1> 
   142 00000899 EBB8                <1>         jmp     .10L                            ;}
   143                              <1> 
   144                              <1>         ;---------------------------------------
   145                              <1>         ;データ
   146                              <1>         ;---------------------------------------
   147 0000089B 00                  <1> ALIGN 4, db 0
   148                              <1> DRAW_PARAM:
   149                              <1>         istruc  rose
   150 0000089C 10000000            <1>                 at      rose.x0,        dd      16              ;左上座標:X0
   151 000008A0 20000000            <1>                 at      rose.y0,        dd      32              ;左上座標:Y0
   152 000008A4 A0010000            <1>                 at      rose.x1,        dd      416             ;右下座標:X1
   153 000008A8 B0010000            <1>                 at      rose.y1,        dd      432             ;右下座標:Y1
   154                              <1> 
   155 000008AC 02000000            <1>                 at      rose.n,         dd      2               ;変数:n
   156 000008B0 01000000            <1>                 at      rose.d,         dd      1               ;変数:d
   157                              <1> 
   158 000008B4 07000000            <1>                 at      rose.color_x,   dd      0x0007          ;描画色:X軸
   159 000008B8 07000000            <1>                 at      rose.color_y,   dd      0x0007          ;描画色:Y軸
   160 000008BC 0F000000            <1>                 at      rose.color_z,   dd      0x000F          ;描画色:枠
   161 000008C0 0F030000            <1>                 at      rose.color_s,   dd      0x030F          ;描画色:文字
   162 000008C4 0F000000            <1>                 at      rose.color_f,   dd      0x000F          ;描画色:グラフ描画色
   163 000008C8 03000000            <1>                 at      rose.color_b,   dd      0x0003          ;描画色:グラフ消去色
   164                              <1> 
   165 000008CC 5461736B2D3300      <1>                 at      rose.title,     db      "Task-3", 0     ;タイトル
   166 000008D3 00<rept>            <1>         iend
   167                              <1> 
   168                              <1> fpu_rose_init:
   169                              <1>         ;---------------------------------------
   170                              <1>         ;スタックフレームの構築
   171                              <1>         ;---------------------------------------
   172                              <1>                                                 ;   +16| d
   173                              <1>                                                 ;   +12| n
   174                              <1>                                                 ;   + 8| A
   175                              <1>                                                 ;   + 4| EIP(戻り番号)
   176 000008DC 55                  <1>         push    ebp                             ;EBP+ 0| EBP(元の値)
   177 000008DD 89E5                <1>         mov     ebp, esp                        ;------|---------
   178 000008DF 68B4000000          <1>         push    dword 180                       ;   - 4| dword i = 180;
   179                              <1> 
   180                              <1>         ;---------------------------------------
   181                              <1>         ;FPU
   182                              <1>         ;---------------------------------------
   183                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   184                              <1>                                         ;       ST0|        ST1|        ST2|        ST3|        ST4|        ST5|
   185                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   186 000008E4 D9EB                <1>         fldpi                           ;        pi|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   187 000008E6 DA75FC              <1>         fidiv   dword [ebp - 4]         ;    pi/180|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   188 000008E9 DB450C              <1>         fild    dword [ebp +12]         ;         n|     pi/180|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   189 000008EC DA7510              <1>         fidiv   dword [ebp +16]         ;       n/d|     pi/180|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   190 000008EF DB4508              <1>         fild    dword [ebp + 8]         ;         A|        n/d|     pi/180|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   191                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   192                              <1>                                         ;         A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   193                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   194                              <1> 
   195                              <1>         ;---------------------------------------
   196                              <1>         ;スタックフレームの破棄
   197                              <1>         ;---------------------------------------
   198 000008F2 89EC                <1>         mov     esp, ebp
   199 000008F4 5D                  <1>         pop     ebp
   200                              <1> 
   201 000008F5 C3                  <1>         ret
   202                              <1> 
   203                              <1> fpu_rose_update:
   204                              <1>         ;---------------------------------------
   205                              <1>         ;スタックフレームの構築
   206                              <1>         ;---------------------------------------
   207                              <1>                                                 ;   +16| t(角度)
   208                              <1>                                                 ;   +12| Y(float)のアドレス
   209                              <1>                                                 ;   + 8| X(float)のアドレス
   210                              <1>                                                 ;   + 4| EIP(戻り番号)
   211 000008F6 55                  <1>         push   ebp                              ;EBP+ 0| EBP(元の値)
   212 000008F7 89E5                <1>         mov    ebp, esp                         ;------|---------
   213                              <1> 
   214                              <1>         ;---------------------------------------
   215                              <1>         ;レジスタの保存
   216                              <1>         ;---------------------------------------
   217 000008F9 50                  <1>         push    eax
   218 000008FA 53                  <1>         push    ebx
   219                              <1> 
   220                              <1>         ;---------------------------------------
   221                              <1>         ;X/Y座標の保存先を設定
   222                              <1>         ;---------------------------------------
   223 000008FB 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = pX; //X座標へのポインタ
   224 000008FE 8B5D0C              <1>         mov     ebx, [ebp + 12]                 ;EBX = pY; //Y座標へのポインタ
   225                              <1>         
   226                              <1>         ;---------------------------------------
   227                              <1>         ;FPU
   228                              <1>         ;---------------------------------------
   229                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   230                              <1>                                         ;       ST0|        ST1|        ST2|        ST3|        ST4|        ST5|
   231                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   232 00000901 DB4510              <1>         fild    dword [ebp +16]         ;         t|          A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|
   233 00000904 D8CB                <1>         fmul    st0, st3                ;        rt|          A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|
   234 00000906 D9C0                <1>         fld     st0                     ;        rt|         rt|          A|          k|          r|  xxxxxxxxx|
   235                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   236                              <1>                                         ;    θ=(rt)|     θ=(rt)|          A|          k|          r|  xxxxxxxxx|
   237                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   238 00000908 D9FB                <1>         fsincos                         ;    cos(θ)|     sin(θ)|          θ|          A|          k|          r|
   239                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   240 0000090A D9CA                <1>         fxch    st2                     ;         θ|     sin(θ)|     cos(θ)|          A|          k|          r|
   241 0000090C D8CC                <1>         fmul    st0, st4                ;        kθ|     sin(θ)|     cos(θ)|          A|          k|          r|
   242 0000090E D9FE                <1>         fsin                            ;   sin(kθ)|     sin(θ)|     cos(θ)|          A|          k|          r|
   243 00000910 D8CB                <1>         fmul    st0, st3                ;  Asin(kθ)|     sin(θ)|     cos(θ)|          A|          k|          r|
   244                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   245 00000912 D9CA                <1>         fxch    st2                     ;    cos(θ)|     sin(θ)|   Asin(kθ)|          A|          k|          r|
   246 00000914 D8CA                <1>         fmul    st0, st2                ;         x|     sin(θ)|   Asin(kθ)|          A|          k|          r|
   247 00000916 DB18                <1>         fistp   dword [eax]             ;    sin(θ)|   Asin(kθ)|          A|          k|          r|  xxxxxxxxx|
   248                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   249 00000918 DEC9                <1>         fmulp   st1, st0                ;         y|          A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|
   250 0000091A D9E0                <1>         fchs                            ;        -y|          A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|
   251 0000091C DB1B                <1>         fistp   dword [ebx]             ;         A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   252                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   253                              <1> 
   254                              <1>         ;---------------------------------------
   255                              <1>         ;レジスタの復帰
   256                              <1>         ;---------------------------------------
   257 0000091E 5B                  <1>         pop     ebx
   258 0000091F 58                  <1>         pop     eax
   259                              <1> 
   260                              <1>         ;---------------------------------------
   261                              <1>         ;スタックフレームの破棄
   262                              <1>         ;---------------------------------------
   263 00000920 89EC                <1>         mov     esp, ebp
   264 00000922 5D                  <1>         pop     ebp
   265                              <1> 
   266 00000923 C3                  <1>         ret
   167                                  %include        "modules/paging.s"
     1                              <1> page_set_4m:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;---------------------------------------
     5                              <1>                                                 ;   + 8| ページテーブル作成位置
     6                              <1>                                                 ;   + 4| EIP(戻り番号)
     7 00000924 55                  <1>         push    ebp                             ;EBP+ 0| EBP(元の値)
     8 00000925 89E5                <1>         mov     ebp, esp                        ;------|---------
     9                              <1> 
    10                              <1>         ;---------------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;---------------------------------------
    13 00000927 60                  <1>         pusha
    14                              <1> 
    15                              <1>         ;---------------------------------------
    16                              <1>         ;ページディレクトリの作成(P=0)
    17                              <1>         ;---------------------------------------
    18 00000928 FC                  <1>         cld                                     ;//DFクリア(+方向)
    19 00000929 8B7D08              <1>         mov     edi, [ebp + 8]                  ;EDI = ページディレクトリの先頭;
    20 0000092C B800000000          <1>         mov     eax, 0x0000_0000                ;EAX = 0; //P = 0
    21 00000931 B900040000          <1>         mov     ecx, 1024                       ;count = 1024;
    22 00000936 F3AB                <1>         rep     stosd                           ;while(cout--) *dst++ = 属性; //ページディレクトリ全てに0x00000000をセット
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;先頭のエントリーを設定
    26                              <1>         ;---------------------------------------
    27 00000938 89F8                <1>         mov     eax, edi                        ;EAX = EDI; //ページディレクトリの直後
    28 0000093A 2500F0FFFF          <1>         and     eax, ~0x0000_0FFF               ;EAX &= ~0FFF; //物理アドレスの指定
    29 0000093F 83C807              <1>         or      eax, 7                          ;EAX |= 7; //RWの許可
    30 00000942 898700F0FFFF        <1>         mov     [edi - (1024 * 4)], eax         ;//先頭エントリを設定
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;ページテーブルの設定(リニア)
    34                              <1>         ;---------------------------------------
    35 00000948 B807000000          <1>         mov     eax, 0x0000_0007                ;//物理アドレスの指定とRWの許可
    36 0000094D B900040000          <1>         mov     ecx, 1024                       ;count = 1024;
    37                              <1>                                                 ;do
    38                              <1> .10L:                                           ;{
    39 00000952 AB                  <1>         stosd                                   ;   *dst++ = 属性;
    40 00000953 0500100000          <1>         add     eax, 0x0000_1000                ;   adr += 0x1000;
    41 00000958 E2F8                <1>         loop    .10L                            ;}while(--count);
    42                              <1>         
    43                              <1>         ;---------------------------------------
    44                              <1>         ;レジスタの復帰
    45                              <1>         ;---------------------------------------
    46 0000095A 61                  <1>         popa
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;スタックフレームの破棄
    50                              <1>         ;---------------------------------------
    51 0000095B 89EC                <1>         mov     esp, ebp
    52 0000095D 5D                  <1>         pop     ebp
    53                              <1> 
    54 0000095E C3                  <1>         ret
    55                              <1> 
    56                              <1> init_page:
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの保存
    59                              <1>         ;---------------------------------------
    60 0000095F 60                  <1>         pusha
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;ページ変換テーブルの作成
    64                              <1>         ;---------------------------------------
    65 00000960 6800501000E8BAFFFF- <1>         cdecl   page_set_4m, CR3_BASE           ;ページ変換テーブルの作成:タスク3用
    65 00000969 FF6683C404          <1>
    66                              <1> 
    67                              <1>         ;---------------------------------------
    68                              <1>         ;レジスタの復帰
    69                              <1>         ;---------------------------------------
    70 0000096E 61                  <1>         popa
    71                              <1> 
    72 0000096F C3                  <1>         ret
   168                                  
   169                                  ;********************************************************************************************************
   170                                  ;モジュール
   171                                  ;********************************************************************************************************
   172                                  %include        "..\modules\protect\vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 読み込みプレーン(0~3)
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000970 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000971 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000973 6650                <1>         push    ax
    14 00000975 6652                <1>         push    dx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;読み込みプレーンの選択
    18                              <1>         ;---------------------------------------
    19 00000977 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    20 0000097A 80E403              <1>         and     ah, 0x03                        ;AH &= 0x03; //余計なビットをマスク
    21 0000097D B004                <1>         mov     al, 0x04                        ;AL = 読み込みマップ選択レジスタ
    22 0000097F 66BACE03            <1>         mov     dx, 0x03CE                      ;DX = グラフィックス制御ポート
    23 00000983 66EF                <1>         out     dx, ax                          ;//ポート出力
    24                              <1>         
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00000985 665A                <1>         pop     dx
    29 00000987 6658                <1>         pop     ax
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;スタックフレームの破棄
    33                              <1>         ;---------------------------------------
    34 00000989 89EC                <1>         mov     esp, ebp
    35 0000098B 5D                  <1>         pop     ebp
    36                              <1> 
    37 0000098C C3                  <1>         ret
    38                              <1> 
    39                              <1> vga_set_write_plane:
    40                              <1>         ;-----------------------------------
    41                              <1>         ;スタックフレームの構築
    42                              <1>         ;-----------------------------------
    43                              <1>                                             ;   + 8| 書き込みプレーン
    44                              <1>                                             ;   + 4| IP(戻り番号)
    45 0000098D 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    46 0000098E 89E5                <1>         mov    ebp, esp                     ;------|---------
    47                              <1> 
    48                              <1>         ;-----------------------------------
    49                              <1>         ;レジスタの保存
    50                              <1>         ;-----------------------------------
    51 00000990 6650                <1>         push    ax
    52 00000992 6652                <1>         push    dx
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;読み込みプレーンの選択
    56                              <1>         ;---------------------------------------
    57 00000994 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    58 00000997 80E40F              <1>         and     ah, 0x0F                        ;AH &= 0x03; //余計なビットをマスク
    59 0000099A B002                <1>         mov     al, 0x02                        ;AL = 読み込みマップ選択レジスタ
    60 0000099C 66BAC403            <1>         mov     dx, 0x03C4                      ;DX = グラフィックス制御ポート
    61 000009A0 66EF                <1>         out     dx, ax                          ;//ポート出力
    62                              <1>         
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 000009A2 665A                <1>         pop     dx
    67 000009A4 6658                <1>         pop     ax
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;スタックフレームの破棄
    71                              <1>         ;---------------------------------------
    72 000009A6 89EC                <1>         mov     esp, ebp
    73 000009A8 5D                  <1>         pop     ebp
    74                              <1> 
    75 000009A9 C3                  <1>         ret
    76                              <1> 
    77                              <1> vram_font_copy:
    78                              <1>         ;-----------------------------------
    79                              <1>         ;スタックフレームの構築
    80                              <1>         ;-----------------------------------
    81                              <1>                                             ;EBP+20| 描画色
    82                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
    83                              <1>                                             ;EBP+12| VRAMアドレス
    84                              <1>                                             ;   + 8| FONTアドレス
    85                              <1>                                             ;   + 4| IP(戻り番号)
    86 000009AA 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    87 000009AB 89E5                <1>         mov    ebp, esp                     ;------|---------
    88                              <1> 
    89                              <1>         ;-----------------------------------
    90                              <1>         ;レジスタの保存
    91                              <1>         ;-----------------------------------
    92 000009AD 50                  <1>         push    eax
    93 000009AE 53                  <1>         push    ebx
    94 000009AF 51                  <1>         push    ecx
    95 000009B0 57                  <1>         push    edi
    96 000009B1 52                  <1>         push    edx
    97 000009B2 56                  <1>         push    esi
    98                              <1> 
    99                              <1>         ;---------------------------------------
   100                              <1>         ;引数を変数に代入
   101                              <1>         ;---------------------------------------
   102 000009B3 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = フォントアドレス;
   103 000009B6 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   104 000009B9 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   105 000009BD 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   106                              <1> 
   107                              <1>         ;---------------------------------------
   108                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   109                              <1>         ;---------------------------------------
   110 000009C1 84C7                <1>         test    bh, al                          ;ZF = (背景色 & プレーン)
   111 000009C3 0F94C6              <1>         setz    dh                              ;if(ZF == 1){ DH = 0x00; }else{ DH = 0x01;}
   112 000009C6 FECE                <1>         dec     dh                              ;DH--; // 0xFF or 0x00
   113                              <1> 
   114 000009C8 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   115 000009CA 0F94C2              <1>         setz    dl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   116 000009CD FECA                <1>         dec     dl                              ;DL--; //0xFF or 0x00
   117                              <1> 
   118                              <1>         ;---------------------------------------
   119                              <1>         ;16ビットフォントのコピー
   120                              <1>         ;---------------------------------------
   121 000009CF FC                  <1>         cld                                     ;DF = 0; //アドレス加算
   122                              <1> 
   123 000009D0 B910000000          <1>         mov     ecx, 16                         ;ECX = 16; //16ドット
   124                              <1> .10L:                                           ;do
   125                              <1>                                                 ;{
   126                              <1>         ;---------------------------------------
   127                              <1>         ;フォントマスクの作成
   128                              <1>         ;---------------------------------------
   129 000009D5 AC                  <1>         lodsb                                   ;   AL = *ESI++; //フォント
   130 000009D6 88C4                <1>         mov     ah, al                          ;   AH = AL;
   131 000009D8 F6D4                <1>         not     ah                              ;   AH ~= AH; //!フォント(ビット反転)
   132                              <1> 
   133                              <1>         ;---------------------------------------
   134                              <1>         ;前景色
   135                              <1>         ;---------------------------------------
   136 000009DA 20D0                <1>         and     al, dl                          ;   AL = 前景色 & フォント;
   137                              <1> 
   138                              <1>         ;---------------------------------------
   139                              <1>         ;背景色
   140                              <1>         ;---------------------------------------
   141 000009DC F7C310000000        <1>         test    ebx, 0x0010                     ;if(透過モード)
   142 000009E2 7404                <1>         jz      .11F                            ;{
   143 000009E4 2227                <1>         and     ah, [edi]                       ;   AH = !フォント & [EDI] //現在値
   144 000009E6 EB02                <1>         jmp     .11E                            ;}
   145                              <1> .11F:                                           ;else
   146                              <1>                                                 ;{
   147 000009E8 20F4                <1>         and     ah, dh                          ;   AH = !フォント & 背景色
   148                              <1> .11E:                                           ;}
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;前景色と背景色を合成
   152                              <1>         ;---------------------------------------
   153 000009EA 08E0                <1>         or  al, ah                              ;   AL = 背景 | 前景;
   154                              <1> 
   155                              <1>         ;---------------------------------------
   156                              <1>         ;新しい値を出力（VRAMに代入)
   157                              <1>         ;---------------------------------------
   158 000009EC 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //プレーンに書き込む
   159                              <1> 
   160 000009EE 83C750              <1>         add     edi, 80                         ;   EDI += 80;
   161 000009F1 E2E2                <1>         loop    .10L                            ;}while(--ECX);
   162                              <1> .10E:
   163                              <1>         ;---------------------------------------
   164                              <1>         ;レジスタの復帰
   165                              <1>         ;---------------------------------------
   166 000009F3 5E                  <1>         pop     esi
   167 000009F4 5A                  <1>         pop     edx
   168 000009F5 5F                  <1>         pop     edi
   169 000009F6 59                  <1>         pop     ecx
   170 000009F7 5B                  <1>         pop     ebx
   171 000009F8 58                  <1>         pop     eax
   172                              <1> 
   173                              <1>         ;---------------------------------------
   174                              <1>         ;スタックフレームの破棄
   175                              <1>         ;---------------------------------------
   176 000009F9 89EC                <1>         mov     esp, ebp
   177 000009FB 5D                  <1>         pop     ebp
   178                              <1> 
   179 000009FC C3                  <1>         ret
   180                              <1> 
   181                              <1> vram_bit_copy:
   182                              <1>         ;-----------------------------------
   183                              <1>         ;スタックフレームの構築
   184                              <1>         ;-----------------------------------
   185                              <1>                                             ;EBP+20| 描画色
   186                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
   187                              <1>                                             ;EBP+12| VRAMアドレス
   188                              <1>                                             ;   + 8| 出力ビットパターン
   189                              <1>                                             ;   + 4| IP(戻り番号)
   190 000009FD 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
   191 000009FE 89E5                <1>         mov    ebp, esp                     ;------|---------
   192                              <1> 
   193                              <1>         ;-----------------------------------
   194                              <1>         ;レジスタの保存
   195                              <1>         ;-----------------------------------
   196 00000A00 50                  <1>         push    eax
   197 00000A01 53                  <1>         push    ebx
   198 00000A02 57                  <1>         push    edi
   199                              <1> 
   200                              <1>         ;---------------------------------------
   201                              <1>         ;引数を変数に代入
   202                              <1>         ;---------------------------------------
   203 00000A03 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   204 00000A06 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   205 00000A0A 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   206                              <1> 
   207                              <1>         ;---------------------------------------
   208                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   209                              <1>         ;---------------------------------------
   210 00000A0E 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   211 00000A10 0F94C3              <1>         setz    bl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   212 00000A13 FECB                <1>         dec     bl                              ;DL--; //0xFF or 0x00
   213                              <1> 
   214                              <1>         ;---------------------------------------
   215                              <1>         ;背景のマスクを作成
   216                              <1>         ;---------------------------------------
   217 00000A15 8A4508              <1>         mov     al, [ebp + 8]                   ;AL = 出力ビットパターン;
   218 00000A18 88C4                <1>         mov     ah, al                          ;AH ~= AL; //!出力ビットパターン(ビット反転)
   219 00000A1A F6D4                <1>         not     ah
   220                              <1> 
   221                              <1>         ;---------------------------------------
   222                              <1>         ;背景色
   223                              <1>         ;---------------------------------------
   224 00000A1C 2227                <1>         and     ah, [edi]                       ;AH = 現在値 & !出力ビットパターン
   225 00000A1E 20D8                <1>         and     al, bl                          ;AL = 表示色 & 出力ビットパターン
   226 00000A20 08E0                <1>         or      al, ah                          ;AL |= AH;
   227 00000A22 8807                <1>         mov     [edi], al                       ;[EDI] = BL; //プレーンに書き込む
   228                              <1> 
   229                              <1>         ;---------------------------------------
   230                              <1>         ;レジスタの復帰
   231                              <1>         ;---------------------------------------
   232 00000A24 5F                  <1>         pop     edi
   233 00000A25 5B                  <1>         pop     ebx
   234 00000A26 58                  <1>         pop     eax
   235                              <1> 
   236                              <1>         ;---------------------------------------
   237                              <1>         ;スタックフレームの破棄
   238                              <1>         ;---------------------------------------
   239 00000A27 89EC                <1>         mov     esp, ebp
   240 00000A29 5D                  <1>         pop     ebp
   241                              <1> 
   242 00000A2A C3                  <1>         ret
   173                                  %include        "..\modules\protect\draw_char.s"
     1                              <1> draw_char:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +20| 文字
     6                              <1>                                             ;   +16| 描画色
     7                              <1>                                             ;   +12| 行(0~29)
     8                              <1>                                             ;   + 8| 列(0~79)
     9                              <1>                                             ;   + 4| IP(戻り番号)
    10 00000A2B 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    11 00000A2C 89E5                <1>         mov    ebp, esp                     ;------|---------
    12                              <1> 
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000A2E 53                  <1>         push    ebx
    17 00000A2F 57                  <1>         push    edi
    18 00000A30 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 00000A31 0FB67514            <1>         movzx   esi, byte [ebp +20]             ;CL = 文字コード;
    24 00000A35 C1E604              <1>         shl     esi, 4                          ;CL *= 16; //1文字16バイト
    25 00000A38 0335[38020000]      <1>         add     esi, [FONT_ADR]                 ;ESI = フォントアドレス;
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;コピー先アドレスを取得
    29                              <1>         ;adr = 0xA0000 + (640 / 8 * 16) * y + x
    30                              <1>         ;---------------------------------------
    31 00000A3E 8B7D0C              <1>         mov     edi, [ebp +12]                  ;Y(行)
    32 00000A41 C1E708              <1>         shl     edi, 8                          ;EDI = Y * 256;
    33 00000A44 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]  ;EDI = Y * 4 + Y;
    34 00000A4B 037D08              <1>         add     edi, [ebp + 8]                  ;X(列)
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;同期処理(リソース解法待ち(ビジーウェイト))
    38                              <1>         ;---------------------------------------
    39                              <1> %ifdef  USE_TEST_AND_SET
    40 00000A4E 68[040B0000]E83308- <1>         cdecl   test_and_set, IN_USE            ;//リソースの空き待ち
    40 00000A56 00006683C404        <1>
    41                              <1> %endif
    42                              <1> 
    43                              <1>         ;---------------------------------------
    44                              <1>         ;1文字文のフォントを出力
    45                              <1>         ;---------------------------------------
    46 00000A5C 0FB75D10            <1>         movzx   ebx, word [ebp +16]             ; //表示色
    47                              <1> 
    48 00000A60 6A03E809FFFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;//読み込みプレーン:輝度(I)
    48 00000A69 C404                <1>
    49 00000A6B 6A08E81BFFFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;//書き込みプレーン:輝度(I)
    49 00000A74 C404                <1>
    50 00000A76 536A085756E82AFFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x08, ebx
    50 00000A7F FF6683C410          <1>
    51                              <1>         
    52 00000A84 6A02E8E5FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;//読み込みプレーン:赤(R)
    52 00000A8D C404                <1>
    53 00000A8F 6A04E8F7FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;//書き込みプレーン:赤(R)
    53 00000A98 C404                <1>
    54 00000A9A 536A045756E806FFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x04, ebx
    54 00000AA3 FF6683C410          <1>
    55                              <1> 
    56 00000AA8 6A01E8C1FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;//読み込みプレーン:緑(G)
    56 00000AB1 C404                <1>
    57 00000AB3 6A02E8D3FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;//書き込みプレーン:緑(G)
    57 00000ABC C404                <1>
    58 00000ABE 536A025756E8E2FEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x02, ebx
    58 00000AC7 FF6683C410          <1>
    59                              <1> 
    60 00000ACC 6A00E89DFEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;//読み込みプレーン:青(B)
    60 00000AD5 C404                <1>
    61 00000AD7 6A01E8AFFEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;//書き込みプレーン:青(B)
    61 00000AE0 C404                <1>
    62 00000AE2 536A015756E8BEFEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x01, ebx
    62 00000AEB FF6683C410          <1>
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;同期処理(リソース解法)
    66                              <1>         ;---------------------------------------
    67                              <1> %ifdef  USE_TEST_AND_SET
    68 00000AF0 C705[040B0000]0000- <1>         mov     [IN_USE], dword 0               ;変数のクリア
    68 00000AF8 0000                <1>
    69                              <1> %endif
    70                              <1> 
    71                              <1>         ;---------------------------------------
    72                              <1>         ;レジスタの復帰
    73                              <1>         ;---------------------------------------
    74 00000AFA 5E                  <1>         pop     esi
    75 00000AFB 5F                  <1>         pop     edi
    76 00000AFC 5B                  <1>         pop     ebx
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 00000AFD 89EC                <1>         mov     esp, ebp
    82 00000AFF 5D                  <1>         pop     ebp
    83                              <1> 
    84 00000B00 C3                  <1>         ret
    85                              <1> 
    86                              <1>         ;---------------------------------------
    87                              <1>         ;データ
    88                              <1>         ;---------------------------------------
    89 00000B01 00<rept>            <1> ALIGN   4,      db      0
    90 00000B04 00000000            <1> IN_USE:         dd      0
   174                                  %include        "..\modules\protect\draw_font.s"
     1                              <1> draw_font:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000B08 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000B09 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000B0B 50                  <1>         push    eax
    15 00000B0C 53                  <1>         push    ebx
    16 00000B0D 51                  <1>         push    ecx
    17 00000B0E 57                  <1>         push    edi
    18 00000B0F 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 00000B10 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 00000B13 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;コピー先アドレスを取得
    28                              <1>         ;---------------------------------------
    29 00000B16 B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 00000B1B 81F900010000        <1> .10L:   cmp     ecx, 256                        ;    ECX < 256;
    31 00000B21 731F                <1>         jae     .10E                            ;
    32                              <1>                                                 ;    ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示する桁位置を計算
    36                              <1>         ;---------------------------------------
    37 00000B23 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 00000B25 83E00F              <1>         and     eax, 0x0F                       ;   EAX &= 0x0F;
    39 00000B28 01F0                <1>         add     eax, esi                        ;   EAX += X;
    40                              <1>         ;---------------------------------------
    41                              <1>         ;表示する行位置を計算
    42                              <1>         ;---------------------------------------
    43 00000B2A 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    44 00000B2C C1EB04              <1>         shr     ebx, 4                          ;   EBX /= 16;
    45 00000B2F 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    46                              <1>         
    47 00000B31 516A075350E8F0FEFF- <1>         cdecl   draw_char, eax, ebx, 0x07, ecx  ;   draw_char();
    47 00000B3A FF6683C410          <1>
    48                              <1> 
    49 00000B3F 41                  <1>         inc     ecx                             ;   //for(... ECX++)
    50 00000B40 EBD9                <1>         jmp     .10L                            ;
    51                              <1> .10E:                                           ;}
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;レジスタの復帰
    55                              <1>         ;---------------------------------------
    56 00000B42 5E                  <1>         pop     esi
    57 00000B43 5F                  <1>         pop     edi
    58 00000B44 59                  <1>         pop     ecx
    59 00000B45 5B                  <1>         pop     ebx
    60 00000B46 58                  <1>         pop     eax
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;スタックフレームの破棄
    64                              <1>         ;---------------------------------------
    65 00000B47 89EC                <1>         mov     esp, ebp
    66 00000B49 5D                  <1>         pop     ebp
    67                              <1> 
    68 00000B4A C3                  <1>         ret
   175                                  %include        "..\modules\protect\draw_str.s"
     1                              <1> draw_str:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000B4B 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000B4C 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000B4E 50                  <1>         push    eax
    15 00000B4F 53                  <1>         push    ebx
    16 00000B50 51                  <1>         push    ecx
    17 00000B51 52                  <1>         push    edx
    18 00000B52 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 00000B53 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = 列;
    24 00000B56 8B550C              <1>         mov     edx, [ebp +12]                  ;EDX = 行;
    25 00000B59 0FB75D10            <1>         movzx   ebx, word [ebp + 16]            ;EBX = 表示色;
    26 00000B5D 8B7514              <1>         mov     esi, [ebp +20]                  ;ESI = 文字列へのアドレス;
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字列を表示
    30                              <1>         ;---------------------------------------
    31 00000B60 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
    32                              <1> .10L:                                           ;do
    33                              <1>                                                 ;{
    34 00000B61 AC                  <1>         lodsb                                   ;   AL = *ESI++;
    35 00000B62 3C00                <1>         cmp     al, 0                           ;   if(0 == AL)
    36 00000B64 741A                <1>         je  .10E                                ;       break;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;システムコールを利用して文字を出力する
    40                              <1>         ;---------------------------------------
    41                              <1> %ifdef  USE_SYSTEM_CALL
    42 00000B66 CD81                <1>         int     0x81                            ;       sys_call(1, X, Y, 色, 文字);
    43                              <1> %else
    44                              <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;       draw_char();
    45                              <1> %endif
    46                              <1> 
    47                              <1>         ;---------------------------------------
    48                              <1>         ;文字の表示位置を更新
    49                              <1>         ;---------------------------------------
    50 00000B68 41                  <1>         inc     ecx                             ;   ECX++; //列を加算
    51 00000B69 83F950              <1>         cmp     ecx, 80                         ;   if(80 <= ECX) //80文字以上?
    52 00000B6C 7C10                <1>         jl      .12E                            ;   {
    53 00000B6E B900000000          <1>         mov     ecx, 0                          ;       ECX = 0; //列を初期化
    54 00000B73 42                  <1>         inc     edx                             ;       EDX++; //行を加算
    55 00000B74 83FA1E              <1>         cmp     edx, 30                         ;       if(30 <= EDX) //30行以上?
    56 00000B77 7C05                <1>         jl      .12E                            ;       {
    57 00000B79 BA00000000          <1>         mov     edx, 0                          ;           EDX = 0;
    58                              <1>                                                 ;       }
    59                              <1> .12E:                                           ;   }
    60 00000B7E EBE1                <1>         jmp     .10L                            ;
    61                              <1> .10E:                                           ;}while(1);
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 00000B80 5E                  <1>         pop     esi
    67 00000B81 5A                  <1>         pop     edx
    68 00000B82 59                  <1>         pop     ecx
    69 00000B83 5B                  <1>         pop     ebx
    70 00000B84 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 00000B85 89EC                <1>         mov     esp, ebp
    76 00000B87 5D                  <1>         pop     ebp
    77                              <1> 
    78 00000B88 C3                  <1>         ret
   176                                  %include        "..\modules\protect\draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000B89 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000B8A 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000B8C 50                  <1>         push    eax
    15 00000B8D 53                  <1>         push    ebx
    16 00000B8E 51                  <1>         push    ecx
    17 00000B8F 52                  <1>         push    edx
    18 00000B90 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 00000B91 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 00000B94 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;カラーバーを表示
    28                              <1>         ;---------------------------------------
    29 00000B97 B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 00000B9C 83F910              <1> .10L:   cmp     ecx, 16                         ;    ECX < 16;
    31 00000B9F 732E                <1>         jae     .10E
    32                              <1>                                                 ;ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示位置を計算(列)
    36                              <1>         ;---------------------------------------
    37 00000BA1 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 00000BA3 83E001              <1>         and     eax, 0x01                       ;   EAX &= 0x01;
    39 00000BA6 C1E003              <1>         shl     eax, 3                          ;   EAX *= 8; //8文字分乗算
    40 00000BA9 01F0                <1>         add     eax, esi                        ;   EAX += X;
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;表示位置を計算(行)
    44                              <1>         ;---------------------------------------
    45 00000BAB 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    46 00000BAD D1EB                <1>         shr     ebx, 1                          ;   EBX /= 2;
    47 00000BAF 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    48                              <1> 
    49                              <1>         ;---------------------------------------
    50                              <1>         ;描画色を計算
    51                              <1>         ;---------------------------------------
    52 00000BB1 89CA                <1>         mov     edx, ecx                        ;   EDX = ECX;
    53 00000BB3 D1E2                <1>         shl     edx, 1                          ;   EDX *= 2;
    54 00000BB5 8B92[E10B0000]      <1>         mov     edx, [.t0 + edx]                ;   EDX += Y;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;カラーバーを表示
    58                              <1>         ;---------------------------------------
    59 00000BBB 68[D80B0000]525350- <1>         cdecl   draw_str, eax, ebx, edx, .s0    ;   draw_str();
    59 00000BC3 E883FFFFFF6683C410  <1>
    60                              <1> 
    61 00000BCC 41                  <1>         inc     ecx                             ;   //for(...ECX++
    62 00000BCD EBCD                <1>         jmp     .10L                            ;
    63                              <1> .10E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;レジスタの復帰
    67                              <1>         ;---------------------------------------
    68 00000BCF 5E                  <1>         pop     esi
    69 00000BD0 5A                  <1>         pop     edx
    70 00000BD1 59                  <1>         pop     ecx
    71 00000BD2 5B                  <1>         pop     ebx
    72 00000BD3 58                  <1>         pop     eax
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;スタックフレームの破棄
    76                              <1>         ;---------------------------------------
    77 00000BD4 89EC                <1>         mov     esp, ebp
    78 00000BD6 5D                  <1>         pop     ebp
    79                              <1> 
    80 00000BD7 C3                  <1>         ret
    81                              <1> 
    82                              <1>         ;---------------------------------------
    83                              <1>         ;データ
    84                              <1>         ;---------------------------------------
    85 00000BD8 202020202020202000  <1> .s0:    db  '        ', 0                       ;8文字分のスペース(表示色だけを変更)
    86                              <1> 
    87 00000BE1 00000008            <1> .t0:    dw  0x0000, 0x0800                      ;カラーバーの背景色
    88 00000BE5 00010009            <1>         dw  0x0100, 0x0900
    89 00000BE9 0002000A            <1>         dw  0x0200, 0x0A00
    90 00000BED 0003000B            <1>         dw  0x0300, 0x0B00
    91 00000BF1 0004000C            <1>         dw  0x0400, 0x0C00
    92 00000BF5 0005000D            <1>         dw  0x0500, 0x0D00
    93 00000BF9 0006000E            <1>         dw  0x0600, 0x0E00
    94 00000BFD 0007000F            <1>         dw  0x0700, 0x0F00
   177                                  %include        "..\modules\protect\draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +16| 色
     6                              <1>                                             ;   +12| Y(行)
     7                              <1>                                             ;   + 8| X(列)
     8                              <1>                                             ;   + 4| IP(戻り番号)
     9 00000C01 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    10 00000C02 89E5                <1>         mov    ebp, esp                     ;------|---------
    11                              <1> 
    12                              <1>         ;-----------------------------------
    13                              <1>         ;レジスタの保存
    14                              <1>         ;-----------------------------------
    15 00000C04 50                  <1>         push    eax
    16 00000C05 53                  <1>         push    ebx
    17 00000C06 51                  <1>         push    ecx
    18 00000C07 57                  <1>         push    edi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;描画位置のメモリアドレスを計算
    22                              <1>         ;---------------------------------------
    23                              <1>         ;---------------------------------------
    24                              <1>         ;Y座標を80倍する(640/8)
    25                              <1>         ;---------------------------------------
    26 00000C08 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y座標;
    27 00000C0B C1E704              <1>         shl     edi, 4                          ;EDI *= 16;
    28 00000C0E 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000] ;EDI = 0xA_0000[EDI * 4 + EDI];
    29                              <1>         
    30                              <1>         ;---------------------------------------
    31                              <1>         ;X座標を1/8して加算
    32                              <1>         ;---------------------------------------
    33 00000C15 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;EBX = X座標;
    34 00000C18 89D9                <1>         mov     ecx, ebx                        ;ECX = X座標; //一時保存
    35 00000C1A C1EB03              <1>         shr     ebx, 3                          ;EBX /= 8;
    36 00000C1D 01DF                <1>         add     edi, ebx                        ;EDI += EBX;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;X座標を8で割った余りからビット位置を計算(出力ビットパターン)
    40                              <1>         ;(0=0x80, 1=0x40,... 7=0x01)
    41                              <1>         ;---------------------------------------
    42 00000C1F 83E107              <1>         and     ecx, 0x07                       ;ECX = X & 0x07;
    43 00000C22 BB80000000          <1>         mov     ebx, 0x80                       ;EBX = 0x80;
    44 00000C27 D3EB                <1>         shr     ebx, cl                         ;EBX >>= ECX;
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;色を指定
    48                              <1>         ;---------------------------------------
    49 00000C29 8B4D10              <1>         mov     ecx, [ebp +16]                  ;表示色
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;プレーンごとに出力
    53                              <1>         ;---------------------------------------
    54 00000C2C 6A03E83DFDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;輝度(I)プレーンを選択
    54 00000C35 C404                <1>
    55 00000C37 6A08E84FFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;輝度(I)プレーンを選択
    55 00000C40 C404                <1>
    56 00000C42 516A085753E8B1FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    56 00000C4B FF6683C410          <1>
    57                              <1> 
    58 00000C50 6A02E819FDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;赤(R)プレーンを選択
    58 00000C59 C404                <1>
    59 00000C5B 6A04E82BFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;赤(R)プレーンを選択
    59 00000C64 C404                <1>
    60 00000C66 516A045753E88DFDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    60 00000C6F FF6683C410          <1>
    61                              <1> 
    62 00000C74 6A01E8F5FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;緑(G)プレーンを選択
    62 00000C7D C404                <1>
    63 00000C7F 6A02E807FDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;緑(G)プレーンを選択
    63 00000C88 C404                <1>
    64 00000C8A 516A025753E869FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    64 00000C93 FF6683C410          <1>
    65                              <1> 
    66 00000C98 6A00E8D1FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;青(B)プレーンを選択
    66 00000CA1 C404                <1>
    67 00000CA3 6A01E8E3FCFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;青(B)プレーンを選択
    67 00000CAC C404                <1>
    68 00000CAE 516A015753E845FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    68 00000CB7 FF6683C410          <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;レジスタの復帰
    72                              <1>         ;---------------------------------------
    73 00000CBC 5F                  <1>         pop     edi
    74 00000CBD 59                  <1>         pop     ecx
    75 00000CBE 5B                  <1>         pop     ebx
    76 00000CBF 58                  <1>         pop     eax
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 00000CC0 89EC                <1>         mov     esp, ebp
    82 00000CC2 5D                  <1>         pop     ebp
    83                              <1> 
    84 00000CC3 C3                  <1>         ret
   178                                  %include        "..\modules\protect\draw_line.s"
     1                              <1> draw_line:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000CC4 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000CC5 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;変数を定義
    16                              <1>         ;-----------------------------------
    17 00000CC7 6A00                <1>         push    dword 0                     ;   - 4| sum = 0; //相対軸の積算値
    18 00000CC9 6A00                <1>         push    dword 0                     ;   - 8| x0 = 0; //X座標
    19 00000CCB 6A00                <1>         push    dword 0                     ;   -12| dx = 0; //X増分
    20 00000CCD 6A00                <1>         push    dword 0                     ;   -16| inc_x = 0; //X座標増分(基準軸:1 or -1)
    21 00000CCF 6A00                <1>         push    dword 0                     ;   -20| y0 = 0; //Y座標
    22 00000CD1 6A00                <1>         push    dword 0                     ;   -24| dy = 0; //Y増分
    23 00000CD3 6A00                <1>         push    dword 0                     ;   -28| inc_y = 0; //Y座標増分(基準軸:1 or -1)
    24                              <1> 
    25                              <1>         ;-----------------------------------
    26                              <1>         ;レジスタの保存
    27                              <1>         ;-----------------------------------
    28 00000CD5 50                  <1>         push    eax
    29 00000CD6 53                  <1>         push    ebx
    30 00000CD7 51                  <1>         push    ecx
    31 00000CD8 57                  <1>         push    edi
    32 00000CD9 52                  <1>         push    edx
    33 00000CDA 56                  <1>         push    esi
    34                              <1> 
    35                              <1>         ;---------------------------------------
    36                              <1>         ;幅を計算(X軸)
    37                              <1>         ;---------------------------------------
    38 00000CDB 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    39 00000CDE 8B5D10              <1>         mov     ebx, [ebp +16]                  ;EBX = X1;
    40 00000CE1 29C3                <1>         sub     ebx, eax                        ;EBX = X1 - X0; //幅
    41 00000CE3 7D09                <1>         jge     .10F                            ;if(幅 < 0)
    42                              <1>                                                 ;{
    43 00000CE5 F7DB                <1>         neg     ebx                             ;   幅 *= -1;
    44 00000CE7 BEFFFFFFFF          <1>         mov     esi, -1                         ;   //X座標の増分
    45 00000CEC EB05                <1>         jmp     .10E                            ;}
    46                              <1> .10F:                                           ;else
    47                              <1>                                                 ;{
    48 00000CEE BE01000000          <1>         mov     esi, 1                          ;   //X座標の増分
    49                              <1> .10E:                                           ;}
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;高さを計算(Y軸)
    53                              <1>         ;---------------------------------------
    54 00000CF3 8B4D0C              <1>         mov     ecx, [ebp +12]                  ;ECX = Y0;
    55 00000CF6 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    56 00000CF9 29CA                <1>         sub     edx, ecx                        ;EDX = Y1 - Y0; //高さ
    57 00000CFB 7D09                <1>         jge     .20F                            ;if(高さ < 0)
    58                              <1>                                                 ;{
    59 00000CFD F7DA                <1>         neg     edx                             ;   高さ *= -1;
    60 00000CFF BFFFFFFFFF          <1>         mov     edi, -1                         ;   //Y座標の増分
    61 00000D04 EB05                <1>         jmp     .20E                            ;}
    62                              <1> .20F:                                           ;else
    63                              <1>                                                 ;{
    64 00000D06 BF01000000          <1>         mov     edi, 1                          ;   //Y座標の増分
    65                              <1> .20E:                                           ;}
    66                              <1>         
    67                              <1>         ;---------------------------------------
    68                              <1>         ;X軸
    69                              <1>         ;---------------------------------------
    70 00000D0B 8945F8              <1>         mov     [ebp - 8], eax                  ;//X軸:開始座標
    71 00000D0E 895DF4              <1>         mov     [ebp -12], ebx                  ;//X軸:描画幅
    72 00000D11 8975F0              <1>         mov     [ebp -16], esi                  ;//X軸:増分(基準軸:1 or -1)
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;Y軸
    76                              <1>         ;---------------------------------------
    77 00000D14 894DEC              <1>         mov     [ebp -20], ecx                  ;//Y軸:開始座標
    78 00000D17 8955E8              <1>         mov     [ebp -24], edx                  ;//Y軸:描画幅
    79 00000D1A 897DE4              <1>         mov     [ebp -28], edi                  ;//Y軸:増分(基準軸:1 or -1)
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;基準軸を決める
    83                              <1>         ;---------------------------------------
    84 00000D1D 39D3                <1>         cmp     ebx, edx                        ;if(幅 <= 高さ)
    85 00000D1F 7F08                <1>         jg      .22F                            ;{
    86                              <1>         
    87 00000D21 8D75EC              <1>         lea     esi, [ebp -20]                  ;   //X軸が基準軸
    88 00000D24 8D7DF8              <1>         lea     edi, [ebp - 8]                  ;   //Y軸が相対軸
    89                              <1> 
    90 00000D27 EB06                <1>         jmp     .22E                            ;}
    91                              <1> .22F:                                           ;else
    92                              <1>                                                 ;{
    93 00000D29 8D75F8              <1>         lea     esi, [ebp - 8]                  ;   //Y軸が基準軸
    94 00000D2C 8D7DEC              <1>         lea     edi, [ebp -20]                  ;   //X軸が相対軸
    95                              <1> .22E:                                           ;}
    96                              <1> 
    97                              <1>         ;---------------------------------------
    98                              <1>         ;繰り返し回数(基準軸のドット数)(基準軸の長さが0な場合,繰り返し回数を1に設定し,1ピクセルの点を描画)
    99                              <1>         ;---------------------------------------
   100 00000D2F 8B4EFC              <1>         mov     ecx, [esi - 4]                  ;ECX = 基準軸描画幅
   101 00000D32 83F900              <1>         cmp     ecx, 0                          ;if(0 == ECX)
   102 00000D35 7505                <1>         jnz     .30E                            ;{
   103 00000D37 B901000000          <1>         mov     ecx, 1                          ;   ECX = 1;
   104                              <1> .30E:                                           ;}
   105                              <1> 
   106                              <1>         ;---------------------------------------
   107                              <1>         ;線を描画
   108                              <1>         ;---------------------------------------
   109                              <1> .50L:                                           ;do
   110                              <1>                                                 ;{
   111                              <1>         
   112                              <1>         ;---------------------------------------
   113                              <1>         ;同期処理
   114                              <1>         ;---------------------------------------
   115                              <1> %ifdef  USE_SYSTEM_CALL
   116 00000D3C 89C8                <1>         mov     eax, ecx                        ;       //繰り返し回数を保存
   117                              <1> 
   118 00000D3E 8B5D18              <1>         mov     ebx, [ebp +24]                  ;       EBX = 表示色;
   119 00000D41 8B4DF8              <1>         mov     ecx, [ebp - 8]                  ;       ECX = X座標;
   120 00000D44 8B55EC              <1>         mov     edx, [ebp -20]                  ;       ECX = Y座標;
   121 00000D47 CD82                <1>         int     0x82                            ;       sys_call(1, X, Y, 色, 文字); //BX(C), CX(X), DX(Y)
   122                              <1> 
   123 00000D49 89C1                <1>         mov     ecx, eax
   124                              <1> %else
   127                              <1>         cdecl   draw_pixel, dword [ebp - 8],                             dword [ebp -20],                             dword [ebp +24]     ;   //点の描画
   128                              <1> %endif
   129                              <1> 
   130                              <1>         ;---------------------------------------
   131                              <1>         ;基準軸を更新
   132                              <1>         ;---------------------------------------
   133 00000D4B 8B46F8              <1>         mov     eax, [esi - 8]                  ;   EAX = 基準軸増加(1 or -1);
   134 00000D4E 0106                <1>         add     [esi - 0], eax                  ;
   135                              <1> 
   136                              <1>         ;---------------------------------------
   137                              <1>         ;相対軸を更新
   138                              <1>         ;---------------------------------------
   139 00000D50 8B45FC              <1>         mov     eax, [ebp - 4]                  ;   EAX = sum;  //相対軸の積算値
   140 00000D53 0347FC              <1>         add     eax, [edi - 4]                  ;   EAX += dy;  //増加(相対軸の描画幅)
   141                              <1> 
   142 00000D56 8B5EFC              <1>         mov     ebx, [esi - 4]                  ;   EBX = dx;   //増分(基準軸の描画幅)
   143                              <1> 
   144 00000D59 39D8                <1>         cmp     eax, ebx                        ;   if(積算値 <= 相対軸の増分)
   145 00000D5B 7C07                <1>         jl      .52E                            ;   {
   146 00000D5D 29D8                <1>         sub     eax, ebx                        ;       EAX -= EBX; //積算値から相対軸の増分を減算
   147                              <1>                                                 ;       //相対軸の座標を更新(1ドット分)
   148 00000D5F 8B5FF8              <1>         mov     ebx, [edi - 8]                  ;       EBX = 相対軸増分;
   149 00000D62 011F                <1>         add     [edi - 0], ebx                  ;       相対軸座標 = EBX;
   150                              <1> .52E:                                           ;   }
   151                              <1> 
   152 00000D64 8945FC              <1>         mov     [ebp - 4], eax                  ;//積算値を更新
   153                              <1> 
   154 00000D67 E2D3                <1>         loop    .50L
   155                              <1> .50E:                                           ;} while(ループ回数--);
   156                              <1> 
   157                              <1>         ;---------------------------------------
   158                              <1>         ;レジスタの復帰
   159                              <1>         ;---------------------------------------
   160 00000D69 5E                  <1>         pop     esi
   161 00000D6A 5A                  <1>         pop     edx
   162 00000D6B 5F                  <1>         pop     edi
   163 00000D6C 59                  <1>         pop     ecx
   164 00000D6D 5B                  <1>         pop     ebx
   165 00000D6E 58                  <1>         pop     eax
   166                              <1> 
   167                              <1>         ;---------------------------------------
   168                              <1>         ;スタックフレームの破棄
   169                              <1>         ;---------------------------------------
   170 00000D6F 89EC                <1>         mov     esp, ebp
   171 00000D71 5D                  <1>         pop     ebp
   172                              <1> 
   173 00000D72 C3                  <1>         ret
   179                                  %include        "..\modules\protect\draw_rect.s"
     1                              <1> draw_rect:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000D73 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000D74 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000D76 50                  <1>         push    eax
    17 00000D77 53                  <1>         push    ebx
    18 00000D78 51                  <1>         push    ecx
    19 00000D79 52                  <1>         push    edx
    20 00000D7A 56                  <1>         push    esi
    21                              <1> 
    22                              <1>         ;---------------------------------------
    23                              <1>         ;変数に引数を代入
    24                              <1>         ;---------------------------------------
    25 00000D7B 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    26 00000D7E 8B5D0C              <1>         mov     ebx, [ebp +12]                  ;EBX = Y0;
    27 00000D81 8B4D10              <1>         mov     ecx, [ebp +16]                  ;ECX = X1;
    28 00000D84 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    29 00000D87 8B7518              <1>         mov     esi, [ebp +24]                  ;ESI = 色;
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;座標軸の大小を確定
    33                              <1>         ;---------------------------------------
    34 00000D8A 39C8                <1>         cmp     eax, ecx                        ;if(X1 < X0)
    35 00000D8C 7C01                <1>         jl      .10E                            ;{
    36 00000D8E 91                  <1>         xchg    eax, ecx                        ;   //X0とX1を入れ替える;
    37                              <1> .10E:                                           ;}
    38                              <1> 
    39 00000D8F 39D3                <1>         cmp     ebx, edx                        ;if(Y1 < Y0)
    40 00000D91 7C02                <1>         jl      .20E                            ;{
    41 00000D93 87DA                <1>         xchg    ebx, edx                        ;   //Y0とY1を入れ替える;
    42                              <1> .20E:                                           ;}
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;矩形を描画
    46                              <1>         ;---------------------------------------
    47 00000D95 5653515350E825FFFF- <1>         cdecl   draw_line, eax, ebx, ecx, ebx, esi  ;上線
    47 00000D9E FF6683C414          <1>
    48 00000DA3 5652505350E817FFFF- <1>         cdecl   draw_line, eax, ebx, eax, edx, esi  ;左線
    48 00000DAC FF6683C414          <1>
    49                              <1> 
    50 00000DB1 4A                  <1>         dec     edx                                 ;EDX--; //下線は1ドット上げる
    51 00000DB2 5652515250E808FFFF- <1>         cdecl   draw_line, eax, edx, ecx, edx, esi  ;下線
    51 00000DBB FF6683C414          <1>
    52 00000DC0 42                  <1>         inc     edx
    53                              <1> 
    54 00000DC1 49                  <1>         dec     ecx                                 ;ECX--; //右線は1ドット左に移動
    55 00000DC2 5652515351E8F8FEFF- <1>         cdecl   draw_line, ecx, ebx, ecx, edx, esi  ;右線
    55 00000DCB FF6683C414          <1>
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの復帰
    59                              <1>         ;---------------------------------------
    60 00000DD0 5E                  <1>         pop     esi
    61 00000DD1 5A                  <1>         pop     edx
    62 00000DD2 59                  <1>         pop     ecx
    63 00000DD3 5B                  <1>         pop     ebx
    64 00000DD4 58                  <1>         pop     eax
    65                              <1> 
    66                              <1>         ;---------------------------------------
    67                              <1>         ;スタックフレームの破棄
    68                              <1>         ;---------------------------------------
    69 00000DD5 89EC                <1>         mov     esp, ebp
    70 00000DD7 5D                  <1>         pop     ebp
    71                              <1> 
    72 00000DD8 C3                  <1>         ret
   180                                  %include        "..\modules\protect\itoa.s"
     1                              <1> itoa:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000DD9 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000DDA 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000DDC 50                  <1>         push    eax
    18 00000DDD 53                  <1>         push    ebx
    19 00000DDE 51                  <1>         push    ecx
    20 00000DDF 52                  <1>         push    edx
    21 00000DE0 56                  <1>         push    esi
    22 00000DE1 57                  <1>         push    edi
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;引数の取得
    26                              <1>         ;---------------------------------------
    27 00000DE2 8B4508              <1>         mov     eax, [ebp + 8]                  ;eax(val) =  数値;
    28 00000DE5 8B750C              <1>         mov     esi, [ebp + 12]                 ;esi(dst) = バッファアドレス;
    29 00000DE8 8B4D10              <1>         mov     ecx, [ebp + 16]                 ;ecx(size) = バッファサイズ;
    30                              <1> 
    31 00000DEB 89F7                <1>         mov     edi, esi                        ;edi = esi(dst); //バッファの最後尾
    32 00000DED 01CF                <1>         add     edi, ecx                        ;edi(dst) = edi + ecx - 1;
    33 00000DEF 4F                  <1>         dec     edi
    34                              <1> 
    35 00000DF0 8B5D18              <1>         mov     ebx, [ebp + 24]            ;flags = オプション;
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;符号付き判定
    39                              <1>         ;---------------------------------------
    40 00000DF3 F7C301000000        <1>         test    ebx, 0b0001                      ;if(flags & 0x01) //符号付き
    41 00000DF9 7408                <1> .10Q:   je      .10E                            ;{
    42 00000DFB 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    43 00000DFE 7D03                <1> .12Q:   jge     .12E                            ;   {
    44 00000E00 83CB02              <1>         or      ebx, 0b0010                     ;       flags |= 2; //符号表示
    45                              <1> .12E:                                           ;   }
    46                              <1> .10E:                                           ;}
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;符号付き判定
    50                              <1>         ;---------------------------------------
    51 00000E03 F7C302000000        <1>         test    ebx, 0b0010                     ;if(flags & 0x02) //符号出力判定
    52 00000E09 7410                <1> .20Q:   je      .20E                            ;{
    53 00000E0B 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    54 00000E0E 7D07                <1> .22Q:   jge     .22F                            ;   {
    55 00000E10 F7D8                <1>         neg     eax                             ;       val *= -1; //符号反転
    56 00000E12 C6062D              <1>         mov     [esi], byte '-'                 ;       *dst = '-'; //符号表示
    57 00000E15 EB03                <1>         jmp     .22E                            ;   }
    58                              <1> .22F:                                           ;   else
    59                              <1>                                                 ;   {
    60 00000E17 C6062B              <1>         mov     [esi], byte '+'                 ;       *dst = '+'; //符号表示
    61                              <1> .22E:                                           ;   }
    62 00000E1A 49                  <1>         dec     ecx                             ;   size--;     //残りバッファサイズの減算
    63                              <1> .20E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;ASCII変換
    67                              <1>         ;---------------------------------------
    68 00000E1B 8B5D14              <1>         mov     ebx, [ebp + 20]                 ;BX = 基数;
    69                              <1> .30L:                                           ;do
    70                              <1>                                                 ;{
    71 00000E1E BA00000000          <1>         mov     edx, 0                          ;
    72 00000E23 F7F3                <1>         div     ebx                             ;   DX = DX:AX % 基数;
    73                              <1>                                                 ;   AX = DX:AX / 基数;
    74                              <1>                                                 ;
    75 00000E25 89D6                <1>         mov     esi, edx                        ;   //テーブル参照
    76 00000E27 8A96[520E0000]      <1>         mov     dl, byte [.ascii + esi]         ;   DL = ASCII[DX]
    77                              <1>                                                 ;
    78 00000E2D 8817                <1>         mov     [edi], dl                       ;   *dst = DL;
    79 00000E2F 4F                  <1>         dec     edi                             ;   dst--;
    80                              <1>                                                 ;
    81 00000E30 83F800              <1>         cmp     eax, 0                          ;
    82 00000E33 E0E9                <1>         loopnz  .30L                            ;}while(AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;---------------------------------------
    86                              <1>         ;空欄を埋める
    87                              <1>         ;---------------------------------------
    88 00000E35 83F900              <1>         cmp     ecx, 0                          ;if(size)
    89 00000E38 740E                <1> .40Q:   je      .40E                            ;{
    90 00000E3A B020                <1>         mov     al, ' '                         ;       AL = ' '; // ' 'で埋める(デフォルト値)
    91 00000E3C 66837D1804          <1>         cmp     [ebp + 24], word 0b0100         ;       if(flags & 0x04)
    92 00000E41 7502                <1> .42Q:   jne     .42E                            ;           {
    93 00000E43 B030                <1>         mov     al, '0'                         ;               AL = '0'; // '0'で埋める
    94                              <1> .42E:                                           ;           }
    95 00000E45 FD                  <1>         std                                     ;       // DF = 1(-方向)
    96 00000E46 F3AA                <1>         rep     stosb                           ;       while(--CX) *DI -- = AL;
    97                              <1> .40E:                                           ;}
    98                              <1>         
    99                              <1>         ;---------------------------------------
   100                              <1>         ;レジスタの復帰
   101                              <1>         ;---------------------------------------
   102 00000E48 5F                  <1>         pop     edi
   103 00000E49 5E                  <1>         pop     esi
   104 00000E4A 5A                  <1>         pop     edx
   105 00000E4B 59                  <1>         pop     ecx
   106 00000E4C 5B                  <1>         pop     ebx
   107 00000E4D 58                  <1>         pop     eax
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;スタックフレームの破棄
   111                              <1>         ;---------------------------------------
   112 00000E4E 89EC                <1>         mov     esp, ebp
   113 00000E50 5D                  <1>         pop     ebp
   114                              <1> 
   115 00000E51 C3                  <1>         ret
   116                              <1> 
   117 00000E52 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   117 00000E5B 39414243444546      <1>
   181                                  %include        "..\modules\protect\rtc.s"
     1                              <1> rtc_get_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 保存先アドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000E62 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000E63 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000E65 53                  <1>         push    ebx
    14                              <1> 
    15                              <1>         ;---------------------------------------
    16                              <1>         ;RTCから必要な情報を取得
    17                              <1>         ;---------------------------------------
    18 00000E66 B00A                <1>         mov     al, 0x0A                        ;//レジスタA
    19 00000E68 E670                <1>         out     0x70, al                        ;outp(0x70, AL);
    20 00000E6A E471                <1>         in      al, 0x71                        ;AL = レジスタA
    21 00000E6C A880                <1>         test    al, 0x80                        ;if(UIP) //更新中
    22 00000E6E 7407                <1>         je      .10F                            ;{
    23 00000E70 B801000000          <1>         mov     eax, 1                          ;   return 0; //データ更新中
    24 00000E75 EB27                <1>         jmp     .10E                            ;}
    25                              <1> .10F:                                           ;else
    26                              <1>                                                 ;{
    27 00000E77 B004                <1>         mov     al, 0x04                        ;   AL = 0x04;
    28 00000E79 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    29 00000E7B E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //時データ
    30                              <1> 
    31 00000E7D C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    32                              <1> 
    33 00000E80 B002                <1>         mov     al, 0x02                        ;   AL = 0x02;
    34 00000E82 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    35 00000E84 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //分データ
    36                              <1> 
    37 00000E86 C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    38                              <1> 
    39                              <1>                                                 ;   RAM[0x00]:秒
    40 00000E89 B000                <1>         mov     al, 0x00                        ;   AL = 0x00;
    41 00000E8B E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    42 00000E8D E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //秒データ
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;有効なデータのみをアドレス先へ保存
    46                              <1>         ;---------------------------------------
    47 00000E8F 25FFFFFF00          <1>         and     eax, 0x00_FF_FF_FF              ;//下位3バイトのみ有効
    48                              <1> 
    49 00000E94 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;dst = 保存先;
    50 00000E97 8903                <1>         mov     [ebx], eax                      ;[dst] = 時刻;
    51                              <1>         
    52 00000E99 B801000000          <1>         mov     eax, 1                          ;   return 1; //正常終了
    53                              <1> .10E:                                           ;}
    54                              <1> 
    55                              <1>         ;---------------------------------------
    56                              <1>         ;レジスタの復帰
    57                              <1>         ;---------------------------------------
    58 00000E9E 5B                  <1>         pop     ebx
    59                              <1> 
    60                              <1>         ;---------------------------------------
    61                              <1>         ;スタックフレームの破棄
    62                              <1>         ;---------------------------------------
    63 00000E9F 89EC                <1>         mov     esp, ebp
    64 00000EA1 5D                  <1>         pop     ebp
    65                              <1> 
    66 00000EA2 C3                  <1>         ret
   182                                  %include        "..\modules\protect\draw_time.s"
     1                              <1> draw_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000EA3 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000EA4 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000EA6 50                  <1>         push    eax
    18 00000EA7 53                  <1>         push    ebx
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;数字を文字に変換
    22                              <1>         ;---------------------------------------
    23 00000EA8 8B4514              <1>         mov     eax, [ebp +20]                  ;EAX = 時刻データ;
    24                              <1> 
    25 00000EAB 0FB6D8              <1>         movzx   ebx, al                         ;EBX = 秒;
    26 00000EAE 6A046A106A0268-     <1>         cdecl   itoa, ebx, .sec, 2, 16, 0b0100  ;//文字を変換
    26 00000EB5 [150F0000]53E81AFF- <1>
    26 00000EBD FFFF6683C414        <1>
    27                              <1> 
    28 00000EC3 88E3                <1>         mov     bl, ah                          ;EBX = 分;
    29 00000EC5 6A046A106A0268-     <1>         cdecl   itoa, ebx, .min, 2, 16, 0b0100  ;//文字に変換
    29 00000ECC [120F0000]53E803FF- <1>
    29 00000ED4 FFFF6683C414        <1>
    30                              <1> 
    31 00000EDA C1E810              <1>         shr     eax, 16                         ;EBX = 時;
    32 00000EDD 6A046A106A0268-     <1>         cdecl   itoa, eax, .hour, 2, 16, 0b0100 ;//文字に変換
    32 00000EE4 [0F0F0000]50E8EBFE- <1>
    32 00000EEC FFFF6683C414        <1>
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;文字列を表示
    36                              <1>         ;---------------------------------------
    37 00000EF2 68[0F0F0000]FF7510- <1>         cdecl   draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    37 00000EFA FF750CFF7508E846FC- <1>
    37 00000F03 FFFF6683C410        <1>
    38                              <1>         
    39                              <1>         ;---------------------------------------
    40                              <1>         ;レジスタの復帰
    41                              <1>         ;---------------------------------------
    42 00000F09 5B                  <1>         pop     ebx
    43 00000F0A 58                  <1>         pop     eax
    44                              <1> 
    45                              <1>         ;---------------------------------------
    46                              <1>         ;スタックフレームの破棄
    47                              <1>         ;---------------------------------------
    48 00000F0B 89EC                <1>         mov     esp, ebp
    49 00000F0D 5D                  <1>         pop     ebp
    50                              <1> 
    51 00000F0E C3                  <1>         ret
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;データ
    55                              <1>         ;---------------------------------------
    56 00000F0F 5A5A3A              <1>         .hour:  db  "ZZ:"
    57 00000F12 5A5A3A              <1>         .min:   db  "ZZ:"
    58 00000F15 5A5A00              <1>         .sec:   db  "ZZ", 0
   183                                  %include        "..\modules\protect\interrupt.s"
     1                              <1> int_stop:
     2 00000F18 FB                  <1>         sti                                     ;//割り込み許可
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;EAXで示される文字列を表示
     6                              <1>         ;---------------------------------------
     7 00000F19 50680F0600006A0F6A- <1>         cdecl   draw_str, 25, 15, 0x060F, eax   ;draw_str(EAX);
     7 00000F22 19E823FCFFFF6683C4- <1>
     7 00000F2B 10                  <1>
     8                              <1>         
     9                              <1>         ;---------------------------------------
    10                              <1>         ;スタックのデータを文字列に変換
    11                              <1>         ;---------------------------------------
    12 00000F2C 8B0424              <1>         mov     eax, [esp + 0]                  ;EAX = ESP[ 0];
    13 00000F2F 6A046A106A0868-     <1>         cdecl   itoa, eax, .p1, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    13 00000F36 [F40F0000]50E899FE- <1>
    13 00000F3E FFFF6683C414        <1>
    14                              <1> 
    15 00000F44 8B442404            <1>         mov     eax, [esp + 4]                  ;EAX = ESP[ 4];
    16 00000F48 6A046A106A0868-     <1>         cdecl   itoa, eax, .p2, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    16 00000F4F [05100000]50E880FE- <1>
    16 00000F57 FFFF6683C414        <1>
    17                              <1> 
    18 00000F5D 8B442408            <1>         mov     eax, [esp + 8]                  ;EAX = ESP[ 8];
    19 00000F61 6A046A106A0868-     <1>         cdecl   itoa, eax, .p3, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    19 00000F68 [16100000]50E867FE- <1>
    19 00000F70 FFFF6683C414        <1>
    20                              <1> 
    21 00000F76 8B44240C            <1>         mov     eax, [esp +12]                  ;EAX = ESP[12];
    22 00000F7A 6A046A106A0868-     <1>         cdecl   itoa, eax, .p4, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    22 00000F81 [27100000]50E84EFE- <1>
    22 00000F89 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;文字列の表示
    26                              <1>         ;---------------------------------------
    27 00000F8F 68[ED0F0000]68040F- <1>         cdecl   draw_str, 25, 16, 0x0F04, .s1,  ;draw_str("ESP+ 0:-------- ");
    27 00000F97 00006A106A19E8A9FB- <1>
    27 00000FA0 FFFF6683C410        <1>
    28 00000FA6 68[FE0F0000]68040F- <1>         cdecl   draw_str, 25, 17, 0x0F04, .s2   ;draw_str("   + 4:-------- ");
    28 00000FAE 00006A116A19E892FB- <1>
    28 00000FB7 FFFF6683C410        <1>
    29 00000FBD 68[0F100000]68040F- <1>         cdecl   draw_str, 25, 18, 0x0F04, .s3,  ;draw_str("   + 8:-------- ");
    29 00000FC5 00006A126A19E87BFB- <1>
    29 00000FCE FFFF6683C410        <1>
    30 00000FD4 68[20100000]68040F- <1>         cdecl   draw_str, 25, 19, 0x0F04, .s4   ;draw_str("   +12:-------- ");        
    30 00000FDC 00006A136A19E864FB- <1>
    30 00000FE5 FFFF6683C410        <1>
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;無限ループ
    34                              <1>         ;---------------------------------------
    35 00000FEB EBFE                <1>         jmp     $                               ;while(1); //無限ループ
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;データ
    39                              <1>         ;---------------------------------------
    40 00000FED 4553502B20303A      <1> .s1:    db  "ESP+ 0:"
    41 00000FF4 2D2D2D2D2D2D2D2D20- <1> .p1:    db  "-------- ", 0
    41 00000FFD 00                  <1>
    42 00000FFE 2020202B20343A      <1> .s2:    db  "   + 4:"
    43 00001005 2D2D2D2D2D2D2D2D20- <1> .p2:    db  "-------- ", 0
    43 0000100E 00                  <1>
    44 0000100F 2020202B20383A      <1> .s3:    db  "   + 8:"
    45 00001016 2D2D2D2D2D2D2D2D20- <1> .p3:    db  "-------- ", 0
    45 0000101F 00                  <1>
    46 00001020 2020202B31323A      <1> .s4:    db  "   +12:"
    47 00001027 2D2D2D2D2D2D2D2D20- <1> .p4:    db  "-------- ", 0
    47 00001030 00                  <1>
    48                              <1> 
    49                              <1> int_default:
    50                              <1>         ;---------------------------------------
    51                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
    52                              <1>         ;---------------------------------------
    53 00001031 9C                  <1>         pushf                                   ;//EFLAGS(IF=0)
    54 00001032 0E                  <1>         push    cs                              ;//cs
    55 00001033 68[180F0000]        <1>         push    int_stop                        ;//スタック表示処理
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み種別を登録して復帰
    59                              <1>         ;---------------------------------------
    60 00001038 B8[3E100000]        <1>         mov     eax, .s0                        ;//割り込み種別
    61 0000103D CF                  <1>         iret                                    ;スタックされている場所に復帰
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;データ
    65                              <1>         ;---------------------------------------
    66 0000103E 203C2020202053544F- <1> .s0:    db  " <    STOP    > ", 0
    66 00001047 50202020203E2000    <1>
    67                              <1> 
    68                              <1> ;********************************************************************************************************
    69                              <1> ;割り込みベクタの初期化
    70                              <1> ;********************************************************************************************************
    71 0000104F 90                  <1> ALIGN   4
    72 00001050 FF07                <1> IDTR:   dw      8 * 256 - 1                     ;idt_limit
    73 00001052 00001000            <1>         dd      VECT_BASE                       ;idt_location
    74                              <1> 
    75                              <1> ;********************************************************************************************************
    76                              <1> ;割り込みテーブルを初期化
    77                              <1> ;********************************************************************************************************
    78                              <1> init_int:
    79                              <1>         ;---------------------------------------
    80                              <1>         ;レジスタの保存
    81                              <1>         ;---------------------------------------
    82 00001056 50                  <1>         push    eax
    83 00001057 53                  <1>         push    ebx
    84 00001058 51                  <1>         push    ecx
    85 00001059 57                  <1>         push    edi
    86                              <1> 
    87                              <1>         ;---------------------------------------
    88                              <1>         ;全ての割り込みにデフォルト処理を設定
    89                              <1>         ;---------------------------------------
    90 0000105A 8D05[31100000]      <1>         lea     eax, [int_default]              ;EAX = 割り込み処理アドレス;
    91 00001060 BB008E0800          <1>         mov     ebx, 0x0008_8E00                ;EBX = セグメントセレクタ;
    92 00001065 6693                <1>         xchg    ax, bx                          ;//下位ワード(2バイト)を交換(割り込みゲートディスクリプタの形式に合わせる)
    93                              <1> 
    94 00001067 B900010000          <1>         mov     ecx, 256                        ;ECX = 割り込みベクタ数
    95 0000106C BF00001000          <1>         mov     edi, VECT_BASE                  ;EDI = 割り込みベクタテーブル
    96                              <1> 
    97                              <1> .10L:                                           ;do
    98                              <1>                                                 ;{
    99 00001071 891F                <1>         mov     [edi + 0], ebx                  ;       [EDI + 0] = 割り込みディスクリプタ(下位)
   100 00001073 894704              <1>         mov     [edi + 4], eax                  ;       [EDI + 4] = 割り込みディスクリプタ(上位)
   101 00001076 83C708              <1>         add     edi, 8                          ;       EDI += 8;
   102 00001079 E2F6                <1>         loop    .10L                            ;}while(ECX--);
   103                              <1> 
   104                              <1>         ;---------------------------------------
   105                              <1>         ;割り込みディスクリプタの設定
   106                              <1>         ;---------------------------------------
   107 0000107B 0F011D[50100000]    <1>         lidt    [IDTR]                          ;//割り込みディスクリプタテーブルをロード
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;データ
   111                              <1>         ;---------------------------------------
   112 00001082 5F                  <1>         pop     edi
   113 00001083 59                  <1>         pop     ecx
   114 00001084 5B                  <1>         pop     ebx
   115 00001085 58                  <1>         pop     eax
   116                              <1> 
   117 00001086 C3                  <1>         ret
   118                              <1> 
   119                              <1> int_zero_div:
   120                              <1>         ;---------------------------------------
   121                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
   122                              <1>         ;---------------------------------------
   123 00001087 9C                  <1>         pushf                                   ;//EFLAGS
   124 00001088 0E                  <1>         push    cs                              ;//CS
   125 00001089 68[180F0000]        <1>         push    int_stop                        ;//スタック表示処理
   126                              <1> 
   127                              <1>         ;---------------------------------------
   128                              <1>         ;割り込み種別を登録して復帰
   129                              <1>         ;---------------------------------------
   130 0000108E B8[94100000]        <1>         mov     eax, .s0                        ;//割り込み種別
   131 00001093 CF                  <1>         iret
   132                              <1> 
   133 00001094 203C20205A45524F20- <1> .s0:    db      " <  ZERO DIV  > ", 0
   133 0000109D 44495620203E2000    <1>
   184                                  %include        "..\modules\protect\pic.s"
     1                              <1> init_pic:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000010A5 50                  <1>         push    eax
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;マスタの設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x20, 0x11                      ;//MASTER.ICW1 = 0x11;
    10 000010A6 B011                <2>  mov al, %2
    10 000010A8 E620                <2>  out %1, al
    11                              <1>         outp    0x21, 0x20                      ;//MASTER.ICW2 = 0x20;
    11 000010AA B020                <2>  mov al, %2
    11 000010AC E621                <2>  out %1, al
    12                              <1>         outp    0x21, 0x04                      ;//MASTER.ICW3 = 0x04;
    12 000010AE B004                <2>  mov al, %2
    12 000010B0 E621                <2>  out %1, al
    13                              <1>         outp    0x21, 0x05                      ;//MASTER.ICW4 = 0x05;
    13 000010B2 B005                <2>  mov al, %2
    13 000010B4 E621                <2>  out %1, al
    14                              <1>         outp    0x21, 0xEF                      ;//マスタ割り込みマスク
    14 000010B6 B0EF                <2>  mov al, %2
    14 000010B8 E621                <2>  out %1, al
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;スレーブの設定
    18                              <1>         ;---------------------------------------
    19                              <1>         outp    0xA0, 0x11                      ;//SLAVE.ICW1 = 0x11;
    19 000010BA B011                <2>  mov al, %2
    19 000010BC E6A0                <2>  out %1, al
    20                              <1>         outp    0xA1, 0x28                      ;//SLAVE.ICW2 = 0x28;
    20 000010BE B028                <2>  mov al, %2
    20 000010C0 E6A1                <2>  out %1, al
    21                              <1>         outp    0xA1, 0x02                      ;//SLAVE.ICW3 = 0x02;
    21 000010C2 B002                <2>  mov al, %2
    21 000010C4 E6A1                <2>  out %1, al
    22                              <1>         outp    0xA1, 0x01                      ;//SLAVE.ICW4 = 0x01;
    22 000010C6 B001                <2>  mov al, %2
    22 000010C8 E6A1                <2>  out %1, al
    23                              <1>         outp    0xA1, 0xEF                      ;//マスタ割り込みマスク
    23 000010CA B0EF                <2>  mov al, %2
    23 000010CC E6A1                <2>  out %1, al
    24                              <1> 
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 000010CE 58                  <1>         pop     eax
    29                              <1> 
    30 000010CF C3                  <1>         ret
   185                                  %include        "..\modules\protect\int_rtc.s"
     1                              <1> int_rtc:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000010D0 60                  <1>         pusha
     6 000010D1 1E                  <1>         push    ds
     7 000010D2 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントセレクタの設定
    11                              <1>         ;---------------------------------------
    12 000010D3 66B81000            <1>         mov     ax, 0x0010
    13 000010D7 8ED8                <1>         mov     ds, ax
    14 000010D9 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;RTCから時刻を取得
    18                              <1>         ;---------------------------------------
    19 000010DB 68[3C020000]E87DFD- <1>         cdecl   rtc_get_time, RTC_TIME          ;EAX = get_time(&RTC_TIME);
    19 000010E3 FFFF6683C404        <1>
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;RTCの割り込み要因を取得
    23                              <1>         ;---------------------------------------
    24                              <1>         outp    0x70, 0x0C                      ;outp(0x70, 0x0C); //レジスタCを選択
    24 000010E9 B00C                <2>  mov al, %2
    24 000010EB E670                <2>  out %1, al
    25 000010ED E471                <1>         in      al, 0x71                        ;AL = port(0x71);
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;割り込みフラグをクリア(EOI)
    29                              <1>         ;---------------------------------------
    30 000010EF B020                <1>         mov     al, 0x20                        ;AL = EOIコマンド;
    31 000010F1 E6A0                <1>         out     0xA0, al                        ;outp(0xA0, AL); //スレーブPIC
    32 000010F3 E620                <1>         out     0x20, al                        ;outp(0x20, AL); //マスタPIC
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;レジスタの復帰
    36                              <1>         ;---------------------------------------
    37 000010F5 07                  <1>         pop     es
    38 000010F6 1F                  <1>         pop     ds
    39 000010F7 61                  <1>         popa
    40                              <1> 
    41 000010F8 CF                  <1>         iret                                    ;割り込み処理の終了
    42                              <1> 
    43                              <1> rtc_int_en:
    44                              <1>         ;-----------------------------------
    45                              <1>         ;スタックフレームの構築
    46                              <1>         ;-----------------------------------
    47                              <1>                                             ;   + 8| 指定されたビット
    48                              <1>                                             ;   + 4| IP(戻り番号)
    49 000010F9 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    50 000010FA 89E5                <1>         mov     ebp, esp                    ;------|---------
    51                              <1> 
    52                              <1>         ;---------------------------------------
    53                              <1>         ;レジスタの保存
    54                              <1>         ;---------------------------------------
    55 000010FC 50                  <1>         push    eax
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み許可認定(RTCの内部レジスタBのUIE(更新終了割り込み許可)ビットをセット)
    59                              <1>         ;---------------------------------------
    60                              <1>         outp    0x70, 0x0B                      ;outp(0x70, AL); //レジスタBを選択
    60 000010FD B00B                <2>  mov al, %2
    60 000010FF E670                <2>  out %1, al
    61                              <1> 
    62 00001101 E471                <1>         in      al, 0x71                        ;AL = port(0x71); //レジスタBの
    63 00001103 0A4508              <1>         or      al, [ebp + 8]                   ;AL |= ビット; //指定されたビットをセット
    64                              <1> 
    65 00001106 E671                <1>         out     0x71, al                        ;outp(0x71, AL); //レジスタBに書き込み
    66                              <1> 
    67                              <1>         ;---------------------------------------
    68                              <1>         ;レジスタの復帰
    69                              <1>         ;---------------------------------------
    70 00001108 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 00001109 89EC                <1>         mov     esp, ebp
    76 0000110B 5D                  <1>         pop     ebp
    77                              <1> 
    78 0000110C C3                  <1>         ret
   186                                  %include        "..\modules\protect\ring_buff.s"
     1                              <1> ring_rd:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| 読み込んだデータの保存先アドレス
     6                              <1>                                             ;   + 8| リングバッファ
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 0000110D 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
     9 0000110E 89E5                <1>         mov     ebp, esp                    ;------|---------
    10                              <1> 
    11                              <1>         ;---------------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;---------------------------------------
    14 00001110 60                  <1>         pusha
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;引数を取得
    18                              <1>         ;---------------------------------------
    19 00001111 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    20 00001114 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = データアドレス;
    21                              <1>         
    22                              <1>         ;---------------------------------------
    23                              <1>         ;読み込み位置を確認
    24                              <1>         ;---------------------------------------
    25 00001117 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    26 0000111C 8B1E                <1>         mov     ebx, [esi + ring_buff.rp]       ;EBX = rp; //読み込み位置
    27 0000111E 3B5E04              <1>         cmp     ebx, [esi + ring_buff.wp]       ;if(EBX != wp) //書き込み位置と異なる
    28 00001121 7411                <1>         je      .10E                            ;{
    29                              <1>         
    30 00001123 8A441E08            <1>         mov     al, [esi + ring_buff.item + ebx];   AL = BUFF[rp]; //キーコードを保存
    31                              <1> 
    32 00001127 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //データを保存
    33                              <1> 
    34 00001129 43                  <1>         inc     ebx                             ;   EBX++; //次の読み込み位置
    35 0000112A 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= 0x0F; //サイズの制限
    36 0000112D 891E                <1>         mov     [esi + ring_buff.rp], ebx       ;   wp = EBX; //読み込み位置を保存
    37                              <1> 
    38 0000112F B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //データあり
    39                              <1> .10E:                                           ;}
    40                              <1> 
    41                              <1>         ;---------------------------------------
    42                              <1>         ;レジスタの復帰
    43                              <1>         ;---------------------------------------
    44 00001134 61                  <1>         popa
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;スタックフレームの破棄
    48                              <1>         ;---------------------------------------
    49 00001135 89EC                <1>         mov     esp, ebp
    50 00001137 5D                  <1>         pop     ebp
    51                              <1> 
    52 00001138 C3                  <1>         ret
    53                              <1> 
    54                              <1> ring_wr:
    55                              <1>         ;-----------------------------------
    56                              <1>         ;スタックフレームの構築
    57                              <1>         ;-----------------------------------
    58                              <1>                                             ;   +12| 書き込むデータ
    59                              <1>                                             ;   + 8| リングバッファ
    60                              <1>                                             ;   + 4| IP(戻り番号)
    61 00001139 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    62 0000113A 89E5                <1>         mov     ebp, esp                    ;------|---------
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;レジスタの保存
    66                              <1>         ;---------------------------------------
    67 0000113C 60                  <1>         pusha
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;引数を取得
    71                              <1>         ;---------------------------------------
    72 0000113D 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    73                              <1>         
    74                              <1>         ;---------------------------------------
    75                              <1>         ;書き込み位置を確認
    76                              <1>         ;---------------------------------------
    77 00001140 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    78 00001145 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
    79 00001148 89D9                <1>         mov     ecx, ebx                        ;ECX = EBX;
    80 0000114A 41                  <1>         inc     ecx                             ;ECX++;
    81 0000114B 83E10F              <1>         and     ecx, RING_INDEX_MASK            ;ECX &= 0x0F //サイズの制限
    82                              <1>         
    83 0000114E 3B0E                <1>         cmp     ecx, [esi + ring_buff.rp]       ;if(ECX != rp) //読み込み位置と異なる
    84 00001150 740F                <1>         je      .10E                            ;{
    85                              <1>         
    86 00001152 8A450C              <1>         mov     al, [ebp +12]                   ;   AL = データ;
    87                              <1> 
    88 00001155 88441E08            <1>         mov     [esi + ring_buff.item + ebx], al;   BUFF[wp] = AL; //キーコードを保存
    89 00001159 894E04              <1>         mov     [esi + ring_buff.wp], ecx       ;   wp = ECX; //書き込み位置を保存
    90 0000115C B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //成功
    91                              <1> .10E:                                           ;}
    92                              <1> 
    93                              <1>         ;---------------------------------------
    94                              <1>         ;レジスタの復帰
    95                              <1>         ;---------------------------------------
    96 00001161 61                  <1>         popa
    97                              <1>         
    98                              <1>         ;---------------------------------------
    99                              <1>         ;スタックフレームの破棄
   100                              <1>         ;---------------------------------------
   101 00001162 89EC                <1>         mov     esp, ebp
   102 00001164 5D                  <1>         pop     ebp
   103                              <1> 
   104 00001165 C3                  <1>         ret
   105                              <1> 
   106                              <1> draw_key:
   107                              <1>         ;-----------------------------------
   108                              <1>         ;スタックフレームの構築
   109                              <1>         ;-----------------------------------
   110                              <1>                                             ;   +16| リングブッファ
   111                              <1>                                             ;   +12| Y(行)
   112                              <1>                                             ;   + 8| X(列)
   113                              <1>                                             ;   + 4| IP(戻り番号)
   114 00001166 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
   115 00001167 89E5                <1>         mov     ebp, esp                    ;------|---------
   116                              <1> 
   117                              <1>         ;---------------------------------------
   118                              <1>         ;レジスタの保存
   119                              <1>         ;---------------------------------------
   120 00001169 60                  <1>         pusha
   121                              <1> 
   122                              <1>         ;---------------------------------------
   123                              <1>         ;引数を取得
   124                              <1>         ;---------------------------------------
   125 0000116A 8B7508              <1>         mov     esi, [ebp + 8]                  ;EDX = X(列);
   126 0000116D 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行);
   127 00001170 8B7510              <1>         mov     esi, [ebp +16]                  ;ESI = リングブッファ;
   128                              <1>         
   129                              <1>         ;---------------------------------------
   130                              <1>         ;リングブッファの情報を取得
   131                              <1>         ;---------------------------------------
   132 00001173 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
   133 00001176 8D7608              <1>         lea     esi, [esi + ring_buff.item]     ;ESI = &KEY_BUFF[EBX];
   134 00001179 B910000000          <1>         mov     ecx, RING_ITEM_SIZE             ;ECX = RING_ITEM_SIZE; //要素数
   135                              <1> 
   136                              <1> .10L:                                           ;do
   137                              <1>                                                 ;{
   138 0000117E 4B                  <1>         dec     ebx                             ;   EBX--;
   139 0000117F 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= RING_INDEX_MASK;
   140 00001182 8A041E              <1>         mov     al, [esi + ebx]                 ;   EAX = KEY_BUFF[EBX];
   141                              <1> 
   142 00001185 6A046A106A0268-     <1>         cdecl   itoa, eax, .tmp, 2, 16, 0b0100  ;   //キーコードを文字列に変換
   142 0000118C [B6110000]50E843FC- <1>
   142 00001194 FFFF6683C414        <1>
   143 0000119A 68[B6110000]6A0257- <1>         cdecl   draw_str, edx, edi, 0x02, .tmp  ;   //変換した文字列を表示
   143 000011A2 52E8A3F9FFFF6683C4- <1>
   143 000011AB 10                  <1>
   144                              <1> 
   145 000011AC 83C203              <1>         add     edx, 3                          ;   //表示位置を更新(3文字分)
   146                              <1> 
   147 000011AF E2CD                <1>         loop    .10L
   148                              <1> .10E:                                           ;}while(ECX--);        
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;レジスタの復帰
   152                              <1>         ;---------------------------------------
   153 000011B1 61                  <1>         popa
   154                              <1>         
   155                              <1>         ;---------------------------------------
   156                              <1>         ;スタックフレームの破棄
   157                              <1>         ;---------------------------------------
   158 000011B2 89EC                <1>         mov     esp, ebp
   159 000011B4 5D                  <1>         pop     ebp
   160                              <1> 
   161 000011B5 C3                  <1>         ret
   162                              <1> 
   163                              <1>         ;---------------------------------------
   164                              <1>         ;データ
   165                              <1>         ;---------------------------------------
   166 000011B6 2D2D2000            <1> .tmp    db  "-- ", 0
   187                                  %include        "..\modules\protect\int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000011BA 60                  <1>         pusha
     6 000011BB 1E                  <1>         push    ds
     7 000011BC 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 000011BD 66B81000            <1>         mov     ax, 0x0010
    13 000011C1 8ED8                <1>         mov     ds, ax
    14 000011C3 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;KBCのブッファ読み取り
    18                              <1>         ;---------------------------------------
    19 000011C5 E460                <1>         in      al, 0x60                        ; AL = キーコードの取得
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;キーコードの保存
    23                              <1>         ;---------------------------------------
    24 000011C7 5068[E0110000]E867- <1>         cdecl   ring_wr, _KEY_BUFF, eax         ;ring_wr(_KEY_BUFF, EAX); //キーコードの保存
    24 000011CF FFFFFF6683C408      <1>
    25                              <1>         
    26                              <1>         ;---------------------------------------
    27                              <1>         ;割り込み終了コマンド送信
    28                              <1>         ;---------------------------------------
    29                              <1>         outp    0x20, 0x20                      ;outp(); //マスタPIC:EOIコマンド
    29 000011D6 B020                <2>  mov al, %2
    29 000011D8 E620                <2>  out %1, al
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;レジスタの復帰
    33                              <1>         ;---------------------------------------
    34 000011DA 07                  <1>         pop     es
    35 000011DB 1F                  <1>         pop     ds
    36 000011DC 61                  <1>         popa
    37                              <1> 
    38 000011DD CF                  <1>         iret                                    ;割り込みからの復帰
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;データ
    42                              <1>         ;---------------------------------------
    43                              <1> 
    44 000011DE 00<rept>            <1> ALIGN   4, db   0
    45 000011E0 00<rept>            <1> _KEY_BUFF:  times   ring_buff_size  db  0
   188                                  %include        "..\modules\protect\timer.s"
     1                              <1> int_en_timer0:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000011F8 50                  <1>         push    eax                              ;//outp用
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;タイマーICのカウンタ0を設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x43, 0b_00_11_010_0            ;//カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    10 000011F9 B034                <2>  mov al, %2
    10 000011FB E643                <2>  out %1, al
    11                              <1>         outp    0x40, 0x9C                      ;//下位バイト
    11 000011FD B09C                <2>  mov al, %2
    11 000011FF E640                <2>  out %1, al
    12                              <1>         outp    0x40, 0x2E                      ;//上位バイト
    12 00001201 B02E                <2>  mov al, %2
    12 00001203 E640                <2>  out %1, al
    13                              <1> 
    14                              <1>         ;---------------------------------------
    15                              <1>         ;レジスタの復帰
    16                              <1>         ;---------------------------------------
    17 00001205 58                  <1>         pop     eax
    18                              <1> 
    19 00001206 C3                  <1>         ret
   189                                  %include        "..\modules\protect\draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00001207 60                  <1>         pushad
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;引数を取得
     9                              <1>         ;---------------------------------------
    10 00001208 A1[8C060000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = タイマー割り込みカウンタ
    11 0000120D C1E804              <1>         shr     eax, 4                          ;EAX /= 4; //16で除算
    12 00001210 3B05[38120000]      <1>         cmp     eax, [.index]                   ;if(EAX != 前回値)
    13 00001216 741E                <1>         je      .10E                            ;{
    14                              <1>         
    15 00001218 A3[38120000]        <1>         mov     [.index], eax                   ;   前回値 = EAX;
    16 0000121D 83E003              <1>         and     eax, 0x03                       ;   EAX &= 0x03; //0~3に限定
    17                              <1> 
    18 00001220 8A80[3C120000]      <1>         mov     al, [.table + eax]              ;   AL = table[index];
    19 00001226 506A0F6A1D6A00E8F9- <1>         cdecl   draw_char, 0 ,29, 0x000F, eax   ;   draw_char(); //文字を表示
    19 0000122F F7FFFF6683C410      <1>
    20                              <1> 
    21                              <1> .10E:                                           ;}    
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;レジスタの復帰
    25                              <1>         ;---------------------------------------
    26 00001236 61                  <1>         popad
    27                              <1> 
    28 00001237 C3                  <1>         ret
    29                              <1> 
    30                              <1>         ;---------------------------------------
    31                              <1>         ;データ
    32                              <1>         ;---------------------------------------
    33                              <1> ALIGN   4,  db  0
    34 00001238 00000000            <1> .index:     dd  0                               ;前回値
    35 0000123C 7C2F2D5C            <1> .table:     db  "|/-\"                          ;表示キャラクタ
   190                                  %include        "..\modules\protect\call_gate.s"
     1                              <1> call_gate:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| X(列)
     6                              <1>                                             ;   +16| Y(行)
     7                              <1>                                             ;   +20| 色
     8                              <1>                                             ;   +24| 文字
     9                              <1>                                             ;   + 8| CS(コードセグメント)
    10                              <1>                                             ;   + 4| EIP(戻り番号)
    11 00001240 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    12 00001241 89E5                <1>         mov    ebp, esp                     ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00001243 60                  <1>         pusha
    18 00001244 1E                  <1>         push    ds
    19 00001245 06                  <1>         push    es
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;データ用セグメントの設定
    23                              <1>         ;---------------------------------------
    24 00001246 66B81000            <1>         mov     ax, 0x0010
    25 0000124A 8ED8                <1>         mov     ds, ax
    26 0000124C 8EC0                <1>         mov     es, ax
    27                              <1>         
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字を表示
    30                              <1>         ;---------------------------------------
    31 0000124E 8B450C              <1>         mov     eax, dword [ebp +12]            ;EAX = X(列);
    32 00001251 8B5D10              <1>         mov     ebx, dword [ebp +16]            ;EBX = Y(行);
    33 00001254 8B4D14              <1>         mov     ecx, dword [ebp +20]            ;ECX = 色;
    34 00001257 8B5518              <1>         mov     edx, dword [ebp +24]            ;EDX = 文字;
    35 0000125A 52515350E8E8F8FFFF- <1>         cdecl   draw_str, eax, ebx, ecx, edx    ;draw_str();
    35 00001263 6683C410            <1>
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;レジスタの復帰
    39                              <1>         ;---------------------------------------
    40 00001267 07                  <1>         pop     es
    41 00001268 1F                  <1>         pop     ds
    42 00001269 61                  <1>         popa
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;スタックフレームの破棄
    46                              <1>         ;---------------------------------------
    47 0000126A 89EC                <1>         mov     esp, ebp
    48 0000126C 5D                  <1>         pop     ebp
    49                              <1> 
    50 0000126D CA1000              <1>         retf 4 * 4
   191                                  %include        "..\modules\protect\trap_gate.s"
     1                              <1> trap_gate_81:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;1文字出力
     4                              <1>         ;---------------------------------------
     5 00001270 50535251E8B2F7FFFF- <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;//1文字出力
     5 00001279 6683C410            <1>
     6                              <1> 
     7 0000127D CF                  <1>         iret
     8                              <1> 
     9                              <1> trap_gate_82:
    10                              <1>         ;---------------------------------------
    11                              <1>         ;点の描画
    12                              <1>         ;---------------------------------------
    13 0000127E 535251E87BF9FFFF66- <1>         cdecl   draw_pixel, ecx, edx, ebx       ;//点の描画
    13 00001287 83C40C              <1>
    14                              <1> 
    15 0000128A CF                  <1>         iret
   192                                  %include        "..\modules\protect\test_and_set.s"
     1                              <1> test_and_set:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| ローカル変数のアドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 0000128B 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 0000128C 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 0000128E 50                  <1>         push    eax
    14 0000128F 53                  <1>         push    ebx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;テストアンドセット
    18                              <1>         ;---------------------------------------
    19 00001290 B800000000          <1>         mov     eax, 0                          ;local = 0;
    20 00001295 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;global = アドレス;
    21                              <1> 
    22                              <1> .10L:                                           ;while(1)
    23                              <1>                                                 ;{
    24 00001298 F00FAB03            <1>         lock    bts [ebx], eax                  ;   CF = TEST_AND_SET(IN_USE, 1);
    25 0000129C 7307                <1>         jnc     .10E                            ;   if(0 == CF)
    26                              <1>                                                 ;   break;
    27                              <1> 
    28                              <1> .12L:                                           ;   while(1)
    29                              <1>                                                 ;   {
    30 0000129E 0FA303              <1>         bt      [ebx], eax                      ;       CF = TEST(IN_USE, 1);
    31 000012A1 72FB                <1>         jc      .12L                            ;       if(0 == CF)
    32                              <1>                                                 ;       break;
    33 000012A3 EBF3                <1>         jmp     .10L                            ;   }
    34                              <1> .10E:                                           ;}
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;レジスタの復帰
    38                              <1>         ;---------------------------------------
    39 000012A5 5B                  <1>         pop     ebx
    40 000012A6 58                  <1>         pop     eax
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;スタックフレームの破棄
    44                              <1>         ;---------------------------------------
    45 000012A7 89EC                <1>         mov     esp, ebp
    46 000012A9 5D                  <1>         pop     ebp
    47                              <1> 
    48 000012AA C3                  <1>         ret
   193                                  %include        "..\modules\protect\int_nm.s"
     1                              <1> get_tss_base:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;TSSセレクタで指定されているTSSディスクリプタからTSSベースアドレスを取得し、EAXに代入。
     4                              <1>         ;---------------------------------------
     5 000012AB 8B83[A2050000]      <1>         mov     eax, [GDT + ebx + 2]            ;EAX = TSS[23:0];
     6 000012B1 C1E008              <1>         shl     eax, 8                          ;EAX << 8;
     7 000012B4 8A83[A7050000]      <1>         mov     al, [GDT + ebx + 7]             ;AL = TSS[31:24];
     8 000012BA C1C808              <1>         ror     eax, 8                          ;EAX >>= 8; //循環
     9                              <1> 
    10 000012BD C3                  <1>         ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1>         ;---------------------------------------
    14                              <1>         ;EAXレジスタに設定されたTSSディスクリプタのベースアドレスを参照して、FPUコンテキストを保存し、保存済みフラグをセット。
    15                              <1>         ;---------------------------------------
    16 000012BE DD7068              <1>         fnsave  [eax + 104]                     ;//FPUコンテキストを保存
    17 000012C1 C780D4000000010000- <1>         mov     [eax + 104 + 108], dword 1      ;saved = 1; //フラグをセット
    17 000012CA 00                  <1>
    18                              <1> 
    19 000012CB C3                  <1>         ret
    20                              <1> 
    21                              <1> load_fpu_context:
    22                              <1>         ;---------------------------------------
    23                              <1>         ;FPUコンテキストを復帰する。保存済みフラグがセットされていなければFPUを初期化する。
    24                              <1>         ;---------------------------------------
    25 000012CC 83B8D400000000      <1>         cmp     [eax + 104 + 108], dword 0      ;if(0 == saved)
    26 000012D3 7504                <1>         jne     .10F                            ;{
    27 000012D5 DBE3                <1>         fninit                                  ;   //FPUの初期化
    28 000012D7 EB03                <1>         jmp     .10E                            ;}
    29                              <1> .10F:                                           ;else
    30                              <1>                                                 ;{
    31 000012D9 DD6068              <1>         frstor  [eax + 104]                     ;   //FPUコンテキストを復帰
    32                              <1> .10E:                                           ;}
    33                              <1> 
    34 000012DC C3                  <1>         ret
    35                              <1> 
    36                              <1> int_nm:
    37                              <1>         ;-----------------------------------
    38                              <1>         ;レジスタの保存
    39                              <1>         ;-----------------------------------
    40 000012DD 60                  <1>         pusha
    41 000012DE 1E                  <1>         push    ds
    42 000012DF 06                  <1>         push    es
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;カーネル用セレクタを設定
    46                              <1>         ;---------------------------------------
    47 000012E0 66B81000            <1>         mov     ax, DS_KERNEL                   ;0x10と同じ
    48 000012E4 8ED8                <1>         mov     ds, ax
    49 000012E6 8EC0                <1>         mov     es, ax
    50                              <1>         
    51                              <1>         ;---------------------------------------
    52                              <1>         ;タスクスイッチフラグをクリア
    53                              <1>         ;---------------------------------------
    54 000012E8 0F06                <1>         clts                                    ;CR0.TS = 0;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;前回/今回FPUを使用するタスク
    58                              <1>         ;---------------------------------------
    59 000012EA 8B3D[34130000]      <1>         mov     edi, [.last_tss]                ;EDI = 前回FPUを使用したタスクのTSS
    60 000012F0 0F00CE              <1>         str     esi                             ;ESI = 今回FPUを使用したタスクのTSS
    61 000012F3 83E6F8              <1>         and     esi, ~0x0007                    ;//特権レベルとTI(Table Indicator:テーブル指定)bitをマスクして除外
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;FPUの初回利用をチェック
    65                              <1>         ;---------------------------------------
    66 000012F6 83FF00              <1>         cmp     edi, 0                          ;if(0 != EDI) //前回使用したタスク
    67 000012F9 7420                <1>         je      .10F                            ;{
    68                              <1>         
    69 000012FB 39FE                <1>         cmp     esi, edi                        ;   if(ESI != EDI) //異なるタスク
    70 000012FD 741A                <1>         je      .12E                            ;   {
    71                              <1>         
    72 000012FF FA                  <1>         cli                                     ;       //割り込み禁止
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;前回のFPUコンテキストを保存
    76                              <1>         ;---------------------------------------
    77 00001300 89FB                <1>         mov     ebx, edi                        ;       EBX = EDI; //前回のタスク
    78 00001302 E8A4FFFFFF          <1>         call    get_tss_base                    ;       EAX = get_tss_base(TSSセレクタインデックス(前回)); //TSSアドレスを取得
    79 00001307 E8B2FFFFFF          <1>         call    save_fpu_context                ;       save_fpu_context(); //FPUコンテキスを保存
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;今回のFPUコンテキストを復帰
    83                              <1>         ;---------------------------------------
    84 0000130C 89F3                <1>         mov     ebx, esi                        ;       EBX = ESI; //今回のタスク
    85 0000130E E898FFFFFF          <1>         call    get_tss_base                    ;       EAX = get_tss_base(TSSセレクタインデックス(今回)); //TSSアドレスを取得
    86 00001313 E8B4FFFFFF          <1>         call    load_fpu_context                ;       load_fpu_context(); //FPUコンテキスを復帰
    87                              <1> 
    88 00001318 FB                  <1>         sti                                     ;       //割り込み許可
    89                              <1> .12E:                                           ;   }
    90 00001319 EB0E                <1>         jmp     .10E                            ;}
    91                              <1> .10F:                                           ;else
    92                              <1>                                                 ;{
    93                              <1>         
    94 0000131B FA                  <1>         cli                                     ;   //割り込み禁止
    95                              <1> 
    96                              <1>         ;---------------------------------------
    97                              <1>         ;今回のFPUコンテキストを復帰
    98                              <1>         ;---------------------------------------
    99 0000131C 89F3                <1>         mov     ebx, esi                        ;   EBX = ESI; //今回のタスク
   100 0000131E E888FFFFFF          <1>         call    get_tss_base                    ;   EAX = get_tss_base(TSSセレクタインデックス(今回)); //TSSアドレスを取得
   101 00001323 E8A4FFFFFF          <1>         call    load_fpu_context                ;   load_fpu_context(); //FPUコンテキスを復帰
   102                              <1> 
   103 00001328 FB                  <1>         sti                                     ;   //割り込み許可
   104                              <1> .10E:                                           ;}
   105                              <1> 
   106 00001329 8935[34130000]      <1>         mov     [.last_tss], esi                ;//FPUを使用したタスクを保存
   107                              <1> 
   108                              <1>         ;---------------------------------------
   109                              <1>         ;レジスタの復帰
   110                              <1>         ;---------------------------------------
   111 0000132F 07                  <1>         pop     es
   112 00001330 1F                  <1>         pop     ds
   113 00001331 61                  <1>         popa
   114                              <1> 
   115 00001332 CF                  <1>         iret
   116                              <1> 
   117 00001333 00                  <1> ALIGN   4,  db  0
   118 00001334 00000000            <1> .last_tss:  dd  0
   194                                  %include        "..\modules\protect\wait_tick.s"
     1                              <1> wait_tick:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| ウェイト
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00001338 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00001339 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 0000133B 50                  <1>         push    eax
    14 0000133C 51                  <1>         push    ecx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;ウェイト
    18                              <1>         ;---------------------------------------
    19 0000133D 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = ウェイト回数
    20 00001340 A1[8C060000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = TIMER;
    21                              <1>                                                 ;do
    22                              <1>                                                 ;{
    23 00001345 3905[8C060000]      <1> .10L:   cmp     [TIMER_COUNT], eax              ;   while(TIMER_COUNT == EAX){} //タイマ割り込みでループを出る
    24 0000134B 74F8                <1>         je      .10L
    25 0000134D 40                  <1>         inc     eax                             ;   EAX++;
    26 0000134E E2F5                <1>         loop    .10L                            ;}while(ECX--);
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;レジスタの復帰
    30                              <1>         ;---------------------------------------
    31 00001350 59                  <1>         pop     ecx
    32 00001351 58                  <1>         pop     eax
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;スタックフレームの破棄
    36                              <1>         ;---------------------------------------
    37 00001352 89EC                <1>         mov     esp, ebp
    38 00001354 5D                  <1>         pop     ebp
    39                              <1> 
    40 00001355 C3                  <1>         ret
   195                                  
   196                                  ;********************************************************************************************************
   197                                  ;パディング
   198                                  ;********************************************************************************************************
   199 00001356 00<rept>                        times KERNEL_SIZE - ($ - $$)    db 0    ;パディング
