     1                                  ;********************************************************************************************************
     2                                  ;マクロ
     3                                  ;********************************************************************************************************
     4                                  %define         USE_SYSTEM_CALL
     5                                  %define         USE_TEST_AND_SET
     6                                  
     7                                  %include        "..\include\define.s"
     1                              <1> VECT_BASE       equ     0x0010_0000             ;0010_0000:0010_07FF
     2                              <1> 
     3                              <1> SECT_SIZE   equ     (512)                   ;セクタサイズ
     4                              <1> 
     5                              <1> BOOT_LOAD   equ     0x7C00                  ;ブートプログラムのロード位置
     6                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)
     7                              <1> BOOT_SIZE   equ     (1024 * 8)              ;ブートコードサイズ
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     9                              <1> 
    10                              <1> KERNEL_LOAD equ     0x0010_1000
    11                              <1> KERNEL_SIZE equ     (1024*8)                ;カーネルサイズ
    12                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> STACK_BASE  equ     0x0010_3000             ;タスク用スタックエリア
    15                              <1> STACK_SIZE  equ     1024                    ;スタックサイズ
    16                              <1> 
    17                              <1> SP_TASK_0   equ     STACK_BASE + (STACK_SIZE * 1)
    18                              <1> SP_TASK_1   equ     STACK_BASE + (STACK_SIZE * 2)
    19                              <1> 
    20                              <1> E820_RECORD_SIZE    equ 20
     8                                  %include        "..\include\macro.s"
     1                              <1> %define     RING_ITEM_SIZE  (1 << 4)
     2                              <1> %define     RING_INDEX_MASK (RING_ITEM_SIZE - 1)
     3                              <1> 
     4                              <1> struc drive
     5 00000000 <res 00000002>      <1>         .no         resw    1                       ;ドライブ番号
     6 00000002 <res 00000002>      <1>         .cyln       resw    1                       ;シリンダ
     7 00000004 <res 00000002>      <1>         .head       resw    1                       ;ヘッド
     8 00000006 <res 00000002>      <1>         .sect       resw    1                       ;セクタ
     9                              <1> endstruc
    10                              <1> 
    11                              <1> struc ring_buff
    12 00000000 <res 00000004>      <1>         .rp         resd    1                       ;RP:書き込み位置
    13 00000004 <res 00000004>      <1>         .wp         resd    1                       ;WP:読み込み位置
    14 00000008 <res 00000010>      <1>         .item       resb    RING_ITEM_SIZE          ;ブッファ
    15                              <1> endstruc
    16                              <1> 
    17                              <1> %macro  cdecl   1-*.nolist
    18                              <1> 
    19                              <1>     %rep    %0 - 1
    20                              <1>         push    %{-1:-1}
    21                              <1>         %rotate -1
    22                              <1>     %endrep
    23                              <1>     %rotate -1
    24                              <1> 
    25                              <1>         call    %1
    26                              <1> 
    27                              <1>     %if 1 < %0
    28                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    29                              <1>     %endif
    30                              <1> 
    31                              <1> %endmacro
    32                              <1> 
    33                              <1> %macro  set_vect    1-*
    34                              <1>         push    eax
    35                              <1>         push    edi
    36                              <1> 
    37                              <1>         mov     edi, VECT_BASE + (%1 * 8)           ;ベクタアドレス
    38                              <1>         mov     eax, %2
    39                              <1> 
    40                              <1>     %if 3 == %0
    41                              <1>         mov     [edi + 4], %3                       ;フラグ
    42                              <1>     %endif
    43                              <1> 
    44                              <1>         mov     [edi + 0], ax                       ;例外アドレス[15:0]
    45                              <1>         shr     eax, 16
    46                              <1>         mov     [edi + 6], ax                       ;6はエンディアン(?) 例外アドレス[31:16]
    47                              <1> 
    48                              <1>         pop     edi
    49                              <1>         pop     eax
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro  outp    2
    53                              <1>         mov     al, %2
    54                              <1>         out     %1, al
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro  set_desc    2-*
    58                              <1>         push    eax
    59                              <1>         push    edi
    60                              <1> 
    61                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
    62                              <1>         mov     eax, %2                             ;ベースアドレス
    63                              <1> 
    64                              <1>     %if 3 == %0
    65                              <1>         mov     [edi + 0], %3                       ;リミット
    66                              <1>     %endif
    67                              <1>     
    68                              <1>         mov     [edi + 2], ax                       ;ベース([15: 0])
    69                              <1>         shr     eax, 16
    70                              <1>         mov     [edi + 4], al                       ;ベース([23:16])
    71                              <1>         mov     [edi + 7], ah                       ;ベース([31:24])
    72                              <1> 
    73                              <1>         pop     edi
    74                              <1>         pop     eax
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_gate    2-*
    78                              <1>         push    eax
    79                              <1>         push    edi
    80                              <1> 
    81                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
    82                              <1>         mov     eax, %2                             ;ベースアドレス
    83                              <1> 
    84                              <1>         mov     [edi + 0], ax                       ;ベース([15:0])
    85                              <1>         shr     eax, 16
    86                              <1>         mov     [edi + 6], ax                       ;ベース([31:16])
    87                              <1> 
    88                              <1>         pop     edi
    89                              <1>         pop     eax
    90                              <1> %endmacro
     9                                  
    10                                          ORG     KERNEL_LOAD                             ;カーネルのロードアドレス
    11                                  
    12                                  [BITS 32]
    13                                  ;********************************************************************************************************
    14                                  ;エントリポイント
    15                                  ;********************************************************************************************************
    16                                  kernel:
    17                                          ;---------------------------------------
    18                                          ;フォントアドレスを取得
    19                                          ;---------------------------------------
    20 00000000 BE007E0000                      mov     esi, BOOT_LOAD + SECT_SIZE      ;ESI = 0x7C00 + 512
    21 00000005 0FB706                          movzx   eax, word [esi + 0]             ;EAX = [ESI + 0] //セグメント
    22 00000008 0FB75E02                        movzx   ebx, word [esi + 2]             ;EBX = [ESI + 2] //オフセット
    23 0000000C C1E004                          shl     eax, 4                          ;EAX << 4;
    24 0000000F 01D8                            add     eax, ebx                        ;EAX += EBX;
    25 00000011 A3[D0010000]                    mov     [FONT_ADR], eax                 ;FONT_ADR[0] = EAX;
    26                                  
    27                                          ;---------------------------------------
    28                                          ;TSSディスクリプタの設定
    29                                          ;---------------------------------------
    30                                          set_desc        GDT.tss_0, TSS_0        ;//タスク0用TSSの設定
    30 00000016 50                  <1>  push eax
    30 00000017 57                  <1>  push edi
    30                              <1> 
    30 00000018 BF[C8020000]        <1>  mov edi, %1
    30 0000001D B8[D8010000]        <1>  mov eax, %2
    30                              <1> 
    30                              <1>  %if 3 == %0
    30                              <1>  mov [edi + 0], %3
    30                              <1>  %endif
    30                              <1> 
    30 00000022 66894702            <1>  mov [edi + 2], ax
    30 00000026 C1E810              <1>  shr eax, 16
    30 00000029 884704              <1>  mov [edi + 4], al
    30 0000002C 886707              <1>  mov [edi + 7], ah
    30                              <1> 
    30 0000002F 5F                  <1>  pop edi
    30 00000030 58                  <1>  pop eax
    31                                          set_desc        GDT.tss_1, TSS_1        ;//タスク1用TSSの設定
    31 00000031 50                  <1>  push eax
    31 00000032 57                  <1>  push edi
    31                              <1> 
    31 00000033 BF[D0020000]        <1>  mov edi, %1
    31 00000038 B8[40020000]        <1>  mov eax, %2
    31                              <1> 
    31                              <1>  %if 3 == %0
    31                              <1>  mov [edi + 0], %3
    31                              <1>  %endif
    31                              <1> 
    31 0000003D 66894702            <1>  mov [edi + 2], ax
    31 00000041 C1E810              <1>  shr eax, 16
    31 00000044 884704              <1>  mov [edi + 4], al
    31 00000047 886707              <1>  mov [edi + 7], ah
    31                              <1> 
    31 0000004A 5F                  <1>  pop edi
    31 0000004B 58                  <1>  pop eax
    32                                  
    33                                          ;---------------------------------------
    34                                          ;コールゲートの設定
    35                                          ;---------------------------------------
    36                                          set_gate        GDT.call_gate, call_gate;コールゲートの設定
    36 0000004C 50                  <1>  push eax
    36 0000004D 57                  <1>  push edi
    36                              <1> 
    36 0000004E BF[D8020000]        <1>  mov edi, %1
    36 00000053 B8[500C0000]        <1>  mov eax, %2
    36                              <1> 
    36 00000058 668907              <1>  mov [edi + 0], ax
    36 0000005B C1E810              <1>  shr eax, 16
    36 0000005E 66894706            <1>  mov [edi + 6], ax
    36                              <1> 
    36 00000062 5F                  <1>  pop edi
    36 00000063 58                  <1>  pop eax
    37                                  
    38                                          ;---------------------------------------
    39                                          ;LDTの設定
    40                                          ;---------------------------------------
    41                                          set_desc        GDT.ldt, LDT, word LDT_LIMIT
    41 00000064 50                  <1>  push eax
    41 00000065 57                  <1>  push edi
    41                              <1> 
    41 00000066 BF[C0020000]        <1>  mov edi, %1
    41 0000006B B8[E6020000]        <1>  mov eax, %2
    41                              <1> 
    41                              <1>  %if 3 == %0
    41 00000070 66C7072700          <1>  mov [edi + 0], %3
    41                              <1>  %endif
    41                              <1> 
    41 00000075 66894702            <1>  mov [edi + 2], ax
    41 00000079 C1E810              <1>  shr eax, 16
    41 0000007C 884704              <1>  mov [edi + 4], al
    41 0000007F 886707              <1>  mov [edi + 7], ah
    41                              <1> 
    41 00000082 5F                  <1>  pop edi
    41 00000083 58                  <1>  pop eax
    42                                  
    43                                          ;---------------------------------------
    44                                          ;GDTをロード(再設定)
    45                                          ;---------------------------------------
    46 00000084 0F0115[E0020000]                lgdt    [GDTR]                          ;//グローバルディスクリプタテーブルをロード
    47                                  
    48                                          ;---------------------------------------
    49                                          ;スタックの設定
    50                                          ;---------------------------------------
    51 0000008B BC00341000                      mov     esp, SP_TASK_0                  ;タスク0用のスタックを設定
    52                                  
    53                                          ;---------------------------------------
    54                                          ;タスクレジスタの初期化
    55                                          ;---------------------------------------
    56 00000090 66B82000                        mov     ax, SS_TASK_0                   ;//タスクレジスタの設定
    57 00000094 0F00D8                          ltr     ax
    58                                  
    59                                          ;---------------------------------------
    60                                          ;初期化
    61                                          ;---------------------------------------
    62 00000097 E8CA090000                      cdecl   init_int                        ;//割り込みベクタの初期化
    63 0000009C E8140A0000                      cdecl   init_pic                        ;//割り込みコントローラの初期化
    64                                  
    65                                          set_vect        0x00, int_zero_div      ;割り込み処理の登録:0除算
    65 000000A1 50                  <1>  push eax
    65 000000A2 57                  <1>  push edi
    65                              <1> 
    65 000000A3 BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    65 000000A8 B8[970A0000]        <1>  mov eax, %2
    65                              <1> 
    65                              <1>  %if 3 == %0
    65                              <1>  mov [edi + 4], %3
    65                              <1>  %endif
    65                              <1> 
    65 000000AD 668907              <1>  mov [edi + 0], ax
    65 000000B0 C1E810              <1>  shr eax, 16
    65 000000B3 66894706            <1>  mov [edi + 6], ax
    65                              <1> 
    65 000000B7 5F                  <1>  pop edi
    65 000000B8 58                  <1>  pop eax
    66                                          set_vect        0x20, int_timer         ;割り込み処理の登録:タイマー
    66 000000B9 50                  <1>  push eax
    66 000000BA 57                  <1>  push edi
    66                              <1> 
    66 000000BB BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    66 000000C0 B8[0E030000]        <1>  mov eax, %2
    66                              <1> 
    66                              <1>  %if 3 == %0
    66                              <1>  mov [edi + 4], %3
    66                              <1>  %endif
    66                              <1> 
    66 000000C5 668907              <1>  mov [edi + 0], ax
    66 000000C8 C1E810              <1>  shr eax, 16
    66 000000CB 66894706            <1>  mov [edi + 6], ax
    66                              <1> 
    66 000000CF 5F                  <1>  pop edi
    66 000000D0 58                  <1>  pop eax
    67                                          set_vect        0x21, int_keyboard      ;割り込み処理の登録:KBC
    67 000000D1 50                  <1>  push eax
    67 000000D2 57                  <1>  push edi
    67                              <1> 
    67 000000D3 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    67 000000D8 B8[CA0B0000]        <1>  mov eax, %2
    67                              <1> 
    67                              <1>  %if 3 == %0
    67                              <1>  mov [edi + 4], %3
    67                              <1>  %endif
    67                              <1> 
    67 000000DD 668907              <1>  mov [edi + 0], ax
    67 000000E0 C1E810              <1>  shr eax, 16
    67 000000E3 66894706            <1>  mov [edi + 6], ax
    67                              <1> 
    67 000000E7 5F                  <1>  pop edi
    67 000000E8 58                  <1>  pop eax
    68                                          set_vect        0x28, int_rtc           ;割り込み処理の登録:RTC
    68 000000E9 50                  <1>  push eax
    68 000000EA 57                  <1>  push edi
    68                              <1> 
    68 000000EB BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    68 000000F0 B8[E00A0000]        <1>  mov eax, %2
    68                              <1> 
    68                              <1>  %if 3 == %0
    68                              <1>  mov [edi + 4], %3
    68                              <1>  %endif
    68                              <1> 
    68 000000F5 668907              <1>  mov [edi + 0], ax
    68 000000F8 C1E810              <1>  shr eax, 16
    68 000000FB 66894706            <1>  mov [edi + 6], ax
    68                              <1> 
    68 000000FF 5F                  <1>  pop edi
    68 00000100 58                  <1>  pop eax
    69                                          set_vect        0x81, trap_gate_81, word 0xEF00 ;トラップゲートの登録:1文字出力
    69 00000101 50                  <1>  push eax
    69 00000102 57                  <1>  push edi
    69                              <1> 
    69 00000103 BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    69 00000108 B8[800C0000]        <1>  mov eax, %2
    69                              <1> 
    69                              <1>  %if 3 == %0
    69 0000010D 66C7470400EF        <1>  mov [edi + 4], %3
    69                              <1>  %endif
    69                              <1> 
    69 00000113 668907              <1>  mov [edi + 0], ax
    69 00000116 C1E810              <1>  shr eax, 16
    69 00000119 66894706            <1>  mov [edi + 6], ax
    69                              <1> 
    69 0000011D 5F                  <1>  pop edi
    69 0000011E 58                  <1>  pop eax
    70                                          set_vect        0x82, trap_gate_82, word 0xEF00 ;トラップゲートの登録:点の描画
    70 0000011F 50                  <1>  push eax
    70 00000120 57                  <1>  push edi
    70                              <1> 
    70 00000121 BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    70 00000126 B8[8E0C0000]        <1>  mov eax, %2
    70                              <1> 
    70                              <1>  %if 3 == %0
    70 0000012B 66C7470400EF        <1>  mov [edi + 4], %3
    70                              <1>  %endif
    70                              <1> 
    70 00000131 668907              <1>  mov [edi + 0], ax
    70 00000134 C1E810              <1>  shr eax, 16
    70 00000137 66894706            <1>  mov [edi + 6], ax
    70                              <1> 
    70 0000013B 5F                  <1>  pop edi
    70 0000013C 58                  <1>  pop eax
    71                                  
    72                                          ;---------------------------------------
    73                                          ;デバイスの割り込み許可
    74                                          ;---------------------------------------
    75 0000013D 6A10E8C50900006683-             cdecl   rtc_int_en, 0x10                ;rtc_int_en(UIE); //更新サイクル終了割り込み許可
    75 00000146 C404               
    76 00000148 E8BB0A0000                      cdecl   int_en_timer0                   ;//タイマー(カウンタ0)割り込み許可
    77                                  
    78                                          ;---------------------------------------
    79                                          ;IMR(割り込みマスクレジスタ)の設定
    80                                          ;---------------------------------------
    81                                          outp    0x21, 0b_1111_1000              ;//割り込み有効:スレーブPIC/KBC/タイマー
    81 0000014D B0F8                <1>  mov al, %2
    81 0000014F E621                <1>  out %1, al
    82                                          outp    0xA1, 0b_1111_1110              ;//割り込み有効:RTC
    82 00000151 B0FE                <1>  mov al, %2
    82 00000153 E6A1                <1>  out %1, al
    83                                  
    84                                          ;---------------------------------------
    85                                          ;CPUの割り込み許可
    86                                          ;---------------------------------------
    87 00000155 FB                              sti                                      ;//割り込み許可
    88                                  
    89                                          ;---------------------------------------
    90                                          ;フォントの一覧表示
    91                                          ;---------------------------------------
    92 00000156 6A0D6A3FE8B9030000-             cdecl   draw_font, 63, 13               ;//フォントの一覧表示
    92 0000015F 6683C408           
    93 00000163 6A046A3FE82D040000-             cdecl   draw_color_bar, 63, 4           ;//カラーバーの表示
    93 0000016C 6683C408           
    94                                  
    95                                          ;---------------------------------------
    96                                          ;文字列の表示
    97                                          ;---------------------------------------
    98 00000170 68[BA010000]680F01-             cdecl   draw_str, 25, 14, 0x010F, .s0   ;draw_str();
    98 00000178 00006A0E6A19E8D803-
    98 00000181 00006683C410       
    99                                  
   100                                  .10L:                                           ;while(1)
   101                                                                                  ;{
   102                                          ;---------------------------------------
   103                                          ;タスクの呼び出し
   104                                          ;---------------------------------------
   105                                          ;call    SS_TASK_1:0                     ;       //タスク1へのジャンプ
   106                                  
   107                                          ;---------------------------------------
   108                                          ;回転する棒の表示
   109                                          ;---------------------------------------
   110 00000187 E88B0A0000                      cdecl   draw_rotation_bar               ;       //回転する棒を表示
   111                                  
   112                                          ;---------------------------------------
   113                                          ;キーコードの取得
   114                                          ;---------------------------------------
   115 0000018C 68[CB010000]68-                 cdecl   ring_rd, _KEY_BUFF, .int_key    ;       EAX = ring_rd(buff, &int_key);
   115 00000192 [F00B0000]E8820900-
   115 0000019A 006683C408         
   116 0000019F 83F800                          cmp     eax, 0                          ;       if(EAX != 0)
   117 000001A2 7412                            je      .10E                            ;       {
   118                                  
   119                                          ;---------------------------------------
   120                                          ;キーコードの表示
   121                                          ;---------------------------------------
   122 000001A4 68[F00B0000]6A1D6A-             cdecl   draw_key, 2, 29, _KEY_BUFF      ;               ring_show(key_buff); //全要素を表示
   122 000001AC 02E8C40900006683C4-
   122 000001B5 0C                 
   123                                  .10E:                                           ;       }
   124 000001B6 EBCF                            jmp     .10L                            ;}
   125                                  
   126                                          ;---------------------------------------
   127                                          ;処理の終了
   128                                          ;---------------------------------------
   129 000001B8 EBFE                            jmp     $                               ;while(1) //無限ループ
   130                                  
   131                                  
   132                                  
   133 000001BA 2048656C6C6F2C206B-     .s0:    db      " Hello, kernel! ", 0
   133 000001C3 65726E656C212000   
   134                                  
   135 000001CB 00000000                .int_key:       dd      0
   136                                  
   137 000001CF 00                      ALIGN   4, db   0
   138 000001D0 00000000                FONT_ADR:       dd      0
   139 000001D4 00000000                RTC_TIME:       dd      0
   140                                  
   141                                  ;********************************************************************************************************
   142                                  ;タスク
   143                                  ;********************************************************************************************************
   144                                  %include        "descriptor.s"
     1                              <1> ;********************************************************************************************************
     2                              <1> ;TSS
     3                              <1> ;********************************************************************************************************
     4                              <1> TSS_0:
     5 000001D8 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
     6 000001DC 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                                     ;*  4:ESP0
     7 000001E0 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
     8 000001E4 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
     9 000001E8 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    10 000001EC 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    11 000001F0 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    12 000001F4 00000000            <1> .cr3:           dd  0                                                   ;  28:CR3(PDBR)
    13 000001F8 00000000            <1> .eip:           dd  0                                                   ;  32:EIP
    14 000001FC 00000000            <1> .eflags:        dd  0                                                   ;  36:EFLAGS
    15 00000200 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    16 00000204 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    17 00000208 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    18 0000020C 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    19 00000210 00000000            <1> .esp:           dd  0                                                   ;  56:ESP
    20 00000214 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    21 00000218 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    22 0000021C 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    23 00000220 00000000            <1> .es:            dd  0                                                   ;  72:ES
    24 00000224 00000000            <1> .cs:            dd  0                                                   ;  76:CS
    25 00000228 00000000            <1> .ss:            dd  0                                                   ;  80:SS
    26 0000022C 00000000            <1> .ds:            dd  0                                                   ;  84:DS
    27 00000230 00000000            <1> .fs:            dd  0                                                   ;  88:FS
    28 00000234 00000000            <1> .gs:            dd  0                                                   ;  92:GS
    29 00000238 00000000            <1> .ldt:           dd  0                                                   ;* 96:LDTセグメントセレクタ
    30 0000023C 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    31                              <1> 
    32                              <1> TSS_1:
    33 00000240 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    34 00000244 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                                     ;*  4:ESP0
    35 00000248 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    36 0000024C 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    37 00000250 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    38 00000254 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    39 00000258 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    40 0000025C 00000000            <1> .cr3:           dd  0                                                   ;  28:CR3(PDBR)
    41 00000260 [4C030000]          <1> .eip:           dd  task_1                                              ;  32:EIP
    42 00000264 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
    43 00000268 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    44 0000026C 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    45 00000270 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    46 00000274 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    47 00000278 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56:ESP
    48 0000027C 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    49 00000280 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    50 00000284 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    51 00000288 27000000            <1> .es:            dd  DS_TASK_1                                           ;  72:ES
    52 0000028C 1F000000            <1> .cs:            dd  CS_TASK_1                                           ;  76:CS
    53 00000290 27000000            <1> .ss:            dd  DS_TASK_1                                           ;  80:SS
    54 00000294 27000000            <1> .ds:            dd  DS_TASK_1                                           ;  84:DS
    55 00000298 27000000            <1> .fs:            dd  DS_TASK_1                                           ;  88:FS
    56 0000029C 27000000            <1> .gs:            dd  DS_TASK_1                                           ;  92:GS
    57 000002A0 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
    58 000002A4 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    59                              <1> 
    60                              <1> ;********************************************************************************************************
    61                              <1> ;グローバルディスクリプタテーブル
    62                              <1> ;********************************************************************************************************
    63 000002A8 0000000000000000    <1> GDT:            dq  0x_0000_0000_0000_0000                              ;NULL
    64 000002B0 FFFF0000009ACF00    <1> .cs_kernel:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
    65 000002B8 FFFF00000092CF00    <1> .ds_kernel:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
    66 000002C0 0000000000820000    <1> .ldt:           dq  0x_0000_8200_0000_0000                              ;LDTディスクリプタ
    67 000002C8 6700000000890000    <1> .tss_0:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
    68 000002D0 6700000000890000    <1> .tss_1:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
    69 000002D8 0000080004EC0000    <1> .call_gate:     dq  0x_0000_EC04_0008_0000                              ;386コールゲート(DPL=3, count=4, SEL=8)
    70                              <1> .end:
    71                              <1> 
    72                              <1> CS_KERNEL       equ .cs_kernel  - GDT
    73                              <1> DS_KERNEL       equ .ds_kernel  - GDT
    74                              <1> SS_LDT          equ .ldt        - GDT
    75                              <1> SS_TASK_0       equ .tss_0      - GDT
    76                              <1> SS_TASK_1       equ .tss_1      - GDT
    77                              <1> SS_GATE_0       equ .call_gate  - GDT
    78                              <1> 
    79 000002E0 3700                <1> GDTR:           dw  GDT.end - GDT - 1
    80 000002E2 [A8020000]          <1>                 dd  GDT
    81                              <1> 
    82                              <1> 
    83                              <1> ;********************************************************************************************************
    84                              <1> ;ローカルディスクリプタテーブル
    85                              <1> ;********************************************************************************************************
    86 000002E6 0000000000000000    <1> LDT:            dq  0x_0000_0000_0000_0000                              ;NULL
    87 000002EE FFFF0000009ACF00    <1> .cs_task_0:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
    88 000002F6 FFFF00000092CF00    <1> .ds_task_0:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
    89 000002FE FFFF000000FACF00    <1> .cs_task_1:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
    90 00000306 FFFF000000F2CF00    <1> .ds_task_1:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
    91                              <1> .end:
    92                              <1> 
    93                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                              ;タスク0用CSセレクタ
    94                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                              ;タスク0用DSセレクタ
    95                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                          ;タスク1用CSセレクタ
    96                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                          ;タスク1用DSセレクタ
    97                              <1> 
    98                              <1> LDT_LIMIT       equ .end        - LDT - 1
   145                                  %include        "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 0000030E 60                  <1>         pushad
     6 0000030F 1E                  <1>         push    ds
     7 00000310 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 00000311 66B81000            <1>         mov     ax, 0x0010
    13 00000315 8ED8                <1>         mov     ds, ax
    14 00000317 8EC0                <1>         mov     es, ax
    15                              <1>         
    16                              <1>         ;---------------------------------------
    17                              <1>         ;TICK
    18                              <1>         ;---------------------------------------
    19 00000319 FF05[44030000]      <1>         inc     dword [TIMER_COUNT]             ;TIMER_COUNT++; //割り込み回数の更新
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;割り込みフラグをクリア(EOI)
    23                              <1>         ;---------------------------------------
    24                              <1>         outp 0x20, 0x20
    24 0000031F B020                <2>  mov al, %2
    24 00000321 E620                <2>  out %1, al
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;タスクの切り替え
    28                              <1>         ;---------------------------------------
    29 00000323 660F00C8            <1>         str     ax                              ;AX = TR; //現在のタスクレジスタ
    30 00000327 6683F828            <1>         cmp     ax, SS_TASK_1                   ;case(AX)
    31 0000032B 7409                <1>         je      .11L                            ;{
    32                              <1>                                                 ;       default:
    33 0000032D EA000000002800      <1>         jmp     SS_TASK_1:0                     ;       //タスク1に切り替え
    34 00000334 EB09                <1>         jmp     .10E                            ;       break;
    35                              <1> .11L:                                           ;       case SS_TASK_1:
    36 00000336 EA000000002000      <1>         jmp     SS_TASK_0:0                     ;       //タスク0に切り替え
    37 0000033D EB00                <1>         jmp     .10E                            ;       break;
    38                              <1> .10E:                                           ;}
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;レジスタの復帰
    42                              <1>         ;---------------------------------------
    43 0000033F 07                  <1>         pop     es
    44 00000340 1F                  <1>         pop     ds
    45 00000341 61                  <1>         popad
    46                              <1>         
    47 00000342 CF                  <1>         iret
    48                              <1> 
    49                              <1>         ;---------------------------------------
    50                              <1>         ;データ
    51                              <1>         ;---------------------------------------
    52 00000343 00                  <1> ALIGN   4, db   0
    53 00000344 0000000000000000    <1> TIMER_COUNT:    dq  0
   146                                  %include        "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;文字列の表示
     4                              <1>         ;---------------------------------------
     5 0000034C 68[7C030000]6A076A- <1>         cdecl   SS_GATE_0:0, 63, 0 , 0x07, .s0  ;draw_str();
     5 00000354 006A3F9A0000000030- <1>
     5 0000035D 006683C410          <1>
     6                              <1> 
     7                              <1> .10L:                                           ;while(1)
     8                              <1>                                                 ;{
     9                              <1> 
    10                              <1>         ;---------------------------------------
    11                              <1>         ;時刻の表示
    12                              <1>         ;---------------------------------------
    13 00000362 A1[D4010000]        <1>         mov     eax, [RTC_TIME]                 ;       //時刻の取得
    14 00000367 5068000700006A006A- <1>         cdecl   draw_time, 72, 0, 0x0700, eax   ;       //時刻の表示
    14 00000370 48E83D0500006683C4- <1>
    14 00000379 10                  <1>
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;タスクの呼び出し
    18                              <1>         ;---------------------------------------       
    19                              <1>         ;jmp     SS_TASK_0:0                     ;       //タスク0へのジャンプ
    20                              <1> 
    21 0000037A EBE6                <1>         jmp     .10L                            ;}
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;データ
    25                              <1>         ;---------------------------------------
    26 0000037C 5461736B2D3100      <1> .s0:    db  "Task-1", 0
   147                                  
   148                                  ;********************************************************************************************************
   149                                  ;モジュール
   150                                  ;********************************************************************************************************
   151                                  %include        "..\modules\protect\vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 読み込みプレーン(0~3)
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000383 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000384 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000386 6650                <1>         push    ax
    14 00000388 6652                <1>         push    dx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;読み込みプレーンの選択
    18                              <1>         ;---------------------------------------
    19 0000038A 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    20 0000038D 80E403              <1>         and     ah, 0x03                        ;AH &= 0x03; //余計なビットをマスク
    21 00000390 B004                <1>         mov     al, 0x04                        ;AL = 読み込みマップ選択レジスタ
    22 00000392 66BACE03            <1>         mov     dx, 0x03CE                      ;DX = グラフィックス制御ポート
    23 00000396 66EF                <1>         out     dx, ax                          ;//ポート出力
    24                              <1>         
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00000398 665A                <1>         pop     dx
    29 0000039A 6658                <1>         pop     ax
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;スタックフレームの破棄
    33                              <1>         ;---------------------------------------
    34 0000039C 89EC                <1>         mov     esp, ebp
    35 0000039E 5D                  <1>         pop     ebp
    36                              <1> 
    37 0000039F C3                  <1>         ret
    38                              <1> 
    39                              <1> vga_set_write_plane:
    40                              <1>         ;-----------------------------------
    41                              <1>         ;スタックフレームの構築
    42                              <1>         ;-----------------------------------
    43                              <1>                                             ;   + 8| 書き込みプレーン
    44                              <1>                                             ;   + 4| IP(戻り番号)
    45 000003A0 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    46 000003A1 89E5                <1>         mov    ebp, esp                     ;------|---------
    47                              <1> 
    48                              <1>         ;-----------------------------------
    49                              <1>         ;レジスタの保存
    50                              <1>         ;-----------------------------------
    51 000003A3 6650                <1>         push    ax
    52 000003A5 6652                <1>         push    dx
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;読み込みプレーンの選択
    56                              <1>         ;---------------------------------------
    57 000003A7 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    58 000003AA 80E40F              <1>         and     ah, 0x0F                        ;AH &= 0x03; //余計なビットをマスク
    59 000003AD B002                <1>         mov     al, 0x02                        ;AL = 読み込みマップ選択レジスタ
    60 000003AF 66BAC403            <1>         mov     dx, 0x03C4                      ;DX = グラフィックス制御ポート
    61 000003B3 66EF                <1>         out     dx, ax                          ;//ポート出力
    62                              <1>         
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 000003B5 665A                <1>         pop     dx
    67 000003B7 6658                <1>         pop     ax
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;スタックフレームの破棄
    71                              <1>         ;---------------------------------------
    72 000003B9 89EC                <1>         mov     esp, ebp
    73 000003BB 5D                  <1>         pop     ebp
    74                              <1> 
    75 000003BC C3                  <1>         ret
    76                              <1> 
    77                              <1> vram_font_copy:
    78                              <1>         ;-----------------------------------
    79                              <1>         ;スタックフレームの構築
    80                              <1>         ;-----------------------------------
    81                              <1>                                             ;EBP+20| 描画色
    82                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
    83                              <1>                                             ;EBP+12| VRAMアドレス
    84                              <1>                                             ;   + 8| FONTアドレス
    85                              <1>                                             ;   + 4| IP(戻り番号)
    86 000003BD 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    87 000003BE 89E5                <1>         mov    ebp, esp                     ;------|---------
    88                              <1> 
    89                              <1>         ;-----------------------------------
    90                              <1>         ;レジスタの保存
    91                              <1>         ;-----------------------------------
    92 000003C0 50                  <1>         push    eax
    93 000003C1 53                  <1>         push    ebx
    94 000003C2 51                  <1>         push    ecx
    95 000003C3 57                  <1>         push    edi
    96 000003C4 52                  <1>         push    edx
    97 000003C5 56                  <1>         push    esi
    98                              <1> 
    99                              <1>         ;---------------------------------------
   100                              <1>         ;引数を変数に代入
   101                              <1>         ;---------------------------------------
   102 000003C6 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = フォントアドレス;
   103 000003C9 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   104 000003CC 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   105 000003D0 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   106                              <1> 
   107                              <1>         ;---------------------------------------
   108                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   109                              <1>         ;---------------------------------------
   110 000003D4 84C7                <1>         test    bh, al                          ;ZF = (背景色 & プレーン)
   111 000003D6 0F94C6              <1>         setz    dh                              ;if(ZF == 1){ DH = 0x00; }else{ DH = 0x01;}
   112 000003D9 FECE                <1>         dec     dh                              ;DH--; // 0xFF or 0x00
   113                              <1> 
   114 000003DB 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   115 000003DD 0F94C2              <1>         setz    dl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   116 000003E0 FECA                <1>         dec     dl                              ;DL--; //0xFF or 0x00
   117                              <1> 
   118                              <1>         ;---------------------------------------
   119                              <1>         ;16ビットフォントのコピー
   120                              <1>         ;---------------------------------------
   121 000003E2 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
   122                              <1> 
   123 000003E3 B910000000          <1>         mov     ecx, 16                         ;ECX = 16; //16ドット
   124                              <1> .10L:                                           ;do
   125                              <1>                                                 ;{
   126                              <1>         ;---------------------------------------
   127                              <1>         ;フォントマスクの作成
   128                              <1>         ;---------------------------------------
   129 000003E8 AC                  <1>         lodsb                                   ;   AL = *ESI++; //フォント
   130 000003E9 88C4                <1>         mov     ah, al                          ;   AH = AL;
   131 000003EB F6D4                <1>         not     ah                              ;   AH ~= AH; //!フォント(ビット反転)
   132                              <1> 
   133                              <1>         ;---------------------------------------
   134                              <1>         ;前景色
   135                              <1>         ;---------------------------------------
   136 000003ED 20D0                <1>         and     al, dl                          ;   AL = 前景色 & フォント;
   137                              <1> 
   138                              <1>         ;---------------------------------------
   139                              <1>         ;背景色
   140                              <1>         ;---------------------------------------
   141 000003EF F7C310000000        <1>         test    ebx, 0x0010                     ;if(透過モード)
   142 000003F5 7404                <1>         jz      .11F                            ;{
   143 000003F7 2227                <1>         and     ah, [edi]                       ;   AH = !フォント & [EDI] //現在値
   144 000003F9 EB02                <1>         jmp     .11E                            ;}
   145                              <1> .11F:                                           ;else
   146                              <1>                                                 ;{
   147 000003FB 20F4                <1>         and     ah, dh                          ;   AH = !フォント & 背景色
   148                              <1> .11E:                                           ;}
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;前景色と背景色を合成
   152                              <1>         ;---------------------------------------
   153 000003FD 08E0                <1>         or  al, ah                              ;   AL = 背景 | 前景;
   154                              <1> 
   155                              <1>         ;---------------------------------------
   156                              <1>         ;新しい値を出力（VRAMに代入)
   157                              <1>         ;---------------------------------------
   158 000003FF 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //プレーンに書き込む
   159                              <1> 
   160 00000401 83C750              <1>         add     edi, 80                         ;   EDI += 80;
   161 00000404 E2E2                <1>         loop    .10L                            ;}while(--ECX);
   162                              <1> .10E:
   163                              <1>         ;---------------------------------------
   164                              <1>         ;レジスタの復帰
   165                              <1>         ;---------------------------------------
   166 00000406 5E                  <1>         pop     esi
   167 00000407 5A                  <1>         pop     edx
   168 00000408 5F                  <1>         pop     edi
   169 00000409 59                  <1>         pop     ecx
   170 0000040A 5B                  <1>         pop     ebx
   171 0000040B 58                  <1>         pop     eax
   172                              <1> 
   173                              <1>         ;---------------------------------------
   174                              <1>         ;スタックフレームの破棄
   175                              <1>         ;---------------------------------------
   176 0000040C 89EC                <1>         mov     esp, ebp
   177 0000040E 5D                  <1>         pop     ebp
   178                              <1> 
   179 0000040F C3                  <1>         ret
   180                              <1> 
   181                              <1> vram_bit_copy:
   182                              <1>         ;-----------------------------------
   183                              <1>         ;スタックフレームの構築
   184                              <1>         ;-----------------------------------
   185                              <1>                                             ;EBP+20| 描画色
   186                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
   187                              <1>                                             ;EBP+12| VRAMアドレス
   188                              <1>                                             ;   + 8| 出力ビットパターン
   189                              <1>                                             ;   + 4| IP(戻り番号)
   190 00000410 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
   191 00000411 89E5                <1>         mov    ebp, esp                     ;------|---------
   192                              <1> 
   193                              <1>         ;-----------------------------------
   194                              <1>         ;レジスタの保存
   195                              <1>         ;-----------------------------------
   196 00000413 50                  <1>         push    eax
   197 00000414 53                  <1>         push    ebx
   198 00000415 57                  <1>         push    edi
   199                              <1> 
   200                              <1>         ;---------------------------------------
   201                              <1>         ;引数を変数に代入
   202                              <1>         ;---------------------------------------
   203 00000416 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   204 00000419 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   205 0000041D 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   206                              <1> 
   207                              <1>         ;---------------------------------------
   208                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   209                              <1>         ;---------------------------------------
   210 00000421 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   211 00000423 0F94C3              <1>         setz    bl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   212 00000426 FECB                <1>         dec     bl                              ;DL--; //0xFF or 0x00
   213                              <1> 
   214                              <1>         ;---------------------------------------
   215                              <1>         ;背景のマスクを作成
   216                              <1>         ;---------------------------------------
   217 00000428 8A4508              <1>         mov     al, [ebp + 8]                   ;AL = 出力ビットパターン;
   218 0000042B 88C4                <1>         mov     ah, al                          ;AH ~= AL; //!出力ビットパターン(ビット反転)
   219 0000042D F6D4                <1>         not     ah
   220                              <1> 
   221                              <1>         ;---------------------------------------
   222                              <1>         ;背景色
   223                              <1>         ;---------------------------------------
   224 0000042F 2227                <1>         and     ah, [edi]                       ;AH = 現在値 & !出力ビットパターン
   225 00000431 20D8                <1>         and     al, bl                          ;AL = 表示色 & 出力ビットパターン
   226 00000433 08E0                <1>         or      al, ah                          ;AL |= AH;
   227 00000435 8807                <1>         mov     [edi], al                       ;[EDI] = BL; //プレーンに書き込む
   228                              <1> 
   229                              <1>         ;---------------------------------------
   230                              <1>         ;レジスタの復帰
   231                              <1>         ;---------------------------------------
   232 00000437 5F                  <1>         pop     edi
   233 00000438 5B                  <1>         pop     ebx
   234 00000439 58                  <1>         pop     eax
   235                              <1> 
   236                              <1>         ;---------------------------------------
   237                              <1>         ;スタックフレームの破棄
   238                              <1>         ;---------------------------------------
   239 0000043A 89EC                <1>         mov     esp, ebp
   240 0000043C 5D                  <1>         pop     ebp
   241                              <1> 
   242 0000043D C3                  <1>         ret
   152                                  %include        "..\modules\protect\draw_char.s"
     1                              <1> draw_char:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +20| 文字
     6                              <1>                                             ;   +16| 描画色
     7                              <1>                                             ;   +12| 行(0~29)
     8                              <1>                                             ;   + 8| 列(0~79)
     9                              <1>                                             ;   + 4| IP(戻り番号)
    10 0000043E 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    11 0000043F 89E5                <1>         mov    ebp, esp                     ;------|---------
    12                              <1> 
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000441 53                  <1>         push    ebx
    17 00000442 57                  <1>         push    edi
    18 00000443 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 00000444 0FB67514            <1>         movzx   esi, byte [ebp +20]             ;CL = 文字コード;
    24 00000448 C1E604              <1>         shl     esi, 4                          ;CL *= 16; //1文字16バイト
    25 0000044B 0335[D0010000]      <1>         add     esi, [FONT_ADR]                 ;ESI = フォントアドレス;
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;コピー先アドレスを取得
    29                              <1>         ;adr = 0xA0000 + (640 / 8 * 16) * y + x
    30                              <1>         ;---------------------------------------
    31 00000451 8B7D0C              <1>         mov     edi, [ebp +12]                  ;Y(行)
    32 00000454 C1E708              <1>         shl     edi, 8                          ;EDI = Y * 256;
    33 00000457 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]  ;EDI = Y * 4 + Y;
    34 0000045E 037D08              <1>         add     edi, [ebp + 8]                  ;X(列)
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;同期処理(リソース解法待ち(ビジーウェイト))
    38                              <1>         ;---------------------------------------
    39                              <1> %ifdef  USE_TEST_AND_SET
    40 00000461 68[14050000]E83008- <1>         cdecl   test_and_set, IN_USE            ;//リソースの空き待ち
    40 00000469 00006683C404        <1>
    41                              <1> %endif
    42                              <1> 
    43                              <1>         ;---------------------------------------
    44                              <1>         ;1文字文のフォントを出力
    45                              <1>         ;---------------------------------------
    46 0000046F 0FB75D10            <1>         movzx   ebx, word [ebp +16]             ; //表示色
    47                              <1> 
    48 00000473 6A03E809FFFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;//読み込みプレーン:輝度(I)
    48 0000047C C404                <1>
    49 0000047E 6A08E81BFFFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;//書き込みプレーン:輝度(I)
    49 00000487 C404                <1>
    50 00000489 536A085756E82AFFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x08, ebx
    50 00000492 FF6683C410          <1>
    51                              <1>         
    52 00000497 6A02E8E5FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;//読み込みプレーン:赤(R)
    52 000004A0 C404                <1>
    53 000004A2 6A04E8F7FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;//書き込みプレーン:赤(R)
    53 000004AB C404                <1>
    54 000004AD 536A045756E806FFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x04, ebx
    54 000004B6 FF6683C410          <1>
    55                              <1> 
    56 000004BB 6A01E8C1FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;//読み込みプレーン:緑(G)
    56 000004C4 C404                <1>
    57 000004C6 6A02E8D3FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;//書き込みプレーン:緑(G)
    57 000004CF C404                <1>
    58 000004D1 536A025756E8E2FEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x02, ebx
    58 000004DA FF6683C410          <1>
    59                              <1> 
    60 000004DF 6A00E89DFEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;//読み込みプレーン:青(B)
    60 000004E8 C404                <1>
    61 000004EA 6A01E8AFFEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;//書き込みプレーン:青(B)
    61 000004F3 C404                <1>
    62 000004F5 536A015756E8BEFEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x01, ebx
    62 000004FE FF6683C410          <1>
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;同期処理(リソース解法)
    66                              <1>         ;---------------------------------------
    67                              <1> %ifdef  USE_TEST_AND_SET
    68 00000503 C705[14050000]0000- <1>         mov     [IN_USE], dword 0               ;変数のクリア
    68 0000050B 0000                <1>
    69                              <1> %endif
    70                              <1> 
    71                              <1>         ;---------------------------------------
    72                              <1>         ;レジスタの復帰
    73                              <1>         ;---------------------------------------
    74 0000050D 5E                  <1>         pop     esi
    75 0000050E 5F                  <1>         pop     edi
    76 0000050F 5B                  <1>         pop     ebx
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 00000510 89EC                <1>         mov     esp, ebp
    82 00000512 5D                  <1>         pop     ebp
    83                              <1> 
    84 00000513 C3                  <1>         ret
    85                              <1> 
    86                              <1>         ;---------------------------------------
    87                              <1>         ;データ
    88                              <1>         ;---------------------------------------
    89                              <1> ALIGN   4,      db      0
    90 00000514 00000000            <1> IN_USE:         dd      0
   153                                  %include        "..\modules\protect\draw_font.s"
     1                              <1> draw_font:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000518 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000519 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 0000051B 50                  <1>         push    eax
    15 0000051C 53                  <1>         push    ebx
    16 0000051D 51                  <1>         push    ecx
    17 0000051E 57                  <1>         push    edi
    18 0000051F 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 00000520 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 00000523 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;コピー先アドレスを取得
    28                              <1>         ;---------------------------------------
    29 00000526 B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 0000052B 81F900010000        <1> .10L:   cmp     ecx, 256                        ;    ECX < 256;
    31 00000531 731F                <1>         jae     .10E                            ;
    32                              <1>                                                 ;    ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示する桁位置を計算
    36                              <1>         ;---------------------------------------
    37 00000533 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 00000535 83E00F              <1>         and     eax, 0x0F                       ;   EAX &= 0x0F;
    39 00000538 01F0                <1>         add     eax, esi                        ;   EAX += X;
    40                              <1>         ;---------------------------------------
    41                              <1>         ;表示する行位置を計算
    42                              <1>         ;---------------------------------------
    43 0000053A 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    44 0000053C C1EB04              <1>         shr     ebx, 4                          ;   EBX /= 16;
    45 0000053F 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    46                              <1>         
    47 00000541 516A075350E8F3FEFF- <1>         cdecl   draw_char, eax, ebx, 0x07, ecx  ;   draw_char();
    47 0000054A FF6683C410          <1>
    48                              <1> 
    49 0000054F 41                  <1>         inc     ecx                             ;   //for(... ECX++)
    50 00000550 EBD9                <1>         jmp     .10L                            ;
    51                              <1> .10E:                                           ;}
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;レジスタの復帰
    55                              <1>         ;---------------------------------------
    56 00000552 5E                  <1>         pop     esi
    57 00000553 5F                  <1>         pop     edi
    58 00000554 59                  <1>         pop     ecx
    59 00000555 5B                  <1>         pop     ebx
    60 00000556 58                  <1>         pop     eax
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;スタックフレームの破棄
    64                              <1>         ;---------------------------------------
    65 00000557 89EC                <1>         mov     esp, ebp
    66 00000559 5D                  <1>         pop     ebp
    67                              <1> 
    68 0000055A C3                  <1>         ret
   154                                  %include        "..\modules\protect\draw_str.s"
     1                              <1> draw_str:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 0000055B 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 0000055C 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 0000055E 50                  <1>         push    eax
    15 0000055F 53                  <1>         push    ebx
    16 00000560 51                  <1>         push    ecx
    17 00000561 52                  <1>         push    edx
    18 00000562 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 00000563 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = 列;
    24 00000566 8B550C              <1>         mov     edx, [ebp +12]                  ;EDX = 行;
    25 00000569 0FB75D10            <1>         movzx   ebx, word [ebp + 16]            ;EBX = 表示色;
    26 0000056D 8B7514              <1>         mov     esi, [ebp +20]                  ;ESI = 文字列へのアドレス;
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字列を表示
    30                              <1>         ;---------------------------------------
    31 00000570 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
    32                              <1> .10L:                                           ;do
    33                              <1>                                                 ;{
    34 00000571 AC                  <1>         lodsb                                   ;   AL = *ESI++;
    35 00000572 3C00                <1>         cmp     al, 0                           ;   if(0 == AL)
    36 00000574 741A                <1>         je  .10E                                ;       break;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;システムコールを利用して文字を出力する
    40                              <1>         ;---------------------------------------
    41                              <1> %ifdef  USE_SYSTEM_CALL
    42 00000576 CD81                <1>         int     0x81                            ;       sys_call(1, X, Y, 色, 文字);
    43                              <1> %else
    44                              <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;       draw_char();
    45                              <1> %endif
    46                              <1> 
    47                              <1>         ;---------------------------------------
    48                              <1>         ;文字の表示位置を更新
    49                              <1>         ;---------------------------------------
    50 00000578 41                  <1>         inc     ecx                             ;   ECX++; //列を加算
    51 00000579 83F950              <1>         cmp     ecx, 80                         ;   if(80 <= ECX) //80文字以上?
    52 0000057C 7C10                <1>         jl      .12E                            ;   {
    53 0000057E B900000000          <1>         mov     ecx, 0                          ;       ECX = 0; //列を初期化
    54 00000583 42                  <1>         inc     edx                             ;       EDX++; //行を加算
    55 00000584 83FA1E              <1>         cmp     edx, 30                         ;       if(30 <= EDX) //30行以上?
    56 00000587 7C05                <1>         jl      .12E                            ;       {
    57 00000589 BA00000000          <1>         mov     edx, 0                          ;           EDX = 0;
    58                              <1>                                                 ;       }
    59                              <1> .12E:                                           ;   }
    60 0000058E EBE1                <1>         jmp     .10L                            ;
    61                              <1> .10E:                                           ;}while(1);
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 00000590 5E                  <1>         pop     esi
    67 00000591 5A                  <1>         pop     edx
    68 00000592 59                  <1>         pop     ecx
    69 00000593 5B                  <1>         pop     ebx
    70 00000594 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 00000595 89EC                <1>         mov     esp, ebp
    76 00000597 5D                  <1>         pop     ebp
    77                              <1> 
    78 00000598 C3                  <1>         ret
   155                                  %include        "..\modules\protect\draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000599 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 0000059A 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 0000059C 50                  <1>         push    eax
    15 0000059D 53                  <1>         push    ebx
    16 0000059E 51                  <1>         push    ecx
    17 0000059F 52                  <1>         push    edx
    18 000005A0 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 000005A1 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 000005A4 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;カラーバーを表示
    28                              <1>         ;---------------------------------------
    29 000005A7 B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 000005AC 83F910              <1> .10L:   cmp     ecx, 16                         ;    ECX < 16;
    31 000005AF 732E                <1>         jae     .10E
    32                              <1>                                                 ;ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示位置を計算(列)
    36                              <1>         ;---------------------------------------
    37 000005B1 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 000005B3 83E001              <1>         and     eax, 0x01                       ;   EAX &= 0x01;
    39 000005B6 C1E003              <1>         shl     eax, 3                          ;   EAX *= 8; //8文字分乗算
    40 000005B9 01F0                <1>         add     eax, esi                        ;   EAX += X;
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;表示位置を計算(行)
    44                              <1>         ;---------------------------------------
    45 000005BB 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    46 000005BD D1EB                <1>         shr     ebx, 1                          ;   EBX /= 2;
    47 000005BF 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    48                              <1> 
    49                              <1>         ;---------------------------------------
    50                              <1>         ;描画色を計算
    51                              <1>         ;---------------------------------------
    52 000005C1 89CA                <1>         mov     edx, ecx                        ;   EDX = ECX;
    53 000005C3 D1E2                <1>         shl     edx, 1                          ;   EDX *= 2;
    54 000005C5 8B92[F1050000]      <1>         mov     edx, [.t0 + edx]                ;   EDX += Y;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;カラーバーを表示
    58                              <1>         ;---------------------------------------
    59 000005CB 68[E8050000]525350- <1>         cdecl   draw_str, eax, ebx, edx, .s0    ;   draw_str();
    59 000005D3 E883FFFFFF6683C410  <1>
    60                              <1> 
    61 000005DC 41                  <1>         inc     ecx                             ;   //for(...ECX++
    62 000005DD EBCD                <1>         jmp     .10L                            ;
    63                              <1> .10E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;レジスタの復帰
    67                              <1>         ;---------------------------------------
    68 000005DF 5E                  <1>         pop     esi
    69 000005E0 5A                  <1>         pop     edx
    70 000005E1 59                  <1>         pop     ecx
    71 000005E2 5B                  <1>         pop     ebx
    72 000005E3 58                  <1>         pop     eax
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;スタックフレームの破棄
    76                              <1>         ;---------------------------------------
    77 000005E4 89EC                <1>         mov     esp, ebp
    78 000005E6 5D                  <1>         pop     ebp
    79                              <1> 
    80 000005E7 C3                  <1>         ret
    81                              <1> 
    82                              <1>         ;---------------------------------------
    83                              <1>         ;データ
    84                              <1>         ;---------------------------------------
    85 000005E8 202020202020202000  <1> .s0:    db  '        ', 0                       ;8文字分のスペース(表示色だけを変更)
    86                              <1> 
    87 000005F1 00000008            <1> .t0:    dw  0x0000, 0x0800                      ;カラーバーの背景色
    88 000005F5 00010009            <1>         dw  0x0100, 0x0900
    89 000005F9 0002000A            <1>         dw  0x0200, 0x0A00
    90 000005FD 0003000B            <1>         dw  0x0300, 0x0B00
    91 00000601 0004000C            <1>         dw  0x0400, 0x0C00
    92 00000605 0005000D            <1>         dw  0x0500, 0x0D00
    93 00000609 0006000E            <1>         dw  0x0600, 0x0E00
    94 0000060D 0007000F            <1>         dw  0x0700, 0x0F00
   156                                  %include        "..\modules\protect\draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +16| 色
     6                              <1>                                             ;   +12| Y(行)
     7                              <1>                                             ;   + 8| X(列)
     8                              <1>                                             ;   + 4| IP(戻り番号)
     9 00000611 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    10 00000612 89E5                <1>         mov    ebp, esp                     ;------|---------
    11                              <1> 
    12                              <1>         ;-----------------------------------
    13                              <1>         ;レジスタの保存
    14                              <1>         ;-----------------------------------
    15 00000614 50                  <1>         push    eax
    16 00000615 53                  <1>         push    ebx
    17 00000616 51                  <1>         push    ecx
    18 00000617 57                  <1>         push    edi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;描画位置のメモリアドレスを計算
    22                              <1>         ;---------------------------------------
    23                              <1>         ;---------------------------------------
    24                              <1>         ;Y座標を80倍する(640/8)
    25                              <1>         ;---------------------------------------
    26 00000618 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y座標;
    27 0000061B C1E704              <1>         shl     edi, 4                          ;EDI *= 16;
    28 0000061E 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000] ;EDI = 0xA_0000[EDI * 4 + EDI];
    29                              <1>         
    30                              <1>         ;---------------------------------------
    31                              <1>         ;X座標を1/8して加算
    32                              <1>         ;---------------------------------------
    33 00000625 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;EBX = X座標;
    34 00000628 89D9                <1>         mov     ecx, ebx                        ;ECX = X座標; //一時保存
    35 0000062A C1EB03              <1>         shr     ebx, 3                          ;EBX /= 8;
    36 0000062D 01DF                <1>         add     edi, ebx                        ;EDI += EBX;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;X座標を8で割った余りからビット位置を計算(出力ビットパターン)
    40                              <1>         ;(0=0x80, 1=0x40,... 7=0x01)
    41                              <1>         ;---------------------------------------
    42 0000062F 83E107              <1>         and     ecx, 0x07                       ;ECX = X & 0x07;
    43 00000632 BB80000000          <1>         mov     ebx, 0x80                       ;EBX = 0x80;
    44 00000637 D3EB                <1>         shr     ebx, cl                         ;EBX >>= ECX;
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;色を指定
    48                              <1>         ;---------------------------------------
    49 00000639 8B4D10              <1>         mov     ecx, [ebp +16]                  ;表示色
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;プレーンごとに出力
    53                              <1>         ;---------------------------------------
    54 0000063C 6A03E840FDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;輝度(I)プレーンを選択
    54 00000645 C404                <1>
    55 00000647 6A08E852FDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;輝度(I)プレーンを選択
    55 00000650 C404                <1>
    56 00000652 516A085753E8B4FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    56 0000065B FF6683C410          <1>
    57                              <1> 
    58 00000660 6A02E81CFDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;赤(R)プレーンを選択
    58 00000669 C404                <1>
    59 0000066B 6A04E82EFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;赤(R)プレーンを選択
    59 00000674 C404                <1>
    60 00000676 516A045753E890FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    60 0000067F FF6683C410          <1>
    61                              <1> 
    62 00000684 6A01E8F8FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;緑(G)プレーンを選択
    62 0000068D C404                <1>
    63 0000068F 6A02E80AFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;緑(G)プレーンを選択
    63 00000698 C404                <1>
    64 0000069A 516A025753E86CFDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    64 000006A3 FF6683C410          <1>
    65                              <1> 
    66 000006A8 6A00E8D4FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;青(B)プレーンを選択
    66 000006B1 C404                <1>
    67 000006B3 6A01E8E6FCFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;青(B)プレーンを選択
    67 000006BC C404                <1>
    68 000006BE 516A015753E848FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    68 000006C7 FF6683C410          <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;レジスタの復帰
    72                              <1>         ;---------------------------------------
    73 000006CC 5F                  <1>         pop     edi
    74 000006CD 59                  <1>         pop     ecx
    75 000006CE 5B                  <1>         pop     ebx
    76 000006CF 58                  <1>         pop     eax
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 000006D0 89EC                <1>         mov     esp, ebp
    82 000006D2 5D                  <1>         pop     ebp
    83                              <1> 
    84 000006D3 C3                  <1>         ret
   157                                  %include        "..\modules\protect\draw_line.s"
     1                              <1> draw_line:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 000006D4 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 000006D5 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;変数を定義
    16                              <1>         ;-----------------------------------
    17 000006D7 6A00                <1>         push    dword 0                     ;   - 4| sum = 0; //相対軸の積算値
    18 000006D9 6A00                <1>         push    dword 0                     ;   - 8| x0 = 0; //X座標
    19 000006DB 6A00                <1>         push    dword 0                     ;   -12| dx = 0; //X増分
    20 000006DD 6A00                <1>         push    dword 0                     ;   -16| inc_x = 0; //X座標増分(基準軸:1 or -1)
    21 000006DF 6A00                <1>         push    dword 0                     ;   -20| y0 = 0; //Y座標
    22 000006E1 6A00                <1>         push    dword 0                     ;   -24| dy = 0; //Y増分
    23 000006E3 6A00                <1>         push    dword 0                     ;   -28| inc_y = 0; //Y座標増分(基準軸:1 or -1)
    24                              <1> 
    25                              <1>         ;-----------------------------------
    26                              <1>         ;レジスタの保存
    27                              <1>         ;-----------------------------------
    28 000006E5 50                  <1>         push    eax
    29 000006E6 53                  <1>         push    ebx
    30 000006E7 51                  <1>         push    ecx
    31 000006E8 57                  <1>         push    edi
    32 000006E9 52                  <1>         push    edx
    33 000006EA 56                  <1>         push    esi
    34                              <1> 
    35                              <1>         ;---------------------------------------
    36                              <1>         ;幅を計算(X軸)
    37                              <1>         ;---------------------------------------
    38 000006EB 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    39 000006EE 8B5D10              <1>         mov     ebx, [ebp +16]                  ;EBX = X1;
    40 000006F1 29C3                <1>         sub     ebx, eax                        ;EBX = X1 - X0; //幅
    41 000006F3 7D09                <1>         jge     .10F                            ;if(幅 < 0)
    42                              <1>                                                 ;{
    43 000006F5 F7DB                <1>         neg     ebx                             ;   幅 *= -1;
    44 000006F7 BEFFFFFFFF          <1>         mov     esi, -1                         ;   //X座標の増分
    45 000006FC EB05                <1>         jmp     .10E                            ;}
    46                              <1> .10F:                                           ;else
    47                              <1>                                                 ;{
    48 000006FE BE01000000          <1>         mov     esi, 1                          ;   //X座標の増分
    49                              <1> .10E:                                           ;}
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;高さを計算(Y軸)
    53                              <1>         ;---------------------------------------
    54 00000703 8B4D0C              <1>         mov     ecx, [ebp +12]                  ;ECX = Y0;
    55 00000706 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    56 00000709 29CA                <1>         sub     edx, ecx                        ;EDX = Y1 - Y0; //高さ
    57 0000070B 7D09                <1>         jge     .20F                            ;if(高さ < 0)
    58                              <1>                                                 ;{
    59 0000070D F7DA                <1>         neg     edx                             ;   高さ *= -1;
    60 0000070F BFFFFFFFFF          <1>         mov     edi, -1                         ;   //Y座標の増分
    61 00000714 EB05                <1>         jmp     .20E                            ;}
    62                              <1> .20F:                                           ;else
    63                              <1>                                                 ;{
    64 00000716 BF01000000          <1>         mov     edi, 1                          ;   //Y座標の増分
    65                              <1> .20E:                                           ;}
    66                              <1>         
    67                              <1>         ;---------------------------------------
    68                              <1>         ;X軸
    69                              <1>         ;---------------------------------------
    70 0000071B 8945F8              <1>         mov     [ebp - 8], eax                  ;//X軸:開始座標
    71 0000071E 895DF4              <1>         mov     [ebp -12], ebx                  ;//X軸:描画幅
    72 00000721 8975F0              <1>         mov     [ebp -16], esi                  ;//X軸:増分(基準軸:1 or -1)
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;Y軸
    76                              <1>         ;---------------------------------------
    77 00000724 894DEC              <1>         mov     [ebp -20], ecx                  ;//Y軸:開始座標
    78 00000727 8955E8              <1>         mov     [ebp -24], edx                  ;//Y軸:描画幅
    79 0000072A 897DE4              <1>         mov     [ebp -28], edi                  ;//Y軸:増分(基準軸:1 or -1)
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;基準軸を決める
    83                              <1>         ;---------------------------------------
    84 0000072D 39D3                <1>         cmp     ebx, edx                        ;if(幅 <= 高さ)
    85 0000072F 7F08                <1>         jg      .22F                            ;{
    86                              <1>         
    87 00000731 8D75EC              <1>         lea     esi, [ebp -20]                  ;   //X軸が基準軸
    88 00000734 8D7DF8              <1>         lea     edi, [ebp - 8]                  ;   //Y軸が相対軸
    89                              <1> 
    90 00000737 EB06                <1>         jmp     .22E                            ;}
    91                              <1> .22F:                                           ;else
    92                              <1>                                                 ;{
    93 00000739 8D75F8              <1>         lea     esi, [ebp - 8]                  ;   //Y軸が基準軸
    94 0000073C 8D7DEC              <1>         lea     edi, [ebp -20]                  ;   //X軸が相対軸
    95                              <1> .22E:                                           ;}
    96                              <1> 
    97                              <1>         ;---------------------------------------
    98                              <1>         ;繰り返し回数(基準軸のドット数)(基準軸の長さが0な場合,繰り返し回数を1に設定し,1ピクセルの点を描画)
    99                              <1>         ;---------------------------------------
   100 0000073F 8B4EFC              <1>         mov     ecx, [esi - 4]                  ;ECX = 基準軸描画幅
   101 00000742 83F900              <1>         cmp     ecx, 0                          ;if(0 == ECX)
   102 00000745 7505                <1>         jnz     .30E                            ;{
   103 00000747 B901000000          <1>         mov     ecx, 1                          ;   ECX = 1;
   104                              <1> .30E:                                           ;}
   105                              <1> 
   106                              <1>         ;---------------------------------------
   107                              <1>         ;線を描画
   108                              <1>         ;---------------------------------------
   109                              <1> .50L:                                           ;do
   110                              <1>                                                 ;{
   111                              <1>         
   112                              <1>         ;---------------------------------------
   113                              <1>         ;同期処理
   114                              <1>         ;---------------------------------------
   115                              <1> %ifdef  USE_SYSTEM_CALL
   116 0000074C 89C8                <1>         mov     eax, ecx                        ;       //繰り返し回数を保存
   117                              <1> 
   118 0000074E 8B5D18              <1>         mov     ebx, [ebp +24]                  ;       EBX = 表示色;
   119 00000751 8B4DF8              <1>         mov     ecx, [ebp - 8]                  ;       ECX = X座標;
   120 00000754 8B55EC              <1>         mov     edx, [ebp -20]                  ;       ECX = Y座標;
   121 00000757 CD82                <1>         int     0x82                            ;       sys_call(1, X, Y, 色, 文字); //BX(C), CX(X), DX(Y)
   122                              <1> 
   123 00000759 89C1                <1>         mov     ecx, eax
   124                              <1> %else
   127                              <1>         cdecl   draw_pixel, dword [ebp - 8],                             dword [ebp -20],                             dword [ebp +24]     ;   //点の描画
   128                              <1> %endif
   129                              <1> 
   130                              <1>         ;---------------------------------------
   131                              <1>         ;基準軸を更新
   132                              <1>         ;---------------------------------------
   133 0000075B 8B46F8              <1>         mov     eax, [esi - 8]                  ;   EAX = 基準軸増加(1 or -1);
   134 0000075E 0106                <1>         add     [esi - 0], eax                  ;
   135                              <1> 
   136                              <1>         ;---------------------------------------
   137                              <1>         ;相対軸を更新
   138                              <1>         ;---------------------------------------
   139 00000760 8B45FC              <1>         mov     eax, [ebp - 4]                  ;   EAX = sum;  //相対軸の積算値
   140 00000763 0347FC              <1>         add     eax, [edi - 4]                  ;   EAX += dy;  //増加(相対軸の描画幅)
   141                              <1> 
   142 00000766 8B5EFC              <1>         mov     ebx, [esi - 4]                  ;   EBX = dx;   //増分(基準軸の描画幅)
   143                              <1> 
   144 00000769 39D8                <1>         cmp     eax, ebx                        ;   if(積算値 <= 相対軸の増分)
   145 0000076B 7C07                <1>         jl      .52E                            ;   {
   146 0000076D 29D8                <1>         sub     eax, ebx                        ;       EAX -= EBX; //積算値から相対軸の増分を減算
   147                              <1>                                                 ;       //相対軸の座標を更新(1ドット分)
   148 0000076F 8B5FF8              <1>         mov     ebx, [edi - 8]                  ;       EBX = 相対軸増分;
   149 00000772 011F                <1>         add     [edi - 0], ebx                  ;       相対軸座標 = EBX;
   150                              <1> .52E:                                           ;   }
   151                              <1> 
   152 00000774 8945FC              <1>         mov     [ebp - 4], eax                  ;//積算値を更新
   153                              <1> 
   154 00000777 E2D3                <1>         loop    .50L
   155                              <1> .50E:                                           ;} while(ループ回数--);
   156                              <1> 
   157                              <1>         ;---------------------------------------
   158                              <1>         ;レジスタの復帰
   159                              <1>         ;---------------------------------------
   160 00000779 5E                  <1>         pop     esi
   161 0000077A 5A                  <1>         pop     edx
   162 0000077B 5F                  <1>         pop     edi
   163 0000077C 59                  <1>         pop     ecx
   164 0000077D 5B                  <1>         pop     ebx
   165 0000077E 58                  <1>         pop     eax
   166                              <1> 
   167                              <1>         ;---------------------------------------
   168                              <1>         ;スタックフレームの破棄
   169                              <1>         ;---------------------------------------
   170 0000077F 89EC                <1>         mov     esp, ebp
   171 00000781 5D                  <1>         pop     ebp
   172                              <1> 
   173 00000782 C3                  <1>         ret
   158                                  %include        "..\modules\protect\draw_rect.s"
     1                              <1> draw_rect:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000783 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000784 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000786 50                  <1>         push    eax
    17 00000787 53                  <1>         push    ebx
    18 00000788 51                  <1>         push    ecx
    19 00000789 52                  <1>         push    edx
    20 0000078A 56                  <1>         push    esi
    21                              <1> 
    22                              <1>         ;---------------------------------------
    23                              <1>         ;変数に引数を代入
    24                              <1>         ;---------------------------------------
    25 0000078B 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    26 0000078E 8B5D0C              <1>         mov     ebx, [ebp +12]                  ;EBX = Y0;
    27 00000791 8B4D10              <1>         mov     ecx, [ebp +16]                  ;ECX = X1;
    28 00000794 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    29 00000797 8B7518              <1>         mov     esi, [ebp +24]                  ;ESI = 色;
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;座標軸の大小を確定
    33                              <1>         ;---------------------------------------
    34 0000079A 39C8                <1>         cmp     eax, ecx                        ;if(X1 < X0)
    35 0000079C 7C01                <1>         jl      .10E                            ;{
    36 0000079E 91                  <1>         xchg    eax, ecx                        ;   //X0とX1を入れ替える;
    37                              <1> .10E:                                           ;}
    38                              <1> 
    39 0000079F 39D3                <1>         cmp     ebx, edx                        ;if(Y1 < Y0)
    40 000007A1 7C02                <1>         jl      .20E                            ;{
    41 000007A3 87DA                <1>         xchg    ebx, edx                        ;   //Y0とY1を入れ替える;
    42                              <1> .20E:                                           ;}
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;矩形を描画
    46                              <1>         ;---------------------------------------
    47 000007A5 5653515350E825FFFF- <1>         cdecl   draw_line, eax, ebx, ecx, ebx, esi  ;上線
    47 000007AE FF6683C414          <1>
    48 000007B3 5652505350E817FFFF- <1>         cdecl   draw_line, eax, ebx, eax, edx, esi  ;左線
    48 000007BC FF6683C414          <1>
    49                              <1> 
    50 000007C1 4A                  <1>         dec     edx                                 ;EDX--; //下線は1ドット上げる
    51 000007C2 5652515250E808FFFF- <1>         cdecl   draw_line, eax, edx, ecx, edx, esi  ;下線
    51 000007CB FF6683C414          <1>
    52 000007D0 42                  <1>         inc     edx
    53                              <1> 
    54 000007D1 49                  <1>         dec     ecx                                 ;ECX--; //右線は1ドット左に移動
    55 000007D2 5652515351E8F8FEFF- <1>         cdecl   draw_line, ecx, ebx, ecx, edx, esi  ;右線
    55 000007DB FF6683C414          <1>
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの復帰
    59                              <1>         ;---------------------------------------
    60 000007E0 5E                  <1>         pop     esi
    61 000007E1 5A                  <1>         pop     edx
    62 000007E2 59                  <1>         pop     ecx
    63 000007E3 5B                  <1>         pop     ebx
    64 000007E4 58                  <1>         pop     eax
    65                              <1> 
    66                              <1>         ;---------------------------------------
    67                              <1>         ;スタックフレームの破棄
    68                              <1>         ;---------------------------------------
    69 000007E5 89EC                <1>         mov     esp, ebp
    70 000007E7 5D                  <1>         pop     ebp
    71                              <1> 
    72 000007E8 C3                  <1>         ret
   159                                  %include        "..\modules\protect\itoa.s"
     1                              <1> itoa:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 000007E9 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 000007EA 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 000007EC 50                  <1>         push    eax
    18 000007ED 53                  <1>         push    ebx
    19 000007EE 51                  <1>         push    ecx
    20 000007EF 52                  <1>         push    edx
    21 000007F0 56                  <1>         push    esi
    22 000007F1 57                  <1>         push    edi
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;引数の取得
    26                              <1>         ;---------------------------------------
    27 000007F2 8B4508              <1>         mov     eax, [ebp + 8]                  ;eax(val) =  数値;
    28 000007F5 8B750C              <1>         mov     esi, [ebp + 12]                 ;esi(dst) = バッファアドレス;
    29 000007F8 8B4D10              <1>         mov     ecx, [ebp + 16]                 ;ecx(size) = バッファサイズ;
    30                              <1> 
    31 000007FB 89F7                <1>         mov     edi, esi                        ;edi = esi(dst); //バッファの最後尾
    32 000007FD 01CF                <1>         add     edi, ecx                        ;edi(dst) = edi + ecx - 1;
    33 000007FF 4F                  <1>         dec     edi
    34                              <1> 
    35 00000800 8B5D18              <1>         mov     ebx, [ebp + 24]            ;flags = オプション;
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;符号付き判定
    39                              <1>         ;---------------------------------------
    40 00000803 F7C301000000        <1>         test    ebx, 0b0001                      ;if(flags & 0x01) //符号付き
    41 00000809 7408                <1> .10Q:   je      .10E                            ;{
    42 0000080B 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    43 0000080E 7D03                <1> .12Q:   jge     .12E                            ;   {
    44 00000810 83CB02              <1>         or      ebx, 0b0010                     ;       flags |= 2; //符号表示
    45                              <1> .12E:                                           ;   }
    46                              <1> .10E:                                           ;}
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;符号付き判定
    50                              <1>         ;---------------------------------------
    51 00000813 F7C302000000        <1>         test    ebx, 0b0010                     ;if(flags & 0x02) //符号出力判定
    52 00000819 7410                <1> .20Q:   je      .20E                            ;{
    53 0000081B 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    54 0000081E 7D07                <1> .22Q:   jge     .22F                            ;   {
    55 00000820 F7D8                <1>         neg     eax                             ;       val *= -1; //符号反転
    56 00000822 C6062D              <1>         mov     [esi], byte '-'                 ;       *dst = '-'; //符号表示
    57 00000825 EB03                <1>         jmp     .22E                            ;   }
    58                              <1> .22F:                                           ;   else
    59                              <1>                                                 ;   {
    60 00000827 C6062B              <1>         mov     [esi], byte '+'                 ;       *dst = '+'; //符号表示
    61                              <1> .22E:                                           ;   }
    62 0000082A 49                  <1>         dec     ecx                             ;   size--;     //残りバッファサイズの減算
    63                              <1> .20E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;ASCII変換
    67                              <1>         ;---------------------------------------
    68 0000082B 8B5D14              <1>         mov     ebx, [ebp + 20]                 ;BX = 基数;
    69                              <1> .30L:                                           ;do
    70                              <1>                                                 ;{
    71 0000082E BA00000000          <1>         mov     edx, 0                          ;
    72 00000833 F7F3                <1>         div     ebx                             ;   DX = DX:AX % 基数;
    73                              <1>                                                 ;   AX = DX:AX / 基数;
    74                              <1>                                                 ;
    75 00000835 89D6                <1>         mov     esi, edx                        ;   //テーブル参照
    76 00000837 8A96[62080000]      <1>         mov     dl, byte [.ascii + esi]         ;   DL = ASCII[DX]
    77                              <1>                                                 ;
    78 0000083D 8817                <1>         mov     [edi], dl                       ;   *dst = DL;
    79 0000083F 4F                  <1>         dec     edi                             ;   dst--;
    80                              <1>                                                 ;
    81 00000840 83F800              <1>         cmp     eax, 0                          ;
    82 00000843 E0E9                <1>         loopnz  .30L                            ;}while(AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;---------------------------------------
    86                              <1>         ;空欄を埋める
    87                              <1>         ;---------------------------------------
    88 00000845 83F900              <1>         cmp     ecx, 0                          ;if(size)
    89 00000848 740E                <1> .40Q:   je      .40E                            ;{
    90 0000084A B020                <1>         mov     al, ' '                         ;       AL = ' '; // ' 'で埋める(デフォルト値)
    91 0000084C 66837D1804          <1>         cmp     [ebp + 24], word 0b0100         ;       if(flags & 0x04)
    92 00000851 7502                <1> .42Q:   jne     .42E                            ;           {
    93 00000853 B030                <1>         mov     al, '0'                         ;               AL = '0'; // '0'で埋める
    94                              <1> .42E:                                           ;           }
    95 00000855 FD                  <1>         std                                     ;       // DF = 1(-方向)
    96 00000856 F3AA                <1>         rep     stosb                           ;       while(--CX) *DI -- = AL;
    97                              <1> .40E:                                           ;}
    98                              <1>         
    99                              <1>         ;---------------------------------------
   100                              <1>         ;レジスタの復帰
   101                              <1>         ;---------------------------------------
   102 00000858 5F                  <1>         pop     edi
   103 00000859 5E                  <1>         pop     esi
   104 0000085A 5A                  <1>         pop     edx
   105 0000085B 59                  <1>         pop     ecx
   106 0000085C 5B                  <1>         pop     ebx
   107 0000085D 58                  <1>         pop     eax
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;スタックフレームの破棄
   111                              <1>         ;---------------------------------------
   112 0000085E 89EC                <1>         mov     esp, ebp
   113 00000860 5D                  <1>         pop     ebp
   114                              <1> 
   115 00000861 C3                  <1>         ret
   116                              <1> 
   117 00000862 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   117 0000086B 39414243444546      <1>
   160                                  %include        "..\modules\protect\rtc.s"
     1                              <1> rtc_get_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 保存先アドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000872 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000873 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000875 53                  <1>         push    ebx
    14                              <1> 
    15                              <1>         ;---------------------------------------
    16                              <1>         ;RTCから必要な情報を取得
    17                              <1>         ;---------------------------------------
    18 00000876 B00A                <1>         mov     al, 0x0A                        ;//レジスタA
    19 00000878 E670                <1>         out     0x70, al                        ;outp(0x70, AL);
    20 0000087A E471                <1>         in      al, 0x71                        ;AL = レジスタA
    21 0000087C A880                <1>         test    al, 0x80                        ;if(UIP) //更新中
    22 0000087E 7407                <1>         je      .10F                            ;{
    23 00000880 B801000000          <1>         mov     eax, 1                          ;   return 0; //データ更新中
    24 00000885 EB27                <1>         jmp     .10E                            ;}
    25                              <1> .10F:                                           ;else
    26                              <1>                                                 ;{
    27 00000887 B004                <1>         mov     al, 0x04                        ;   AL = 0x04;
    28 00000889 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    29 0000088B E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //時データ
    30                              <1> 
    31 0000088D C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    32                              <1> 
    33 00000890 B002                <1>         mov     al, 0x02                        ;   AL = 0x02;
    34 00000892 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    35 00000894 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //分データ
    36                              <1> 
    37 00000896 C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    38                              <1> 
    39                              <1>                                                 ;   RAM[0x00]:秒
    40 00000899 B000                <1>         mov     al, 0x00                        ;   AL = 0x00;
    41 0000089B E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    42 0000089D E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //秒データ
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;有効なデータのみをアドレス先へ保存
    46                              <1>         ;---------------------------------------
    47 0000089F 25FFFFFF00          <1>         and     eax, 0x00_FF_FF_FF              ;//下位3バイトのみ有効
    48                              <1> 
    49 000008A4 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;dst = 保存先;
    50 000008A7 8903                <1>         mov     [ebx], eax                      ;[dst] = 時刻;
    51                              <1>         
    52 000008A9 B801000000          <1>         mov     eax, 1                          ;   return 1; //正常終了
    53                              <1> .10E:                                           ;}
    54                              <1> 
    55                              <1>         ;---------------------------------------
    56                              <1>         ;レジスタの復帰
    57                              <1>         ;---------------------------------------
    58 000008AE 5B                  <1>         pop     ebx
    59                              <1> 
    60                              <1>         ;---------------------------------------
    61                              <1>         ;スタックフレームの破棄
    62                              <1>         ;---------------------------------------
    63 000008AF 89EC                <1>         mov     esp, ebp
    64 000008B1 5D                  <1>         pop     ebp
    65                              <1> 
    66 000008B2 C3                  <1>         ret
   161                                  %include        "..\modules\protect\draw_time.s"
     1                              <1> draw_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 000008B3 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 000008B4 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 000008B6 50                  <1>         push    eax
    18 000008B7 53                  <1>         push    ebx
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;数字を文字に変換
    22                              <1>         ;---------------------------------------
    23 000008B8 8B4514              <1>         mov     eax, [ebp +20]                  ;EAX = 時刻データ;
    24                              <1> 
    25 000008BB 0FB6D8              <1>         movzx   ebx, al                         ;EBX = 秒;
    26 000008BE 6A046A106A0268-     <1>         cdecl   itoa, ebx, .sec, 2, 16, 0b0100  ;//文字を変換
    26 000008C5 [25090000]53E81AFF- <1>
    26 000008CD FFFF6683C414        <1>
    27                              <1> 
    28 000008D3 88E3                <1>         mov     bl, ah                          ;EBX = 分;
    29 000008D5 6A046A106A0268-     <1>         cdecl   itoa, ebx, .min, 2, 16, 0b0100  ;//文字に変換
    29 000008DC [22090000]53E803FF- <1>
    29 000008E4 FFFF6683C414        <1>
    30                              <1> 
    31 000008EA C1E810              <1>         shr     eax, 16                         ;EBX = 時;
    32 000008ED 6A046A106A0268-     <1>         cdecl   itoa, eax, .hour, 2, 16, 0b0100 ;//文字に変換
    32 000008F4 [1F090000]50E8EBFE- <1>
    32 000008FC FFFF6683C414        <1>
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;文字列を表示
    36                              <1>         ;---------------------------------------
    37 00000902 68[1F090000]FF7510- <1>         cdecl   draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    37 0000090A FF750CFF7508E846FC- <1>
    37 00000913 FFFF6683C410        <1>
    38                              <1>         
    39                              <1>         ;---------------------------------------
    40                              <1>         ;レジスタの復帰
    41                              <1>         ;---------------------------------------
    42 00000919 5B                  <1>         pop     ebx
    43 0000091A 58                  <1>         pop     eax
    44                              <1> 
    45                              <1>         ;---------------------------------------
    46                              <1>         ;スタックフレームの破棄
    47                              <1>         ;---------------------------------------
    48 0000091B 89EC                <1>         mov     esp, ebp
    49 0000091D 5D                  <1>         pop     ebp
    50                              <1> 
    51 0000091E C3                  <1>         ret
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;データ
    55                              <1>         ;---------------------------------------
    56 0000091F 5A5A3A              <1>         .hour:  db  "ZZ:"
    57 00000922 5A5A3A              <1>         .min:   db  "ZZ:"
    58 00000925 5A5A00              <1>         .sec:   db  "ZZ", 0
   162                                  %include        "..\modules\protect\interrupt.s"
     1                              <1> int_stop:
     2 00000928 FB                  <1>         sti                                     ;//割り込み許可
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;EAXで示される文字列を表示
     6                              <1>         ;---------------------------------------
     7 00000929 50680F0600006A0F6A- <1>         cdecl   draw_str, 25, 15, 0x060F, eax   ;draw_str(EAX);
     7 00000932 19E823FCFFFF6683C4- <1>
     7 0000093B 10                  <1>
     8                              <1>         
     9                              <1>         ;---------------------------------------
    10                              <1>         ;スタックのデータを文字列に変換
    11                              <1>         ;---------------------------------------
    12 0000093C 8B0424              <1>         mov     eax, [esp + 0]                  ;EAX = ESP[ 0];
    13 0000093F 6A046A106A0868-     <1>         cdecl   itoa, eax, .p1, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    13 00000946 [040A0000]50E899FE- <1>
    13 0000094E FFFF6683C414        <1>
    14                              <1> 
    15 00000954 8B442404            <1>         mov     eax, [esp + 4]                  ;EAX = ESP[ 4];
    16 00000958 6A046A106A0868-     <1>         cdecl   itoa, eax, .p2, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    16 0000095F [150A0000]50E880FE- <1>
    16 00000967 FFFF6683C414        <1>
    17                              <1> 
    18 0000096D 8B442408            <1>         mov     eax, [esp + 8]                  ;EAX = ESP[ 8];
    19 00000971 6A046A106A0868-     <1>         cdecl   itoa, eax, .p3, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    19 00000978 [260A0000]50E867FE- <1>
    19 00000980 FFFF6683C414        <1>
    20                              <1> 
    21 00000986 8B44240C            <1>         mov     eax, [esp +12]                  ;EAX = ESP[12];
    22 0000098A 6A046A106A0868-     <1>         cdecl   itoa, eax, .p4, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    22 00000991 [370A0000]50E84EFE- <1>
    22 00000999 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;文字列の表示
    26                              <1>         ;---------------------------------------
    27 0000099F 68[FD090000]68040F- <1>         cdecl   draw_str, 25, 16, 0x0F04, .s1,  ;draw_str("ESP+ 0:-------- ");
    27 000009A7 00006A106A19E8A9FB- <1>
    27 000009B0 FFFF6683C410        <1>
    28 000009B6 68[0E0A0000]68040F- <1>         cdecl   draw_str, 25, 17, 0x0F04, .s2   ;draw_str("   + 4:-------- ");
    28 000009BE 00006A116A19E892FB- <1>
    28 000009C7 FFFF6683C410        <1>
    29 000009CD 68[1F0A0000]68040F- <1>         cdecl   draw_str, 25, 18, 0x0F04, .s3,  ;draw_str("   + 8:-------- ");
    29 000009D5 00006A126A19E87BFB- <1>
    29 000009DE FFFF6683C410        <1>
    30 000009E4 68[300A0000]68040F- <1>         cdecl   draw_str, 25, 19, 0x0F04, .s4   ;draw_str("   +12:-------- ");        
    30 000009EC 00006A136A19E864FB- <1>
    30 000009F5 FFFF6683C410        <1>
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;無限ループ
    34                              <1>         ;---------------------------------------
    35 000009FB EBFE                <1>         jmp     $                               ;while(1); //無限ループ
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;データ
    39                              <1>         ;---------------------------------------
    40 000009FD 4553502B20303A      <1> .s1:    db  "ESP+ 0:"
    41 00000A04 2D2D2D2D2D2D2D2D20- <1> .p1:    db  "-------- ", 0
    41 00000A0D 00                  <1>
    42 00000A0E 2020202B20343A      <1> .s2:    db  "   + 4:"
    43 00000A15 2D2D2D2D2D2D2D2D20- <1> .p2:    db  "-------- ", 0
    43 00000A1E 00                  <1>
    44 00000A1F 2020202B20383A      <1> .s3:    db  "   + 8:"
    45 00000A26 2D2D2D2D2D2D2D2D20- <1> .p3:    db  "-------- ", 0
    45 00000A2F 00                  <1>
    46 00000A30 2020202B31323A      <1> .s4:    db  "   +12:"
    47 00000A37 2D2D2D2D2D2D2D2D20- <1> .p4:    db  "-------- ", 0
    47 00000A40 00                  <1>
    48                              <1> 
    49                              <1> int_default:
    50                              <1>         ;---------------------------------------
    51                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
    52                              <1>         ;---------------------------------------
    53 00000A41 9C                  <1>         pushf                                   ;//EFLAGS(IF=0)
    54 00000A42 0E                  <1>         push    cs                              ;//cs
    55 00000A43 68[28090000]        <1>         push    int_stop                        ;//スタック表示処理
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み種別を登録して復帰
    59                              <1>         ;---------------------------------------
    60 00000A48 B8[4E0A0000]        <1>         mov     eax, .s0                        ;//割り込み種別
    61 00000A4D CF                  <1>         iret                                    ;スタックされている場所に復帰
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;データ
    65                              <1>         ;---------------------------------------
    66 00000A4E 203C2020202053544F- <1> .s0:    db  " <    STOP    > ", 0
    66 00000A57 50202020203E2000    <1>
    67                              <1> 
    68                              <1> ;********************************************************************************************************
    69                              <1> ;割り込みベクタの初期化
    70                              <1> ;********************************************************************************************************
    71 00000A5F 90                  <1> ALIGN   4
    72 00000A60 FF07                <1> IDTR:   dw      8 * 256 - 1                     ;idt_limit
    73 00000A62 00001000            <1>         dd      VECT_BASE                       ;idt_location
    74                              <1> 
    75                              <1> ;********************************************************************************************************
    76                              <1> ;割り込みテーブルを初期化
    77                              <1> ;********************************************************************************************************
    78                              <1> init_int:
    79                              <1>         ;---------------------------------------
    80                              <1>         ;レジスタの保存
    81                              <1>         ;---------------------------------------
    82 00000A66 50                  <1>         push    eax
    83 00000A67 53                  <1>         push    ebx
    84 00000A68 51                  <1>         push    ecx
    85 00000A69 57                  <1>         push    edi
    86                              <1> 
    87                              <1>         ;---------------------------------------
    88                              <1>         ;全ての割り込みにデフォルト処理を設定
    89                              <1>         ;---------------------------------------
    90 00000A6A 8D05[410A0000]      <1>         lea     eax, [int_default]              ;EAX = 割り込み処理アドレス;
    91 00000A70 BB008E0800          <1>         mov     ebx, 0x0008_8E00                ;EBX = セグメントセレクタ;
    92 00000A75 6693                <1>         xchg    ax, bx                          ;//下位ワード(2バイト)を交換(割り込みゲートディスクリプタの形式に合わせる)
    93                              <1> 
    94 00000A77 B900010000          <1>         mov     ecx, 256                        ;ECX = 割り込みベクタ数
    95 00000A7C BF00001000          <1>         mov     edi, VECT_BASE                  ;EDI = 割り込みベクタテーブル
    96                              <1> 
    97                              <1> .10L:                                           ;do
    98                              <1>                                                 ;{
    99 00000A81 891F                <1>         mov     [edi + 0], ebx                  ;       [EDI + 0] = 割り込みディスクリプタ(下位)
   100 00000A83 894704              <1>         mov     [edi + 4], eax                  ;       [EDI + 4] = 割り込みディスクリプタ(上位)
   101 00000A86 83C708              <1>         add     edi, 8                          ;       EDI += 8;
   102 00000A89 E2F6                <1>         loop    .10L                            ;}while(ECX--);
   103                              <1> 
   104                              <1>         ;---------------------------------------
   105                              <1>         ;割り込みディスクリプタの設定
   106                              <1>         ;---------------------------------------
   107 00000A8B 0F011D[600A0000]    <1>         lidt    [IDTR]                          ;//割り込みディスクリプタテーブルをロード
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;データ
   111                              <1>         ;---------------------------------------
   112 00000A92 5F                  <1>         pop     edi
   113 00000A93 59                  <1>         pop     ecx
   114 00000A94 5B                  <1>         pop     ebx
   115 00000A95 58                  <1>         pop     eax
   116                              <1> 
   117 00000A96 C3                  <1>         ret
   118                              <1> 
   119                              <1> int_zero_div:
   120                              <1>         ;---------------------------------------
   121                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
   122                              <1>         ;---------------------------------------
   123 00000A97 9C                  <1>         pushf                                   ;//EFLAGS
   124 00000A98 0E                  <1>         push    cs                              ;//CS
   125 00000A99 68[28090000]        <1>         push    int_stop                        ;//スタック表示処理
   126                              <1> 
   127                              <1>         ;---------------------------------------
   128                              <1>         ;割り込み種別を登録して復帰
   129                              <1>         ;---------------------------------------
   130 00000A9E B8[A40A0000]        <1>         mov     eax, .s0                        ;//割り込み種別
   131 00000AA3 CF                  <1>         iret
   132                              <1> 
   133 00000AA4 203C20205A45524F20- <1> .s0:    db      " <  ZERO DIV  > ", 0
   133 00000AAD 44495620203E2000    <1>
   163                                  %include        "..\modules\protect\pic.s"
     1                              <1> init_pic:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000AB5 50                  <1>         push    eax
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;マスタの設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x20, 0x11                      ;//MASTER.ICW1 = 0x11;
    10 00000AB6 B011                <2>  mov al, %2
    10 00000AB8 E620                <2>  out %1, al
    11                              <1>         outp    0x21, 0x20                      ;//MASTER.ICW2 = 0x20;
    11 00000ABA B020                <2>  mov al, %2
    11 00000ABC E621                <2>  out %1, al
    12                              <1>         outp    0x21, 0x04                      ;//MASTER.ICW3 = 0x04;
    12 00000ABE B004                <2>  mov al, %2
    12 00000AC0 E621                <2>  out %1, al
    13                              <1>         outp    0x21, 0x05                      ;//MASTER.ICW4 = 0x05;
    13 00000AC2 B005                <2>  mov al, %2
    13 00000AC4 E621                <2>  out %1, al
    14                              <1>         outp    0x21, 0xEF                      ;//マスタ割り込みマスク
    14 00000AC6 B0EF                <2>  mov al, %2
    14 00000AC8 E621                <2>  out %1, al
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;スレーブの設定
    18                              <1>         ;---------------------------------------
    19                              <1>         outp    0xA0, 0x11                      ;//SLAVE.ICW1 = 0x11;
    19 00000ACA B011                <2>  mov al, %2
    19 00000ACC E6A0                <2>  out %1, al
    20                              <1>         outp    0xA1, 0x28                      ;//SLAVE.ICW2 = 0x28;
    20 00000ACE B028                <2>  mov al, %2
    20 00000AD0 E6A1                <2>  out %1, al
    21                              <1>         outp    0xA1, 0x02                      ;//SLAVE.ICW3 = 0x02;
    21 00000AD2 B002                <2>  mov al, %2
    21 00000AD4 E6A1                <2>  out %1, al
    22                              <1>         outp    0xA1, 0x01                      ;//SLAVE.ICW4 = 0x01;
    22 00000AD6 B001                <2>  mov al, %2
    22 00000AD8 E6A1                <2>  out %1, al
    23                              <1>         outp    0xA1, 0xEF                      ;//マスタ割り込みマスク
    23 00000ADA B0EF                <2>  mov al, %2
    23 00000ADC E6A1                <2>  out %1, al
    24                              <1> 
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00000ADE 58                  <1>         pop     eax
    29                              <1> 
    30 00000ADF C3                  <1>         ret
   164                                  %include        "..\modules\protect\int_rtc.s"
     1                              <1> int_rtc:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000AE0 60                  <1>         pusha
     6 00000AE1 1E                  <1>         push    ds
     7 00000AE2 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントセレクタの設定
    11                              <1>         ;---------------------------------------
    12 00000AE3 66B81000            <1>         mov     ax, 0x0010
    13 00000AE7 8ED8                <1>         mov     ds, ax
    14 00000AE9 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;RTCから時刻を取得
    18                              <1>         ;---------------------------------------
    19 00000AEB 68[D4010000]E87DFD- <1>         cdecl   rtc_get_time, RTC_TIME          ;EAX = get_time(&RTC_TIME);
    19 00000AF3 FFFF6683C404        <1>
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;RTCの割り込み要因を取得
    23                              <1>         ;---------------------------------------
    24                              <1>         outp    0x70, 0x0C                      ;outp(0x70, 0x0C); //レジスタCを選択
    24 00000AF9 B00C                <2>  mov al, %2
    24 00000AFB E670                <2>  out %1, al
    25 00000AFD E471                <1>         in      al, 0x71                        ;AL = port(0x71);
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;割り込みフラグをクリア(EOI)
    29                              <1>         ;---------------------------------------
    30 00000AFF B020                <1>         mov     al, 0x20                        ;AL = EOIコマンド;
    31 00000B01 E6A0                <1>         out     0xA0, al                        ;outp(0xA0, AL); //スレーブPIC
    32 00000B03 E620                <1>         out     0x20, al                        ;outp(0x20, AL); //マスタPIC
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;レジスタの復帰
    36                              <1>         ;---------------------------------------
    37 00000B05 07                  <1>         pop     es
    38 00000B06 1F                  <1>         pop     ds
    39 00000B07 61                  <1>         popa
    40                              <1> 
    41 00000B08 CF                  <1>         iret                                    ;割り込み処理の終了
    42                              <1> 
    43                              <1> rtc_int_en:
    44                              <1>         ;-----------------------------------
    45                              <1>         ;スタックフレームの構築
    46                              <1>         ;-----------------------------------
    47                              <1>                                             ;   + 8| 指定されたビット
    48                              <1>                                             ;   + 4| IP(戻り番号)
    49 00000B09 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    50 00000B0A 89E5                <1>         mov     ebp, esp                    ;------|---------
    51                              <1> 
    52                              <1>         ;---------------------------------------
    53                              <1>         ;レジスタの保存
    54                              <1>         ;---------------------------------------
    55 00000B0C 50                  <1>         push    eax
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み許可認定(RTCの内部レジスタBのUIE(更新終了割り込み許可)ビットをセット)
    59                              <1>         ;---------------------------------------
    60                              <1>         outp    0x70, 0x0B                      ;outp(0x70, AL); //レジスタBを選択
    60 00000B0D B00B                <2>  mov al, %2
    60 00000B0F E670                <2>  out %1, al
    61                              <1> 
    62 00000B11 E471                <1>         in      al, 0x71                        ;AL = port(0x71); //レジスタBの
    63 00000B13 0A4508              <1>         or      al, [ebp + 8]                   ;AL |= ビット; //指定されたビットをセット
    64                              <1> 
    65 00000B16 E671                <1>         out     0x71, al                        ;outp(0x71, AL); //レジスタBに書き込み
    66                              <1> 
    67                              <1>         ;---------------------------------------
    68                              <1>         ;レジスタの復帰
    69                              <1>         ;---------------------------------------
    70 00000B18 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 00000B19 89EC                <1>         mov     esp, ebp
    76 00000B1B 5D                  <1>         pop     ebp
    77                              <1> 
    78 00000B1C C3                  <1>         ret
   165                                  %include        "..\modules\protect\ring_buff.s"
     1                              <1> ring_rd:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| 読み込んだデータの保存先アドレス
     6                              <1>                                             ;   + 8| リングバッファ
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000B1D 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
     9 00000B1E 89E5                <1>         mov     ebp, esp                    ;------|---------
    10                              <1> 
    11                              <1>         ;---------------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;---------------------------------------
    14 00000B20 60                  <1>         pusha
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;引数を取得
    18                              <1>         ;---------------------------------------
    19 00000B21 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    20 00000B24 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = データアドレス;
    21                              <1>         
    22                              <1>         ;---------------------------------------
    23                              <1>         ;読み込み位置を確認
    24                              <1>         ;---------------------------------------
    25 00000B27 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    26 00000B2C 8B1E                <1>         mov     ebx, [esi + ring_buff.rp]       ;EBX = rp; //読み込み位置
    27 00000B2E 3B5E04              <1>         cmp     ebx, [esi + ring_buff.wp]       ;if(EBX != wp) //書き込み位置と異なる
    28 00000B31 7411                <1>         je      .10E                            ;{
    29                              <1>         
    30 00000B33 8A441E08            <1>         mov     al, [esi + ring_buff.item + ebx];   AL = BUFF[rp]; //キーコードを保存
    31                              <1> 
    32 00000B37 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //データを保存
    33                              <1> 
    34 00000B39 43                  <1>         inc     ebx                             ;   EBX++; //次の読み込み位置
    35 00000B3A 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= 0x0F; //サイズの制限
    36 00000B3D 891E                <1>         mov     [esi + ring_buff.rp], ebx       ;   wp = EBX; //読み込み位置を保存
    37                              <1> 
    38 00000B3F B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //データあり
    39                              <1> .10E:                                           ;}
    40                              <1> 
    41                              <1>         ;---------------------------------------
    42                              <1>         ;レジスタの復帰
    43                              <1>         ;---------------------------------------
    44 00000B44 61                  <1>         popa
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;スタックフレームの破棄
    48                              <1>         ;---------------------------------------
    49 00000B45 89EC                <1>         mov     esp, ebp
    50 00000B47 5D                  <1>         pop     ebp
    51                              <1> 
    52 00000B48 C3                  <1>         ret
    53                              <1> 
    54                              <1> ring_wr:
    55                              <1>         ;-----------------------------------
    56                              <1>         ;スタックフレームの構築
    57                              <1>         ;-----------------------------------
    58                              <1>                                             ;   +12| 書き込むデータ
    59                              <1>                                             ;   + 8| リングバッファ
    60                              <1>                                             ;   + 4| IP(戻り番号)
    61 00000B49 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    62 00000B4A 89E5                <1>         mov     ebp, esp                    ;------|---------
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;レジスタの保存
    66                              <1>         ;---------------------------------------
    67 00000B4C 60                  <1>         pusha
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;引数を取得
    71                              <1>         ;---------------------------------------
    72 00000B4D 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    73                              <1>         
    74                              <1>         ;---------------------------------------
    75                              <1>         ;書き込み位置を確認
    76                              <1>         ;---------------------------------------
    77 00000B50 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    78 00000B55 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
    79 00000B58 89D9                <1>         mov     ecx, ebx                        ;ECX = EBX;
    80 00000B5A 41                  <1>         inc     ecx                             ;ECX++;
    81 00000B5B 83E10F              <1>         and     ecx, RING_INDEX_MASK            ;ECX &= 0x0F //サイズの制限
    82                              <1>         
    83 00000B5E 3B0E                <1>         cmp     ecx, [esi + ring_buff.rp]       ;if(ECX != rp) //読み込み位置と異なる
    84 00000B60 740F                <1>         je      .10E                            ;{
    85                              <1>         
    86 00000B62 8A450C              <1>         mov     al, [ebp +12]                   ;   AL = データ;
    87                              <1> 
    88 00000B65 88441E08            <1>         mov     [esi + ring_buff.item + ebx], al;   BUFF[wp] = AL; //キーコードを保存
    89 00000B69 894E04              <1>         mov     [esi + ring_buff.wp], ecx       ;   wp = ECX; //書き込み位置を保存
    90 00000B6C B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //成功
    91                              <1> .10E:                                           ;}
    92                              <1> 
    93                              <1>         ;---------------------------------------
    94                              <1>         ;レジスタの復帰
    95                              <1>         ;---------------------------------------
    96 00000B71 61                  <1>         popa
    97                              <1>         
    98                              <1>         ;---------------------------------------
    99                              <1>         ;スタックフレームの破棄
   100                              <1>         ;---------------------------------------
   101 00000B72 89EC                <1>         mov     esp, ebp
   102 00000B74 5D                  <1>         pop     ebp
   103                              <1> 
   104 00000B75 C3                  <1>         ret
   105                              <1> 
   106                              <1> draw_key:
   107                              <1>         ;-----------------------------------
   108                              <1>         ;スタックフレームの構築
   109                              <1>         ;-----------------------------------
   110                              <1>                                             ;   +16| リングブッファ
   111                              <1>                                             ;   +12| Y(行)
   112                              <1>                                             ;   + 8| X(列)
   113                              <1>                                             ;   + 4| IP(戻り番号)
   114 00000B76 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
   115 00000B77 89E5                <1>         mov     ebp, esp                    ;------|---------
   116                              <1> 
   117                              <1>         ;---------------------------------------
   118                              <1>         ;レジスタの保存
   119                              <1>         ;---------------------------------------
   120 00000B79 60                  <1>         pusha
   121                              <1> 
   122                              <1>         ;---------------------------------------
   123                              <1>         ;引数を取得
   124                              <1>         ;---------------------------------------
   125 00000B7A 8B7508              <1>         mov     esi, [ebp + 8]                  ;EDX = X(列);
   126 00000B7D 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行);
   127 00000B80 8B7510              <1>         mov     esi, [ebp +16]                  ;ESI = リングブッファ;
   128                              <1>         
   129                              <1>         ;---------------------------------------
   130                              <1>         ;リングブッファの情報を取得
   131                              <1>         ;---------------------------------------
   132 00000B83 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
   133 00000B86 8D7608              <1>         lea     esi, [esi + ring_buff.item]     ;ESI = &KEY_BUFF[EBX];
   134 00000B89 B910000000          <1>         mov     ecx, RING_ITEM_SIZE             ;ECX = RING_ITEM_SIZE; //要素数
   135                              <1> 
   136                              <1> .10L:                                           ;do
   137                              <1>                                                 ;{
   138 00000B8E 4B                  <1>         dec     ebx                             ;   EBX--;
   139 00000B8F 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= RING_INDEX_MASK;
   140 00000B92 8A041E              <1>         mov     al, [esi + ebx]                 ;   EAX = KEY_BUFF[EBX];
   141                              <1> 
   142 00000B95 6A046A106A0268-     <1>         cdecl   itoa, eax, .tmp, 2, 16, 0b0100  ;   //キーコードを文字列に変換
   142 00000B9C [C60B0000]50E843FC- <1>
   142 00000BA4 FFFF6683C414        <1>
   143 00000BAA 68[C60B0000]6A0257- <1>         cdecl   draw_str, edx, edi, 0x02, .tmp  ;   //変換した文字列を表示
   143 00000BB2 52E8A3F9FFFF6683C4- <1>
   143 00000BBB 10                  <1>
   144                              <1> 
   145 00000BBC 83C203              <1>         add     edx, 3                          ;   //表示位置を更新(3文字分)
   146                              <1> 
   147 00000BBF E2CD                <1>         loop    .10L
   148                              <1> .10E:                                           ;}while(ECX--);        
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;レジスタの復帰
   152                              <1>         ;---------------------------------------
   153 00000BC1 61                  <1>         popa
   154                              <1>         
   155                              <1>         ;---------------------------------------
   156                              <1>         ;スタックフレームの破棄
   157                              <1>         ;---------------------------------------
   158 00000BC2 89EC                <1>         mov     esp, ebp
   159 00000BC4 5D                  <1>         pop     ebp
   160                              <1> 
   161 00000BC5 C3                  <1>         ret
   162                              <1> 
   163                              <1>         ;---------------------------------------
   164                              <1>         ;データ
   165                              <1>         ;---------------------------------------
   166 00000BC6 2D2D2000            <1> .tmp    db  "-- ", 0
   166                                  %include        "..\modules\protect\int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000BCA 60                  <1>         pusha
     6 00000BCB 1E                  <1>         push    ds
     7 00000BCC 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 00000BCD 66B81000            <1>         mov     ax, 0x0010
    13 00000BD1 8ED8                <1>         mov     ds, ax
    14 00000BD3 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;KBCのブッファ読み取り
    18                              <1>         ;---------------------------------------
    19 00000BD5 E460                <1>         in      al, 0x60                        ; AL = キーコードの取得
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;キーコードの保存
    23                              <1>         ;---------------------------------------
    24 00000BD7 5068[F00B0000]E867- <1>         cdecl   ring_wr, _KEY_BUFF, eax         ;ring_wr(_KEY_BUFF, EAX); //キーコードの保存
    24 00000BDF FFFFFF6683C408      <1>
    25                              <1>         
    26                              <1>         ;---------------------------------------
    27                              <1>         ;割り込み終了コマンド送信
    28                              <1>         ;---------------------------------------
    29                              <1>         outp    0x20, 0x20                      ;outp(); //マスタPIC:EOIコマンド
    29 00000BE6 B020                <2>  mov al, %2
    29 00000BE8 E620                <2>  out %1, al
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;レジスタの復帰
    33                              <1>         ;---------------------------------------
    34 00000BEA 07                  <1>         pop     es
    35 00000BEB 1F                  <1>         pop     ds
    36 00000BEC 61                  <1>         popa
    37                              <1> 
    38 00000BED CF                  <1>         iret                                    ;割り込みからの復帰
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;データ
    42                              <1>         ;---------------------------------------
    43                              <1> 
    44 00000BEE 00<rept>            <1> ALIGN   4, db   0
    45 00000BF0 00<rept>            <1> _KEY_BUFF:  times   ring_buff_size  db  0
   167                                  %include        "..\modules\protect\timer.s"
     1                              <1> int_en_timer0:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000C08 50                  <1>         push    eax                              ;//outp用
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;タイマーICのカウンタ0を設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x43, 0b_00_11_010_0            ;//カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    10 00000C09 B034                <2>  mov al, %2
    10 00000C0B E643                <2>  out %1, al
    11                              <1>         outp    0x40, 0x9C                      ;//下位バイト
    11 00000C0D B09C                <2>  mov al, %2
    11 00000C0F E640                <2>  out %1, al
    12                              <1>         outp    0x40, 0x2E                      ;//上位バイト
    12 00000C11 B02E                <2>  mov al, %2
    12 00000C13 E640                <2>  out %1, al
    13                              <1> 
    14                              <1>         ;---------------------------------------
    15                              <1>         ;レジスタの復帰
    16                              <1>         ;---------------------------------------
    17 00000C15 58                  <1>         pop     eax
    18                              <1> 
    19 00000C16 C3                  <1>         ret
   168                                  %include        "..\modules\protect\draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000C17 60                  <1>         pushad
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;引数を取得
     9                              <1>         ;---------------------------------------
    10 00000C18 A1[44030000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = タイマー割り込みカウンタ
    11 00000C1D C1E804              <1>         shr     eax, 4                          ;EAX /= 4; //16で除算
    12 00000C20 3B05[480C0000]      <1>         cmp     eax, [.index]                   ;if(EAX != 前回値)
    13 00000C26 741E                <1>         je      .10E                            ;{
    14                              <1>         
    15 00000C28 A3[480C0000]        <1>         mov     [.index], eax                   ;   前回値 = EAX;
    16 00000C2D 83E003              <1>         and     eax, 0x03                       ;   EAX &= 0x03; //0~3に限定
    17                              <1> 
    18 00000C30 8A80[4C0C0000]      <1>         mov     al, [.table + eax]              ;   AL = table[index];
    19 00000C36 506A0F6A1D6A00E8FC- <1>         cdecl   draw_char, 0 ,29, 0x000F, eax   ;   draw_char(); //文字を表示
    19 00000C3F F7FFFF6683C410      <1>
    20                              <1> 
    21                              <1> .10E:                                           ;}    
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;レジスタの復帰
    25                              <1>         ;---------------------------------------
    26 00000C46 61                  <1>         popad
    27                              <1> 
    28 00000C47 C3                  <1>         ret
    29                              <1> 
    30                              <1>         ;---------------------------------------
    31                              <1>         ;データ
    32                              <1>         ;---------------------------------------
    33                              <1> ALIGN   4,  db  0
    34 00000C48 00000000            <1> .index:     dd  0                               ;前回値
    35 00000C4C 7C2F2D5C            <1> .table:     db  "|/-\"                          ;表示キャラクタ
   169                                  %include        "..\modules\protect\call_gate.s"
     1                              <1> call_gate:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| X(列)
     6                              <1>                                             ;   +16| Y(行)
     7                              <1>                                             ;   +20| 色
     8                              <1>                                             ;   +24| 文字
     9                              <1>                                             ;   + 8| CS(コードセグメント)
    10                              <1>                                             ;   + 4| EIP(戻り番号)
    11 00000C50 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    12 00000C51 89E5                <1>         mov    ebp, esp                     ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000C53 60                  <1>         pusha
    18 00000C54 1E                  <1>         push    ds
    19 00000C55 06                  <1>         push    es
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;データ用セグメントの設定
    23                              <1>         ;---------------------------------------
    24 00000C56 66B81000            <1>         mov     ax, 0x0010
    25 00000C5A 8ED8                <1>         mov     ds, ax
    26 00000C5C 8EC0                <1>         mov     es, ax
    27                              <1>         
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字を表示
    30                              <1>         ;---------------------------------------
    31 00000C5E 8B450C              <1>         mov     eax, dword [ebp +12]            ;EAX = X(列);
    32 00000C61 8B5D10              <1>         mov     ebx, dword [ebp +16]            ;EBX = Y(行);
    33 00000C64 8B4D14              <1>         mov     ecx, dword [ebp +20]            ;ECX = 色;
    34 00000C67 8B5518              <1>         mov     edx, dword [ebp +24]            ;EDX = 文字;
    35 00000C6A 52515350E8E8F8FFFF- <1>         cdecl   draw_str, eax, ebx, ecx, edx    ;draw_str();
    35 00000C73 6683C410            <1>
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;レジスタの復帰
    39                              <1>         ;---------------------------------------
    40 00000C77 07                  <1>         pop     es
    41 00000C78 1F                  <1>         pop     ds
    42 00000C79 61                  <1>         popa
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;スタックフレームの破棄
    46                              <1>         ;---------------------------------------
    47 00000C7A 89EC                <1>         mov     esp, ebp
    48 00000C7C 5D                  <1>         pop     ebp
    49                              <1> 
    50 00000C7D CA1000              <1>         retf 4 * 4
   170                                  %include        "..\modules\protect\trap_gate.s"
     1                              <1> trap_gate_81:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;1文字出力
     4                              <1>         ;---------------------------------------
     5 00000C80 50535251E8B5F7FFFF- <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;//1文字出力
     5 00000C89 6683C410            <1>
     6                              <1> 
     7 00000C8D CF                  <1>         iret
     8                              <1> 
     9                              <1> trap_gate_82:
    10                              <1>         ;---------------------------------------
    11                              <1>         ;点の描画
    12                              <1>         ;---------------------------------------
    13 00000C8E 535251E87BF9FFFF66- <1>         cdecl   draw_pixel, ecx, edx, ebx       ;//点の描画
    13 00000C97 83C40C              <1>
    14                              <1> 
    15 00000C9A CF                  <1>         iret
   171                                  %include        "..\modules\protect\test_and_set.s"
     1                              <1> test_and_set:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| ローカル変数のアドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000C9B 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000C9C 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000C9E 50                  <1>         push    eax
    14 00000C9F 53                  <1>         push    ebx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;テストアンドセット
    18                              <1>         ;---------------------------------------
    19 00000CA0 B800000000          <1>         mov     eax, 0                          ;local = 0;
    20 00000CA5 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;global = アドレス;
    21                              <1> 
    22                              <1> .10L:                                           ;while(1)
    23                              <1>                                                 ;{
    24 00000CA8 F00FAB03            <1>         lock    bts [ebx], eax                  ;   CF = TEST_AND_SET(IN_USE, 1);
    25 00000CAC 7307                <1>         jnc     .10E                            ;   if(0 == CF)
    26                              <1>                                                 ;   break;
    27                              <1> 
    28                              <1> .12L:                                           ;   while(1)
    29                              <1>                                                 ;   {
    30 00000CAE 0FA303              <1>         bt      [ebx], eax                      ;       CF = TEST(IN_USE, 1);
    31 00000CB1 72FB                <1>         jc      .12L                            ;       if(0 == CF)
    32                              <1>                                                 ;       break;
    33 00000CB3 EBF3                <1>         jmp     .10L                            ;   }
    34                              <1> .10E:                                           ;}
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;レジスタの復帰
    38                              <1>         ;---------------------------------------
    39 00000CB5 5B                  <1>         pop     ebx
    40 00000CB6 58                  <1>         pop     eax
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;スタックフレームの破棄
    44                              <1>         ;---------------------------------------
    45 00000CB7 89EC                <1>         mov     esp, ebp
    46 00000CB9 5D                  <1>         pop     ebp
    47                              <1> 
    48 00000CBA C3                  <1>         ret
   172                                  
   173                                  ;********************************************************************************************************
   174                                  ;パディング
   175                                  ;********************************************************************************************************
   176 00000CBB 00<rept>                        times KERNEL_SIZE - ($ - $$)    db 0    ;パディング
