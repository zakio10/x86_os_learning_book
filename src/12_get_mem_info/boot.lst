     1                                  ;********************************************************************************************************
     2                                  ;マクロ
     3                                  ;********************************************************************************************************
     4                                  %include        "..\include\define.s"
     1                              <1> BOOT_LOAD   equ     0x7C00                  ;ブートプログラムのロード位置
     2                              <1> 
     3                              <1> BOOT_SIZE   equ     (1024 * 8)              ;ブートコードサイズ
     4                              <1> SECT_SIZE   equ     (512)                   ;セクタサイズ
     5                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     6                              <1> 
     7                              <1> E820_RECORD_SIZE    equ 20
     5                                  %include        "..\include\macro.s"
     1                              <1> struc drive
     2 00000000 <res 00000002>      <1>         .no         resw    1           ;ドライブ番号
     3 00000002 <res 00000002>      <1>         .cyln       resw    1           ;シリンダ
     4 00000004 <res 00000002>      <1>         .head       resw    1           ;ヘッド
     5 00000006 <res 00000002>      <1>         .sect       resw    1           ;セクタ
     6                              <1> endstruc
     7                              <1> 
     8                              <1> %macro  cdecl   1-*.nolist
     9                              <1> 
    10                              <1>     %rep    %0 - 1
    11                              <1>         push    %{-1:-1}
    12                              <1>         %rotate -1
    13                              <1>     %endrep
    14                              <1>     %rotate -1
    15                              <1> 
    16                              <1>         call    %1
    17                              <1> 
    18                              <1>     %if 1 < %0
    19                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    20                              <1>     %endif
    21                              <1> 
    22                              <1> %endmacro
     6                                  
     7                                          ORG     BOOT_LOAD                       ;ロードアドレスをアセンブラに指示
     8                                  
     9                                  ;********************************************************************************************************
    10                                  ;エントリポイント
    11                                  ;********************************************************************************************************
    12                                  entry:
    13                                          ;---------------------------------------
    14                                          ;BPB(BIOS Parameter Block)
    15                                          ;---------------------------------------
    16 00000000 EB58                            jmp ipl                                 ;IPL(Initial Program Loader)(ブートプログラム)へジャンプ
    17 00000002 90<rept>                        times   90 - ($ - $$) db 0x90
    18                                  
    19                                          ;---------------------------------------
    20                                          ;IPL(Initial Program Loader)
    21                                          ;---------------------------------------
    22                                  ipl:
    23 0000005A FA                              cli                                     ;//割り込み禁止(IF = 1)
    24                                  
    25 0000005B B80000                          mov     ax, 0x0000                      ;AX = 0x0000;
    26 0000005E 8ED8                            mov     ds, ax                          ;DS = 0x0000;
    27 00000060 8EC0                            mov     es, ax                          ;ES = 0x0000;
    28 00000062 8ED0                            mov     ss, ax                          ;SS = 0x0000;
    29 00000064 BC007C                          mov     sp, BOOT_LOAD                   ;SP = 0x7C00;
    30                                  
    31 00000067 FB                              sti                                     ;//割り込み許可(IF = 0)
    32                                  
    33                                          ;---------------------------------------
    34                                          ;ブートドライブ番号を保存
    35                                          ;---------------------------------------
    36 00000068 8816[B800]                      mov     [BOOT + drive.no], dl           ;ブートドライブを保存
    37                                  
    38                                          ;---------------------------------------
    39                                          ;文字列を表示
    40                                          ;---------------------------------------
    41 0000006C 68[9900]E84E0083C4-             cdecl   puts, .s0                       ;puts(.s0);
    41 00000074 02                 
    42                                          
    43                                          ;---------------------------------------
    44                                          ;残りのセクタをすべて読み込む
    45                                          ;---------------------------------------
    46 00000075 BB0F00                          mov     bx, BOOT_SECT - 1               ;BX = 残りのブートセクタ数;
    47 00000078 B9007E                          mov     cx, BOOT_LOAD + SECT_SIZE       ;CX = 次のロードアドレス;
    48                                  
    49 0000007B 515368[B800]E89B00-             cdecl   read_chs, BOOT, bx, cx          ;AX = read_chs(.chs, bx, cx);
    49 00000083 83C406             
    50                                  
    51 00000086 39D8                            cmp     ax, bx                          ;if(AX != 残りのセクタ数)
    52 00000088 740C                    .10Q:   jz      .10E                            ;{
    53 0000008A 68[A600]E8300083C4-     .10T:   cdecl   puts, .e0                       ;       puts(.e0);
    53 00000092 02                 
    54 00000093 E84900                          call    reboot                          ;       reboot();
    55                                  .10E:                                           ;}
    56                                  
    57                                          ;---------------------------------------
    58                                          ;次のステージへ移行
    59                                          ;---------------------------------------
    60 00000096 E90205                          jmp     stage_2                         ;ブート処理の第2ステージ
    61                                  
    62                                          ;---------------------------------------
    63                                          ;データ
    64                                          ;---------------------------------------
    65 00000099 426F6F74696E672E2E-     .s0     db      "Booting...", 0x0A, 0x0D, 0
    65 000000A2 2E0A0D00           
    66 000000A6 4572726F723A736563-     .e0     db      "Error:sector read", 0
    66 000000AF 746F72207265616400 
    67                                  
    68                                  ;********************************************************************************************************
    69                                  ;ブートドライブに関する情報
    70                                  ;********************************************************************************************************
    71                                  ALIGN   2, db 0
    72                                  BOOT:                                           ;ブートドライブに関する情報
    73                                          istruc  drive
    74 000000B8 0000                            at      drive.no,       dw      0       ;ドライブ番号
    75 000000BA 0000                            at      drive.cyln,     dw      0       ;C:シリンダ
    76 000000BC 0000                            at      drive.head,     dw      0       ;H:ヘッド
    77 000000BE 0200                            at      drive.sect,     dw      2       ;S:セクタ
    78                                          iend
    79                                  
    80                                  ;********************************************************************************************************
    81                                  ;モジュール
    82                                  ;********************************************************************************************************
    83                                  %include        "..\modules\real\puts.s"
     1                              <1> puts:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;  + 4| 文字列へのアドレス
     6                              <1>                                             ;  + 2| IP(戻り番号)
     7 000000C0 55                  <1>         push    bp                          ;BP+ 0| BP(元の値)
     8 000000C1 89E5                <1>         mov     bp, sp                      ;-----|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 000000C3 50                  <1>         push    ax
    14 000000C4 53                  <1>         push    bx
    15 000000C5 56                  <1>         push    si
    16                              <1> 
    17                              <1>         ;---------------------------------------
    18                              <1>         ;引数の取得
    19                              <1>         ;---------------------------------------
    20 000000C6 8B7604              <1>         mov     si, [bp + 4]                    ;SI = 文字列へのアドレス
    21                              <1> 
    22                              <1>         ;---------------------------------------
    23                              <1>         ;処理の開始
    24                              <1>         ;---------------------------------------
    25 000000C9 B40E                <1>         mov     ah, 0x0E                        ;テレタイプ式1文字出力を指定
    26 000000CB BB0000              <1>         mov     bx, 0x0000                      ;ページ番号と文字色を0に設定
    27 000000CE FC                  <1>         cld                                     ;DF = 0; //アドレス加算
    28                              <1> .10L:                                           ;do
    29                              <1>                                                 ;{
    30 000000CF AC                  <1>         lodsb                                   ;       AL = *SI++;
    31                              <1> 
    32 000000D0 3C00                <1>         cmp     al, 0                           ;       if(0 == AL)
    33 000000D2 7404                <1>         je      .10E                            ;               break;
    34                              <1> 
    35 000000D4 CD10                <1>         int     0x10                            ;       Int10(0x0E,AL); //文字出力
    36 000000D6 EBF7                <1>         jmp     .10L                            ;
    37                              <1> .10E:                                           ;}while(1);
    38                              <1> 
    39                              <1>         ;---------------------------------------
    40                              <1>         ;レジスタの復帰
    41                              <1>         ;---------------------------------------
    42 000000D8 5E                  <1>         pop     si
    43 000000D9 5B                  <1>         pop     bx
    44 000000DA 58                  <1>         pop     ax
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;スタックフレームの破棄
    48                              <1>         ;---------------------------------------
    49 000000DB 89EC                <1>         mov     sp, bp
    50 000000DD 5D                  <1>         pop     bp
    51                              <1> 
    52 000000DE C3                  <1>         ret
    84                                  %include        "..\modules\real\reboot.s"
     1                              <1> reboot:
     2                              <1>         ;-------------------------------------------
     3                              <1>         ;メッセージを表示                           
     4                              <1>         ;-------------------------------------------
     5 000000DF 68[FB00]E8DBFF83C4- <1>         cdecl   puts, .s0                           ;//再起動メッセージを表示
     5 000000E7 02                  <1>
     6                              <1> 
     7                              <1>         ;-------------------------------------------
     8                              <1>         ;キー入力待ち
     9                              <1>         ;-------------------------------------------
    10                              <1> .10L:                                               ;do
    11                              <1>                                                     ;{
    12 000000E8 B410                <1>         mov     ah, 0x10                            ;   //キー入力待ち
    13 000000EA CD16                <1>         int     0x16                                ;   AL = BIOS(0x16, 0x10);
    14                              <1>                                                     ;
    15 000000EC 3C20                <1>         cmp     al, ' '                             ;   ZF = (AL == ' ');
    16 000000EE 75F8                <1>         jne     .10L                                ;}while(!ZF);
    17                              <1> 
    18                              <1>         ;-------------------------------------------
    19                              <1>         ;改行を出力
    20                              <1>         ;-------------------------------------------
    21 000000F0 68[1901]E8CAFF83C4- <1>         cdecl   puts, .s1                           ;改行
    21 000000F8 02                  <1>
    22                              <1> 
    23                              <1>         ;-------------------------------------------
    24                              <1>         ;再起動
    25                              <1>         ;-------------------------------------------
    26 000000F9 CD19                <1>         int     0x19                                ;BIOS(0x19);    //reboot();
    27                              <1> 
    28                              <1>         ;-------------------------------------------
    29                              <1>         ;文字列データ
    30                              <1>         ;-------------------------------------------
    31 000000FB 0A0D50757368205350- <1> .s0     db  0x0A, 0x0D, "Push SPACE key to reboot...", 0
    31 00000104 414345206B65792074- <1>
    31 0000010D 6F207265626F6F742E- <1>
    31 00000116 2E2E00              <1>
    32 00000119 0A0D0A0D00          <1> .s1     db  0x0A, 0x0D, 0x0A, 0x0D, 0
    85                                  %include        "..\modules\real\read_chs.s"
     1                              <1> read_chs:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;  + 8| コピー先
     6                              <1>                                             ;  + 6| セクタ数
     7                              <1>                                             ;  + 4| パラメータバッファ
     8                              <1>                                             ;-----|---------
     9                              <1>                                             ;  + 2| IP(戻り番号)
    10 0000011E 55                  <1>         push    bp                          ;BP+ 0| BP(元の値)
    11 0000011F 89E5                <1>         mov     bp, sp                      ;-----|---------
    12 00000121 6A03                <1>         push    3                           ;  - 2|retry = 3; //リトライ回数
    13 00000123 6A00                <1>         push    0                           ;  - 4|sect = 0; //読み込みセクタ数
    14                              <1> 
    15                              <1>         ;-----------------------------------
    16                              <1>         ;レジスタの保存
    17                              <1>         ;-----------------------------------
    18 00000125 53                  <1>         push    bx
    19 00000126 51                  <1>         push    cx
    20 00000127 52                  <1>         push    dx
    21 00000128 06                  <1>         push    es
    22 00000129 56                  <1>         push    si
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;処理の開始
    26                              <1>         ;---------------------------------------
    27 0000012A 8B7604              <1>         mov     si, [bp + 4]                    ;SI = SRCバッファ(ドライブ情報構造体);
    28                              <1> 
    29                              <1>         ;---------------------------------------
    30                              <1>         ;CXレジスタの設定
    31                              <1>         ;(BIOSコールの呼び出しに適した形に変換)
    32                              <1>         ;---------------------------------------
    33 0000012D 8A6C02              <1>         mov     ch, [si + drive.cyln + 0]       ;CH = シリンダ番号(下位バイト)
    34 00000130 8A4C03              <1>         mov     cl, [si + drive.cyln + 1]       ;CL = シリンダ番号(上位バイト)
    35 00000133 C0E106              <1>         shl     cl, 6                           ;CL << 6; //最上位ビット2ビットにシフト
    36 00000136 0A4C06              <1>         or      cl, [si + drive.sect]           ;CL |= セクタ番号;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;セクタ読み込み
    40                              <1>         ;---------------------------------------
    41 00000139 8A7404              <1>         mov     dh, [si + drive.head]           ;DH = ヘッド番号;
    42 0000013C 8A14                <1>         mov     dl, [si + 0]                    ;DL = ドライブ番号;
    43 0000013E B80000              <1>         mov     ax, 0x0000                      ;AX = 0x0000;
    44 00000141 8EC0                <1>         mov     es, ax                          ;ES = セグメント
    45 00000143 8B5E08              <1>         mov     bx, [bp + 8]                    ;BX = コピー先;
    46                              <1> .10L:                                           ;do
    47                              <1>                                                 ;{
    48 00000146 B402                <1>         mov     ah, 0x02                        ;   AH = セクタ読み込み
    49 00000148 8A4606              <1>         mov     al, [bp + 6]                    ;   AL = セクタ数
    50                              <1>                                                 ;
    51 0000014B CD13                <1>         int     0x13                            ;   CF = BIOS(0x13, 0x02)
    52 0000014D 7304                <1>         jnc     .11E                            ;   if(CF)
    53                              <1>                                                 ;   {
    54 0000014F B000                <1>         mov     al, 0                           ;       AL = 0;
    55 00000151 EB0C                <1>         jmp     .10E                            ;       break;
    56                              <1> .11E:                                           ;   }
    57                              <1>                                                 ;
    58 00000153 3C00                <1>         cmp     al, 0                           ;   if(読み込んだセクタがあれば)
    59 00000155 7508                <1>         jne     .10E                            ;       break;
    60                              <1>                                                 ;
    61 00000157 B80000              <1>         mov     ax, 0                           ;   ret = 0; //戻り値を設定
    62 0000015A FF4EFE              <1>         dec     word [bp - 2]                   ;}
    63 0000015D 75E7                <1>         jnz     .10L                            ;while(--retry);
    64                              <1> .10E:
    65 0000015F B400                <1>         mov     ah, 0                           ;AH = 0; //ステータス情報は破棄
    66                              <1> 
    67                              <1>         ;---------------------------------------
    68                              <1>         ;レジスタの復帰
    69                              <1>         ;---------------------------------------
    70 00000161 5E                  <1>         pop     si
    71 00000162 07                  <1>         pop     es
    72 00000163 5A                  <1>         pop     dx
    73 00000164 59                  <1>         pop     cx
    74 00000165 5B                  <1>         pop     bx
    75                              <1> 
    76                              <1>         ;---------------------------------------
    77                              <1>         ;スタックフレームの破棄
    78                              <1>         ;---------------------------------------
    79 00000166 89EC                <1>         mov     sp, bp
    80 00000168 5D                  <1>         pop     bp
    81                              <1> 
    82 00000169 C3                  <1>         ret
    86                                  
    87                                  ;********************************************************************************************************
    88                                  ;ブートフラグ(先頭512バイトの終了)
    89                                  ;********************************************************************************************************
    90 0000016A 00<rept>                        times   510 - ($ - $$) db 0x00
    91 000001FE 55AA                            db 0x55, 0xAA
    92                                  
    93                                  ;********************************************************************************************************
    94                                  ;リアルモード時に取得した情報
    95                                  ;********************************************************************************************************
    96                                  FONT:                                           ;フォント
    97 00000200 0000                    .seg    dw      0
    98 00000202 0000                    .off    dw      0
    99                                  ACPI_DATA:                                      ;ACPI data
   100 00000204 00000000                .adr    dd      0                               ;ACPI data address
   101 00000208 00000000                .len    dd      0                               ;ACPI data length
   102                                  
   103                                  ;********************************************************************************************************
   104                                  ;モジュール
   105                                  ;********************************************************************************************************
   106                                  %include        "..\modules\real\itoa.s"
     1                              <1> itoa:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;  +12| フラグ
     6                              <1>                                             ;  +10| 基数
     7                              <1>                                             ;  + 8| バッファサイズ
     8                              <1>                                             ;  + 6| バッファアドレス
     9                              <1>                                             ;  + 4| 数値
    10                              <1>                                             ;  + 2| IP(戻り番号)
    11 0000020C 55                  <1>         push    bp                          ;BP+ 0| BP(元の値)
    12 0000020D 89E5                <1>         mov     bp, sp                      ;-----|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 0000020F 50                  <1>         push    ax
    18 00000210 53                  <1>         push    bx
    19 00000211 51                  <1>         push    cx
    20 00000212 52                  <1>         push    dx
    21 00000213 56                  <1>         push    si
    22 00000214 57                  <1>         push    di
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;引数の取得
    26                              <1>         ;---------------------------------------
    27 00000215 8B4604              <1>         mov     ax, [bp + 4]                    ;ax(val) =  数値;
    28 00000218 8B7606              <1>         mov     si, [bp + 6]                    ;si(dst) = バッファアドレス;
    29 0000021B 8B4E08              <1>         mov     cx, [bp + 8]                    ;cx(size) = バッファサイズ;
    30                              <1> 
    31 0000021E 89F7                <1>         mov     di, si                          ; di = si(dst); //バッファの最後尾
    32 00000220 01CF                <1>         add     di, cx                          ;di(dst) = di + cx - 1;
    33 00000222 4F                  <1>         dec     di
    34                              <1> 
    35 00000223 8B5E0C              <1>         mov     bx, word [bp + 12]              ;flags = オプション;
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;符号付き判定
    39                              <1>         ;---------------------------------------
    40 00000226 F7C30100            <1>         test    bx, 0b0001                       ;if(flags & 0x01) //符号付き
    41 0000022A 7408                <1> .10Q:   je      .10E                            ;{
    42 0000022C 83F800              <1>         cmp     ax, 0                           ;   if(val < 0)
    43 0000022F 7D03                <1> .12Q:   jge     .12E                            ;   {
    44 00000231 83CB02              <1>         or      bx, 0b0010                      ;       flags |= 2; //符号表示
    45                              <1> .12E:                                           ;   }
    46                              <1> .10E:                                           ;}
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;符号付き判定
    50                              <1>         ;---------------------------------------
    51 00000234 F7C30200            <1>         test    bx, 0b0010                      ;if(flags & 0x02) //符号出力判定
    52 00000238 7410                <1> .20Q:   je      .20E                            ;{
    53 0000023A 83F800              <1>         cmp     ax, 0                           ;   if(val < 0)
    54 0000023D 7D07                <1> .22Q:   jge     .22F                            ;   {
    55 0000023F F7D8                <1>         neg     ax                              ;       val *= -1; //符号反転
    56 00000241 C6042D              <1>         mov     [si], byte '-'                  ;       *dst = '-'; //符号表示
    57 00000244 EB03                <1>         jmp     .22E                            ;   }
    58                              <1> .22F:                                           ;   else
    59                              <1>                                                 ;   {
    60 00000246 C6042B              <1>         mov     [si], byte '+'                  ;       *dst = '+'; //符号表示
    61                              <1> .22E:                                           ;   }
    62 00000249 49                  <1>         dec     cx                              ;   size--;     //残りバッファサイズの減算
    63                              <1> .20E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;ASCII変換
    67                              <1>         ;---------------------------------------
    68 0000024A 8B5E0A              <1>         mov     bx, [bp + 10]                   ;BX = 基数;
    69                              <1> .30L:                                           ;do
    70                              <1>                                                 ;{
    71 0000024D BA0000              <1>         mov     dx, 0                           ;
    72 00000250 F7F3                <1>         div     bx                              ;   DX = DX:AX % 基数;
    73                              <1>                                                 ;   AX = DX:AX / 基数;
    74                              <1>                                                 ;
    75 00000252 89D6                <1>         mov     si, dx                          ;   //テーブル参照
    76 00000254 8A94[7C02]          <1>         mov     dl, byte [.ascii + si]          ;   DL = ASCII[DX]
    77                              <1>                                                 ;
    78 00000258 8815                <1>         mov     [di], dl                        ;   *dst = DL;
    79 0000025A 4F                  <1>         dec     di                              ;   dst--;
    80                              <1>                                                 ;
    81 0000025B 83F800              <1>         cmp     ax, 0                           ;
    82 0000025E E0ED                <1>         loopnz  .30L                            ;}while(AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;---------------------------------------
    86                              <1>         ;空欄を埋める
    87                              <1>         ;---------------------------------------
    88 00000260 83F900              <1>         cmp     cx, 0                           ;if(size)
    89 00000263 740D                <1> .40Q:   je      .40E                            ;{
    90 00000265 B020                <1>         mov     al, ' '                         ;       AL = ' '; // ' 'で埋める(デフォルト値)
    91 00000267 837E0C04            <1>         cmp     [bp + 12], word 0b0100          ;       if(flags & 0x04)
    92 0000026B 7502                <1> .42Q:   jne     .42E                            ;           {
    93 0000026D B030                <1>         mov     al, '0'                         ;               AL = '0'; // '0'で埋める
    94                              <1> .42E:                                           ;           }
    95 0000026F FD                  <1>         std                                     ;       // DF = 1(-方向)
    96 00000270 F3AA                <1>         rep     stosb                           ;       while(--CX) *DI -- = AL;
    97                              <1> .40E:                                           ;}
    98                              <1>         
    99                              <1>         ;---------------------------------------
   100                              <1>         ;レジスタの復帰
   101                              <1>         ;---------------------------------------
   102 00000272 5F                  <1>         pop     di
   103 00000273 5E                  <1>         pop     si
   104 00000274 5A                  <1>         pop     dx
   105 00000275 59                  <1>         pop     cx
   106 00000276 5B                  <1>         pop     bx
   107 00000277 58                  <1>         pop     ax
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;スタックフレームの破棄
   111                              <1>         ;---------------------------------------
   112 00000278 89EC                <1>         mov     sp, bp
   113 0000027A 5D                  <1>         pop     bp
   114                              <1> 
   115 0000027B C3                  <1>         ret
   116                              <1> 
   117 0000027C 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   117 00000285 39414243444546      <1>
   107                                  %include        "..\modules\real\get_drive_param.s"
     1                              <1> get_drive_param:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;  + 4| パラメータバッファ
     6                              <1>                                             ;  + 2| IP(戻り番号)
     7 0000028C 55                  <1>         push    bp                          ;BP+ 0| BP(元の値)
     8 0000028D 89E5                <1>         mov     bp, sp                      ;-----|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 0000028F 53                  <1>         push    bx
    14 00000290 51                  <1>         push    cx
    15 00000291 06                  <1>         push    es
    16 00000292 56                  <1>         push    si
    17 00000293 57                  <1>         push    di
    18                              <1> 
    19                              <1>         ;---------------------------------------
    20                              <1>         ;処理の開始
    21                              <1>         ;---------------------------------------
    22 00000294 8B7604              <1>         mov     si, [bp + 4]                    ;SI = バッファ
    23                              <1>         
    24 00000297 B80000              <1>         mov     ax, 0                           ;Disk Base Table Pointerの初期化
    25 0000029A 8EC0                <1>         mov     es, ax                          ;ES = 0;
    26 0000029C 89C7                <1>         mov     di, ax                          ;DI = 0;
    27                              <1> 
    28 0000029E B408                <1>         mov     ah, 8                           ; //get drive parameters
    29 000002A0 8A14                <1>         mov     dl, [si + drive.no]              ;DL = ドライブ番号
    30 000002A2 CD13                <1>         int     0x13
    31 000002A4 721B                <1> .10Q:   jc     .10F                            ;if(0 == CF)
    32                              <1> .10T:                                           ;{
    33 000002A6 88C8                <1>         mov     al, cl                          ;   AX = セクタ数
    34 000002A8 83E03F              <1>         and     ax, 0x3F                        ;   //下位6ビットのみ有効
    35                              <1> 
    36 000002AB C0E906              <1>         shr     cl, 6                           ;CX = シリンダ数
    37 000002AE C1C908              <1>         ror     cx, 8
    38 000002B1 41                  <1>         inc     cx
    39                              <1> 
    40 000002B2 0FB6DE              <1>         movzx   bx, dh
    41 000002B5 43                  <1>         inc     bx
    42                              <1> 
    43 000002B6 894C02              <1>         mov     [si + drive.cyln], cx           ;drive.cyln = CX; //C:シリンダ数
    44 000002B9 895C04              <1>         mov     [si + drive.head], bx           ;drive.head = BX; //H:ヘッド数
    45 000002BC 894406              <1>         mov     [si + drive.sect], ax           ;drive.sect = AX; //S:セクタ数
    46                              <1> 
    47 000002BF EB03                <1>         jmp     .10E                            ;}
    48                              <1> .10F:                                           ;else
    49                              <1>                                                 ;{
    50 000002C1 B80000              <1>         mov     ax, 0                           ;   AX = 0; //失敗
    51                              <1> .10E:                                           ;}
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;レジスタの復帰
    55                              <1>         ;---------------------------------------
    56 000002C4 5F                  <1>         pop     di
    57 000002C5 5E                  <1>         pop     si
    58 000002C6 07                  <1>         pop     es
    59 000002C7 59                  <1>         pop     cx
    60 000002C8 5B                  <1>         pop     bx
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;スタックフレームの破棄
    64                              <1>         ;---------------------------------------
    65 000002C9 89EC                <1>         mov     sp, bp
    66 000002CB 5D                  <1>         pop     bp
    67                              <1> 
    68 000002CC C3                  <1>         ret
   108                                  %include        "..\modules\real\get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;  + 4| フォントアドレス格納位置
     6                              <1>                                             ;  + 2| IP(戻り番号)
     7 000002CD 55                  <1>         push    bp                          ;BP+ 0| BP(元の値)
     8 000002CE 89E5                <1>         mov     bp, sp                      ;-----|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 000002D0 50                  <1>         push    ax
    14 000002D1 53                  <1>         push    bx
    15 000002D2 56                  <1>         push    si
    16 000002D3 06                  <1>         push    es
    17 000002D4 55                  <1>         push    bp
    18                              <1> 
    19                              <1>         ;---------------------------------------
    20                              <1>         ;引数を取得
    21                              <1>         ;---------------------------------------
    22 000002D5 8B7604              <1>         mov     si, [bp + 4]                    ;SI = FONTアドレスの保存先アドレス;
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;フォントアドレスの取得
    26                              <1>         ;---------------------------------------
    27 000002D8 B83011              <1>         mov     ax, 0x1130                      ; //フォントアドレスの取得
    28 000002DB B706                <1>         mov     bh, 0x06                        ;8x16 font (vga/mcga)
    29 000002DD CD10                <1>         int     10h                             ;ES:BP = FONT ADDRESS
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;FONTアドレスを保存
    33                              <1>         ;---------------------------------------
    34 000002DF 8C04                <1>         mov     [si + 0], es                    ;FONTアドレス保存ポインタ[0] = セグメント;
    35 000002E1 896C02              <1>         mov     [si + 2], bp                    ;FONTアドレス保存ポインタ[1] = オフセット;
    36                              <1>         
    37                              <1>         ;---------------------------------------
    38                              <1>         ;レジスタの復帰
    39                              <1>         ;---------------------------------------
    40 000002E4 5D                  <1>         pop     bp
    41 000002E5 07                  <1>         pop     es
    42 000002E6 5E                  <1>         pop     si
    43 000002E7 5B                  <1>         pop     bx
    44 000002E8 58                  <1>         pop     ax
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;スタックフレームの破棄
    48                              <1>         ;---------------------------------------
    49 000002E9 89EC                <1>         mov     sp, bp
    50 000002EB 5D                  <1>         pop     bp
    51                              <1> 
    52 000002EC C3                  <1>         ret
   109                                  %include        "..\modules\real\get_mem_info.s"
     1                              <1> get_mem_info:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタを保存
     4                              <1>         ;---------------------------------------
     5 000002ED 6650                <1>         push    eax
     6 000002EF 6653                <1>         push    ebx
     7 000002F1 6651                <1>         push    ecx
     8 000002F3 6652                <1>         push    edx
     9 000002F5 56                  <1>         push    si
    10 000002F6 57                  <1>         push    di
    11 000002F7 55                  <1>         push    bp
    12                              <1> 
    13                              <1> 
    14                              <1> ALIGN   4, db   0
    15 000002F8 00<rept>            <1> .b0     times E820_RECORD_SIZE  db  0
    16                              <1> 
    17 0000030C 68[A003]E8AEFD83C4- <1>         cdecl   puts, .s0                       ; //Base____...
    17 00000314 02                  <1>
    18                              <1> 
    19                              <1>         ;---------------------------------------
    20                              <1>         ;メモリ情報を取得
    21                              <1>         ;---------------------------------------
    22 00000315 BD0000              <1>         mov     bp, 0                           ;lines = 0; //行数
    23 00000318 66BB00000000        <1>         mov     ebx, 0                       ;index = 0; //インデックスを初期化
    24                              <1> .10L:                                           ;do
    25                              <1>                                                 ;{
    26 0000031E 66B820E80000        <1>         mov     eax, 0x0000E820                 ;       EAX = 0xE820;
    27                              <1>                                                 ;       EBX = インデックス;
    28 00000324 66B914000000        <1>         mov     ecx, E820_RECORD_SIZE           ;       ECX = 要求バイト数;
    29 0000032A 66BA50414D53        <1>         mov     edx, 'PAMS'                     ;       EDX = 'SMAP';
    30 00000330 BF[F802]            <1>         mov     di, .b0                         ;       ES:DI = バッファ(保存先)
    31 00000333 CD15                <1>         int     0x15                            ;       CF = BIOS(0x15, 0xE820); //ES:DIにメモリ情報保存される
    32                              <1> 
    33                              <1>         ;---------------------------------------
    34                              <1>         ;エラーチェックとBIOS対応チェック
    35                              <1>         ;---------------------------------------
    36                              <1>         ;コマンドに対応するか?
    37 00000335 663D50414D53        <1>         cmp     eax, 'PAMS'                     ;       if('SMAP' != EAX)
    38 0000033B 7402                <1>         je      .12E                            ;       {
    39 0000033D EB4C                <1>         jmp     .10E                            ;               break;
    40                              <1> .12E:                                           ;       }
    41                              <1>         ;エラーなし?                             ;      if(CF)
    42 0000033F 7302                <1>         jnc     .14E                            ;       {
    43 00000341 EB48                <1>         jmp     .10E                            ;               break; //エラー発生
    44                              <1> .14E:                                           ;       }
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;1レコード分のメモリ情報を表示
    48                              <1>         ;---------------------------------------
    49 00000343 57E8E40083C402      <1>         cdecl   put_mem_info, di                ;1レコード分のメモリ情報を表示
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;ACPI dataのアドレスを取得
    53                              <1>         ;---------------------------------------
    54 0000034A 668B4510            <1>         mov     eax, [di + 16]                  ;       EAX = レコードタイプ;
    55 0000034E 6683F803            <1>         cmp     eax, 3                          ;       if(3 == EAX) //ACPI data
    56 00000352 750F                <1>         jne     .15E                            ;       {
    57                              <1>         
    58 00000354 668B05              <1>         mov     eax, [di + 0]                   ;               EAX = bASEアドレス;
    59 00000357 66A3[0402]          <1>         mov     [ACPI_DATA.adr], eax            ;               ACPI_DATA.adr = EAX;
    60                              <1> 
    61 0000035B 668B4508            <1>         mov     eax, [di + 8]                   ;               EAX = Length;
    62 0000035F 66A3[0802]          <1>         mov     [ACPI_DATA.len], eax            ;               ACPI_DATA.len = EAX;
    63                              <1> .15E:                                           ;       }
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;8行ごとに表示
    67                              <1>         ;---------------------------------------
    68 00000363 6683FB00            <1>         cmp     ebx, 0                          ;       if(0 != EBX)
    69 00000367 741C                <1>         jz      .16E                            ;       {
    70                              <1>         
    71 00000369 45                  <1>         inc     bp                              ;               lines++;
    72 0000036A 83E507              <1>         and     bp, 0x07                        ;               lines &= 0x07;
    73 0000036D 7516                <1>         jnz     .16E                            ;               if(0 == lines)
    74                              <1>                                                 ;               {
    75 0000036F 68[1304]E84BFD83C4- <1>         cdecl   puts, .s2                       ;                       //中断メッセージを表示
    75 00000377 02                  <1>
    76 00000378 B410                <1>         mov     ah, 0x10                        ;                       //キー入力待ち
    77 0000037A CD16                <1>         int     0x16                            ;                       AL = BIOS(0x16, 0x10);
    78                              <1> 
    79 0000037C 68[1E04]E83EFD83C4- <1>         cdecl   puts, .s3                       ;                       //中断メッセージを消去
    79 00000384 02                  <1>
    80                              <1>                                                 ;               }
    81                              <1> .16E:                                           ;       }
    82 00000385 6683FB00            <1>         cmp     ebx, 0                          ;
    83 00000389 7593                <1>         jne     .10L                            ;}
    84                              <1> .10E:                                           ;while(0 != EBX);
    85 0000038B 68[E303]E82FFD83C4- <1>         cdecl   puts, .s1                       ;___..
    85 00000393 02                  <1>
    86                              <1>         ;---------------------------------------
    87                              <1>         ;レジスタの復帰
    88                              <1>         ;---------------------------------------
    89 00000394 5D                  <1>         pop bp
    90 00000395 5F                  <1>         pop di
    91 00000396 5E                  <1>         pop si
    92 00000397 665A                <1>         pop edx
    93 00000399 6659                <1>         pop ecx
    94 0000039B 665B                <1>         pop ebx
    95 0000039D 6658                <1>         pop eax
    96                              <1> 
    97 0000039F C3                  <1>         ret
    98                              <1>         ;---------------------------------------
    99                              <1>         ;データ
   100                              <1>         ;---------------------------------------
   101 000003A0 2045383230204D656D- <1> .s0:	db " E820 Memory Map:", 0x0A, 0x0D
   101 000003A9 6F7279204D61703A0A- <1>
   101 000003B2 0D                  <1>
   102 000003B3 20426173655F5F5F5F- <1> 	db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
   102 000003BC 5F5F5F5F5F5F5F5F5F- <1>
   102 000003C5 204C656E6774685F5F- <1>
   102 000003CE 5F5F5F5F5F5F5F5F5F- <1>
   102 000003D7 20547970655F5F5F5F- <1>
   102 000003E0 0A0D00              <1>
   103 000003E3 202D2D2D2D2D2D2D2D- <1> .s1:	db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
   103 000003EC 2D2D2D2D2D2D2D2D2D- <1>
   103 000003F5 202D2D2D2D2D2D2D2D- <1>
   103 000003FE 2D2D2D2D2D2D2D2D2D- <1>
   103 00000407 202D2D2D2D2D2D2D2D- <1>
   103 00000410 0A0D00              <1>
   104 00000413 203C6D6F72652E2E2E- <1> .s2:    db " <more...>", 0
   104 0000041C 3E00                <1>
   105 0000041E 0D2020202020202020- <1> .s3:    db 0x0D, "          ", 0x0D, 0
   105 00000427 20200D00            <1>
   106                              <1> 
   107                              <1> put_mem_info:
   108                              <1>         ;-----------------------------------
   109                              <1>         ;スタックフレームの構築
   110                              <1>         ;-----------------------------------
   111                              <1>                                             ;  + 4| バッファアドレス
   112                              <1>                                             ;  + 2| IP(戻り番号)
   113 0000042B 55                  <1>         push    bp                          ;BP+ 0| BP(元の値)
   114 0000042C 89E5                <1>         mov     bp, sp                      ;-----|---------
   115                              <1> 
   116                              <1>         ;-----------------------------------
   117                              <1>         ;レジスタの保存
   118                              <1>         ;-----------------------------------
   119 0000042E 53                  <1>         push    bx
   120 0000042F 56                  <1>         push    si
   121                              <1> 
   122                              <1>         ;---------------------------------------
   123                              <1>         ;引数を取得
   124                              <1>         ;---------------------------------------
   125 00000430 8B7604              <1>         mov     si, [bp + 4]                    ;SI = ブッファアドレス;
   126                              <1> 
   127                              <1>         ;---------------------------------------
   128                              <1>         ;数字を文字列に変換し代入
   129                              <1>         ;---------------------------------------
   130                              <1>         ;Base(64bit)
   131 00000433 6A046A106A0468-     <1>         cdecl   itoa, word [si + 6], .p2 + 0, 4, 16 ,0b0100
   131 0000043A [0A05]FF7406E8CAFD- <1>
   131 00000442 83C40A              <1>
   132 00000445 6A046A106A0468-     <1>         cdecl   itoa, word [si + 4], .p2 + 4, 4, 16 ,0b0100
   132 0000044C [0E05]FF7404E8B8FD- <1>
   132 00000454 83C40A              <1>
   133 00000457 6A046A106A0468-     <1>         cdecl   itoa, word [si + 2], .p3 + 0, 4, 16 ,0b0100
   133 0000045E [1305]FF7402E8A6FD- <1>
   133 00000466 83C40A              <1>
   134 00000469 6A046A106A0468-     <1>         cdecl   itoa, word [si + 0], .p3 + 4, 4, 16 ,0b0100
   134 00000470 [1705]FF34E895FD83- <1>
   134 00000478 C40A                <1>
   135                              <1> 
   136                              <1>         ;Length(64bit)
   137 0000047A 6A046A106A0468-     <1>         cdecl   itoa, word [si +14], .p4 + 0, 4, 16 ,0b0100
   137 00000481 [1C05]FF740EE883FD- <1>
   137 00000489 83C40A              <1>
   138 0000048C 6A046A106A0468-     <1>         cdecl   itoa, word [si +12], .p4 + 4, 4, 16 ,0b0100
   138 00000493 [2005]FF740CE871FD- <1>
   138 0000049B 83C40A              <1>
   139 0000049E 6A046A106A0468-     <1>         cdecl   itoa, word [si +10], .p5 + 0, 4, 16 ,0b0100
   139 000004A5 [2505]FF740AE85FFD- <1>
   139 000004AD 83C40A              <1>
   140 000004B0 6A046A106A0468-     <1>         cdecl   itoa, word [si + 8], .p5 + 4, 4, 16 ,0b0100
   140 000004B7 [2905]FF7408E84DFD- <1>
   140 000004BF 83C40A              <1>
   141                              <1> 
   142                              <1>         ;Type(32bit)
   143 000004C2 6A046A106A0468-     <1>         cdecl   itoa, word [si +18], .p6 + 0, 4, 16 ,0b0100
   143 000004C9 [2E05]FF7412E83BFD- <1>
   143 000004D1 83C40A              <1>
   144 000004D4 6A046A106A0468-     <1>         cdecl   itoa, word [si +16], .p6 + 4, 4, 16 ,0b0100
   144 000004DB [3205]FF7410E829FD- <1>
   144 000004E3 83C40A              <1>
   145                              <1> 
   146 000004E6 68[0905]E8D4FB83C4- <1>         cdecl   puts, .s1                       ;レコード情報を表示
   146 000004EE 02                  <1>
   147                              <1> 
   148                              <1>         ;---------------------------------------
   149                              <1>         ;レコード情報のデータタイプを文字列に変換
   150                              <1>         ;---------------------------------------
   151 000004EF 8B5C10              <1>         mov     bx, [si +16]                    ;//タイプを文字列で表示
   152 000004F2 83E307              <1>         and     bx, 0x07                        ;BX = Type(0~5)
   153 000004F5 D1E3                <1>         shl     bx, 1                           ;BX *= 2; //要素サイズに変換(Double Word)
   154 000004F7 81C3[8B05]          <1>         add     bx, .t0                         ;BX += .t0; //テーブルの先頭アドレスを加算(オフセット)
   155 000004FB FF37E8C0FB83C402    <1>         cdecl   puts, word[bx]                  ;puts(*BX);
   156                              <1> 
   157                              <1>         ;---------------------------------------
   158                              <1>         ;レジスタの復帰
   159                              <1>         ;---------------------------------------
   160 00000503 5E                  <1>         pop     si
   161 00000504 5B                  <1>         pop     bx
   162                              <1> 
   163                              <1>         ;---------------------------------------
   164                              <1>         ;スタックフレームの破棄
   165                              <1>         ;---------------------------------------
   166 00000505 89EC                <1>         mov     sp, bp
   167 00000507 5D                  <1>         pop     bp
   168                              <1> 
   169 00000508 C3                  <1>         ret
   170                              <1> 
   171                              <1>         ;---------------------------------------
   172                              <1>         ;データ
   173                              <1>         ;---------------------------------------
   174 00000509 20                  <1> .s1     db  " "
   175 0000050A 5A5A5A5A5A5A5A5A5F  <1> .p2     db  "ZZZZZZZZ_"
   176 00000513 5A5A5A5A5A5A5A5A20  <1> .p3     db  "ZZZZZZZZ "
   177 0000051C 5A5A5A5A5A5A5A5A5F  <1> .p4     db  "ZZZZZZZZ_"
   178 00000525 5A5A5A5A5A5A5A5A20  <1> .p5     db  "ZZZZZZZZ "
   179 0000052E 5A5A5A5A5A5A5A5A00  <1> .p6     db  "ZZZZZZZZ", 0
   180                              <1> 
   181 00000537 2028556E6B6E6F776E- <1> .s4     db  " (Unknown)", 0x0A, 0x0D, 0
   181 00000540 290A0D00            <1>
   182 00000544 2028757361626C6529- <1> .s5     db  " (usable)", 0x0A, 0x0D, 0
   182 0000054D 0A0D00              <1>
   183 00000550 202872657365727665- <1> .s6     db  " (reserved)", 0x0A, 0x0D, 0
   183 00000559 64290A0D00          <1>
   184 0000055E 202841435049206461- <1> .s7     db  " (ACPI data)", 0x0A, 0x0D, 0
   184 00000567 7461290A0D00        <1>
   185 0000056D 202841435049204E56- <1> .s8     db  " (ACPI NVS)", 0x0A, 0x0D, 0
   185 00000576 53290A0D00          <1>
   186 0000057B 2028626164206D656D- <1> .s9     db  " (bad memory)", 0x0A, 0x0D, 0
   186 00000584 6F7279290A0D00      <1>
   187                              <1> 
   188 0000058B [3705][4405][5005]- <1> .t0     dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   188 00000591 [5E05][6D05][7B05]- <1>
   188 00000597 [3705][3705]        <1>
   110                                  
   111                                  
   112                                  ;********************************************************************************************************
   113                                  ;ブート処理の第2ステージ
   114                                  ;********************************************************************************************************
   115                                  stage_2:
   116                                          ;---------------------------------------
   117                                          ;文字列の表示
   118                                          ;---------------------------------------
   119 0000059B 68[1506]E81FFB83C4-             cdecl puts, .s0                         ;puts(.s0);
   119 000005A3 02                 
   120                                  
   121                                          ;---------------------------------------
   122                                          ;ドライブ情報を取得
   123                                          ;---------------------------------------
   124 000005A4 68[B800]E8E2FC83C4-             cdecl   get_drive_param, BOOT           ;get_drive_param(DX, BOOT.CYLN);
   124 000005AC 02                 
   125 000005AD 83F800                          cmp     ax, 0                           ;if(0 == AX)
   126 000005B0 750C                    .10Q:   jne     .10E                            ;{
   127 000005B2 68[4C06]E808FB83C4-             cdecl   puts, .e0                       ;       puts(.e0);
   127 000005BA 02                 
   128 000005BB E821FB                          call reboot                             ;       reboot(); //再起動
   129                                  .10E:                                           ;}
   130                                  
   131                                          ;---------------------------------------
   132                                          ;ドライブ情報を表示
   133                                          ;---------------------------------------
   134 000005BE A1[B800]                        mov     ax, [BOOT + drive.no]           ;AX = ブートドライブ;
   135 000005C1 6A046A106A0268-                 cdecl   itoa, ax, .p1, 2, 16, 0b0100    ;
   135 000005C8 [2D06]50E83EFC83C4-
   135 000005D0 0A                 
   136 000005D1 A1[BA00]                        mov     ax, [BOOT + drive.cyln]         ;
   137 000005D4 6A046A106A0468-                 cdecl   itoa, ax, .p2, 4, 16, 0b0100    ;
   137 000005DB [3506]50E82BFC83C4-
   137 000005E3 0A                 
   138 000005E4 A1[BC00]                        mov     ax, [BOOT + drive.head]         ;AX = ヘッド数
   139 000005E7 6A046A106A0268-                 cdecl   itoa, ax, .p3, 2, 16, 0b0100    ;
   139 000005EE [3F06]50E818FC83C4-
   139 000005F6 0A                 
   140 000005F7 A1[BE00]                        mov     ax, [BOOT + drive.sect]         ;AX = トラック当たりのセクタ数
   141 000005FA 6A046A106A0268-                 cdecl   itoa, ax, .p4, 2, 16, 0b0100    ;
   141 00000601 [4706]50E805FC83C4-
   141 00000609 0A                 
   142 0000060A 68[2406]E8B0FA83C4-             cdecl   puts, .s1
   142 00000612 02                 
   143                                  
   144                                          ;---------------------------------------
   145                                          ;次のステージへ移行
   146                                          ;---------------------------------------
   147 00000613 EB52                            jmp     stage_3rd                       ;次のステージへ移行
   148                                  
   149                                          ;---------------------------------------
   150                                          ;データ
   151                                          ;---------------------------------------
   152 00000615 326E64207374616765-     .s0     db      "2nd stage...", 0x0A, 0x0D, 0
   152 0000061E 2E2E2E0A0D00       
   153                                  
   154 00000624 2044726976653A3078      .s1     db      " Drive:0x"
   155 0000062D 2D2D2C20433A3078        .p1     db      "--, C:0x"
   156 00000635 2D2D2D2D2C20483A30-     .p2     db      "----, H:0x"
   156 0000063E 78                 
   157 0000063F 2D2D2C20533A3078        .p3     db      "--, S:0x"
   158 00000647 2D2D0A0D00              .p4     db      "--", 0x0A, 0x0D, 0
   159                                  
   160 0000064C 43616E277420676574-     .e0     db      "Can't get drive parameter.", 0
   160 00000655 206472697665207061-
   160 0000065E 72616D657465722E00 
   161                                  
   162                                  ;********************************************************************************************************
   163                                  ;ブート処理の第3ステージ
   164                                  ;********************************************************************************************************
   165                                  stage_3rd:
   166                                          ;---------------------------------------
   167                                          ;文字列を表示
   168                                          ;---------------------------------------
   169 00000667 68[E406]E853FA83C4-             cdecl   puts, .s0
   169 0000066F 02                 
   170                                  
   171                                          ;---------------------------------------
   172                                          ;プロテクトモードで使用するフォントは、
   173                                          ;BIOSに内蔵されたものを流用する
   174                                          ;---------------------------------------
   175 00000670 68[0002]E857FC83C4-             cdecl   get_font_adr, FONT              ;//BIOSのフォントアドレスを取得
   175 00000678 02                 
   176                                  
   177                                          ;---------------------------------------
   178                                          ;フォントアドレスの表示
   179                                          ;---------------------------------------
   180 00000679 6A046A106A0468-                 cdecl   itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   180 00000680 [0107]FF36[0002]E8-
   180 00000687 83FB83C40A         
   181 0000068C 6A046A106A0468-                 cdecl   itoa, word [FONT.off], .p2, 4, 16, 0b0100
   181 00000693 [0607]FF36[0202]E8-
   181 0000069A 70FB83C40A         
   182 0000069F 68[F306]E81BFA83C4-             cdecl   puts, .s1
   182 000006A7 02                 
   183                                  
   184                                          ;---------------------------------------
   185                                          ;メモリ情報の取得と表示
   186                                          ;---------------------------------------
   187 000006A8 E842FC                          cdecl   get_mem_info                    ;get_mem_info();
   188                                  
   189 000006AB 66A1[0402]                      mov     eax, [ACPI_DATA.adr]            ;EAX = ACPI_DATA.adr;
   190 000006AF 6683F800                        cmp     eax, 0                          ;if(EAX)
   191 000006B3 742D                            je     .10E                             ;{
   192                                  
   193 000006B5 6A046A106A0468-                 cdecl   itoa, ax, .p4, 4, 16, 0b0100    ;       itoa(AX) //下位アドレスを変換
   193 000006BC [1D07]50E84AFB83C4-
   193 000006C4 0A                 
   194 000006C5 66C1E810                        shr     eax, 16                         ;       EAX >> 16;
   195 000006C9 6A046A106A0468-                 cdecl   itoa, ax, .p3, 4, 16, 0b0100    ;       itoa(AX) //上位アドレスを変換
   195 000006D0 [1907]50E836FB83C4-
   195 000006D8 0A                 
   196                                  
   197 000006D9 68[0D07]E8E1F983C4-             cdecl   puts, .s2                       ;       puts(.s2); //アドレスを表示
   197 000006E1 02                 
   198                                  .10E:                                           ;}
   199                                  
   200                                          ;---------------------------------------
   201                                          ;処理の終了
   202                                          ;---------------------------------------
   203 000006E2 EBFE                            jmp     $                               ;while(1) //無限ループ
   204                                  
   205                                          ;---------------------------------------
   206                                          ;データ
   207                                          ;---------------------------------------
   208 000006E4 337264207374616765-     .s0     db      "3rd stage...", 0x0A, 0x0D, 0
   208 000006ED 2E2E2E0A0D00       
   209                                  
   210 000006F3 20464F4E5420416464-     .s1     db      " FONT Address="
   210 000006FC 726573733D         
   211 00000701 5A5A5A5A3A              .p1     db      "ZZZZ:"
   212 00000706 5A5A5A5A0A0D00          .p2     db      "ZZZZ", 0x0A, 0x0D, 0
   213                                  
   214 0000070D 204143504920646174-     .s2     db      " ACPI data ="
   214 00000716 61203D             
   215 00000719 5A5A5A5A                .p3     db      "ZZZZ"
   216 0000071D 5A5A5A5A0A0D00          .p4     db      "ZZZZ", 0x0A, 0x0D, 0
   217                                          
   218                                  ;********************************************************************************************************
   219                                  ;パディング
   220                                  ;********************************************************************************************************
   221 00000724 00<rept>                        times BOOT_SIZE - ($ - $$)     db 0    ;パディング
