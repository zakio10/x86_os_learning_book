     1                                  ;********************************************************************************************************
     2                                  ;マクロ
     3                                  ;********************************************************************************************************
     4                                  %define         USE_SYSTEM_CALL
     5                                  %define         USE_TEST_AND_SET
     6                                  
     7                                  %include        "..\include\define.s"
     1                              <1> VECT_BASE       equ     0x0010_0000             ;0010_0000:0010_07FF
     2                              <1> 
     3                              <1> SECT_SIZE   equ     (512)                   ;セクタサイズ
     4                              <1> 
     5                              <1> BOOT_LOAD   equ     0x7C00                  ;ブートプログラムのロード位置
     6                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)
     7                              <1> BOOT_SIZE   equ     (1024 * 8)              ;ブートコードサイズ
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     9                              <1> 
    10                              <1> KERNEL_LOAD equ     0x0010_1000
    11                              <1> KERNEL_SIZE equ     (1024*8)                ;カーネルサイズ
    12                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> STACK_BASE  equ     0x0010_3000             ;タスク用スタックエリア
    15                              <1> STACK_SIZE  equ     1024                    ;スタックサイズ
    16                              <1> 
    17                              <1> SP_TASK_0   equ     STACK_BASE + (STACK_SIZE * 1)
    18                              <1> SP_TASK_1   equ     STACK_BASE + (STACK_SIZE * 2)
    19                              <1> SP_TASK_2   equ     STACK_BASE + (STACK_SIZE * 3)
    20                              <1> 
    21                              <1> E820_RECORD_SIZE    equ 20
     8                                  %include        "..\include\macro.s"
     1                              <1> %define     RING_ITEM_SIZE  (1 << 4)
     2                              <1> %define     RING_INDEX_MASK (RING_ITEM_SIZE - 1)
     3                              <1> 
     4                              <1> struc drive
     5 00000000 <res 00000002>      <1>         .no         resw    1                       ;ドライブ番号
     6 00000002 <res 00000002>      <1>         .cyln       resw    1                       ;シリンダ
     7 00000004 <res 00000002>      <1>         .head       resw    1                       ;ヘッド
     8 00000006 <res 00000002>      <1>         .sect       resw    1                       ;セクタ
     9                              <1> endstruc
    10                              <1> 
    11                              <1> struc ring_buff
    12 00000000 <res 00000004>      <1>         .rp         resd    1                       ;RP:書き込み位置
    13 00000004 <res 00000004>      <1>         .wp         resd    1                       ;WP:読み込み位置
    14 00000008 <res 00000010>      <1>         .item       resb    RING_ITEM_SIZE          ;ブッファ
    15                              <1> endstruc
    16                              <1> 
    17                              <1> %macro  cdecl   1-*.nolist
    18                              <1> 
    19                              <1>     %rep    %0 - 1
    20                              <1>         push    %{-1:-1}
    21                              <1>         %rotate -1
    22                              <1>     %endrep
    23                              <1>     %rotate -1
    24                              <1> 
    25                              <1>         call    %1
    26                              <1> 
    27                              <1>     %if 1 < %0
    28                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    29                              <1>     %endif
    30                              <1> 
    31                              <1> %endmacro
    32                              <1> 
    33                              <1> %macro  set_vect    1-*
    34                              <1>         push    eax
    35                              <1>         push    edi
    36                              <1> 
    37                              <1>         mov     edi, VECT_BASE + (%1 * 8)           ;ベクタアドレス
    38                              <1>         mov     eax, %2
    39                              <1> 
    40                              <1>     %if 3 == %0
    41                              <1>         mov     [edi + 4], %3                       ;フラグ
    42                              <1>     %endif
    43                              <1> 
    44                              <1>         mov     [edi + 0], ax                       ;例外アドレス[15:0]
    45                              <1>         shr     eax, 16
    46                              <1>         mov     [edi + 6], ax                       ;6はエンディアン(?) 例外アドレス[31:16]
    47                              <1> 
    48                              <1>         pop     edi
    49                              <1>         pop     eax
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro  outp    2
    53                              <1>         mov     al, %2
    54                              <1>         out     %1, al
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro  set_desc    2-*
    58                              <1>         push    eax
    59                              <1>         push    edi
    60                              <1> 
    61                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
    62                              <1>         mov     eax, %2                             ;ベースアドレス
    63                              <1> 
    64                              <1>     %if 3 == %0
    65                              <1>         mov     [edi + 0], %3                       ;リミット
    66                              <1>     %endif
    67                              <1>     
    68                              <1>         mov     [edi + 2], ax                       ;ベース([15: 0])
    69                              <1>         shr     eax, 16
    70                              <1>         mov     [edi + 4], al                       ;ベース([23:16])
    71                              <1>         mov     [edi + 7], ah                       ;ベース([31:24])
    72                              <1> 
    73                              <1>         pop     edi
    74                              <1>         pop     eax
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_gate    2-*
    78                              <1>         push    eax
    79                              <1>         push    edi
    80                              <1> 
    81                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
    82                              <1>         mov     eax, %2                             ;ベースアドレス
    83                              <1> 
    84                              <1>         mov     [edi + 0], ax                       ;ベース([15:0])
    85                              <1>         shr     eax, 16
    86                              <1>         mov     [edi + 6], ax                       ;ベース([31:16])
    87                              <1> 
    88                              <1>         pop     edi
    89                              <1>         pop     eax
    90                              <1> %endmacro
     9                                  
    10                                          ORG     KERNEL_LOAD                             ;カーネルのロードアドレス
    11                                  
    12                                  [BITS 32]
    13                                  ;********************************************************************************************************
    14                                  ;エントリポイント
    15                                  ;********************************************************************************************************
    16                                  kernel:
    17                                          ;---------------------------------------
    18                                          ;フォントアドレスを取得
    19                                          ;---------------------------------------
    20 00000000 BE007E0000                      mov     esi, BOOT_LOAD + SECT_SIZE      ;ESI = 0x7C00 + 512
    21 00000005 0FB706                          movzx   eax, word [esi + 0]             ;EAX = [ESI + 0] //セグメント
    22 00000008 0FB75E02                        movzx   ebx, word [esi + 2]             ;EBX = [ESI + 2] //オフセット
    23 0000000C C1E004                          shl     eax, 4                          ;EAX << 4;
    24 0000000F 01D8                            add     eax, ebx                        ;EAX += EBX;
    25 00000011 A3[04020000]                    mov     [FONT_ADR], eax                 ;FONT_ADR[0] = EAX;
    26                                  
    27                                          ;---------------------------------------
    28                                          ;TSSディスクリプタの設定
    29                                          ;---------------------------------------
    30                                          set_desc        GDT.tss_0, TSS_0        ;//タスク0用TSSの設定
    30 00000016 50                  <1>  push eax
    30 00000017 57                  <1>  push edi
    30                              <1> 
    30 00000018 BF[B4040000]        <1>  mov edi, %1
    30 0000001D B8[0C020000]        <1>  mov eax, %2
    30                              <1> 
    30                              <1>  %if 3 == %0
    30                              <1>  mov [edi + 0], %3
    30                              <1>  %endif
    30                              <1> 
    30 00000022 66894702            <1>  mov [edi + 2], ax
    30 00000026 C1E810              <1>  shr eax, 16
    30 00000029 884704              <1>  mov [edi + 4], al
    30 0000002C 886707              <1>  mov [edi + 7], ah
    30                              <1> 
    30 0000002F 5F                  <1>  pop edi
    30 00000030 58                  <1>  pop eax
    31                                          set_desc        GDT.tss_1, TSS_1        ;//タスク1用TSSの設定
    31 00000031 50                  <1>  push eax
    31 00000032 57                  <1>  push edi
    31                              <1> 
    31 00000033 BF[BC040000]        <1>  mov edi, %1
    31 00000038 B8[E4020000]        <1>  mov eax, %2
    31                              <1> 
    31                              <1>  %if 3 == %0
    31                              <1>  mov [edi + 0], %3
    31                              <1>  %endif
    31                              <1> 
    31 0000003D 66894702            <1>  mov [edi + 2], ax
    31 00000041 C1E810              <1>  shr eax, 16
    31 00000044 884704              <1>  mov [edi + 4], al
    31 00000047 886707              <1>  mov [edi + 7], ah
    31                              <1> 
    31 0000004A 5F                  <1>  pop edi
    31 0000004B 58                  <1>  pop eax
    32                                          set_desc        GDT.tss_2, TSS_2        ;//タスク1用TSSの設定
    32 0000004C 50                  <1>  push eax
    32 0000004D 57                  <1>  push edi
    32                              <1> 
    32 0000004E BF[C4040000]        <1>  mov edi, %1
    32 00000053 B8[BC030000]        <1>  mov eax, %2
    32                              <1> 
    32                              <1>  %if 3 == %0
    32                              <1>  mov [edi + 0], %3
    32                              <1>  %endif
    32                              <1> 
    32 00000058 66894702            <1>  mov [edi + 2], ax
    32 0000005C C1E810              <1>  shr eax, 16
    32 0000005F 884704              <1>  mov [edi + 4], al
    32 00000062 886707              <1>  mov [edi + 7], ah
    32                              <1> 
    32 00000065 5F                  <1>  pop edi
    32 00000066 58                  <1>  pop eax
    33                                  
    34                                          ;---------------------------------------
    35                                          ;コールゲートの設定
    36                                          ;---------------------------------------
    37                                          set_gate        GDT.call_gate, call_gate;コールゲートの設定
    37 00000067 50                  <1>  push eax
    37 00000068 57                  <1>  push edi
    37                              <1> 
    37 00000069 BF[CC040000]        <1>  mov edi, %1
    37 0000006E B8[380F0000]        <1>  mov eax, %2
    37                              <1> 
    37 00000073 668907              <1>  mov [edi + 0], ax
    37 00000076 C1E810              <1>  shr eax, 16
    37 00000079 66894706            <1>  mov [edi + 6], ax
    37                              <1> 
    37 0000007D 5F                  <1>  pop edi
    37 0000007E 58                  <1>  pop eax
    38                                  
    39                                          ;---------------------------------------
    40                                          ;LDTの設定
    41                                          ;---------------------------------------
    42                                          set_desc        GDT.ldt, LDT, word LDT_LIMIT
    42 0000007F 50                  <1>  push eax
    42 00000080 57                  <1>  push edi
    42                              <1> 
    42 00000081 BF[AC040000]        <1>  mov edi, %1
    42 00000086 B8[DA040000]        <1>  mov eax, %2
    42                              <1> 
    42                              <1>  %if 3 == %0
    42 0000008B 66C7073700          <1>  mov [edi + 0], %3
    42                              <1>  %endif
    42                              <1> 
    42 00000090 66894702            <1>  mov [edi + 2], ax
    42 00000094 C1E810              <1>  shr eax, 16
    42 00000097 884704              <1>  mov [edi + 4], al
    42 0000009A 886707              <1>  mov [edi + 7], ah
    42                              <1> 
    42 0000009D 5F                  <1>  pop edi
    42 0000009E 58                  <1>  pop eax
    43                                  
    44                                          ;---------------------------------------
    45                                          ;GDTをロード(再設定)
    46                                          ;---------------------------------------
    47 0000009F 0F0115[D4040000]                lgdt    [GDTR]                          ;//グローバルディスクリプタテーブルをロード
    48                                  
    49                                          ;---------------------------------------
    50                                          ;スタックの設定
    51                                          ;---------------------------------------
    52 000000A6 BC00341000                      mov     esp, SP_TASK_0                  ;タスク0用のスタックを設定
    53                                  
    54                                          ;---------------------------------------
    55                                          ;タスクレジスタの初期化
    56                                          ;---------------------------------------
    57 000000AB 66B82000                        mov     ax, SS_TASK_0                   ;//タスクレジスタの設定
    58 000000AF 0F00D8                          ltr     ax
    59                                  
    60                                          ;---------------------------------------
    61                                          ;初期化
    62                                          ;---------------------------------------
    63 000000B2 E8970C0000                      cdecl   init_int                        ;//割り込みベクタの初期化
    64 000000B7 E8E10C0000                      cdecl   init_pic                        ;//割り込みコントローラの初期化
    65                                  
    66                                          set_vect        0x00, int_zero_div      ;割り込み処理の登録:0除算
    66 000000BC 50                  <1>  push eax
    66 000000BD 57                  <1>  push edi
    66                              <1> 
    66 000000BE BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    66 000000C3 B8[7F0D0000]        <1>  mov eax, %2
    66                              <1> 
    66                              <1>  %if 3 == %0
    66                              <1>  mov [edi + 4], %3
    66                              <1>  %endif
    66                              <1> 
    66 000000C8 668907              <1>  mov [edi + 0], ax
    66 000000CB C1E810              <1>  shr eax, 16
    66 000000CE 66894706            <1>  mov [edi + 6], ax
    66                              <1> 
    66 000000D2 5F                  <1>  pop edi
    66 000000D3 58                  <1>  pop eax
    67                                          set_vect        0x07, int_nm            ;割り込み処理の登録:デバイス使用不可(FPU)
    67 000000D4 50                  <1>  push eax
    67 000000D5 57                  <1>  push edi
    67                              <1> 
    67 000000D6 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    67 000000DB B8[D50F0000]        <1>  mov eax, %2
    67                              <1> 
    67                              <1>  %if 3 == %0
    67                              <1>  mov [edi + 4], %3
    67                              <1>  %endif
    67                              <1> 
    67 000000E0 668907              <1>  mov [edi + 0], ax
    67 000000E3 C1E810              <1>  shr eax, 16
    67 000000E6 66894706            <1>  mov [edi + 6], ax
    67                              <1> 
    67 000000EA 5F                  <1>  pop edi
    67 000000EB 58                  <1>  pop eax
    68                                          set_vect        0x20, int_timer         ;割り込み処理の登録:タイマー
    68 000000EC 50                  <1>  push eax
    68 000000ED 57                  <1>  push edi
    68                              <1> 
    68 000000EE BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    68 000000F3 B8[12050000]        <1>  mov eax, %2
    68                              <1> 
    68                              <1>  %if 3 == %0
    68                              <1>  mov [edi + 4], %3
    68                              <1>  %endif
    68                              <1> 
    68 000000F8 668907              <1>  mov [edi + 0], ax
    68 000000FB C1E810              <1>  shr eax, 16
    68 000000FE 66894706            <1>  mov [edi + 6], ax
    68                              <1> 
    68 00000102 5F                  <1>  pop edi
    68 00000103 58                  <1>  pop eax
    69                                          set_vect        0x21, int_keyboard      ;割り込み処理の登録:KBC
    69 00000104 50                  <1>  push eax
    69 00000105 57                  <1>  push edi
    69                              <1> 
    69 00000106 BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    69 0000010B B8[B20E0000]        <1>  mov eax, %2
    69                              <1> 
    69                              <1>  %if 3 == %0
    69                              <1>  mov [edi + 4], %3
    69                              <1>  %endif
    69                              <1> 
    69 00000110 668907              <1>  mov [edi + 0], ax
    69 00000113 C1E810              <1>  shr eax, 16
    69 00000116 66894706            <1>  mov [edi + 6], ax
    69                              <1> 
    69 0000011A 5F                  <1>  pop edi
    69 0000011B 58                  <1>  pop eax
    70                                          set_vect        0x28, int_rtc           ;割り込み処理の登録:RTC
    70 0000011C 50                  <1>  push eax
    70 0000011D 57                  <1>  push edi
    70                              <1> 
    70 0000011E BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    70 00000123 B8[C80D0000]        <1>  mov eax, %2
    70                              <1> 
    70                              <1>  %if 3 == %0
    70                              <1>  mov [edi + 4], %3
    70                              <1>  %endif
    70                              <1> 
    70 00000128 668907              <1>  mov [edi + 0], ax
    70 0000012B C1E810              <1>  shr eax, 16
    70 0000012E 66894706            <1>  mov [edi + 6], ax
    70                              <1> 
    70 00000132 5F                  <1>  pop edi
    70 00000133 58                  <1>  pop eax
    71                                          set_vect        0x81, trap_gate_81, word 0xEF00 ;トラップゲートの登録:1文字出力
    71 00000134 50                  <1>  push eax
    71 00000135 57                  <1>  push edi
    71                              <1> 
    71 00000136 BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    71 0000013B B8[680F0000]        <1>  mov eax, %2
    71                              <1> 
    71                              <1>  %if 3 == %0
    71 00000140 66C7470400EF        <1>  mov [edi + 4], %3
    71                              <1>  %endif
    71                              <1> 
    71 00000146 668907              <1>  mov [edi + 0], ax
    71 00000149 C1E810              <1>  shr eax, 16
    71 0000014C 66894706            <1>  mov [edi + 6], ax
    71                              <1> 
    71 00000150 5F                  <1>  pop edi
    71 00000151 58                  <1>  pop eax
    72                                          set_vect        0x82, trap_gate_82, word 0xEF00 ;トラップゲートの登録:点の描画
    72 00000152 50                  <1>  push eax
    72 00000153 57                  <1>  push edi
    72                              <1> 
    72 00000154 BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    72 00000159 B8[760F0000]        <1>  mov eax, %2
    72                              <1> 
    72                              <1>  %if 3 == %0
    72 0000015E 66C7470400EF        <1>  mov [edi + 4], %3
    72                              <1>  %endif
    72                              <1> 
    72 00000164 668907              <1>  mov [edi + 0], ax
    72 00000167 C1E810              <1>  shr eax, 16
    72 0000016A 66894706            <1>  mov [edi + 6], ax
    72                              <1> 
    72 0000016E 5F                  <1>  pop edi
    72 0000016F 58                  <1>  pop eax
    73                                  
    74                                          ;---------------------------------------
    75                                          ;デバイスの割り込み許可
    76                                          ;---------------------------------------
    77 00000170 6A10E87A0C00006683-             cdecl   rtc_int_en, 0x10                ;rtc_int_en(UIE); //更新サイクル終了割り込み許可
    77 00000179 C404               
    78 0000017B E8700D0000                      cdecl   int_en_timer0                   ;//タイマー(カウンタ0)割り込み許可
    79                                  
    80                                          ;---------------------------------------
    81                                          ;IMR(割り込みマスクレジスタ)の設定
    82                                          ;---------------------------------------
    83                                          outp    0x21, 0b_1111_1000              ;//割り込み有効:スレーブPIC/KBC/タイマー
    83 00000180 B0F8                <1>  mov al, %2
    83 00000182 E621                <1>  out %1, al
    84                                          outp    0xA1, 0b_1111_1110              ;//割り込み有効:RTC
    84 00000184 B0FE                <1>  mov al, %2
    84 00000186 E6A1                <1>  out %1, al
    85                                  
    86                                          ;---------------------------------------
    87                                          ;CPUの割り込み許可
    88                                          ;---------------------------------------
    89 00000188 FB                              sti                                      ;//割り込み許可
    90                                  
    91                                          ;---------------------------------------
    92                                          ;フォントの一覧表示
    93                                          ;---------------------------------------
    94 00000189 6A0D6A3FE86E060000-             cdecl   draw_font, 63, 13               ;//フォントの一覧表示
    94 00000192 6683C408           
    95 00000196 6A046A3FE8E2060000-             cdecl   draw_color_bar, 63, 4           ;//カラーバーの表示
    95 0000019F 6683C408           
    96                                  
    97                                          ;---------------------------------------
    98                                          ;文字列の表示
    99                                          ;---------------------------------------
   100 000001A3 68[ED010000]680F01-             cdecl   draw_str, 25, 14, 0x010F, .s0   ;draw_str();
   100 000001AB 00006A0E6A19E88D06-
   100 000001B4 00006683C410       
   101                                  
   102                                  .10L:                                           ;while(1)
   103                                                                                  ;{
   104                                          ;---------------------------------------
   105                                          ;タスクの呼び出し
   106                                          ;---------------------------------------
   107                                          ;call    SS_TASK_1:0                     ;       //タスク1へのジャンプ
   108                                  
   109                                          ;---------------------------------------
   110                                          ;回転する棒の表示
   111                                          ;---------------------------------------
   112 000001BA E8400D0000                      cdecl   draw_rotation_bar               ;       //回転する棒を表示
   113                                  
   114                                          ;---------------------------------------
   115                                          ;キーコードの取得
   116                                          ;---------------------------------------
   117 000001BF 68[FE010000]68-                 cdecl   ring_rd, _KEY_BUFF, .int_key    ;       EAX = ring_rd(buff, &int_key);
   117 000001C5 [D80E0000]E8370C00-
   117 000001CD 006683C408         
   118 000001D2 83F800                          cmp     eax, 0                          ;       if(EAX != 0)
   119 000001D5 7412                            je      .10E                            ;       {
   120                                  
   121                                          ;---------------------------------------
   122                                          ;キーコードの表示
   123                                          ;---------------------------------------
   124 000001D7 68[D80E0000]6A1D6A-             cdecl   draw_key, 2, 29, _KEY_BUFF      ;               ring_show(key_buff); //全要素を表示
   124 000001DF 02E8790C00006683C4-
   124 000001E8 0C                 
   125                                  .10E:                                           ;       }
   126 000001E9 EBCF                            jmp     .10L                            ;}
   127                                  
   128                                          ;---------------------------------------
   129                                          ;処理の終了
   130                                          ;---------------------------------------
   131 000001EB EBFE                            jmp     $                               ;while(1) //無限ループ
   132                                  
   133                                  
   134                                  
   135 000001ED 2048656C6C6F2C206B-     .s0:    db      " Hello, kernel! ", 0
   135 000001F6 65726E656C212000   
   136                                  
   137 000001FE 00000000                .int_key:       dd      0
   138                                  
   139 00000202 00<rept>                ALIGN   4, db   0
   140 00000204 00000000                FONT_ADR:       dd      0
   141 00000208 00000000                RTC_TIME:       dd      0
   142                                  
   143                                  ;********************************************************************************************************
   144                                  ;タスク
   145                                  ;********************************************************************************************************
   146                                  %include        "descriptor.s"
     1                              <1> ;********************************************************************************************************
     2                              <1> ;TSS
     3                              <1> ;********************************************************************************************************
     4                              <1> TSS_0:
     5 0000020C 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
     6 00000210 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                                     ;*  4:ESP0
     7 00000214 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
     8 00000218 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
     9 0000021C 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    10 00000220 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    11 00000224 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    12 00000228 00000000            <1> .cr3:           dd  0                                                   ;  28:CR3(PDBR)
    13 0000022C 00000000            <1> .eip:           dd  0                                                   ;  32:EIP
    14 00000230 00000000            <1> .eflags:        dd  0                                                   ;  36:EFLAGS
    15 00000234 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    16 00000238 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    17 0000023C 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    18 00000240 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    19 00000244 00000000            <1> .esp:           dd  0                                                   ;  56:ESP
    20 00000248 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    21 0000024C 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    22 00000250 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    23 00000254 00000000            <1> .es:            dd  0                                                   ;  72:ES
    24 00000258 00000000            <1> .cs:            dd  0                                                   ;  76:CS
    25 0000025C 00000000            <1> .ss:            dd  0                                                   ;  80:SS
    26 00000260 00000000            <1> .ds:            dd  0                                                   ;  84:DS
    27 00000264 00000000            <1> .fs:            dd  0                                                   ;  88:FS
    28 00000268 00000000            <1> .gs:            dd  0                                                   ;  92:GS
    29 0000026C 00000000            <1> .ldt:           dd  0                                                   ;* 96:LDTセグメントセレクタ
    30 00000270 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    31 00000274 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    32                              <1> 
    33                              <1> TSS_1:
    34 000002E4 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    35 000002E8 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                                     ;*  4:ESP0
    36 000002EC 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    37 000002F0 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    38 000002F4 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    39 000002F8 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    40 000002FC 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    41 00000300 00000000            <1> .cr3:           dd  0                                                   ;  28:CR3(PDBR)
    42 00000304 [60050000]          <1> .eip:           dd  task_1                                              ;  32:EIP
    43 00000308 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
    44 0000030C 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    45 00000310 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    46 00000314 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    47 00000318 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    48 0000031C 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56:ESP
    49 00000320 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    50 00000324 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    51 00000328 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    52 0000032C 27000000            <1> .es:            dd  DS_TASK_1                                           ;  72:ES
    53 00000330 1F000000            <1> .cs:            dd  CS_TASK_1                                           ;  76:CS
    54 00000334 27000000            <1> .ss:            dd  DS_TASK_1                                           ;  80:SS
    55 00000338 27000000            <1> .ds:            dd  DS_TASK_1                                           ;  84:DS
    56 0000033C 27000000            <1> .fs:            dd  DS_TASK_1                                           ;  88:FS
    57 00000340 27000000            <1> .gs:            dd  DS_TASK_1                                           ;  92:GS
    58 00000344 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
    59 00000348 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    60 0000034C 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    61                              <1> 
    62                              <1> TSS_2:
    63 000003BC 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    64 000003C0 003A1000            <1> .esp0:          dd  SP_TASK_2 - 512                                     ;*  4:ESP0
    65 000003C4 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    66 000003C8 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    67 000003CC 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    68 000003D0 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    69 000003D4 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    70 000003D8 00000000            <1> .cr3:           dd  0                                                   ;  28:CR3(PDBR)
    71 000003DC [97050000]          <1> .eip:           dd  task_2                                              ;  32:EIP
    72 000003E0 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
    73 000003E4 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    74 000003E8 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    75 000003EC 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    76 000003F0 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    77 000003F4 003C1000            <1> .esp:           dd  SP_TASK_2                                           ;  56:ESP
    78 000003F8 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    79 000003FC 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    80 00000400 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    81 00000404 37000000            <1> .es:            dd  DS_TASK_2                                           ;  72:ES
    82 00000408 2F000000            <1> .cs:            dd  CS_TASK_2                                           ;  76:CS
    83 0000040C 37000000            <1> .ss:            dd  DS_TASK_2                                           ;  80:SS
    84 00000410 37000000            <1> .ds:            dd  DS_TASK_2                                           ;  84:DS
    85 00000414 37000000            <1> .fs:            dd  DS_TASK_2                                           ;  88:FS
    86 00000418 37000000            <1> .gs:            dd  DS_TASK_2                                           ;  92:GS
    87 0000041C 18000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
    88 00000420 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    89 00000424 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    90                              <1> 
    91                              <1> ;********************************************************************************************************
    92                              <1> ;グローバルディスクリプタテーブル
    93                              <1> ;********************************************************************************************************
    94 00000494 0000000000000000    <1> GDT:            dq  0x_0000_0000_0000_0000                              ;NULL
    95 0000049C FFFF0000009ACF00    <1> .cs_kernel:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
    96 000004A4 FFFF00000092CF00    <1> .ds_kernel:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
    97 000004AC 0000000000820000    <1> .ldt:           dq  0x_0000_8200_0000_0000                              ;LDTディスクリプタ
    98 000004B4 6700000000890000    <1> .tss_0:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
    99 000004BC 6700000000890000    <1> .tss_1:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   100 000004C4 6700000000890000    <1> .tss_2:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   101 000004CC 0000080004EC0000    <1> .call_gate:     dq  0x_0000_EC04_0008_0000                              ;386コールゲート(DPL=3, count=4, SEL=8)
   102                              <1> .end:
   103                              <1> 
   104                              <1> CS_KERNEL       equ .cs_kernel  - GDT
   105                              <1> DS_KERNEL       equ .ds_kernel  - GDT
   106                              <1> SS_LDT          equ .ldt        - GDT
   107                              <1> SS_TASK_0       equ .tss_0      - GDT
   108                              <1> SS_TASK_1       equ .tss_1      - GDT
   109                              <1> SS_TASK_2       equ .tss_2      - GDT
   110                              <1> SS_GATE_0       equ .call_gate  - GDT
   111                              <1> 
   112 000004D4 3F00                <1> GDTR:           dw  GDT.end - GDT - 1
   113 000004D6 [94040000]          <1>                 dd  GDT
   114                              <1> 
   115                              <1> 
   116                              <1> ;********************************************************************************************************
   117                              <1> ;ローカルディスクリプタテーブル
   118                              <1> ;********************************************************************************************************
   119 000004DA 0000000000000000    <1> LDT:            dq  0x_0000_0000_0000_0000                              ;NULL
   120 000004E2 FFFF0000009ACF00    <1> .cs_task_0:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
   121 000004EA FFFF00000092CF00    <1> .ds_task_0:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
   122 000004F2 FFFF000000FACF00    <1> .cs_task_1:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   123 000004FA FFFF000000F2CF00    <1> .ds_task_1:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   124 00000502 FFFF000000FACF00    <1> .cs_task_2:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   125 0000050A FFFF000000F2CF00    <1> .ds_task_2:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   126                              <1> .end:
   127                              <1> 
   128                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                              ;タスク0用CSセレクタ
   129                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                              ;タスク0用DSセレクタ
   130                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                          ;タスク1用CSセレクタ
   131                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                          ;タスク1用DSセレクタ
   132                              <1> CS_TASK_2       equ (.cs_task_2 - LDT) | 4 | 3                          ;タスク2用CSセレクタ
   133                              <1> DS_TASK_2       equ (.ds_task_2 - LDT) | 4 | 3                          ;タスク2用DSセレクタ
   134                              <1> 
   135                              <1> LDT_LIMIT       equ .end        - LDT - 1
   147                                  %include        "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000512 60                  <1>         pushad
     6 00000513 1E                  <1>         push    ds
     7 00000514 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 00000515 66B81000            <1>         mov     ax, 0x0010
    13 00000519 8ED8                <1>         mov     ds, ax
    14 0000051B 8EC0                <1>         mov     es, ax
    15                              <1>         
    16                              <1>         ;---------------------------------------
    17                              <1>         ;TICK
    18                              <1>         ;---------------------------------------
    19 0000051D FF05[58050000]      <1>         inc     dword [TIMER_COUNT]             ;TIMER_COUNT++; //割り込み回数の更新
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;割り込みフラグをクリア(EOI)
    23                              <1>         ;---------------------------------------
    24                              <1>         outp 0x20, 0x20
    24 00000523 B020                <2>  mov al, %2
    24 00000525 E620                <2>  out %1, al
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;タスクの切り替え
    28                              <1>         ;---------------------------------------
    29 00000527 660F00C8            <1>         str     ax                              ;AX = TR; //現在のタスクレジスタ
    30 0000052B 6683F820            <1>         cmp     ax, SS_TASK_0                   ;case(AX)
    31 0000052F 740F                <1>         je      .11L                            ;{
    32 00000531 6683F828            <1>         cmp     ax, SS_TASK_1
    33 00000535 7412                <1>         je      .12L
    34                              <1>                                                 ;       default:
    35 00000537 EA000000002000      <1>         jmp     SS_TASK_0:0                     ;       //タスク0に切り替え
    36 0000053E EB12                <1>         jmp     .10E                            ;       break;
    37                              <1> .11L:                                           ;       case SS_TASK_0:
    38 00000540 EA000000002800      <1>         jmp     SS_TASK_1:0                     ;       //タスク1に切り替え
    39 00000547 EB09                <1>         jmp     .10E                            ;       break;
    40                              <1> .12L:                                           ;       case SS_TASK_1:
    41 00000549 EA000000003000      <1>         jmp     SS_TASK_2:0                     ;       //タスク2に切り替え
    42 00000550 EB00                <1>         jmp     .10E                            ;       break;
    43                              <1> .10E:                                           ;}
    44                              <1> 
    45                              <1>         ;---------------------------------------
    46                              <1>         ;レジスタの復帰
    47                              <1>         ;---------------------------------------
    48 00000552 07                  <1>         pop     es
    49 00000553 1F                  <1>         pop     ds
    50 00000554 61                  <1>         popad
    51                              <1>         
    52 00000555 CF                  <1>         iret
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;データ
    56                              <1>         ;---------------------------------------
    57 00000556 00<rept>            <1> ALIGN   4, db   0
    58 00000558 0000000000000000    <1> TIMER_COUNT:    dq  0
   148                                  %include        "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;文字列の表示
     4                              <1>         ;---------------------------------------
     5 00000560 68[90050000]6A076A- <1>         cdecl   SS_GATE_0:0, 63, 0 , 0x07, .s0  ;draw_str();
     5 00000568 006A3F9A0000000038- <1>
     5 00000571 006683C410          <1>
     6                              <1> 
     7                              <1> .10L:                                           ;while(1)
     8                              <1>                                                 ;{
     9                              <1> 
    10                              <1>         ;---------------------------------------
    11                              <1>         ;時刻の表示
    12                              <1>         ;---------------------------------------
    13 00000576 A1[08020000]        <1>         mov     eax, [RTC_TIME]                 ;       //時刻の取得
    14 0000057B 5068000700006A006A- <1>         cdecl   draw_time, 72, 0, 0x0700, eax   ;       //時刻の表示
    14 00000584 48E8110600006683C4- <1>
    14 0000058D 10                  <1>
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;タスクの呼び出し
    18                              <1>         ;---------------------------------------       
    19                              <1>         ;jmp     SS_TASK_0:0                     ;       //タスク0へのジャンプ
    20                              <1> 
    21 0000058E EBE6                <1>         jmp     .10L                            ;}
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;データ
    25                              <1>         ;---------------------------------------
    26 00000590 5461736B2D3100      <1> .s0:    db  "Task-1", 0
   149                                  %include        "tasks/task_2.s"
     1                              <1> task_2:
     2 00000597 68[5A060000]6A076A- <1>         cdecl   draw_str, 63, 1, 0x07, .s0      ;   draw_str(.s0);
     2 0000059F 016A3FE89C02000066- <1>
     2 000005A8 83C410              <1>
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;FPU
     6                              <1>         ;---------------------------------------
     7                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
     8                              <1>                                     ;       ST0|        ST1|        ST2|        ST3|        ST4|        ST5|
     9                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    10 000005AB DB05[48060000]      <1>         fild    dword [.c1000]      ;      1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    11 000005B1 D9EB                <1>         fldpi                       ;        pi|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    12 000005B3 DA35[4C060000]      <1>         fidiv   dword [.c180]       ;    pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    13 000005B9 D9EB                <1>         fldpi                       ;        pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    14 000005BB DCC0                <1>         fadd    st0, st0            ;      2*pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    15 000005BD D9EE                <1>         fldz                        ;     θ = 0|       2*pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|
    16                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    17                              <1> 
    18                              <1> .10L:                                           ;while(1)
    19                              <1>                                                 ;{
    20                              <1> 
    21                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    22                              <1>                                     ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    23                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    24 000005BF D8C2                <1>         fadd    st0, ST2            ;θ =  θ + d|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    25 000005C1 D9F8                <1>         fprem                       ;    MOD(θ)|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    26                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    27                              <1>                                     ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    28 000005C3 D9C0                <1>         fld     st0                 ;         θ|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    29 000005C5 D9FE                <1>         fsin                        ;    sin(θ)|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    30 000005C7 D8CC                <1>         fmul    st0, st4            ;ST4*sin(θ)|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    31 000005C9 DF35[50060000]      <1>         fbstp   [.bcd]              ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    32                              <1> 
    33                              <1>         ;---------------------------------------
    34                              <1>         ;CPU
    35                              <1>         ;---------------------------------------
    36                              <1>         ;---------------------------------------
    37                              <1>         ;数値出力
    38                              <1>         ;---------------------------------------
    39 000005CF A1[50060000]        <1>         mov     eax, [.bcd]                     ;   EAX = 1000* sin(t);
    40 000005D4 89C3                <1>         mov     ebx, eax                        ;   EBX = EAX;
    41                              <1> 
    42 000005D6 250F0F0000          <1>         and     eax, 0x0F0F                     ;   //上位4ビットをマスク
    43 000005DB 0D30300000          <1>         or      eax, 0x3030                     ;   //上位4ビットに0x3を設定
    44                              <1> 
    45 000005E0 C1EB04              <1>         shr     ebx, 4                          ;   EBX >> 4;
    46 000005E3 81E30F0F0000        <1>         and     ebx, 0x0F0F                     ;   //上位4ビットをマスク
    47 000005E9 81CB30300000        <1>         or      ebx, 0x3030                     ;   //上位4ビットに0x3を設定
    48                              <1> 
    49 000005EF 883D[62060000]      <1>         mov     [.s2 + 0], bh                   ;   //1桁目
    50 000005F5 8825[64060000]      <1>         mov     [.s3 + 0], ah                   ;   //小数1桁目
    51 000005FB 881D[65060000]      <1>         mov     [.s3 + 1], bl                   ;   //小数2桁目
    52 00000601 A2[66060000]        <1>         mov     [.s3 + 2], al                   ;   //小数3桁目
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;符号チェック
    56                              <1>         ;---------------------------------------
    57 00000606 B807000000          <1>         mov     eax, 7                          ;   //bt命令準備(取り出しbit番号指定)
    58 0000060B 0FA305[59060000]    <1>         bt      [.bcd + 9], eax                 ;   CF = bcd[9] & 0x80;
    59 00000612 7209                <1>         jc      .10F                            ;   if(CF)
    60                              <1>                                                 ;   {
    61 00000614 C605[61060000]2B    <1>         mov     [.s1 + 0], byte '+'             ;       *s1 = '+';
    62 0000061B EB07                <1>         jmp     .10E                            ;   }
    63                              <1> .10F:                                           ;   else
    64                              <1>                                                 ;   {
    65 0000061D C605[61060000]2D    <1>         mov     [.s1 + 0], byte '-'             ;       *s1 = '-';
    66                              <1> .10E:                                           ;   }
    67                              <1> 
    68 00000624 68[61060000]6A076A- <1>         cdecl   draw_str, 72, 1, 0x07, .s1      ;   draw_str(.s1);
    68 0000062C 016A48E80F02000066- <1>
    68 00000635 83C410              <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;ウェイト
    72                              <1>         ;---------------------------------------
    73 00000638 6A0AE8F10900006683- <1>         cdecl   wait_tick, 10                   ;   wait_tick(10);
    73 00000641 C404                <1>
    74                              <1> 
    75 00000643 E977FFFFFF          <1>         jmp     .10L                            ;}
    76                              <1> 
    77                              <1>         ;---------------------------------------
    78                              <1>         ;データ
    79                              <1>         ;---------------------------------------
    80                              <1> ALIGN   4,  db  0
    81 00000648 E8030000            <1> .c1000:     dd  1000
    82 0000064C B4000000            <1> .c180:      dd  180
    83 00000650 00<rept>            <1> .bcd:   times 10    db  0x00
    84 0000065A 5461736B2D3200      <1> .s0:    db  "Task-2", 0
    85 00000661 2D                  <1> .s1:    db  "-"
    86 00000662 302E                <1> .s2:    db  "0."
    87 00000664 30303000            <1> .s3:    db  "000", 0
   150                                  
   151                                  ;********************************************************************************************************
   152                                  ;モジュール
   153                                  ;********************************************************************************************************
   154                                  %include        "..\modules\protect\vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 読み込みプレーン(0~3)
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000668 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000669 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 0000066B 6650                <1>         push    ax
    14 0000066D 6652                <1>         push    dx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;読み込みプレーンの選択
    18                              <1>         ;---------------------------------------
    19 0000066F 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    20 00000672 80E403              <1>         and     ah, 0x03                        ;AH &= 0x03; //余計なビットをマスク
    21 00000675 B004                <1>         mov     al, 0x04                        ;AL = 読み込みマップ選択レジスタ
    22 00000677 66BACE03            <1>         mov     dx, 0x03CE                      ;DX = グラフィックス制御ポート
    23 0000067B 66EF                <1>         out     dx, ax                          ;//ポート出力
    24                              <1>         
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 0000067D 665A                <1>         pop     dx
    29 0000067F 6658                <1>         pop     ax
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;スタックフレームの破棄
    33                              <1>         ;---------------------------------------
    34 00000681 89EC                <1>         mov     esp, ebp
    35 00000683 5D                  <1>         pop     ebp
    36                              <1> 
    37 00000684 C3                  <1>         ret
    38                              <1> 
    39                              <1> vga_set_write_plane:
    40                              <1>         ;-----------------------------------
    41                              <1>         ;スタックフレームの構築
    42                              <1>         ;-----------------------------------
    43                              <1>                                             ;   + 8| 書き込みプレーン
    44                              <1>                                             ;   + 4| IP(戻り番号)
    45 00000685 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    46 00000686 89E5                <1>         mov    ebp, esp                     ;------|---------
    47                              <1> 
    48                              <1>         ;-----------------------------------
    49                              <1>         ;レジスタの保存
    50                              <1>         ;-----------------------------------
    51 00000688 6650                <1>         push    ax
    52 0000068A 6652                <1>         push    dx
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;読み込みプレーンの選択
    56                              <1>         ;---------------------------------------
    57 0000068C 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    58 0000068F 80E40F              <1>         and     ah, 0x0F                        ;AH &= 0x03; //余計なビットをマスク
    59 00000692 B002                <1>         mov     al, 0x02                        ;AL = 読み込みマップ選択レジスタ
    60 00000694 66BAC403            <1>         mov     dx, 0x03C4                      ;DX = グラフィックス制御ポート
    61 00000698 66EF                <1>         out     dx, ax                          ;//ポート出力
    62                              <1>         
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 0000069A 665A                <1>         pop     dx
    67 0000069C 6658                <1>         pop     ax
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;スタックフレームの破棄
    71                              <1>         ;---------------------------------------
    72 0000069E 89EC                <1>         mov     esp, ebp
    73 000006A0 5D                  <1>         pop     ebp
    74                              <1> 
    75 000006A1 C3                  <1>         ret
    76                              <1> 
    77                              <1> vram_font_copy:
    78                              <1>         ;-----------------------------------
    79                              <1>         ;スタックフレームの構築
    80                              <1>         ;-----------------------------------
    81                              <1>                                             ;EBP+20| 描画色
    82                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
    83                              <1>                                             ;EBP+12| VRAMアドレス
    84                              <1>                                             ;   + 8| FONTアドレス
    85                              <1>                                             ;   + 4| IP(戻り番号)
    86 000006A2 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    87 000006A3 89E5                <1>         mov    ebp, esp                     ;------|---------
    88                              <1> 
    89                              <1>         ;-----------------------------------
    90                              <1>         ;レジスタの保存
    91                              <1>         ;-----------------------------------
    92 000006A5 50                  <1>         push    eax
    93 000006A6 53                  <1>         push    ebx
    94 000006A7 51                  <1>         push    ecx
    95 000006A8 57                  <1>         push    edi
    96 000006A9 52                  <1>         push    edx
    97 000006AA 56                  <1>         push    esi
    98                              <1> 
    99                              <1>         ;---------------------------------------
   100                              <1>         ;引数を変数に代入
   101                              <1>         ;---------------------------------------
   102 000006AB 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = フォントアドレス;
   103 000006AE 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   104 000006B1 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   105 000006B5 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   106                              <1> 
   107                              <1>         ;---------------------------------------
   108                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   109                              <1>         ;---------------------------------------
   110 000006B9 84C7                <1>         test    bh, al                          ;ZF = (背景色 & プレーン)
   111 000006BB 0F94C6              <1>         setz    dh                              ;if(ZF == 1){ DH = 0x00; }else{ DH = 0x01;}
   112 000006BE FECE                <1>         dec     dh                              ;DH--; // 0xFF or 0x00
   113                              <1> 
   114 000006C0 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   115 000006C2 0F94C2              <1>         setz    dl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   116 000006C5 FECA                <1>         dec     dl                              ;DL--; //0xFF or 0x00
   117                              <1> 
   118                              <1>         ;---------------------------------------
   119                              <1>         ;16ビットフォントのコピー
   120                              <1>         ;---------------------------------------
   121 000006C7 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
   122                              <1> 
   123 000006C8 B910000000          <1>         mov     ecx, 16                         ;ECX = 16; //16ドット
   124                              <1> .10L:                                           ;do
   125                              <1>                                                 ;{
   126                              <1>         ;---------------------------------------
   127                              <1>         ;フォントマスクの作成
   128                              <1>         ;---------------------------------------
   129 000006CD AC                  <1>         lodsb                                   ;   AL = *ESI++; //フォント
   130 000006CE 88C4                <1>         mov     ah, al                          ;   AH = AL;
   131 000006D0 F6D4                <1>         not     ah                              ;   AH ~= AH; //!フォント(ビット反転)
   132                              <1> 
   133                              <1>         ;---------------------------------------
   134                              <1>         ;前景色
   135                              <1>         ;---------------------------------------
   136 000006D2 20D0                <1>         and     al, dl                          ;   AL = 前景色 & フォント;
   137                              <1> 
   138                              <1>         ;---------------------------------------
   139                              <1>         ;背景色
   140                              <1>         ;---------------------------------------
   141 000006D4 F7C310000000        <1>         test    ebx, 0x0010                     ;if(透過モード)
   142 000006DA 7404                <1>         jz      .11F                            ;{
   143 000006DC 2227                <1>         and     ah, [edi]                       ;   AH = !フォント & [EDI] //現在値
   144 000006DE EB02                <1>         jmp     .11E                            ;}
   145                              <1> .11F:                                           ;else
   146                              <1>                                                 ;{
   147 000006E0 20F4                <1>         and     ah, dh                          ;   AH = !フォント & 背景色
   148                              <1> .11E:                                           ;}
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;前景色と背景色を合成
   152                              <1>         ;---------------------------------------
   153 000006E2 08E0                <1>         or  al, ah                              ;   AL = 背景 | 前景;
   154                              <1> 
   155                              <1>         ;---------------------------------------
   156                              <1>         ;新しい値を出力（VRAMに代入)
   157                              <1>         ;---------------------------------------
   158 000006E4 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //プレーンに書き込む
   159                              <1> 
   160 000006E6 83C750              <1>         add     edi, 80                         ;   EDI += 80;
   161 000006E9 E2E2                <1>         loop    .10L                            ;}while(--ECX);
   162                              <1> .10E:
   163                              <1>         ;---------------------------------------
   164                              <1>         ;レジスタの復帰
   165                              <1>         ;---------------------------------------
   166 000006EB 5E                  <1>         pop     esi
   167 000006EC 5A                  <1>         pop     edx
   168 000006ED 5F                  <1>         pop     edi
   169 000006EE 59                  <1>         pop     ecx
   170 000006EF 5B                  <1>         pop     ebx
   171 000006F0 58                  <1>         pop     eax
   172                              <1> 
   173                              <1>         ;---------------------------------------
   174                              <1>         ;スタックフレームの破棄
   175                              <1>         ;---------------------------------------
   176 000006F1 89EC                <1>         mov     esp, ebp
   177 000006F3 5D                  <1>         pop     ebp
   178                              <1> 
   179 000006F4 C3                  <1>         ret
   180                              <1> 
   181                              <1> vram_bit_copy:
   182                              <1>         ;-----------------------------------
   183                              <1>         ;スタックフレームの構築
   184                              <1>         ;-----------------------------------
   185                              <1>                                             ;EBP+20| 描画色
   186                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
   187                              <1>                                             ;EBP+12| VRAMアドレス
   188                              <1>                                             ;   + 8| 出力ビットパターン
   189                              <1>                                             ;   + 4| IP(戻り番号)
   190 000006F5 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
   191 000006F6 89E5                <1>         mov    ebp, esp                     ;------|---------
   192                              <1> 
   193                              <1>         ;-----------------------------------
   194                              <1>         ;レジスタの保存
   195                              <1>         ;-----------------------------------
   196 000006F8 50                  <1>         push    eax
   197 000006F9 53                  <1>         push    ebx
   198 000006FA 57                  <1>         push    edi
   199                              <1> 
   200                              <1>         ;---------------------------------------
   201                              <1>         ;引数を変数に代入
   202                              <1>         ;---------------------------------------
   203 000006FB 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   204 000006FE 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   205 00000702 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   206                              <1> 
   207                              <1>         ;---------------------------------------
   208                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   209                              <1>         ;---------------------------------------
   210 00000706 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   211 00000708 0F94C3              <1>         setz    bl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   212 0000070B FECB                <1>         dec     bl                              ;DL--; //0xFF or 0x00
   213                              <1> 
   214                              <1>         ;---------------------------------------
   215                              <1>         ;背景のマスクを作成
   216                              <1>         ;---------------------------------------
   217 0000070D 8A4508              <1>         mov     al, [ebp + 8]                   ;AL = 出力ビットパターン;
   218 00000710 88C4                <1>         mov     ah, al                          ;AH ~= AL; //!出力ビットパターン(ビット反転)
   219 00000712 F6D4                <1>         not     ah
   220                              <1> 
   221                              <1>         ;---------------------------------------
   222                              <1>         ;背景色
   223                              <1>         ;---------------------------------------
   224 00000714 2227                <1>         and     ah, [edi]                       ;AH = 現在値 & !出力ビットパターン
   225 00000716 20D8                <1>         and     al, bl                          ;AL = 表示色 & 出力ビットパターン
   226 00000718 08E0                <1>         or      al, ah                          ;AL |= AH;
   227 0000071A 8807                <1>         mov     [edi], al                       ;[EDI] = BL; //プレーンに書き込む
   228                              <1> 
   229                              <1>         ;---------------------------------------
   230                              <1>         ;レジスタの復帰
   231                              <1>         ;---------------------------------------
   232 0000071C 5F                  <1>         pop     edi
   233 0000071D 5B                  <1>         pop     ebx
   234 0000071E 58                  <1>         pop     eax
   235                              <1> 
   236                              <1>         ;---------------------------------------
   237                              <1>         ;スタックフレームの破棄
   238                              <1>         ;---------------------------------------
   239 0000071F 89EC                <1>         mov     esp, ebp
   240 00000721 5D                  <1>         pop     ebp
   241                              <1> 
   242 00000722 C3                  <1>         ret
   155                                  %include        "..\modules\protect\draw_char.s"
     1                              <1> draw_char:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +20| 文字
     6                              <1>                                             ;   +16| 描画色
     7                              <1>                                             ;   +12| 行(0~29)
     8                              <1>                                             ;   + 8| 列(0~79)
     9                              <1>                                             ;   + 4| IP(戻り番号)
    10 00000723 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    11 00000724 89E5                <1>         mov    ebp, esp                     ;------|---------
    12                              <1> 
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000726 53                  <1>         push    ebx
    17 00000727 57                  <1>         push    edi
    18 00000728 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 00000729 0FB67514            <1>         movzx   esi, byte [ebp +20]             ;CL = 文字コード;
    24 0000072D C1E604              <1>         shl     esi, 4                          ;CL *= 16; //1文字16バイト
    25 00000730 0335[04020000]      <1>         add     esi, [FONT_ADR]                 ;ESI = フォントアドレス;
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;コピー先アドレスを取得
    29                              <1>         ;adr = 0xA0000 + (640 / 8 * 16) * y + x
    30                              <1>         ;---------------------------------------
    31 00000736 8B7D0C              <1>         mov     edi, [ebp +12]                  ;Y(行)
    32 00000739 C1E708              <1>         shl     edi, 8                          ;EDI = Y * 256;
    33 0000073C 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]  ;EDI = Y * 4 + Y;
    34 00000743 037D08              <1>         add     edi, [ebp + 8]                  ;X(列)
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;同期処理(リソース解法待ち(ビジーウェイト))
    38                              <1>         ;---------------------------------------
    39                              <1> %ifdef  USE_TEST_AND_SET
    40 00000746 68[FC070000]E83308- <1>         cdecl   test_and_set, IN_USE            ;//リソースの空き待ち
    40 0000074E 00006683C404        <1>
    41                              <1> %endif
    42                              <1> 
    43                              <1>         ;---------------------------------------
    44                              <1>         ;1文字文のフォントを出力
    45                              <1>         ;---------------------------------------
    46 00000754 0FB75D10            <1>         movzx   ebx, word [ebp +16]             ; //表示色
    47                              <1> 
    48 00000758 6A03E809FFFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;//読み込みプレーン:輝度(I)
    48 00000761 C404                <1>
    49 00000763 6A08E81BFFFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;//書き込みプレーン:輝度(I)
    49 0000076C C404                <1>
    50 0000076E 536A085756E82AFFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x08, ebx
    50 00000777 FF6683C410          <1>
    51                              <1>         
    52 0000077C 6A02E8E5FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;//読み込みプレーン:赤(R)
    52 00000785 C404                <1>
    53 00000787 6A04E8F7FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;//書き込みプレーン:赤(R)
    53 00000790 C404                <1>
    54 00000792 536A045756E806FFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x04, ebx
    54 0000079B FF6683C410          <1>
    55                              <1> 
    56 000007A0 6A01E8C1FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;//読み込みプレーン:緑(G)
    56 000007A9 C404                <1>
    57 000007AB 6A02E8D3FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;//書き込みプレーン:緑(G)
    57 000007B4 C404                <1>
    58 000007B6 536A025756E8E2FEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x02, ebx
    58 000007BF FF6683C410          <1>
    59                              <1> 
    60 000007C4 6A00E89DFEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;//読み込みプレーン:青(B)
    60 000007CD C404                <1>
    61 000007CF 6A01E8AFFEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;//書き込みプレーン:青(B)
    61 000007D8 C404                <1>
    62 000007DA 536A015756E8BEFEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x01, ebx
    62 000007E3 FF6683C410          <1>
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;同期処理(リソース解法)
    66                              <1>         ;---------------------------------------
    67                              <1> %ifdef  USE_TEST_AND_SET
    68 000007E8 C705[FC070000]0000- <1>         mov     [IN_USE], dword 0               ;変数のクリア
    68 000007F0 0000                <1>
    69                              <1> %endif
    70                              <1> 
    71                              <1>         ;---------------------------------------
    72                              <1>         ;レジスタの復帰
    73                              <1>         ;---------------------------------------
    74 000007F2 5E                  <1>         pop     esi
    75 000007F3 5F                  <1>         pop     edi
    76 000007F4 5B                  <1>         pop     ebx
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 000007F5 89EC                <1>         mov     esp, ebp
    82 000007F7 5D                  <1>         pop     ebp
    83                              <1> 
    84 000007F8 C3                  <1>         ret
    85                              <1> 
    86                              <1>         ;---------------------------------------
    87                              <1>         ;データ
    88                              <1>         ;---------------------------------------
    89 000007F9 00<rept>            <1> ALIGN   4,      db      0
    90 000007FC 00000000            <1> IN_USE:         dd      0
   156                                  %include        "..\modules\protect\draw_font.s"
     1                              <1> draw_font:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000800 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000801 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000803 50                  <1>         push    eax
    15 00000804 53                  <1>         push    ebx
    16 00000805 51                  <1>         push    ecx
    17 00000806 57                  <1>         push    edi
    18 00000807 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 00000808 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 0000080B 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;コピー先アドレスを取得
    28                              <1>         ;---------------------------------------
    29 0000080E B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 00000813 81F900010000        <1> .10L:   cmp     ecx, 256                        ;    ECX < 256;
    31 00000819 731F                <1>         jae     .10E                            ;
    32                              <1>                                                 ;    ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示する桁位置を計算
    36                              <1>         ;---------------------------------------
    37 0000081B 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 0000081D 83E00F              <1>         and     eax, 0x0F                       ;   EAX &= 0x0F;
    39 00000820 01F0                <1>         add     eax, esi                        ;   EAX += X;
    40                              <1>         ;---------------------------------------
    41                              <1>         ;表示する行位置を計算
    42                              <1>         ;---------------------------------------
    43 00000822 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    44 00000824 C1EB04              <1>         shr     ebx, 4                          ;   EBX /= 16;
    45 00000827 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    46                              <1>         
    47 00000829 516A075350E8F0FEFF- <1>         cdecl   draw_char, eax, ebx, 0x07, ecx  ;   draw_char();
    47 00000832 FF6683C410          <1>
    48                              <1> 
    49 00000837 41                  <1>         inc     ecx                             ;   //for(... ECX++)
    50 00000838 EBD9                <1>         jmp     .10L                            ;
    51                              <1> .10E:                                           ;}
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;レジスタの復帰
    55                              <1>         ;---------------------------------------
    56 0000083A 5E                  <1>         pop     esi
    57 0000083B 5F                  <1>         pop     edi
    58 0000083C 59                  <1>         pop     ecx
    59 0000083D 5B                  <1>         pop     ebx
    60 0000083E 58                  <1>         pop     eax
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;スタックフレームの破棄
    64                              <1>         ;---------------------------------------
    65 0000083F 89EC                <1>         mov     esp, ebp
    66 00000841 5D                  <1>         pop     ebp
    67                              <1> 
    68 00000842 C3                  <1>         ret
   157                                  %include        "..\modules\protect\draw_str.s"
     1                              <1> draw_str:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000843 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000844 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000846 50                  <1>         push    eax
    15 00000847 53                  <1>         push    ebx
    16 00000848 51                  <1>         push    ecx
    17 00000849 52                  <1>         push    edx
    18 0000084A 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 0000084B 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = 列;
    24 0000084E 8B550C              <1>         mov     edx, [ebp +12]                  ;EDX = 行;
    25 00000851 0FB75D10            <1>         movzx   ebx, word [ebp + 16]            ;EBX = 表示色;
    26 00000855 8B7514              <1>         mov     esi, [ebp +20]                  ;ESI = 文字列へのアドレス;
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字列を表示
    30                              <1>         ;---------------------------------------
    31 00000858 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
    32                              <1> .10L:                                           ;do
    33                              <1>                                                 ;{
    34 00000859 AC                  <1>         lodsb                                   ;   AL = *ESI++;
    35 0000085A 3C00                <1>         cmp     al, 0                           ;   if(0 == AL)
    36 0000085C 741A                <1>         je  .10E                                ;       break;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;システムコールを利用して文字を出力する
    40                              <1>         ;---------------------------------------
    41                              <1> %ifdef  USE_SYSTEM_CALL
    42 0000085E CD81                <1>         int     0x81                            ;       sys_call(1, X, Y, 色, 文字);
    43                              <1> %else
    44                              <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;       draw_char();
    45                              <1> %endif
    46                              <1> 
    47                              <1>         ;---------------------------------------
    48                              <1>         ;文字の表示位置を更新
    49                              <1>         ;---------------------------------------
    50 00000860 41                  <1>         inc     ecx                             ;   ECX++; //列を加算
    51 00000861 83F950              <1>         cmp     ecx, 80                         ;   if(80 <= ECX) //80文字以上?
    52 00000864 7C10                <1>         jl      .12E                            ;   {
    53 00000866 B900000000          <1>         mov     ecx, 0                          ;       ECX = 0; //列を初期化
    54 0000086B 42                  <1>         inc     edx                             ;       EDX++; //行を加算
    55 0000086C 83FA1E              <1>         cmp     edx, 30                         ;       if(30 <= EDX) //30行以上?
    56 0000086F 7C05                <1>         jl      .12E                            ;       {
    57 00000871 BA00000000          <1>         mov     edx, 0                          ;           EDX = 0;
    58                              <1>                                                 ;       }
    59                              <1> .12E:                                           ;   }
    60 00000876 EBE1                <1>         jmp     .10L                            ;
    61                              <1> .10E:                                           ;}while(1);
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 00000878 5E                  <1>         pop     esi
    67 00000879 5A                  <1>         pop     edx
    68 0000087A 59                  <1>         pop     ecx
    69 0000087B 5B                  <1>         pop     ebx
    70 0000087C 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 0000087D 89EC                <1>         mov     esp, ebp
    76 0000087F 5D                  <1>         pop     ebp
    77                              <1> 
    78 00000880 C3                  <1>         ret
   158                                  %include        "..\modules\protect\draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000881 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000882 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000884 50                  <1>         push    eax
    15 00000885 53                  <1>         push    ebx
    16 00000886 51                  <1>         push    ecx
    17 00000887 52                  <1>         push    edx
    18 00000888 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 00000889 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 0000088C 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;カラーバーを表示
    28                              <1>         ;---------------------------------------
    29 0000088F B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 00000894 83F910              <1> .10L:   cmp     ecx, 16                         ;    ECX < 16;
    31 00000897 732E                <1>         jae     .10E
    32                              <1>                                                 ;ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示位置を計算(列)
    36                              <1>         ;---------------------------------------
    37 00000899 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 0000089B 83E001              <1>         and     eax, 0x01                       ;   EAX &= 0x01;
    39 0000089E C1E003              <1>         shl     eax, 3                          ;   EAX *= 8; //8文字分乗算
    40 000008A1 01F0                <1>         add     eax, esi                        ;   EAX += X;
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;表示位置を計算(行)
    44                              <1>         ;---------------------------------------
    45 000008A3 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    46 000008A5 D1EB                <1>         shr     ebx, 1                          ;   EBX /= 2;
    47 000008A7 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    48                              <1> 
    49                              <1>         ;---------------------------------------
    50                              <1>         ;描画色を計算
    51                              <1>         ;---------------------------------------
    52 000008A9 89CA                <1>         mov     edx, ecx                        ;   EDX = ECX;
    53 000008AB D1E2                <1>         shl     edx, 1                          ;   EDX *= 2;
    54 000008AD 8B92[D9080000]      <1>         mov     edx, [.t0 + edx]                ;   EDX += Y;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;カラーバーを表示
    58                              <1>         ;---------------------------------------
    59 000008B3 68[D0080000]525350- <1>         cdecl   draw_str, eax, ebx, edx, .s0    ;   draw_str();
    59 000008BB E883FFFFFF6683C410  <1>
    60                              <1> 
    61 000008C4 41                  <1>         inc     ecx                             ;   //for(...ECX++
    62 000008C5 EBCD                <1>         jmp     .10L                            ;
    63                              <1> .10E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;レジスタの復帰
    67                              <1>         ;---------------------------------------
    68 000008C7 5E                  <1>         pop     esi
    69 000008C8 5A                  <1>         pop     edx
    70 000008C9 59                  <1>         pop     ecx
    71 000008CA 5B                  <1>         pop     ebx
    72 000008CB 58                  <1>         pop     eax
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;スタックフレームの破棄
    76                              <1>         ;---------------------------------------
    77 000008CC 89EC                <1>         mov     esp, ebp
    78 000008CE 5D                  <1>         pop     ebp
    79                              <1> 
    80 000008CF C3                  <1>         ret
    81                              <1> 
    82                              <1>         ;---------------------------------------
    83                              <1>         ;データ
    84                              <1>         ;---------------------------------------
    85 000008D0 202020202020202000  <1> .s0:    db  '        ', 0                       ;8文字分のスペース(表示色だけを変更)
    86                              <1> 
    87 000008D9 00000008            <1> .t0:    dw  0x0000, 0x0800                      ;カラーバーの背景色
    88 000008DD 00010009            <1>         dw  0x0100, 0x0900
    89 000008E1 0002000A            <1>         dw  0x0200, 0x0A00
    90 000008E5 0003000B            <1>         dw  0x0300, 0x0B00
    91 000008E9 0004000C            <1>         dw  0x0400, 0x0C00
    92 000008ED 0005000D            <1>         dw  0x0500, 0x0D00
    93 000008F1 0006000E            <1>         dw  0x0600, 0x0E00
    94 000008F5 0007000F            <1>         dw  0x0700, 0x0F00
   159                                  %include        "..\modules\protect\draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +16| 色
     6                              <1>                                             ;   +12| Y(行)
     7                              <1>                                             ;   + 8| X(列)
     8                              <1>                                             ;   + 4| IP(戻り番号)
     9 000008F9 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    10 000008FA 89E5                <1>         mov    ebp, esp                     ;------|---------
    11                              <1> 
    12                              <1>         ;-----------------------------------
    13                              <1>         ;レジスタの保存
    14                              <1>         ;-----------------------------------
    15 000008FC 50                  <1>         push    eax
    16 000008FD 53                  <1>         push    ebx
    17 000008FE 51                  <1>         push    ecx
    18 000008FF 57                  <1>         push    edi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;描画位置のメモリアドレスを計算
    22                              <1>         ;---------------------------------------
    23                              <1>         ;---------------------------------------
    24                              <1>         ;Y座標を80倍する(640/8)
    25                              <1>         ;---------------------------------------
    26 00000900 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y座標;
    27 00000903 C1E704              <1>         shl     edi, 4                          ;EDI *= 16;
    28 00000906 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000] ;EDI = 0xA_0000[EDI * 4 + EDI];
    29                              <1>         
    30                              <1>         ;---------------------------------------
    31                              <1>         ;X座標を1/8して加算
    32                              <1>         ;---------------------------------------
    33 0000090D 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;EBX = X座標;
    34 00000910 89D9                <1>         mov     ecx, ebx                        ;ECX = X座標; //一時保存
    35 00000912 C1EB03              <1>         shr     ebx, 3                          ;EBX /= 8;
    36 00000915 01DF                <1>         add     edi, ebx                        ;EDI += EBX;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;X座標を8で割った余りからビット位置を計算(出力ビットパターン)
    40                              <1>         ;(0=0x80, 1=0x40,... 7=0x01)
    41                              <1>         ;---------------------------------------
    42 00000917 83E107              <1>         and     ecx, 0x07                       ;ECX = X & 0x07;
    43 0000091A BB80000000          <1>         mov     ebx, 0x80                       ;EBX = 0x80;
    44 0000091F D3EB                <1>         shr     ebx, cl                         ;EBX >>= ECX;
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;色を指定
    48                              <1>         ;---------------------------------------
    49 00000921 8B4D10              <1>         mov     ecx, [ebp +16]                  ;表示色
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;プレーンごとに出力
    53                              <1>         ;---------------------------------------
    54 00000924 6A03E83DFDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;輝度(I)プレーンを選択
    54 0000092D C404                <1>
    55 0000092F 6A08E84FFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;輝度(I)プレーンを選択
    55 00000938 C404                <1>
    56 0000093A 516A085753E8B1FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    56 00000943 FF6683C410          <1>
    57                              <1> 
    58 00000948 6A02E819FDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;赤(R)プレーンを選択
    58 00000951 C404                <1>
    59 00000953 6A04E82BFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;赤(R)プレーンを選択
    59 0000095C C404                <1>
    60 0000095E 516A045753E88DFDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    60 00000967 FF6683C410          <1>
    61                              <1> 
    62 0000096C 6A01E8F5FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;緑(G)プレーンを選択
    62 00000975 C404                <1>
    63 00000977 6A02E807FDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;緑(G)プレーンを選択
    63 00000980 C404                <1>
    64 00000982 516A025753E869FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    64 0000098B FF6683C410          <1>
    65                              <1> 
    66 00000990 6A00E8D1FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;青(B)プレーンを選択
    66 00000999 C404                <1>
    67 0000099B 6A01E8E3FCFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;青(B)プレーンを選択
    67 000009A4 C404                <1>
    68 000009A6 516A015753E845FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    68 000009AF FF6683C410          <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;レジスタの復帰
    72                              <1>         ;---------------------------------------
    73 000009B4 5F                  <1>         pop     edi
    74 000009B5 59                  <1>         pop     ecx
    75 000009B6 5B                  <1>         pop     ebx
    76 000009B7 58                  <1>         pop     eax
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 000009B8 89EC                <1>         mov     esp, ebp
    82 000009BA 5D                  <1>         pop     ebp
    83                              <1> 
    84 000009BB C3                  <1>         ret
   160                                  %include        "..\modules\protect\draw_line.s"
     1                              <1> draw_line:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 000009BC 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 000009BD 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;変数を定義
    16                              <1>         ;-----------------------------------
    17 000009BF 6A00                <1>         push    dword 0                     ;   - 4| sum = 0; //相対軸の積算値
    18 000009C1 6A00                <1>         push    dword 0                     ;   - 8| x0 = 0; //X座標
    19 000009C3 6A00                <1>         push    dword 0                     ;   -12| dx = 0; //X増分
    20 000009C5 6A00                <1>         push    dword 0                     ;   -16| inc_x = 0; //X座標増分(基準軸:1 or -1)
    21 000009C7 6A00                <1>         push    dword 0                     ;   -20| y0 = 0; //Y座標
    22 000009C9 6A00                <1>         push    dword 0                     ;   -24| dy = 0; //Y増分
    23 000009CB 6A00                <1>         push    dword 0                     ;   -28| inc_y = 0; //Y座標増分(基準軸:1 or -1)
    24                              <1> 
    25                              <1>         ;-----------------------------------
    26                              <1>         ;レジスタの保存
    27                              <1>         ;-----------------------------------
    28 000009CD 50                  <1>         push    eax
    29 000009CE 53                  <1>         push    ebx
    30 000009CF 51                  <1>         push    ecx
    31 000009D0 57                  <1>         push    edi
    32 000009D1 52                  <1>         push    edx
    33 000009D2 56                  <1>         push    esi
    34                              <1> 
    35                              <1>         ;---------------------------------------
    36                              <1>         ;幅を計算(X軸)
    37                              <1>         ;---------------------------------------
    38 000009D3 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    39 000009D6 8B5D10              <1>         mov     ebx, [ebp +16]                  ;EBX = X1;
    40 000009D9 29C3                <1>         sub     ebx, eax                        ;EBX = X1 - X0; //幅
    41 000009DB 7D09                <1>         jge     .10F                            ;if(幅 < 0)
    42                              <1>                                                 ;{
    43 000009DD F7DB                <1>         neg     ebx                             ;   幅 *= -1;
    44 000009DF BEFFFFFFFF          <1>         mov     esi, -1                         ;   //X座標の増分
    45 000009E4 EB05                <1>         jmp     .10E                            ;}
    46                              <1> .10F:                                           ;else
    47                              <1>                                                 ;{
    48 000009E6 BE01000000          <1>         mov     esi, 1                          ;   //X座標の増分
    49                              <1> .10E:                                           ;}
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;高さを計算(Y軸)
    53                              <1>         ;---------------------------------------
    54 000009EB 8B4D0C              <1>         mov     ecx, [ebp +12]                  ;ECX = Y0;
    55 000009EE 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    56 000009F1 29CA                <1>         sub     edx, ecx                        ;EDX = Y1 - Y0; //高さ
    57 000009F3 7D09                <1>         jge     .20F                            ;if(高さ < 0)
    58                              <1>                                                 ;{
    59 000009F5 F7DA                <1>         neg     edx                             ;   高さ *= -1;
    60 000009F7 BFFFFFFFFF          <1>         mov     edi, -1                         ;   //Y座標の増分
    61 000009FC EB05                <1>         jmp     .20E                            ;}
    62                              <1> .20F:                                           ;else
    63                              <1>                                                 ;{
    64 000009FE BF01000000          <1>         mov     edi, 1                          ;   //Y座標の増分
    65                              <1> .20E:                                           ;}
    66                              <1>         
    67                              <1>         ;---------------------------------------
    68                              <1>         ;X軸
    69                              <1>         ;---------------------------------------
    70 00000A03 8945F8              <1>         mov     [ebp - 8], eax                  ;//X軸:開始座標
    71 00000A06 895DF4              <1>         mov     [ebp -12], ebx                  ;//X軸:描画幅
    72 00000A09 8975F0              <1>         mov     [ebp -16], esi                  ;//X軸:増分(基準軸:1 or -1)
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;Y軸
    76                              <1>         ;---------------------------------------
    77 00000A0C 894DEC              <1>         mov     [ebp -20], ecx                  ;//Y軸:開始座標
    78 00000A0F 8955E8              <1>         mov     [ebp -24], edx                  ;//Y軸:描画幅
    79 00000A12 897DE4              <1>         mov     [ebp -28], edi                  ;//Y軸:増分(基準軸:1 or -1)
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;基準軸を決める
    83                              <1>         ;---------------------------------------
    84 00000A15 39D3                <1>         cmp     ebx, edx                        ;if(幅 <= 高さ)
    85 00000A17 7F08                <1>         jg      .22F                            ;{
    86                              <1>         
    87 00000A19 8D75EC              <1>         lea     esi, [ebp -20]                  ;   //X軸が基準軸
    88 00000A1C 8D7DF8              <1>         lea     edi, [ebp - 8]                  ;   //Y軸が相対軸
    89                              <1> 
    90 00000A1F EB06                <1>         jmp     .22E                            ;}
    91                              <1> .22F:                                           ;else
    92                              <1>                                                 ;{
    93 00000A21 8D75F8              <1>         lea     esi, [ebp - 8]                  ;   //Y軸が基準軸
    94 00000A24 8D7DEC              <1>         lea     edi, [ebp -20]                  ;   //X軸が相対軸
    95                              <1> .22E:                                           ;}
    96                              <1> 
    97                              <1>         ;---------------------------------------
    98                              <1>         ;繰り返し回数(基準軸のドット数)(基準軸の長さが0な場合,繰り返し回数を1に設定し,1ピクセルの点を描画)
    99                              <1>         ;---------------------------------------
   100 00000A27 8B4EFC              <1>         mov     ecx, [esi - 4]                  ;ECX = 基準軸描画幅
   101 00000A2A 83F900              <1>         cmp     ecx, 0                          ;if(0 == ECX)
   102 00000A2D 7505                <1>         jnz     .30E                            ;{
   103 00000A2F B901000000          <1>         mov     ecx, 1                          ;   ECX = 1;
   104                              <1> .30E:                                           ;}
   105                              <1> 
   106                              <1>         ;---------------------------------------
   107                              <1>         ;線を描画
   108                              <1>         ;---------------------------------------
   109                              <1> .50L:                                           ;do
   110                              <1>                                                 ;{
   111                              <1>         
   112                              <1>         ;---------------------------------------
   113                              <1>         ;同期処理
   114                              <1>         ;---------------------------------------
   115                              <1> %ifdef  USE_SYSTEM_CALL
   116 00000A34 89C8                <1>         mov     eax, ecx                        ;       //繰り返し回数を保存
   117                              <1> 
   118 00000A36 8B5D18              <1>         mov     ebx, [ebp +24]                  ;       EBX = 表示色;
   119 00000A39 8B4DF8              <1>         mov     ecx, [ebp - 8]                  ;       ECX = X座標;
   120 00000A3C 8B55EC              <1>         mov     edx, [ebp -20]                  ;       ECX = Y座標;
   121 00000A3F CD82                <1>         int     0x82                            ;       sys_call(1, X, Y, 色, 文字); //BX(C), CX(X), DX(Y)
   122                              <1> 
   123 00000A41 89C1                <1>         mov     ecx, eax
   124                              <1> %else
   127                              <1>         cdecl   draw_pixel, dword [ebp - 8],                             dword [ebp -20],                             dword [ebp +24]     ;   //点の描画
   128                              <1> %endif
   129                              <1> 
   130                              <1>         ;---------------------------------------
   131                              <1>         ;基準軸を更新
   132                              <1>         ;---------------------------------------
   133 00000A43 8B46F8              <1>         mov     eax, [esi - 8]                  ;   EAX = 基準軸増加(1 or -1);
   134 00000A46 0106                <1>         add     [esi - 0], eax                  ;
   135                              <1> 
   136                              <1>         ;---------------------------------------
   137                              <1>         ;相対軸を更新
   138                              <1>         ;---------------------------------------
   139 00000A48 8B45FC              <1>         mov     eax, [ebp - 4]                  ;   EAX = sum;  //相対軸の積算値
   140 00000A4B 0347FC              <1>         add     eax, [edi - 4]                  ;   EAX += dy;  //増加(相対軸の描画幅)
   141                              <1> 
   142 00000A4E 8B5EFC              <1>         mov     ebx, [esi - 4]                  ;   EBX = dx;   //増分(基準軸の描画幅)
   143                              <1> 
   144 00000A51 39D8                <1>         cmp     eax, ebx                        ;   if(積算値 <= 相対軸の増分)
   145 00000A53 7C07                <1>         jl      .52E                            ;   {
   146 00000A55 29D8                <1>         sub     eax, ebx                        ;       EAX -= EBX; //積算値から相対軸の増分を減算
   147                              <1>                                                 ;       //相対軸の座標を更新(1ドット分)
   148 00000A57 8B5FF8              <1>         mov     ebx, [edi - 8]                  ;       EBX = 相対軸増分;
   149 00000A5A 011F                <1>         add     [edi - 0], ebx                  ;       相対軸座標 = EBX;
   150                              <1> .52E:                                           ;   }
   151                              <1> 
   152 00000A5C 8945FC              <1>         mov     [ebp - 4], eax                  ;//積算値を更新
   153                              <1> 
   154 00000A5F E2D3                <1>         loop    .50L
   155                              <1> .50E:                                           ;} while(ループ回数--);
   156                              <1> 
   157                              <1>         ;---------------------------------------
   158                              <1>         ;レジスタの復帰
   159                              <1>         ;---------------------------------------
   160 00000A61 5E                  <1>         pop     esi
   161 00000A62 5A                  <1>         pop     edx
   162 00000A63 5F                  <1>         pop     edi
   163 00000A64 59                  <1>         pop     ecx
   164 00000A65 5B                  <1>         pop     ebx
   165 00000A66 58                  <1>         pop     eax
   166                              <1> 
   167                              <1>         ;---------------------------------------
   168                              <1>         ;スタックフレームの破棄
   169                              <1>         ;---------------------------------------
   170 00000A67 89EC                <1>         mov     esp, ebp
   171 00000A69 5D                  <1>         pop     ebp
   172                              <1> 
   173 00000A6A C3                  <1>         ret
   161                                  %include        "..\modules\protect\draw_rect.s"
     1                              <1> draw_rect:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000A6B 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000A6C 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000A6E 50                  <1>         push    eax
    17 00000A6F 53                  <1>         push    ebx
    18 00000A70 51                  <1>         push    ecx
    19 00000A71 52                  <1>         push    edx
    20 00000A72 56                  <1>         push    esi
    21                              <1> 
    22                              <1>         ;---------------------------------------
    23                              <1>         ;変数に引数を代入
    24                              <1>         ;---------------------------------------
    25 00000A73 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    26 00000A76 8B5D0C              <1>         mov     ebx, [ebp +12]                  ;EBX = Y0;
    27 00000A79 8B4D10              <1>         mov     ecx, [ebp +16]                  ;ECX = X1;
    28 00000A7C 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    29 00000A7F 8B7518              <1>         mov     esi, [ebp +24]                  ;ESI = 色;
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;座標軸の大小を確定
    33                              <1>         ;---------------------------------------
    34 00000A82 39C8                <1>         cmp     eax, ecx                        ;if(X1 < X0)
    35 00000A84 7C01                <1>         jl      .10E                            ;{
    36 00000A86 91                  <1>         xchg    eax, ecx                        ;   //X0とX1を入れ替える;
    37                              <1> .10E:                                           ;}
    38                              <1> 
    39 00000A87 39D3                <1>         cmp     ebx, edx                        ;if(Y1 < Y0)
    40 00000A89 7C02                <1>         jl      .20E                            ;{
    41 00000A8B 87DA                <1>         xchg    ebx, edx                        ;   //Y0とY1を入れ替える;
    42                              <1> .20E:                                           ;}
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;矩形を描画
    46                              <1>         ;---------------------------------------
    47 00000A8D 5653515350E825FFFF- <1>         cdecl   draw_line, eax, ebx, ecx, ebx, esi  ;上線
    47 00000A96 FF6683C414          <1>
    48 00000A9B 5652505350E817FFFF- <1>         cdecl   draw_line, eax, ebx, eax, edx, esi  ;左線
    48 00000AA4 FF6683C414          <1>
    49                              <1> 
    50 00000AA9 4A                  <1>         dec     edx                                 ;EDX--; //下線は1ドット上げる
    51 00000AAA 5652515250E808FFFF- <1>         cdecl   draw_line, eax, edx, ecx, edx, esi  ;下線
    51 00000AB3 FF6683C414          <1>
    52 00000AB8 42                  <1>         inc     edx
    53                              <1> 
    54 00000AB9 49                  <1>         dec     ecx                                 ;ECX--; //右線は1ドット左に移動
    55 00000ABA 5652515351E8F8FEFF- <1>         cdecl   draw_line, ecx, ebx, ecx, edx, esi  ;右線
    55 00000AC3 FF6683C414          <1>
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの復帰
    59                              <1>         ;---------------------------------------
    60 00000AC8 5E                  <1>         pop     esi
    61 00000AC9 5A                  <1>         pop     edx
    62 00000ACA 59                  <1>         pop     ecx
    63 00000ACB 5B                  <1>         pop     ebx
    64 00000ACC 58                  <1>         pop     eax
    65                              <1> 
    66                              <1>         ;---------------------------------------
    67                              <1>         ;スタックフレームの破棄
    68                              <1>         ;---------------------------------------
    69 00000ACD 89EC                <1>         mov     esp, ebp
    70 00000ACF 5D                  <1>         pop     ebp
    71                              <1> 
    72 00000AD0 C3                  <1>         ret
   162                                  %include        "..\modules\protect\itoa.s"
     1                              <1> itoa:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000AD1 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000AD2 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000AD4 50                  <1>         push    eax
    18 00000AD5 53                  <1>         push    ebx
    19 00000AD6 51                  <1>         push    ecx
    20 00000AD7 52                  <1>         push    edx
    21 00000AD8 56                  <1>         push    esi
    22 00000AD9 57                  <1>         push    edi
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;引数の取得
    26                              <1>         ;---------------------------------------
    27 00000ADA 8B4508              <1>         mov     eax, [ebp + 8]                  ;eax(val) =  数値;
    28 00000ADD 8B750C              <1>         mov     esi, [ebp + 12]                 ;esi(dst) = バッファアドレス;
    29 00000AE0 8B4D10              <1>         mov     ecx, [ebp + 16]                 ;ecx(size) = バッファサイズ;
    30                              <1> 
    31 00000AE3 89F7                <1>         mov     edi, esi                        ;edi = esi(dst); //バッファの最後尾
    32 00000AE5 01CF                <1>         add     edi, ecx                        ;edi(dst) = edi + ecx - 1;
    33 00000AE7 4F                  <1>         dec     edi
    34                              <1> 
    35 00000AE8 8B5D18              <1>         mov     ebx, [ebp + 24]            ;flags = オプション;
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;符号付き判定
    39                              <1>         ;---------------------------------------
    40 00000AEB F7C301000000        <1>         test    ebx, 0b0001                      ;if(flags & 0x01) //符号付き
    41 00000AF1 7408                <1> .10Q:   je      .10E                            ;{
    42 00000AF3 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    43 00000AF6 7D03                <1> .12Q:   jge     .12E                            ;   {
    44 00000AF8 83CB02              <1>         or      ebx, 0b0010                     ;       flags |= 2; //符号表示
    45                              <1> .12E:                                           ;   }
    46                              <1> .10E:                                           ;}
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;符号付き判定
    50                              <1>         ;---------------------------------------
    51 00000AFB F7C302000000        <1>         test    ebx, 0b0010                     ;if(flags & 0x02) //符号出力判定
    52 00000B01 7410                <1> .20Q:   je      .20E                            ;{
    53 00000B03 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    54 00000B06 7D07                <1> .22Q:   jge     .22F                            ;   {
    55 00000B08 F7D8                <1>         neg     eax                             ;       val *= -1; //符号反転
    56 00000B0A C6062D              <1>         mov     [esi], byte '-'                 ;       *dst = '-'; //符号表示
    57 00000B0D EB03                <1>         jmp     .22E                            ;   }
    58                              <1> .22F:                                           ;   else
    59                              <1>                                                 ;   {
    60 00000B0F C6062B              <1>         mov     [esi], byte '+'                 ;       *dst = '+'; //符号表示
    61                              <1> .22E:                                           ;   }
    62 00000B12 49                  <1>         dec     ecx                             ;   size--;     //残りバッファサイズの減算
    63                              <1> .20E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;ASCII変換
    67                              <1>         ;---------------------------------------
    68 00000B13 8B5D14              <1>         mov     ebx, [ebp + 20]                 ;BX = 基数;
    69                              <1> .30L:                                           ;do
    70                              <1>                                                 ;{
    71 00000B16 BA00000000          <1>         mov     edx, 0                          ;
    72 00000B1B F7F3                <1>         div     ebx                             ;   DX = DX:AX % 基数;
    73                              <1>                                                 ;   AX = DX:AX / 基数;
    74                              <1>                                                 ;
    75 00000B1D 89D6                <1>         mov     esi, edx                        ;   //テーブル参照
    76 00000B1F 8A96[4A0B0000]      <1>         mov     dl, byte [.ascii + esi]         ;   DL = ASCII[DX]
    77                              <1>                                                 ;
    78 00000B25 8817                <1>         mov     [edi], dl                       ;   *dst = DL;
    79 00000B27 4F                  <1>         dec     edi                             ;   dst--;
    80                              <1>                                                 ;
    81 00000B28 83F800              <1>         cmp     eax, 0                          ;
    82 00000B2B E0E9                <1>         loopnz  .30L                            ;}while(AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;---------------------------------------
    86                              <1>         ;空欄を埋める
    87                              <1>         ;---------------------------------------
    88 00000B2D 83F900              <1>         cmp     ecx, 0                          ;if(size)
    89 00000B30 740E                <1> .40Q:   je      .40E                            ;{
    90 00000B32 B020                <1>         mov     al, ' '                         ;       AL = ' '; // ' 'で埋める(デフォルト値)
    91 00000B34 66837D1804          <1>         cmp     [ebp + 24], word 0b0100         ;       if(flags & 0x04)
    92 00000B39 7502                <1> .42Q:   jne     .42E                            ;           {
    93 00000B3B B030                <1>         mov     al, '0'                         ;               AL = '0'; // '0'で埋める
    94                              <1> .42E:                                           ;           }
    95 00000B3D FD                  <1>         std                                     ;       // DF = 1(-方向)
    96 00000B3E F3AA                <1>         rep     stosb                           ;       while(--CX) *DI -- = AL;
    97                              <1> .40E:                                           ;}
    98                              <1>         
    99                              <1>         ;---------------------------------------
   100                              <1>         ;レジスタの復帰
   101                              <1>         ;---------------------------------------
   102 00000B40 5F                  <1>         pop     edi
   103 00000B41 5E                  <1>         pop     esi
   104 00000B42 5A                  <1>         pop     edx
   105 00000B43 59                  <1>         pop     ecx
   106 00000B44 5B                  <1>         pop     ebx
   107 00000B45 58                  <1>         pop     eax
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;スタックフレームの破棄
   111                              <1>         ;---------------------------------------
   112 00000B46 89EC                <1>         mov     esp, ebp
   113 00000B48 5D                  <1>         pop     ebp
   114                              <1> 
   115 00000B49 C3                  <1>         ret
   116                              <1> 
   117 00000B4A 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   117 00000B53 39414243444546      <1>
   163                                  %include        "..\modules\protect\rtc.s"
     1                              <1> rtc_get_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 保存先アドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000B5A 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000B5B 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000B5D 53                  <1>         push    ebx
    14                              <1> 
    15                              <1>         ;---------------------------------------
    16                              <1>         ;RTCから必要な情報を取得
    17                              <1>         ;---------------------------------------
    18 00000B5E B00A                <1>         mov     al, 0x0A                        ;//レジスタA
    19 00000B60 E670                <1>         out     0x70, al                        ;outp(0x70, AL);
    20 00000B62 E471                <1>         in      al, 0x71                        ;AL = レジスタA
    21 00000B64 A880                <1>         test    al, 0x80                        ;if(UIP) //更新中
    22 00000B66 7407                <1>         je      .10F                            ;{
    23 00000B68 B801000000          <1>         mov     eax, 1                          ;   return 0; //データ更新中
    24 00000B6D EB27                <1>         jmp     .10E                            ;}
    25                              <1> .10F:                                           ;else
    26                              <1>                                                 ;{
    27 00000B6F B004                <1>         mov     al, 0x04                        ;   AL = 0x04;
    28 00000B71 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    29 00000B73 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //時データ
    30                              <1> 
    31 00000B75 C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    32                              <1> 
    33 00000B78 B002                <1>         mov     al, 0x02                        ;   AL = 0x02;
    34 00000B7A E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    35 00000B7C E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //分データ
    36                              <1> 
    37 00000B7E C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    38                              <1> 
    39                              <1>                                                 ;   RAM[0x00]:秒
    40 00000B81 B000                <1>         mov     al, 0x00                        ;   AL = 0x00;
    41 00000B83 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    42 00000B85 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //秒データ
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;有効なデータのみをアドレス先へ保存
    46                              <1>         ;---------------------------------------
    47 00000B87 25FFFFFF00          <1>         and     eax, 0x00_FF_FF_FF              ;//下位3バイトのみ有効
    48                              <1> 
    49 00000B8C 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;dst = 保存先;
    50 00000B8F 8903                <1>         mov     [ebx], eax                      ;[dst] = 時刻;
    51                              <1>         
    52 00000B91 B801000000          <1>         mov     eax, 1                          ;   return 1; //正常終了
    53                              <1> .10E:                                           ;}
    54                              <1> 
    55                              <1>         ;---------------------------------------
    56                              <1>         ;レジスタの復帰
    57                              <1>         ;---------------------------------------
    58 00000B96 5B                  <1>         pop     ebx
    59                              <1> 
    60                              <1>         ;---------------------------------------
    61                              <1>         ;スタックフレームの破棄
    62                              <1>         ;---------------------------------------
    63 00000B97 89EC                <1>         mov     esp, ebp
    64 00000B99 5D                  <1>         pop     ebp
    65                              <1> 
    66 00000B9A C3                  <1>         ret
   164                                  %include        "..\modules\protect\draw_time.s"
     1                              <1> draw_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000B9B 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000B9C 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000B9E 50                  <1>         push    eax
    18 00000B9F 53                  <1>         push    ebx
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;数字を文字に変換
    22                              <1>         ;---------------------------------------
    23 00000BA0 8B4514              <1>         mov     eax, [ebp +20]                  ;EAX = 時刻データ;
    24                              <1> 
    25 00000BA3 0FB6D8              <1>         movzx   ebx, al                         ;EBX = 秒;
    26 00000BA6 6A046A106A0268-     <1>         cdecl   itoa, ebx, .sec, 2, 16, 0b0100  ;//文字を変換
    26 00000BAD [0D0C0000]53E81AFF- <1>
    26 00000BB5 FFFF6683C414        <1>
    27                              <1> 
    28 00000BBB 88E3                <1>         mov     bl, ah                          ;EBX = 分;
    29 00000BBD 6A046A106A0268-     <1>         cdecl   itoa, ebx, .min, 2, 16, 0b0100  ;//文字に変換
    29 00000BC4 [0A0C0000]53E803FF- <1>
    29 00000BCC FFFF6683C414        <1>
    30                              <1> 
    31 00000BD2 C1E810              <1>         shr     eax, 16                         ;EBX = 時;
    32 00000BD5 6A046A106A0268-     <1>         cdecl   itoa, eax, .hour, 2, 16, 0b0100 ;//文字に変換
    32 00000BDC [070C0000]50E8EBFE- <1>
    32 00000BE4 FFFF6683C414        <1>
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;文字列を表示
    36                              <1>         ;---------------------------------------
    37 00000BEA 68[070C0000]FF7510- <1>         cdecl   draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    37 00000BF2 FF750CFF7508E846FC- <1>
    37 00000BFB FFFF6683C410        <1>
    38                              <1>         
    39                              <1>         ;---------------------------------------
    40                              <1>         ;レジスタの復帰
    41                              <1>         ;---------------------------------------
    42 00000C01 5B                  <1>         pop     ebx
    43 00000C02 58                  <1>         pop     eax
    44                              <1> 
    45                              <1>         ;---------------------------------------
    46                              <1>         ;スタックフレームの破棄
    47                              <1>         ;---------------------------------------
    48 00000C03 89EC                <1>         mov     esp, ebp
    49 00000C05 5D                  <1>         pop     ebp
    50                              <1> 
    51 00000C06 C3                  <1>         ret
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;データ
    55                              <1>         ;---------------------------------------
    56 00000C07 5A5A3A              <1>         .hour:  db  "ZZ:"
    57 00000C0A 5A5A3A              <1>         .min:   db  "ZZ:"
    58 00000C0D 5A5A00              <1>         .sec:   db  "ZZ", 0
   165                                  %include        "..\modules\protect\interrupt.s"
     1                              <1> int_stop:
     2 00000C10 FB                  <1>         sti                                     ;//割り込み許可
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;EAXで示される文字列を表示
     6                              <1>         ;---------------------------------------
     7 00000C11 50680F0600006A0F6A- <1>         cdecl   draw_str, 25, 15, 0x060F, eax   ;draw_str(EAX);
     7 00000C1A 19E823FCFFFF6683C4- <1>
     7 00000C23 10                  <1>
     8                              <1>         
     9                              <1>         ;---------------------------------------
    10                              <1>         ;スタックのデータを文字列に変換
    11                              <1>         ;---------------------------------------
    12 00000C24 8B0424              <1>         mov     eax, [esp + 0]                  ;EAX = ESP[ 0];
    13 00000C27 6A046A106A0868-     <1>         cdecl   itoa, eax, .p1, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    13 00000C2E [EC0C0000]50E899FE- <1>
    13 00000C36 FFFF6683C414        <1>
    14                              <1> 
    15 00000C3C 8B442404            <1>         mov     eax, [esp + 4]                  ;EAX = ESP[ 4];
    16 00000C40 6A046A106A0868-     <1>         cdecl   itoa, eax, .p2, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    16 00000C47 [FD0C0000]50E880FE- <1>
    16 00000C4F FFFF6683C414        <1>
    17                              <1> 
    18 00000C55 8B442408            <1>         mov     eax, [esp + 8]                  ;EAX = ESP[ 8];
    19 00000C59 6A046A106A0868-     <1>         cdecl   itoa, eax, .p3, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    19 00000C60 [0E0D0000]50E867FE- <1>
    19 00000C68 FFFF6683C414        <1>
    20                              <1> 
    21 00000C6E 8B44240C            <1>         mov     eax, [esp +12]                  ;EAX = ESP[12];
    22 00000C72 6A046A106A0868-     <1>         cdecl   itoa, eax, .p4, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    22 00000C79 [1F0D0000]50E84EFE- <1>
    22 00000C81 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;文字列の表示
    26                              <1>         ;---------------------------------------
    27 00000C87 68[E50C0000]68040F- <1>         cdecl   draw_str, 25, 16, 0x0F04, .s1,  ;draw_str("ESP+ 0:-------- ");
    27 00000C8F 00006A106A19E8A9FB- <1>
    27 00000C98 FFFF6683C410        <1>
    28 00000C9E 68[F60C0000]68040F- <1>         cdecl   draw_str, 25, 17, 0x0F04, .s2   ;draw_str("   + 4:-------- ");
    28 00000CA6 00006A116A19E892FB- <1>
    28 00000CAF FFFF6683C410        <1>
    29 00000CB5 68[070D0000]68040F- <1>         cdecl   draw_str, 25, 18, 0x0F04, .s3,  ;draw_str("   + 8:-------- ");
    29 00000CBD 00006A126A19E87BFB- <1>
    29 00000CC6 FFFF6683C410        <1>
    30 00000CCC 68[180D0000]68040F- <1>         cdecl   draw_str, 25, 19, 0x0F04, .s4   ;draw_str("   +12:-------- ");        
    30 00000CD4 00006A136A19E864FB- <1>
    30 00000CDD FFFF6683C410        <1>
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;無限ループ
    34                              <1>         ;---------------------------------------
    35 00000CE3 EBFE                <1>         jmp     $                               ;while(1); //無限ループ
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;データ
    39                              <1>         ;---------------------------------------
    40 00000CE5 4553502B20303A      <1> .s1:    db  "ESP+ 0:"
    41 00000CEC 2D2D2D2D2D2D2D2D20- <1> .p1:    db  "-------- ", 0
    41 00000CF5 00                  <1>
    42 00000CF6 2020202B20343A      <1> .s2:    db  "   + 4:"
    43 00000CFD 2D2D2D2D2D2D2D2D20- <1> .p2:    db  "-------- ", 0
    43 00000D06 00                  <1>
    44 00000D07 2020202B20383A      <1> .s3:    db  "   + 8:"
    45 00000D0E 2D2D2D2D2D2D2D2D20- <1> .p3:    db  "-------- ", 0
    45 00000D17 00                  <1>
    46 00000D18 2020202B31323A      <1> .s4:    db  "   +12:"
    47 00000D1F 2D2D2D2D2D2D2D2D20- <1> .p4:    db  "-------- ", 0
    47 00000D28 00                  <1>
    48                              <1> 
    49                              <1> int_default:
    50                              <1>         ;---------------------------------------
    51                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
    52                              <1>         ;---------------------------------------
    53 00000D29 9C                  <1>         pushf                                   ;//EFLAGS(IF=0)
    54 00000D2A 0E                  <1>         push    cs                              ;//cs
    55 00000D2B 68[100C0000]        <1>         push    int_stop                        ;//スタック表示処理
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み種別を登録して復帰
    59                              <1>         ;---------------------------------------
    60 00000D30 B8[360D0000]        <1>         mov     eax, .s0                        ;//割り込み種別
    61 00000D35 CF                  <1>         iret                                    ;スタックされている場所に復帰
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;データ
    65                              <1>         ;---------------------------------------
    66 00000D36 203C2020202053544F- <1> .s0:    db  " <    STOP    > ", 0
    66 00000D3F 50202020203E2000    <1>
    67                              <1> 
    68                              <1> ;********************************************************************************************************
    69                              <1> ;割り込みベクタの初期化
    70                              <1> ;********************************************************************************************************
    71 00000D47 90                  <1> ALIGN   4
    72 00000D48 FF07                <1> IDTR:   dw      8 * 256 - 1                     ;idt_limit
    73 00000D4A 00001000            <1>         dd      VECT_BASE                       ;idt_location
    74                              <1> 
    75                              <1> ;********************************************************************************************************
    76                              <1> ;割り込みテーブルを初期化
    77                              <1> ;********************************************************************************************************
    78                              <1> init_int:
    79                              <1>         ;---------------------------------------
    80                              <1>         ;レジスタの保存
    81                              <1>         ;---------------------------------------
    82 00000D4E 50                  <1>         push    eax
    83 00000D4F 53                  <1>         push    ebx
    84 00000D50 51                  <1>         push    ecx
    85 00000D51 57                  <1>         push    edi
    86                              <1> 
    87                              <1>         ;---------------------------------------
    88                              <1>         ;全ての割り込みにデフォルト処理を設定
    89                              <1>         ;---------------------------------------
    90 00000D52 8D05[290D0000]      <1>         lea     eax, [int_default]              ;EAX = 割り込み処理アドレス;
    91 00000D58 BB008E0800          <1>         mov     ebx, 0x0008_8E00                ;EBX = セグメントセレクタ;
    92 00000D5D 6693                <1>         xchg    ax, bx                          ;//下位ワード(2バイト)を交換(割り込みゲートディスクリプタの形式に合わせる)
    93                              <1> 
    94 00000D5F B900010000          <1>         mov     ecx, 256                        ;ECX = 割り込みベクタ数
    95 00000D64 BF00001000          <1>         mov     edi, VECT_BASE                  ;EDI = 割り込みベクタテーブル
    96                              <1> 
    97                              <1> .10L:                                           ;do
    98                              <1>                                                 ;{
    99 00000D69 891F                <1>         mov     [edi + 0], ebx                  ;       [EDI + 0] = 割り込みディスクリプタ(下位)
   100 00000D6B 894704              <1>         mov     [edi + 4], eax                  ;       [EDI + 4] = 割り込みディスクリプタ(上位)
   101 00000D6E 83C708              <1>         add     edi, 8                          ;       EDI += 8;
   102 00000D71 E2F6                <1>         loop    .10L                            ;}while(ECX--);
   103                              <1> 
   104                              <1>         ;---------------------------------------
   105                              <1>         ;割り込みディスクリプタの設定
   106                              <1>         ;---------------------------------------
   107 00000D73 0F011D[480D0000]    <1>         lidt    [IDTR]                          ;//割り込みディスクリプタテーブルをロード
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;データ
   111                              <1>         ;---------------------------------------
   112 00000D7A 5F                  <1>         pop     edi
   113 00000D7B 59                  <1>         pop     ecx
   114 00000D7C 5B                  <1>         pop     ebx
   115 00000D7D 58                  <1>         pop     eax
   116                              <1> 
   117 00000D7E C3                  <1>         ret
   118                              <1> 
   119                              <1> int_zero_div:
   120                              <1>         ;---------------------------------------
   121                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
   122                              <1>         ;---------------------------------------
   123 00000D7F 9C                  <1>         pushf                                   ;//EFLAGS
   124 00000D80 0E                  <1>         push    cs                              ;//CS
   125 00000D81 68[100C0000]        <1>         push    int_stop                        ;//スタック表示処理
   126                              <1> 
   127                              <1>         ;---------------------------------------
   128                              <1>         ;割り込み種別を登録して復帰
   129                              <1>         ;---------------------------------------
   130 00000D86 B8[8C0D0000]        <1>         mov     eax, .s0                        ;//割り込み種別
   131 00000D8B CF                  <1>         iret
   132                              <1> 
   133 00000D8C 203C20205A45524F20- <1> .s0:    db      " <  ZERO DIV  > ", 0
   133 00000D95 44495620203E2000    <1>
   166                                  %include        "..\modules\protect\pic.s"
     1                              <1> init_pic:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000D9D 50                  <1>         push    eax
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;マスタの設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x20, 0x11                      ;//MASTER.ICW1 = 0x11;
    10 00000D9E B011                <2>  mov al, %2
    10 00000DA0 E620                <2>  out %1, al
    11                              <1>         outp    0x21, 0x20                      ;//MASTER.ICW2 = 0x20;
    11 00000DA2 B020                <2>  mov al, %2
    11 00000DA4 E621                <2>  out %1, al
    12                              <1>         outp    0x21, 0x04                      ;//MASTER.ICW3 = 0x04;
    12 00000DA6 B004                <2>  mov al, %2
    12 00000DA8 E621                <2>  out %1, al
    13                              <1>         outp    0x21, 0x05                      ;//MASTER.ICW4 = 0x05;
    13 00000DAA B005                <2>  mov al, %2
    13 00000DAC E621                <2>  out %1, al
    14                              <1>         outp    0x21, 0xEF                      ;//マスタ割り込みマスク
    14 00000DAE B0EF                <2>  mov al, %2
    14 00000DB0 E621                <2>  out %1, al
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;スレーブの設定
    18                              <1>         ;---------------------------------------
    19                              <1>         outp    0xA0, 0x11                      ;//SLAVE.ICW1 = 0x11;
    19 00000DB2 B011                <2>  mov al, %2
    19 00000DB4 E6A0                <2>  out %1, al
    20                              <1>         outp    0xA1, 0x28                      ;//SLAVE.ICW2 = 0x28;
    20 00000DB6 B028                <2>  mov al, %2
    20 00000DB8 E6A1                <2>  out %1, al
    21                              <1>         outp    0xA1, 0x02                      ;//SLAVE.ICW3 = 0x02;
    21 00000DBA B002                <2>  mov al, %2
    21 00000DBC E6A1                <2>  out %1, al
    22                              <1>         outp    0xA1, 0x01                      ;//SLAVE.ICW4 = 0x01;
    22 00000DBE B001                <2>  mov al, %2
    22 00000DC0 E6A1                <2>  out %1, al
    23                              <1>         outp    0xA1, 0xEF                      ;//マスタ割り込みマスク
    23 00000DC2 B0EF                <2>  mov al, %2
    23 00000DC4 E6A1                <2>  out %1, al
    24                              <1> 
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00000DC6 58                  <1>         pop     eax
    29                              <1> 
    30 00000DC7 C3                  <1>         ret
   167                                  %include        "..\modules\protect\int_rtc.s"
     1                              <1> int_rtc:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000DC8 60                  <1>         pusha
     6 00000DC9 1E                  <1>         push    ds
     7 00000DCA 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントセレクタの設定
    11                              <1>         ;---------------------------------------
    12 00000DCB 66B81000            <1>         mov     ax, 0x0010
    13 00000DCF 8ED8                <1>         mov     ds, ax
    14 00000DD1 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;RTCから時刻を取得
    18                              <1>         ;---------------------------------------
    19 00000DD3 68[08020000]E87DFD- <1>         cdecl   rtc_get_time, RTC_TIME          ;EAX = get_time(&RTC_TIME);
    19 00000DDB FFFF6683C404        <1>
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;RTCの割り込み要因を取得
    23                              <1>         ;---------------------------------------
    24                              <1>         outp    0x70, 0x0C                      ;outp(0x70, 0x0C); //レジスタCを選択
    24 00000DE1 B00C                <2>  mov al, %2
    24 00000DE3 E670                <2>  out %1, al
    25 00000DE5 E471                <1>         in      al, 0x71                        ;AL = port(0x71);
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;割り込みフラグをクリア(EOI)
    29                              <1>         ;---------------------------------------
    30 00000DE7 B020                <1>         mov     al, 0x20                        ;AL = EOIコマンド;
    31 00000DE9 E6A0                <1>         out     0xA0, al                        ;outp(0xA0, AL); //スレーブPIC
    32 00000DEB E620                <1>         out     0x20, al                        ;outp(0x20, AL); //マスタPIC
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;レジスタの復帰
    36                              <1>         ;---------------------------------------
    37 00000DED 07                  <1>         pop     es
    38 00000DEE 1F                  <1>         pop     ds
    39 00000DEF 61                  <1>         popa
    40                              <1> 
    41 00000DF0 CF                  <1>         iret                                    ;割り込み処理の終了
    42                              <1> 
    43                              <1> rtc_int_en:
    44                              <1>         ;-----------------------------------
    45                              <1>         ;スタックフレームの構築
    46                              <1>         ;-----------------------------------
    47                              <1>                                             ;   + 8| 指定されたビット
    48                              <1>                                             ;   + 4| IP(戻り番号)
    49 00000DF1 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    50 00000DF2 89E5                <1>         mov     ebp, esp                    ;------|---------
    51                              <1> 
    52                              <1>         ;---------------------------------------
    53                              <1>         ;レジスタの保存
    54                              <1>         ;---------------------------------------
    55 00000DF4 50                  <1>         push    eax
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み許可認定(RTCの内部レジスタBのUIE(更新終了割り込み許可)ビットをセット)
    59                              <1>         ;---------------------------------------
    60                              <1>         outp    0x70, 0x0B                      ;outp(0x70, AL); //レジスタBを選択
    60 00000DF5 B00B                <2>  mov al, %2
    60 00000DF7 E670                <2>  out %1, al
    61                              <1> 
    62 00000DF9 E471                <1>         in      al, 0x71                        ;AL = port(0x71); //レジスタBの
    63 00000DFB 0A4508              <1>         or      al, [ebp + 8]                   ;AL |= ビット; //指定されたビットをセット
    64                              <1> 
    65 00000DFE E671                <1>         out     0x71, al                        ;outp(0x71, AL); //レジスタBに書き込み
    66                              <1> 
    67                              <1>         ;---------------------------------------
    68                              <1>         ;レジスタの復帰
    69                              <1>         ;---------------------------------------
    70 00000E00 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 00000E01 89EC                <1>         mov     esp, ebp
    76 00000E03 5D                  <1>         pop     ebp
    77                              <1> 
    78 00000E04 C3                  <1>         ret
   168                                  %include        "..\modules\protect\ring_buff.s"
     1                              <1> ring_rd:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| 読み込んだデータの保存先アドレス
     6                              <1>                                             ;   + 8| リングバッファ
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000E05 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
     9 00000E06 89E5                <1>         mov     ebp, esp                    ;------|---------
    10                              <1> 
    11                              <1>         ;---------------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;---------------------------------------
    14 00000E08 60                  <1>         pusha
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;引数を取得
    18                              <1>         ;---------------------------------------
    19 00000E09 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    20 00000E0C 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = データアドレス;
    21                              <1>         
    22                              <1>         ;---------------------------------------
    23                              <1>         ;読み込み位置を確認
    24                              <1>         ;---------------------------------------
    25 00000E0F B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    26 00000E14 8B1E                <1>         mov     ebx, [esi + ring_buff.rp]       ;EBX = rp; //読み込み位置
    27 00000E16 3B5E04              <1>         cmp     ebx, [esi + ring_buff.wp]       ;if(EBX != wp) //書き込み位置と異なる
    28 00000E19 7411                <1>         je      .10E                            ;{
    29                              <1>         
    30 00000E1B 8A441E08            <1>         mov     al, [esi + ring_buff.item + ebx];   AL = BUFF[rp]; //キーコードを保存
    31                              <1> 
    32 00000E1F 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //データを保存
    33                              <1> 
    34 00000E21 43                  <1>         inc     ebx                             ;   EBX++; //次の読み込み位置
    35 00000E22 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= 0x0F; //サイズの制限
    36 00000E25 891E                <1>         mov     [esi + ring_buff.rp], ebx       ;   wp = EBX; //読み込み位置を保存
    37                              <1> 
    38 00000E27 B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //データあり
    39                              <1> .10E:                                           ;}
    40                              <1> 
    41                              <1>         ;---------------------------------------
    42                              <1>         ;レジスタの復帰
    43                              <1>         ;---------------------------------------
    44 00000E2C 61                  <1>         popa
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;スタックフレームの破棄
    48                              <1>         ;---------------------------------------
    49 00000E2D 89EC                <1>         mov     esp, ebp
    50 00000E2F 5D                  <1>         pop     ebp
    51                              <1> 
    52 00000E30 C3                  <1>         ret
    53                              <1> 
    54                              <1> ring_wr:
    55                              <1>         ;-----------------------------------
    56                              <1>         ;スタックフレームの構築
    57                              <1>         ;-----------------------------------
    58                              <1>                                             ;   +12| 書き込むデータ
    59                              <1>                                             ;   + 8| リングバッファ
    60                              <1>                                             ;   + 4| IP(戻り番号)
    61 00000E31 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    62 00000E32 89E5                <1>         mov     ebp, esp                    ;------|---------
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;レジスタの保存
    66                              <1>         ;---------------------------------------
    67 00000E34 60                  <1>         pusha
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;引数を取得
    71                              <1>         ;---------------------------------------
    72 00000E35 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    73                              <1>         
    74                              <1>         ;---------------------------------------
    75                              <1>         ;書き込み位置を確認
    76                              <1>         ;---------------------------------------
    77 00000E38 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    78 00000E3D 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
    79 00000E40 89D9                <1>         mov     ecx, ebx                        ;ECX = EBX;
    80 00000E42 41                  <1>         inc     ecx                             ;ECX++;
    81 00000E43 83E10F              <1>         and     ecx, RING_INDEX_MASK            ;ECX &= 0x0F //サイズの制限
    82                              <1>         
    83 00000E46 3B0E                <1>         cmp     ecx, [esi + ring_buff.rp]       ;if(ECX != rp) //読み込み位置と異なる
    84 00000E48 740F                <1>         je      .10E                            ;{
    85                              <1>         
    86 00000E4A 8A450C              <1>         mov     al, [ebp +12]                   ;   AL = データ;
    87                              <1> 
    88 00000E4D 88441E08            <1>         mov     [esi + ring_buff.item + ebx], al;   BUFF[wp] = AL; //キーコードを保存
    89 00000E51 894E04              <1>         mov     [esi + ring_buff.wp], ecx       ;   wp = ECX; //書き込み位置を保存
    90 00000E54 B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //成功
    91                              <1> .10E:                                           ;}
    92                              <1> 
    93                              <1>         ;---------------------------------------
    94                              <1>         ;レジスタの復帰
    95                              <1>         ;---------------------------------------
    96 00000E59 61                  <1>         popa
    97                              <1>         
    98                              <1>         ;---------------------------------------
    99                              <1>         ;スタックフレームの破棄
   100                              <1>         ;---------------------------------------
   101 00000E5A 89EC                <1>         mov     esp, ebp
   102 00000E5C 5D                  <1>         pop     ebp
   103                              <1> 
   104 00000E5D C3                  <1>         ret
   105                              <1> 
   106                              <1> draw_key:
   107                              <1>         ;-----------------------------------
   108                              <1>         ;スタックフレームの構築
   109                              <1>         ;-----------------------------------
   110                              <1>                                             ;   +16| リングブッファ
   111                              <1>                                             ;   +12| Y(行)
   112                              <1>                                             ;   + 8| X(列)
   113                              <1>                                             ;   + 4| IP(戻り番号)
   114 00000E5E 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
   115 00000E5F 89E5                <1>         mov     ebp, esp                    ;------|---------
   116                              <1> 
   117                              <1>         ;---------------------------------------
   118                              <1>         ;レジスタの保存
   119                              <1>         ;---------------------------------------
   120 00000E61 60                  <1>         pusha
   121                              <1> 
   122                              <1>         ;---------------------------------------
   123                              <1>         ;引数を取得
   124                              <1>         ;---------------------------------------
   125 00000E62 8B7508              <1>         mov     esi, [ebp + 8]                  ;EDX = X(列);
   126 00000E65 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行);
   127 00000E68 8B7510              <1>         mov     esi, [ebp +16]                  ;ESI = リングブッファ;
   128                              <1>         
   129                              <1>         ;---------------------------------------
   130                              <1>         ;リングブッファの情報を取得
   131                              <1>         ;---------------------------------------
   132 00000E6B 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
   133 00000E6E 8D7608              <1>         lea     esi, [esi + ring_buff.item]     ;ESI = &KEY_BUFF[EBX];
   134 00000E71 B910000000          <1>         mov     ecx, RING_ITEM_SIZE             ;ECX = RING_ITEM_SIZE; //要素数
   135                              <1> 
   136                              <1> .10L:                                           ;do
   137                              <1>                                                 ;{
   138 00000E76 4B                  <1>         dec     ebx                             ;   EBX--;
   139 00000E77 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= RING_INDEX_MASK;
   140 00000E7A 8A041E              <1>         mov     al, [esi + ebx]                 ;   EAX = KEY_BUFF[EBX];
   141                              <1> 
   142 00000E7D 6A046A106A0268-     <1>         cdecl   itoa, eax, .tmp, 2, 16, 0b0100  ;   //キーコードを文字列に変換
   142 00000E84 [AE0E0000]50E843FC- <1>
   142 00000E8C FFFF6683C414        <1>
   143 00000E92 68[AE0E0000]6A0257- <1>         cdecl   draw_str, edx, edi, 0x02, .tmp  ;   //変換した文字列を表示
   143 00000E9A 52E8A3F9FFFF6683C4- <1>
   143 00000EA3 10                  <1>
   144                              <1> 
   145 00000EA4 83C203              <1>         add     edx, 3                          ;   //表示位置を更新(3文字分)
   146                              <1> 
   147 00000EA7 E2CD                <1>         loop    .10L
   148                              <1> .10E:                                           ;}while(ECX--);        
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;レジスタの復帰
   152                              <1>         ;---------------------------------------
   153 00000EA9 61                  <1>         popa
   154                              <1>         
   155                              <1>         ;---------------------------------------
   156                              <1>         ;スタックフレームの破棄
   157                              <1>         ;---------------------------------------
   158 00000EAA 89EC                <1>         mov     esp, ebp
   159 00000EAC 5D                  <1>         pop     ebp
   160                              <1> 
   161 00000EAD C3                  <1>         ret
   162                              <1> 
   163                              <1>         ;---------------------------------------
   164                              <1>         ;データ
   165                              <1>         ;---------------------------------------
   166 00000EAE 2D2D2000            <1> .tmp    db  "-- ", 0
   169                                  %include        "..\modules\protect\int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000EB2 60                  <1>         pusha
     6 00000EB3 1E                  <1>         push    ds
     7 00000EB4 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 00000EB5 66B81000            <1>         mov     ax, 0x0010
    13 00000EB9 8ED8                <1>         mov     ds, ax
    14 00000EBB 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;KBCのブッファ読み取り
    18                              <1>         ;---------------------------------------
    19 00000EBD E460                <1>         in      al, 0x60                        ; AL = キーコードの取得
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;キーコードの保存
    23                              <1>         ;---------------------------------------
    24 00000EBF 5068[D80E0000]E867- <1>         cdecl   ring_wr, _KEY_BUFF, eax         ;ring_wr(_KEY_BUFF, EAX); //キーコードの保存
    24 00000EC7 FFFFFF6683C408      <1>
    25                              <1>         
    26                              <1>         ;---------------------------------------
    27                              <1>         ;割り込み終了コマンド送信
    28                              <1>         ;---------------------------------------
    29                              <1>         outp    0x20, 0x20                      ;outp(); //マスタPIC:EOIコマンド
    29 00000ECE B020                <2>  mov al, %2
    29 00000ED0 E620                <2>  out %1, al
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;レジスタの復帰
    33                              <1>         ;---------------------------------------
    34 00000ED2 07                  <1>         pop     es
    35 00000ED3 1F                  <1>         pop     ds
    36 00000ED4 61                  <1>         popa
    37                              <1> 
    38 00000ED5 CF                  <1>         iret                                    ;割り込みからの復帰
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;データ
    42                              <1>         ;---------------------------------------
    43                              <1> 
    44 00000ED6 00<rept>            <1> ALIGN   4, db   0
    45 00000ED8 00<rept>            <1> _KEY_BUFF:  times   ring_buff_size  db  0
   170                                  %include        "..\modules\protect\timer.s"
     1                              <1> int_en_timer0:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000EF0 50                  <1>         push    eax                              ;//outp用
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;タイマーICのカウンタ0を設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x43, 0b_00_11_010_0            ;//カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    10 00000EF1 B034                <2>  mov al, %2
    10 00000EF3 E643                <2>  out %1, al
    11                              <1>         outp    0x40, 0x9C                      ;//下位バイト
    11 00000EF5 B09C                <2>  mov al, %2
    11 00000EF7 E640                <2>  out %1, al
    12                              <1>         outp    0x40, 0x2E                      ;//上位バイト
    12 00000EF9 B02E                <2>  mov al, %2
    12 00000EFB E640                <2>  out %1, al
    13                              <1> 
    14                              <1>         ;---------------------------------------
    15                              <1>         ;レジスタの復帰
    16                              <1>         ;---------------------------------------
    17 00000EFD 58                  <1>         pop     eax
    18                              <1> 
    19 00000EFE C3                  <1>         ret
   171                                  %include        "..\modules\protect\draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000EFF 60                  <1>         pushad
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;引数を取得
     9                              <1>         ;---------------------------------------
    10 00000F00 A1[58050000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = タイマー割り込みカウンタ
    11 00000F05 C1E804              <1>         shr     eax, 4                          ;EAX /= 4; //16で除算
    12 00000F08 3B05[300F0000]      <1>         cmp     eax, [.index]                   ;if(EAX != 前回値)
    13 00000F0E 741E                <1>         je      .10E                            ;{
    14                              <1>         
    15 00000F10 A3[300F0000]        <1>         mov     [.index], eax                   ;   前回値 = EAX;
    16 00000F15 83E003              <1>         and     eax, 0x03                       ;   EAX &= 0x03; //0~3に限定
    17                              <1> 
    18 00000F18 8A80[340F0000]      <1>         mov     al, [.table + eax]              ;   AL = table[index];
    19 00000F1E 506A0F6A1D6A00E8F9- <1>         cdecl   draw_char, 0 ,29, 0x000F, eax   ;   draw_char(); //文字を表示
    19 00000F27 F7FFFF6683C410      <1>
    20                              <1> 
    21                              <1> .10E:                                           ;}    
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;レジスタの復帰
    25                              <1>         ;---------------------------------------
    26 00000F2E 61                  <1>         popad
    27                              <1> 
    28 00000F2F C3                  <1>         ret
    29                              <1> 
    30                              <1>         ;---------------------------------------
    31                              <1>         ;データ
    32                              <1>         ;---------------------------------------
    33                              <1> ALIGN   4,  db  0
    34 00000F30 00000000            <1> .index:     dd  0                               ;前回値
    35 00000F34 7C2F2D5C            <1> .table:     db  "|/-\"                          ;表示キャラクタ
   172                                  %include        "..\modules\protect\call_gate.s"
     1                              <1> call_gate:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| X(列)
     6                              <1>                                             ;   +16| Y(行)
     7                              <1>                                             ;   +20| 色
     8                              <1>                                             ;   +24| 文字
     9                              <1>                                             ;   + 8| CS(コードセグメント)
    10                              <1>                                             ;   + 4| EIP(戻り番号)
    11 00000F38 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    12 00000F39 89E5                <1>         mov    ebp, esp                     ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000F3B 60                  <1>         pusha
    18 00000F3C 1E                  <1>         push    ds
    19 00000F3D 06                  <1>         push    es
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;データ用セグメントの設定
    23                              <1>         ;---------------------------------------
    24 00000F3E 66B81000            <1>         mov     ax, 0x0010
    25 00000F42 8ED8                <1>         mov     ds, ax
    26 00000F44 8EC0                <1>         mov     es, ax
    27                              <1>         
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字を表示
    30                              <1>         ;---------------------------------------
    31 00000F46 8B450C              <1>         mov     eax, dword [ebp +12]            ;EAX = X(列);
    32 00000F49 8B5D10              <1>         mov     ebx, dword [ebp +16]            ;EBX = Y(行);
    33 00000F4C 8B4D14              <1>         mov     ecx, dword [ebp +20]            ;ECX = 色;
    34 00000F4F 8B5518              <1>         mov     edx, dword [ebp +24]            ;EDX = 文字;
    35 00000F52 52515350E8E8F8FFFF- <1>         cdecl   draw_str, eax, ebx, ecx, edx    ;draw_str();
    35 00000F5B 6683C410            <1>
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;レジスタの復帰
    39                              <1>         ;---------------------------------------
    40 00000F5F 07                  <1>         pop     es
    41 00000F60 1F                  <1>         pop     ds
    42 00000F61 61                  <1>         popa
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;スタックフレームの破棄
    46                              <1>         ;---------------------------------------
    47 00000F62 89EC                <1>         mov     esp, ebp
    48 00000F64 5D                  <1>         pop     ebp
    49                              <1> 
    50 00000F65 CA1000              <1>         retf 4 * 4
   173                                  %include        "..\modules\protect\trap_gate.s"
     1                              <1> trap_gate_81:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;1文字出力
     4                              <1>         ;---------------------------------------
     5 00000F68 50535251E8B2F7FFFF- <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;//1文字出力
     5 00000F71 6683C410            <1>
     6                              <1> 
     7 00000F75 CF                  <1>         iret
     8                              <1> 
     9                              <1> trap_gate_82:
    10                              <1>         ;---------------------------------------
    11                              <1>         ;点の描画
    12                              <1>         ;---------------------------------------
    13 00000F76 535251E87BF9FFFF66- <1>         cdecl   draw_pixel, ecx, edx, ebx       ;//点の描画
    13 00000F7F 83C40C              <1>
    14                              <1> 
    15 00000F82 CF                  <1>         iret
   174                                  %include        "..\modules\protect\test_and_set.s"
     1                              <1> test_and_set:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| ローカル変数のアドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000F83 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000F84 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000F86 50                  <1>         push    eax
    14 00000F87 53                  <1>         push    ebx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;テストアンドセット
    18                              <1>         ;---------------------------------------
    19 00000F88 B800000000          <1>         mov     eax, 0                          ;local = 0;
    20 00000F8D 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;global = アドレス;
    21                              <1> 
    22                              <1> .10L:                                           ;while(1)
    23                              <1>                                                 ;{
    24 00000F90 F00FAB03            <1>         lock    bts [ebx], eax                  ;   CF = TEST_AND_SET(IN_USE, 1);
    25 00000F94 7307                <1>         jnc     .10E                            ;   if(0 == CF)
    26                              <1>                                                 ;   break;
    27                              <1> 
    28                              <1> .12L:                                           ;   while(1)
    29                              <1>                                                 ;   {
    30 00000F96 0FA303              <1>         bt      [ebx], eax                      ;       CF = TEST(IN_USE, 1);
    31 00000F99 72FB                <1>         jc      .12L                            ;       if(0 == CF)
    32                              <1>                                                 ;       break;
    33 00000F9B EBF3                <1>         jmp     .10L                            ;   }
    34                              <1> .10E:                                           ;}
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;レジスタの復帰
    38                              <1>         ;---------------------------------------
    39 00000F9D 5B                  <1>         pop     ebx
    40 00000F9E 58                  <1>         pop     eax
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;スタックフレームの破棄
    44                              <1>         ;---------------------------------------
    45 00000F9F 89EC                <1>         mov     esp, ebp
    46 00000FA1 5D                  <1>         pop     ebp
    47                              <1> 
    48 00000FA2 C3                  <1>         ret
   175                                  %include        "..\modules\protect\int_nm.s"
     1                              <1> get_tss_base:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;TSSセレクタで指定されているTSSディスクリプタからTSSベースアドレスを取得し、EAXに代入。
     4                              <1>         ;---------------------------------------
     5 00000FA3 8B83[96040000]      <1>         mov     eax, [GDT + ebx + 2]            ;EAX = TSS[23:0];
     6 00000FA9 C1E008              <1>         shl     eax, 8                          ;EAX << 8;
     7 00000FAC 8A83[9B040000]      <1>         mov     al, [GDT + ebx + 7]             ;AL = TSS[31:24];
     8 00000FB2 C1C808              <1>         ror     eax, 8                          ;EAX >>= 8; //循環
     9                              <1> 
    10 00000FB5 C3                  <1>         ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1>         ;---------------------------------------
    14                              <1>         ;EAXレジスタに設定されたTSSディスクリプタのベースアドレスを参照して、FPUコンテキストを保存し、保存済みフラグをセット。
    15                              <1>         ;---------------------------------------
    16 00000FB6 DD7068              <1>         fnsave  [eax + 104]                     ;//FPUコンテキストを保存
    17 00000FB9 C780D4000000010000- <1>         mov     [eax + 104 + 108], dword 1      ;saved = 1; //フラグをセット
    17 00000FC2 00                  <1>
    18                              <1> 
    19 00000FC3 C3                  <1>         ret
    20                              <1> 
    21                              <1> load_fpu_context:
    22                              <1>         ;---------------------------------------
    23                              <1>         ;FPUコンテキストを復帰する。保存済みフラグがセットされていなければFPUを初期化する。
    24                              <1>         ;---------------------------------------
    25 00000FC4 83B8D400000000      <1>         cmp     [eax + 104 + 108], dword 0      ;if(0 == saved)
    26 00000FCB 7504                <1>         jne     .10F                            ;{
    27 00000FCD DBE3                <1>         fninit                                  ;   //FPUの初期化
    28 00000FCF EB03                <1>         jmp     .10E                            ;}
    29                              <1> .10F:                                           ;else
    30                              <1>                                                 ;{
    31 00000FD1 DD6068              <1>         frstor  [eax + 104]                     ;   //FPUコンテキストを復帰
    32                              <1> .10E:                                           ;}
    33                              <1> 
    34 00000FD4 C3                  <1>         ret
    35                              <1> 
    36                              <1> int_nm:
    37                              <1>         ;-----------------------------------
    38                              <1>         ;レジスタの保存
    39                              <1>         ;-----------------------------------
    40 00000FD5 60                  <1>         pusha
    41 00000FD6 1E                  <1>         push    ds
    42 00000FD7 06                  <1>         push    es
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;カーネル用セレクタを設定
    46                              <1>         ;---------------------------------------
    47 00000FD8 66B81000            <1>         mov     ax, DS_KERNEL                   ;0x10と同じ
    48 00000FDC 8ED8                <1>         mov     ds, ax
    49 00000FDE 8EC0                <1>         mov     es, ax
    50                              <1>         
    51                              <1>         ;---------------------------------------
    52                              <1>         ;タスクスイッチフラグをクリア
    53                              <1>         ;---------------------------------------
    54 00000FE0 0F06                <1>         clts                                    ;CR0.TS = 0;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;前回/今回FPUを使用するタスク
    58                              <1>         ;---------------------------------------
    59 00000FE2 8B3D[2C100000]      <1>         mov     edi, [.last_tss]                ;EDI = 前回FPUを使用したタスクのTSS
    60 00000FE8 0F00CE              <1>         str     esi                             ;ESI = 今回FPUを使用したタスクのTSS
    61 00000FEB 83E6F8              <1>         and     esi, ~0x0007                    ;//特権レベルとTI(Table Indicator:テーブル指定)bitをマスクして除外
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;FPUの初回利用をチェック
    65                              <1>         ;---------------------------------------
    66 00000FEE 83FF00              <1>         cmp     edi, 0                          ;if(0 != EDI) //前回使用したタスク
    67 00000FF1 7420                <1>         je      .10F                            ;{
    68                              <1>         
    69 00000FF3 39FE                <1>         cmp     esi, edi                        ;   if(ESI != EDI) //異なるタスク
    70 00000FF5 741A                <1>         je      .12E                            ;   {
    71                              <1>         
    72 00000FF7 FA                  <1>         cli                                     ;       //割り込み禁止
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;前回のFPUコンテキストを保存
    76                              <1>         ;---------------------------------------
    77 00000FF8 89FB                <1>         mov     ebx, edi                        ;       EBX = EDI; //前回のタスク
    78 00000FFA E8A4FFFFFF          <1>         call    get_tss_base                    ;       EAX = get_tss_base(TSSセレクタインデックス(前回)); //TSSアドレスを取得
    79 00000FFF E8B2FFFFFF          <1>         call    save_fpu_context                ;       save_fpu_context(); //FPUコンテキスを保存
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;今回のFPUコンテキストを復帰
    83                              <1>         ;---------------------------------------
    84 00001004 89F3                <1>         mov     ebx, esi                        ;       EBX = ESI; //今回のタスク
    85 00001006 E898FFFFFF          <1>         call    get_tss_base                    ;       EAX = get_tss_base(TSSセレクタインデックス(今回)); //TSSアドレスを取得
    86 0000100B E8B4FFFFFF          <1>         call    load_fpu_context                ;       load_fpu_context(); //FPUコンテキスを復帰
    87                              <1> 
    88 00001010 FB                  <1>         sti                                     ;       //割り込み許可
    89                              <1> .12E:                                           ;   }
    90 00001011 EB0E                <1>         jmp     .10E                            ;}
    91                              <1> .10F:                                           ;else
    92                              <1>                                                 ;{
    93                              <1>         
    94 00001013 FA                  <1>         cli                                     ;   //割り込み禁止
    95                              <1> 
    96                              <1>         ;---------------------------------------
    97                              <1>         ;今回のFPUコンテキストを復帰
    98                              <1>         ;---------------------------------------
    99 00001014 89F3                <1>         mov     ebx, esi                        ;   EBX = ESI; //今回のタスク
   100 00001016 E888FFFFFF          <1>         call    get_tss_base                    ;   EAX = get_tss_base(TSSセレクタインデックス(今回)); //TSSアドレスを取得
   101 0000101B E8A4FFFFFF          <1>         call    load_fpu_context                ;   load_fpu_context(); //FPUコンテキスを復帰
   102                              <1> 
   103 00001020 FB                  <1>         sti                                     ;   //割り込み許可
   104                              <1> .10E:                                           ;}
   105                              <1> 
   106 00001021 8935[2C100000]      <1>         mov     [.last_tss], esi                ;//FPUを使用したタスクを保存
   107                              <1> 
   108                              <1>         ;---------------------------------------
   109                              <1>         ;レジスタの復帰
   110                              <1>         ;---------------------------------------
   111 00001027 07                  <1>         pop     es
   112 00001028 1F                  <1>         pop     ds
   113 00001029 61                  <1>         popa
   114                              <1> 
   115 0000102A CF                  <1>         iret
   116                              <1> 
   117 0000102B 00                  <1> ALIGN   4,  db  0
   118 0000102C 00000000            <1> .last_tss:  dd  0
   176                                  %include        "..\modules\protect\wait_tick.s"
     1                              <1> wait_tick:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| ウェイト
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00001030 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00001031 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00001033 50                  <1>         push    eax
    14 00001034 51                  <1>         push    ecx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;ウェイト
    18                              <1>         ;---------------------------------------
    19 00001035 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = ウェイト回数
    20 00001038 A1[58050000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = TIMER;
    21                              <1>                                                 ;do
    22                              <1>                                                 ;{
    23 0000103D 3905[58050000]      <1> .10L:   cmp     [TIMER_COUNT], eax              ;   while(TIMER_COUNT == EAX){} //タイマ割り込みでループを出る
    24 00001043 74F8                <1>         je      .10L
    25 00001045 40                  <1>         inc     eax                             ;   EAX++;
    26 00001046 E2F5                <1>         loop    .10L                            ;}while(ECX--);
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;レジスタの復帰
    30                              <1>         ;---------------------------------------
    31 00001048 59                  <1>         pop     ecx
    32 00001049 58                  <1>         pop     eax
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;スタックフレームの破棄
    36                              <1>         ;---------------------------------------
    37 0000104A 89EC                <1>         mov     esp, ebp
    38 0000104C 5D                  <1>         pop     ebp
    39                              <1> 
    40 0000104D C3                  <1>         ret
   177                                  
   178                                  ;********************************************************************************************************
   179                                  ;パディング
   180                                  ;********************************************************************************************************
   181 0000104E 00<rept>                        times KERNEL_SIZE - ($ - $$)    db 0    ;パディング
