     1                                  ;********************************************************************************************************
     2                                  ;マクロ
     3                                  ;********************************************************************************************************
     4                                  %include        "..\include\define.s"
     1                              <1> VECT_BASE       equ     0x0010_0000             ;0010_0000:0010_07FF
     2                              <1> 
     3                              <1> SECT_SIZE   equ     (512)                   ;セクタサイズ
     4                              <1> 
     5                              <1> BOOT_LOAD   equ     0x7C00                  ;ブートプログラムのロード位置
     6                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)
     7                              <1> BOOT_SIZE   equ     (1024 * 8)              ;ブートコードサイズ
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     9                              <1> 
    10                              <1> KERNEL_LOAD equ     0x0010_1000
    11                              <1> KERNEL_SIZE equ     (1024*8)                ;カーネルサイズ
    12                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> E820_RECORD_SIZE    equ 20
     5                                  %include        "..\include\macro.s"
     1                              <1> %define     RING_ITEM_SIZE  (1 << 4)
     2                              <1> %define     RING_INDEX_MASK (RING_ITEM_SIZE - 1)
     3                              <1> 
     4                              <1> struc drive
     5 00000000 <res 00000002>      <1>         .no         resw    1                       ;ドライブ番号
     6 00000002 <res 00000002>      <1>         .cyln       resw    1                       ;シリンダ
     7 00000004 <res 00000002>      <1>         .head       resw    1                       ;ヘッド
     8 00000006 <res 00000002>      <1>         .sect       resw    1                       ;セクタ
     9                              <1> endstruc
    10                              <1> 
    11                              <1> struc ring_buff
    12 00000000 <res 00000004>      <1>         .rp         resd    1                       ;RP:書き込み位置
    13 00000004 <res 00000004>      <1>         .wp         resd    1                       ;WP:読み込み位置
    14 00000008 <res 00000010>      <1>         .item       resb    RING_ITEM_SIZE          ;ブッファ
    15                              <1> endstruc
    16                              <1> 
    17                              <1> %macro  cdecl   1-*.nolist
    18                              <1> 
    19                              <1>     %rep    %0 - 1
    20                              <1>         push    %{-1:-1}
    21                              <1>         %rotate -1
    22                              <1>     %endrep
    23                              <1>     %rotate -1
    24                              <1> 
    25                              <1>         call    %1
    26                              <1> 
    27                              <1>     %if 1 < %0
    28                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    29                              <1>     %endif
    30                              <1> 
    31                              <1> %endmacro
    32                              <1> 
    33                              <1> %macro  set_vect    1-*
    34                              <1>         push    eax
    35                              <1>         push    edi
    36                              <1> 
    37                              <1>         mov     edi, VECT_BASE + (%1 * 8)           ;ベクタアドレス
    38                              <1>         mov     eax, %2
    39                              <1> 
    40                              <1>     %if 3 == %0
    41                              <1>         mov     [edi + 4], %3                       ;フラグ
    42                              <1>     %endif
    43                              <1> 
    44                              <1>         mov     [edi + 0], ax                       ;例外アドレス[15:0]
    45                              <1>         shr     eax, 16
    46                              <1>         mov     [edi + 6], ax                       ;6はエンディアン(?) 例外アドレス[31:16]
    47                              <1> 
    48                              <1>         pop     edi
    49                              <1>         pop     eax
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro  outp    2
    53                              <1>         mov     al, %2
    54                              <1>         out     %1, al
    55                              <1> %endmacro
     6                                  
     7                                          ORG     KERNEL_LOAD                             ;カーネルのロードアドレス
     8                                  
     9                                  [BITS 32]
    10                                  ;********************************************************************************************************
    11                                  ;エントリポイント
    12                                  ;********************************************************************************************************
    13                                  kernel:
    14                                          ;---------------------------------------
    15                                          ;フォントアドレスを取得
    16                                          ;---------------------------------------
    17 00000000 BE007E0000                      mov     esi, BOOT_LOAD + SECT_SIZE      ;ESI = 0x7C00 + 512
    18 00000005 0FB706                          movzx   eax, word [esi + 0]             ;EAX = [ESI + 0] //セグメント
    19 00000008 0FB75E02                        movzx   ebx, word [esi + 2]             ;EBX = [ESI + 2] //オフセット
    20 0000000C C1E004                          shl     eax, 4                          ;EAX << 4;
    21 0000000F 01D8                            add     eax, ebx                        ;EAX += EBX;
    22 00000011 A3[08010000]                    mov     [FONT_ADR], eax                 ;FONT_ADR[0] = EAX;
    23                                  
    24                                          ;---------------------------------------
    25                                          ;初期化
    26                                          ;---------------------------------------
    27 00000016 E8CB070000                      cdecl   init_int                        ;//割り込みベクタの初期化
    28 0000001B E815080000                      cdecl   init_pic                        ;//割り込みコントローラの初期化
    29                                  
    30                                          set_vect        0x00, int_zero_div      ;割り込み処理の登録:0除算
    30 00000020 50                  <1>  push eax
    30 00000021 57                  <1>  push edi
    30                              <1> 
    30 00000022 BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    30 00000027 B8[17080000]        <1>  mov eax, %2
    30                              <1> 
    30                              <1>  %if 3 == %0
    30                              <1>  mov [edi + 4], %3
    30                              <1>  %endif
    30                              <1> 
    30 0000002C 668907              <1>  mov [edi + 0], ax
    30 0000002F C1E810              <1>  shr eax, 16
    30 00000032 66894706            <1>  mov [edi + 6], ax
    30                              <1> 
    30 00000036 5F                  <1>  pop edi
    30 00000037 58                  <1>  pop eax
    31                                          set_vect        0x21, int_keyboard      ;割り込み処理の登録:KBC
    31 00000038 50                  <1>  push eax
    31 00000039 57                  <1>  push edi
    31                              <1> 
    31 0000003A BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    31 0000003F B8[49090000]        <1>  mov eax, %2
    31                              <1> 
    31                              <1>  %if 3 == %0
    31                              <1>  mov [edi + 4], %3
    31                              <1>  %endif
    31                              <1> 
    31 00000044 668907              <1>  mov [edi + 0], ax
    31 00000047 C1E810              <1>  shr eax, 16
    31 0000004A 66894706            <1>  mov [edi + 6], ax
    31                              <1> 
    31 0000004E 5F                  <1>  pop edi
    31 0000004F 58                  <1>  pop eax
    32                                          set_vect        0x28, int_rtc           ;割り込み処理の登録:RTC
    32 00000050 50                  <1>  push eax
    32 00000051 57                  <1>  push edi
    32                              <1> 
    32 00000052 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    32 00000057 B8[60080000]        <1>  mov eax, %2
    32                              <1> 
    32                              <1>  %if 3 == %0
    32                              <1>  mov [edi + 4], %3
    32                              <1>  %endif
    32                              <1> 
    32 0000005C 668907              <1>  mov [edi + 0], ax
    32 0000005F C1E810              <1>  shr eax, 16
    32 00000062 66894706            <1>  mov [edi + 6], ax
    32                              <1> 
    32 00000066 5F                  <1>  pop edi
    32 00000067 58                  <1>  pop eax
    33                                  
    34                                          ;---------------------------------------
    35                                          ;デバイスの割り込み許可
    36                                          ;---------------------------------------
    37 00000068 6A10E81A0800006683-             cdecl   rtc_int_en, 0x10                ;rtc_int_en(UIE); //更新サイクル終了割り込み許可
    37 00000071 C404               
    38                                  
    39                                          ;---------------------------------------
    40                                          ;IMR(割り込みマスクレジスタ)の設定
    41                                          ;---------------------------------------
    42                                          outp    0x21, 0b_1111_1001              ;//割り込み有効:スレーブPIC/KBC
    42 00000073 B0F9                <1>  mov al, %2
    42 00000075 E621                <1>  out %1, al
    43                                          outp    0xA1, 0b_1111_1110              ;//割り込み有効:RTC
    43 00000077 B0FE                <1>  mov al, %2
    43 00000079 E6A1                <1>  out %1, al
    44                                  
    45                                          ;---------------------------------------
    46                                          ;CPUの割り込み許可
    47                                          ;---------------------------------------
    48 0000007B FB                              sti                                      ;//割り込み許可
    49                                  
    50                                          ;---------------------------------------
    51                                          ;フォントの一覧表示
    52                                          ;---------------------------------------
    53 0000007C 6A0D6A3FE804020000-             cdecl   draw_font, 63, 13               ;//フォントの一覧表示
    53 00000085 6683C408           
    54 00000089 6A046A3FE883020000-             cdecl   draw_color_bar, 63, 4           ;//カラーバーの表示
    54 00000092 6683C408           
    55                                  
    56                                          ;---------------------------------------
    57                                          ;文字列の表示
    58                                          ;---------------------------------------
    59 00000096 68[F3000000]680F01-             cdecl   draw_str, 25, 14, 0x010F, .s0   ;draw_str();
    59 0000009E 00006A0E6A19E82302-
    59 000000A7 00006683C410       
    60                                  
    61                                          ;---------------------------------------
    62                                          ;時刻の表示
    63                                          ;---------------------------------------
    64                                  .10L:                                           ;do
    65                                                                                  ;{
    66 000000AD A1[0C010000]                    mov     eax, [RTC_TIME]                 ;       //時刻の取得
    67 000000B2 5068000700006A006A-             cdecl   draw_time, 72, 0, 0x0700, eax   ;       //時刻の表示
    67 000000BB 48E8710500006683C4-
    67 000000C4 10                 
    68                                  
    69 000000C5 68[04010000]68-                 cdecl   ring_rd, _KEY_BUFF, .int_key    ;       EAX = ring_rd(buff, &int_key);
    69 000000CB [70090000]E8C90700-
    69 000000D3 006683C408         
    70 000000D8 83F800                          cmp     eax, 0                          ;       if(EAX != 0)
    71 000000DB 7412                            je      .10E                            ;       {
    72 000000DD 68[70090000]6A1D6A-             cdecl   draw_key, 2, 29, _KEY_BUFF      ;               ring_show(key_buff); //全要素を表示
    72 000000E5 02E80B0800006683C4-
    72 000000EE 0C                 
    73                                  .10E:                                           ;       }
    74                                  
    75 000000EF EBBC                            jmp     .10L                            ;}while(1);
    76                                  
    77                                          ;---------------------------------------
    78                                          ;処理の終了
    79                                          ;---------------------------------------
    80 000000F1 EBFE                            jmp     $                               ;while(1) //無限ループ
    81                                  
    82                                  
    83                                  
    84 000000F3 2048656C6C6F2C206B-     .s0:    db      " Hello, kernel! ", 0
    84 000000FC 65726E656C212000   
    85                                  
    86 00000104 00000000                .int_key:       dd      0
    87                                  
    88                                  ALIGN   4, db   0
    89 00000108 00000000                FONT_ADR:       dd      0
    90 0000010C 00000000                RTC_TIME:       dd      0
    91                                  
    92                                  ;********************************************************************************************************
    93                                  ;モジュール
    94                                  ;********************************************************************************************************
    95                                  %include        "..\modules\protect\vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 読み込みプレーン(0~3)
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000110 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000111 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000113 6650                <1>         push    ax
    14 00000115 6652                <1>         push    dx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;読み込みプレーンの選択
    18                              <1>         ;---------------------------------------
    19 00000117 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    20 0000011A 80E403              <1>         and     ah, 0x03                        ;AH &= 0x03; //余計なビットをマスク
    21 0000011D B004                <1>         mov     al, 0x04                        ;AL = 読み込みマップ選択レジスタ
    22 0000011F 66BACE03            <1>         mov     dx, 0x03CE                      ;DX = グラフィックス制御ポート
    23 00000123 66EF                <1>         out     dx, ax                          ;//ポート出力
    24                              <1>         
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00000125 665A                <1>         pop     dx
    29 00000127 6658                <1>         pop     ax
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;スタックフレームの破棄
    33                              <1>         ;---------------------------------------
    34 00000129 89EC                <1>         mov     esp, ebp
    35 0000012B 5D                  <1>         pop     ebp
    36                              <1> 
    37 0000012C C3                  <1>         ret
    38                              <1> 
    39                              <1> vga_set_write_plane:
    40                              <1>         ;-----------------------------------
    41                              <1>         ;スタックフレームの構築
    42                              <1>         ;-----------------------------------
    43                              <1>                                             ;   + 8| 書き込みプレーン
    44                              <1>                                             ;   + 4| IP(戻り番号)
    45 0000012D 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    46 0000012E 89E5                <1>         mov    ebp, esp                     ;------|---------
    47                              <1> 
    48                              <1>         ;-----------------------------------
    49                              <1>         ;レジスタの保存
    50                              <1>         ;-----------------------------------
    51 00000130 6650                <1>         push    ax
    52 00000132 6652                <1>         push    dx
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;読み込みプレーンの選択
    56                              <1>         ;---------------------------------------
    57 00000134 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    58 00000137 80E40F              <1>         and     ah, 0x0F                        ;AH &= 0x03; //余計なビットをマスク
    59 0000013A B002                <1>         mov     al, 0x02                        ;AL = 読み込みマップ選択レジスタ
    60 0000013C 66BAC403            <1>         mov     dx, 0x03C4                      ;DX = グラフィックス制御ポート
    61 00000140 66EF                <1>         out     dx, ax                          ;//ポート出力
    62                              <1>         
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 00000142 665A                <1>         pop     dx
    67 00000144 6658                <1>         pop     ax
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;スタックフレームの破棄
    71                              <1>         ;---------------------------------------
    72 00000146 89EC                <1>         mov     esp, ebp
    73 00000148 5D                  <1>         pop     ebp
    74                              <1> 
    75 00000149 C3                  <1>         ret
    76                              <1> 
    77                              <1> vram_font_copy:
    78                              <1>         ;-----------------------------------
    79                              <1>         ;スタックフレームの構築
    80                              <1>         ;-----------------------------------
    81                              <1>                                             ;EBP+20| 描画色
    82                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
    83                              <1>                                             ;EBP+12| VRAMアドレス
    84                              <1>                                             ;   + 8| FONTアドレス
    85                              <1>                                             ;   + 4| IP(戻り番号)
    86 0000014A 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    87 0000014B 89E5                <1>         mov    ebp, esp                     ;------|---------
    88                              <1> 
    89                              <1>         ;-----------------------------------
    90                              <1>         ;レジスタの保存
    91                              <1>         ;-----------------------------------
    92 0000014D 50                  <1>         push    eax
    93 0000014E 53                  <1>         push    ebx
    94 0000014F 51                  <1>         push    ecx
    95 00000150 57                  <1>         push    edi
    96 00000151 52                  <1>         push    edx
    97 00000152 56                  <1>         push    esi
    98                              <1> 
    99                              <1>         ;---------------------------------------
   100                              <1>         ;引数を変数に代入
   101                              <1>         ;---------------------------------------
   102 00000153 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = フォントアドレス;
   103 00000156 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   104 00000159 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   105 0000015D 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   106                              <1> 
   107                              <1>         ;---------------------------------------
   108                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   109                              <1>         ;---------------------------------------
   110 00000161 84C7                <1>         test    bh, al                          ;ZF = (背景色 & プレーン)
   111 00000163 0F94C6              <1>         setz    dh                              ;if(ZF == 1){ DH = 0x00; }else{ DH = 0x01;}
   112 00000166 FECE                <1>         dec     dh                              ;DH--; // 0xFF or 0x00
   113                              <1> 
   114 00000168 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   115 0000016A 0F94C2              <1>         setz    dl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   116 0000016D FECA                <1>         dec     dl                              ;DL--; //0xFF or 0x00
   117                              <1> 
   118                              <1>         ;---------------------------------------
   119                              <1>         ;16ビットフォントのコピー
   120                              <1>         ;---------------------------------------
   121 0000016F FC                  <1>         cld                                     ;DF = 0; //アドレス加算
   122                              <1> 
   123 00000170 B910000000          <1>         mov     ecx, 16                         ;ECX = 16; //16ドット
   124                              <1> .10L:                                           ;do
   125                              <1>                                                 ;{
   126                              <1>         ;---------------------------------------
   127                              <1>         ;フォントマスクの作成
   128                              <1>         ;---------------------------------------
   129 00000175 AC                  <1>         lodsb                                   ;   AL = *ESI++; //フォント
   130 00000176 88C4                <1>         mov     ah, al                          ;   AH = AL;
   131 00000178 F6D4                <1>         not     ah                              ;   AH ~= AH; //!フォント(ビット反転)
   132                              <1> 
   133                              <1>         ;---------------------------------------
   134                              <1>         ;前景色
   135                              <1>         ;---------------------------------------
   136 0000017A 20D0                <1>         and     al, dl                          ;   AL = 前景色 & フォント;
   137                              <1> 
   138                              <1>         ;---------------------------------------
   139                              <1>         ;背景色
   140                              <1>         ;---------------------------------------
   141 0000017C F7C310000000        <1>         test    ebx, 0x0010                     ;if(透過モード)
   142 00000182 7404                <1>         jz      .11F                            ;{
   143 00000184 2227                <1>         and     ah, [edi]                       ;   AH = !フォント & [EDI] //現在値
   144 00000186 EB02                <1>         jmp     .11E                            ;}
   145                              <1> .11F:                                           ;else
   146                              <1>                                                 ;{
   147 00000188 20F4                <1>         and     ah, dh                          ;   AH = !フォント & 背景色
   148                              <1> .11E:                                           ;}
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;前景色と背景色を合成
   152                              <1>         ;---------------------------------------
   153 0000018A 08E0                <1>         or  al, ah                              ;   AL = 背景 | 前景;
   154                              <1> 
   155                              <1>         ;---------------------------------------
   156                              <1>         ;新しい値を出力（VRAMに代入)
   157                              <1>         ;---------------------------------------
   158 0000018C 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //プレーンに書き込む
   159                              <1> 
   160 0000018E 83C750              <1>         add     edi, 80                         ;   EDI += 80;
   161 00000191 E2E2                <1>         loop    .10L                            ;}while(--ECX);
   162                              <1> .10E:
   163                              <1>         ;---------------------------------------
   164                              <1>         ;レジスタの復帰
   165                              <1>         ;---------------------------------------
   166 00000193 5E                  <1>         pop     esi
   167 00000194 5A                  <1>         pop     edx
   168 00000195 5F                  <1>         pop     edi
   169 00000196 59                  <1>         pop     ecx
   170 00000197 5B                  <1>         pop     ebx
   171 00000198 58                  <1>         pop     eax
   172                              <1> 
   173                              <1>         ;---------------------------------------
   174                              <1>         ;スタックフレームの破棄
   175                              <1>         ;---------------------------------------
   176 00000199 89EC                <1>         mov     esp, ebp
   177 0000019B 5D                  <1>         pop     ebp
   178                              <1> 
   179 0000019C C3                  <1>         ret
   180                              <1> 
   181                              <1> vram_bit_copy:
   182                              <1>         ;-----------------------------------
   183                              <1>         ;スタックフレームの構築
   184                              <1>         ;-----------------------------------
   185                              <1>                                             ;EBP+20| 描画色
   186                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
   187                              <1>                                             ;EBP+12| VRAMアドレス
   188                              <1>                                             ;   + 8| 出力ビットパターン
   189                              <1>                                             ;   + 4| IP(戻り番号)
   190 0000019D 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
   191 0000019E 89E5                <1>         mov    ebp, esp                     ;------|---------
   192                              <1> 
   193                              <1>         ;-----------------------------------
   194                              <1>         ;レジスタの保存
   195                              <1>         ;-----------------------------------
   196 000001A0 50                  <1>         push    eax
   197 000001A1 53                  <1>         push    ebx
   198 000001A2 57                  <1>         push    edi
   199                              <1> 
   200                              <1>         ;---------------------------------------
   201                              <1>         ;引数を変数に代入
   202                              <1>         ;---------------------------------------
   203 000001A3 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   204 000001A6 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   205 000001AA 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   206                              <1> 
   207                              <1>         ;---------------------------------------
   208                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   209                              <1>         ;---------------------------------------
   210 000001AE 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   211 000001B0 0F94C3              <1>         setz    bl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   212 000001B3 FECB                <1>         dec     bl                              ;DL--; //0xFF or 0x00
   213                              <1> 
   214                              <1>         ;---------------------------------------
   215                              <1>         ;背景のマスクを作成
   216                              <1>         ;---------------------------------------
   217 000001B5 8A4508              <1>         mov     al, [ebp + 8]                   ;AL = 出力ビットパターン;
   218 000001B8 88C4                <1>         mov     ah, al                          ;AH ~= AL; //!出力ビットパターン(ビット反転)
   219 000001BA F6D4                <1>         not     ah
   220                              <1> 
   221                              <1>         ;---------------------------------------
   222                              <1>         ;背景色
   223                              <1>         ;---------------------------------------
   224 000001BC 2227                <1>         and     ah, [edi]                       ;AH = 現在値 & !出力ビットパターン
   225 000001BE 20D8                <1>         and     al, bl                          ;AL = 表示色 & 出力ビットパターン
   226 000001C0 08E0                <1>         or      al, ah                          ;AL |= AH;
   227 000001C2 8807                <1>         mov     [edi], al                       ;[EDI] = BL; //プレーンに書き込む
   228                              <1> 
   229                              <1>         ;---------------------------------------
   230                              <1>         ;レジスタの復帰
   231                              <1>         ;---------------------------------------
   232 000001C4 5F                  <1>         pop     edi
   233 000001C5 5B                  <1>         pop     ebx
   234 000001C6 58                  <1>         pop     eax
   235                              <1> 
   236                              <1>         ;---------------------------------------
   237                              <1>         ;スタックフレームの破棄
   238                              <1>         ;---------------------------------------
   239 000001C7 89EC                <1>         mov     esp, ebp
   240 000001C9 5D                  <1>         pop     ebp
   241                              <1> 
   242 000001CA C3                  <1>         ret
    96                                  %include        "..\modules\protect\draw_char.s"
     1                              <1> draw_char:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +20| 文字
     6                              <1>                                             ;   +16| 描画色
     7                              <1>                                             ;   +12| 行(0~29)
     8                              <1>                                             ;   + 8| 列(0~79)
     9                              <1>                                             ;   + 4| IP(戻り番号)
    10 000001CB 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    11 000001CC 89E5                <1>         mov    ebp, esp                     ;------|---------
    12                              <1> 
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 000001CE 53                  <1>         push    ebx
    17 000001CF 57                  <1>         push    edi
    18 000001D0 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 000001D1 0FB67514            <1>         movzx   esi, byte [ebp +20]             ;CL = 文字コード;
    24 000001D5 C1E604              <1>         shl     esi, 4                          ;CL *= 16; //1文字16バイト
    25 000001D8 0335[08010000]      <1>         add     esi, [FONT_ADR]                 ;ESI = フォントアドレス;
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;コピー先アドレスを取得
    29                              <1>         ;adr = 0xA0000 + (640 / 8 * 16) * y + x
    30                              <1>         ;---------------------------------------
    31 000001DE 8B7D0C              <1>         mov     edi, [ebp +12]                  ;Y(行)
    32 000001E1 C1E708              <1>         shl     edi, 8                          ;EDI = Y * 256;
    33 000001E4 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]  ;EDI = Y * 4 + Y;
    34 000001EB 037D08              <1>         add     edi, [ebp + 8]                  ;X(列)
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;1文字文のフォントを出力
    38                              <1>         ;---------------------------------------
    39 000001EE 0FB75D10            <1>         movzx   ebx, word [ebp +16]             ; //表示色
    40                              <1> 
    41 000001F2 6A03E817FFFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;//読み込みプレーン:輝度(I)
    41 000001FB C404                <1>
    42 000001FD 6A08E829FFFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;//書き込みプレーン:輝度(I)
    42 00000206 C404                <1>
    43 00000208 536A085756E838FFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x08, ebx
    43 00000211 FF6683C410          <1>
    44                              <1>         
    45 00000216 6A02E8F3FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;//読み込みプレーン:赤(R)
    45 0000021F C404                <1>
    46 00000221 6A04E805FFFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;//書き込みプレーン:赤(R)
    46 0000022A C404                <1>
    47 0000022C 536A045756E814FFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x04, ebx
    47 00000235 FF6683C410          <1>
    48                              <1> 
    49 0000023A 6A01E8CFFEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;//読み込みプレーン:緑(G)
    49 00000243 C404                <1>
    50 00000245 6A02E8E1FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;//書き込みプレーン:緑(G)
    50 0000024E C404                <1>
    51 00000250 536A025756E8F0FEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x02, ebx
    51 00000259 FF6683C410          <1>
    52                              <1> 
    53 0000025E 6A00E8ABFEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;//読み込みプレーン:青(B)
    53 00000267 C404                <1>
    54 00000269 6A01E8BDFEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;//書き込みプレーン:青(B)
    54 00000272 C404                <1>
    55 00000274 536A015756E8CCFEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x01, ebx
    55 0000027D FF6683C410          <1>
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの復帰
    59                              <1>         ;---------------------------------------
    60 00000282 5E                  <1>         pop     esi
    61 00000283 5F                  <1>         pop     edi
    62 00000284 5B                  <1>         pop     ebx
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;スタックフレームの破棄
    66                              <1>         ;---------------------------------------
    67 00000285 89EC                <1>         mov     esp, ebp
    68 00000287 5D                  <1>         pop     ebp
    69                              <1> 
    70 00000288 C3                  <1>         ret
    97                                  %include        "..\modules\protect\draw_font.s"
     1                              <1> draw_font:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000289 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 0000028A 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 0000028C 50                  <1>         push    eax
    15 0000028D 53                  <1>         push    ebx
    16 0000028E 51                  <1>         push    ecx
    17 0000028F 57                  <1>         push    edi
    18 00000290 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 00000291 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 00000294 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;コピー先アドレスを取得
    28                              <1>         ;---------------------------------------
    29 00000297 B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 0000029C 81F900010000        <1> .10L:   cmp     ecx, 256                        ;    ECX < 256;
    31 000002A2 731F                <1>         jae     .10E                            ;
    32                              <1>                                                 ;    ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示する桁位置を計算
    36                              <1>         ;---------------------------------------
    37 000002A4 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 000002A6 83E00F              <1>         and     eax, 0x0F                       ;   EAX &= 0x0F;
    39 000002A9 01F0                <1>         add     eax, esi                        ;   EAX += X;
    40                              <1>         ;---------------------------------------
    41                              <1>         ;表示する行位置を計算
    42                              <1>         ;---------------------------------------
    43 000002AB 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    44 000002AD C1EB04              <1>         shr     ebx, 4                          ;   EBX /= 16;
    45 000002B0 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    46                              <1>         
    47 000002B2 516A075350E80FFFFF- <1>         cdecl   draw_char, eax, ebx, 0x07, ecx  ;   draw_char();
    47 000002BB FF6683C410          <1>
    48                              <1> 
    49 000002C0 41                  <1>         inc     ecx                             ;   //for(... ECX++)
    50 000002C1 EBD9                <1>         jmp     .10L                            ;
    51                              <1> .10E:                                           ;}
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;レジスタの復帰
    55                              <1>         ;---------------------------------------
    56 000002C3 5E                  <1>         pop     esi
    57 000002C4 5F                  <1>         pop     edi
    58 000002C5 59                  <1>         pop     ecx
    59 000002C6 5B                  <1>         pop     ebx
    60 000002C7 58                  <1>         pop     eax
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;スタックフレームの破棄
    64                              <1>         ;---------------------------------------
    65 000002C8 89EC                <1>         mov     esp, ebp
    66 000002CA 5D                  <1>         pop     ebp
    67                              <1> 
    68 000002CB C3                  <1>         ret
    98                                  %include        "..\modules\protect\draw_str.s"
     1                              <1> draw_str:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 000002CC 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 000002CD 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 000002CF 50                  <1>         push    eax
    15 000002D0 53                  <1>         push    ebx
    16 000002D1 51                  <1>         push    ecx
    17 000002D2 52                  <1>         push    edx
    18 000002D3 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 000002D4 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = 列;
    24 000002D7 8B550C              <1>         mov     edx, [ebp +12]                  ;EDX = 行;
    25 000002DA 0FB75D10            <1>         movzx   ebx, word [ebp + 16]            ;EBX = 表示色;
    26 000002DE 8B7514              <1>         mov     esi, [ebp +20]                  ;ESI = 文字列へのアドレス;
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字列を表示
    30                              <1>         ;---------------------------------------
    31 000002E1 FC                  <1>         cld                                     ;DF = 0; //アドレス加算
    32                              <1> .10L:                                           ;do
    33                              <1>                                                 ;{
    34 000002E2 AC                  <1>         lodsb                                   ;   AL = *ESI++;
    35 000002E3 3C00                <1>         cmp     al, 0                           ;   if(0 == AL)
    36 000002E5 7425                <1>         je  .10E                                ;       break;
    37                              <1> 
    38 000002E7 50535251E8DBFEFFFF- <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;   draw_char();
    38 000002F0 6683C410            <1>
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;文字の表示位置を更新
    42                              <1>         ;---------------------------------------
    43 000002F4 41                  <1>         inc     ecx                             ;   ECX++; //列を加算
    44 000002F5 83F950              <1>         cmp     ecx, 80                         ;   if(80 <= ECX) //80文字以上?
    45 000002F8 7C10                <1>         jl      .12E                            ;   {
    46 000002FA B900000000          <1>         mov     ecx, 0                          ;       ECX = 0; //列を初期化
    47 000002FF 42                  <1>         inc     edx                             ;       EDX++; //行を加算
    48 00000300 83FA1E              <1>         cmp     edx, 30                         ;       if(30 <= EDX) //30行以上?
    49 00000303 7C05                <1>         jl      .12E                            ;       {
    50 00000305 BA00000000          <1>         mov     edx, 0                          ;           EDX = 0;
    51                              <1>                                                 ;       }
    52                              <1> .12E:                                           ;   }
    53 0000030A EBD6                <1>         jmp     .10L                            ;
    54                              <1> .10E:                                           ;}while(1);
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;レジスタの復帰
    58                              <1>         ;---------------------------------------
    59 0000030C 5E                  <1>         pop     esi
    60 0000030D 5A                  <1>         pop     edx
    61 0000030E 59                  <1>         pop     ecx
    62 0000030F 5B                  <1>         pop     ebx
    63 00000310 58                  <1>         pop     eax
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;スタックフレームの破棄
    67                              <1>         ;---------------------------------------
    68 00000311 89EC                <1>         mov     esp, ebp
    69 00000313 5D                  <1>         pop     ebp
    70                              <1> 
    71 00000314 C3                  <1>         ret
    99                                  %include        "..\modules\protect\draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00000315 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00000316 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00000318 50                  <1>         push    eax
    15 00000319 53                  <1>         push    ebx
    16 0000031A 51                  <1>         push    ecx
    17 0000031B 52                  <1>         push    edx
    18 0000031C 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 0000031D 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 00000320 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;カラーバーを表示
    28                              <1>         ;---------------------------------------
    29 00000323 B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 00000328 83F910              <1> .10L:   cmp     ecx, 16                         ;    ECX < 16;
    31 0000032B 732E                <1>         jae     .10E
    32                              <1>                                                 ;ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示位置を計算(列)
    36                              <1>         ;---------------------------------------
    37 0000032D 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 0000032F 83E001              <1>         and     eax, 0x01                       ;   EAX &= 0x01;
    39 00000332 C1E003              <1>         shl     eax, 3                          ;   EAX *= 8; //8文字分乗算
    40 00000335 01F0                <1>         add     eax, esi                        ;   EAX += X;
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;表示位置を計算(行)
    44                              <1>         ;---------------------------------------
    45 00000337 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    46 00000339 D1EB                <1>         shr     ebx, 1                          ;   EBX /= 2;
    47 0000033B 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    48                              <1> 
    49                              <1>         ;---------------------------------------
    50                              <1>         ;描画色を計算
    51                              <1>         ;---------------------------------------
    52 0000033D 89CA                <1>         mov     edx, ecx                        ;   EDX = ECX;
    53 0000033F D1E2                <1>         shl     edx, 1                          ;   EDX *= 2;
    54 00000341 8B92[6D030000]      <1>         mov     edx, [.t0 + edx]                ;   EDX += Y;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;カラーバーを表示
    58                              <1>         ;---------------------------------------
    59 00000347 68[64030000]525350- <1>         cdecl   draw_str, eax, ebx, edx, .s0    ;   draw_str();
    59 0000034F E878FFFFFF6683C410  <1>
    60                              <1> 
    61 00000358 41                  <1>         inc     ecx                             ;   //for(...ECX++
    62 00000359 EBCD                <1>         jmp     .10L                            ;
    63                              <1> .10E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;レジスタの復帰
    67                              <1>         ;---------------------------------------
    68 0000035B 5E                  <1>         pop     esi
    69 0000035C 5A                  <1>         pop     edx
    70 0000035D 59                  <1>         pop     ecx
    71 0000035E 5B                  <1>         pop     ebx
    72 0000035F 58                  <1>         pop     eax
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;スタックフレームの破棄
    76                              <1>         ;---------------------------------------
    77 00000360 89EC                <1>         mov     esp, ebp
    78 00000362 5D                  <1>         pop     ebp
    79                              <1> 
    80 00000363 C3                  <1>         ret
    81                              <1> 
    82                              <1>         ;---------------------------------------
    83                              <1>         ;データ
    84                              <1>         ;---------------------------------------
    85 00000364 202020202020202000  <1> .s0:    db  '        ', 0                       ;8文字分のスペース(表示色だけを変更)
    86                              <1> 
    87 0000036D 00000008            <1> .t0:    dw  0x0000, 0x0800                      ;カラーバーの背景色
    88 00000371 00010009            <1>         dw  0x0100, 0x0900
    89 00000375 0002000A            <1>         dw  0x0200, 0x0A00
    90 00000379 0003000B            <1>         dw  0x0300, 0x0B00
    91 0000037D 0004000C            <1>         dw  0x0400, 0x0C00
    92 00000381 0005000D            <1>         dw  0x0500, 0x0D00
    93 00000385 0006000E            <1>         dw  0x0600, 0x0E00
    94 00000389 0007000F            <1>         dw  0x0700, 0x0F00
   100                                  %include        "..\modules\protect\draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +16| 色
     6                              <1>                                             ;   +12| Y(行)
     7                              <1>                                             ;   + 8| X(列)
     8                              <1>                                             ;   + 4| IP(戻り番号)
     9 0000038D 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    10 0000038E 89E5                <1>         mov    ebp, esp                     ;------|---------
    11                              <1> 
    12                              <1>         ;-----------------------------------
    13                              <1>         ;レジスタの保存
    14                              <1>         ;-----------------------------------
    15 00000390 50                  <1>         push    eax
    16 00000391 53                  <1>         push    ebx
    17 00000392 51                  <1>         push    ecx
    18 00000393 57                  <1>         push    edi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;描画位置のメモリアドレスを計算
    22                              <1>         ;---------------------------------------
    23                              <1>         ;---------------------------------------
    24                              <1>         ;Y座標を80倍する(640/8)
    25                              <1>         ;---------------------------------------
    26 00000394 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y座標;
    27 00000397 C1E704              <1>         shl     edi, 4                          ;EDI *= 16;
    28 0000039A 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000] ;EDI = 0xA_0000[EDI * 4 + EDI];
    29                              <1>         
    30                              <1>         ;---------------------------------------
    31                              <1>         ;X座標を1/8して加算
    32                              <1>         ;---------------------------------------
    33 000003A1 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;EBX = X座標;
    34 000003A4 89D9                <1>         mov     ecx, ebx                        ;ECX = X座標; //一時保存
    35 000003A6 C1EB03              <1>         shr     ebx, 3                          ;EBX /= 8;
    36 000003A9 01DF                <1>         add     edi, ebx                        ;EDI += EBX;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;X座標を8で割った余りからビット位置を計算(出力ビットパターン)
    40                              <1>         ;(0=0x80, 1=0x40,... 7=0x01)
    41                              <1>         ;---------------------------------------
    42 000003AB 83E107              <1>         and     ecx, 0x07                       ;ECX = X & 0x07;
    43 000003AE BB80000000          <1>         mov     ebx, 0x80                       ;EBX = 0x80;
    44 000003B3 D3EB                <1>         shr     ebx, cl                         ;EBX >>= ECX;
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;色を指定
    48                              <1>         ;---------------------------------------
    49 000003B5 8B4D10              <1>         mov     ecx, [ebp +16]                  ;表示色
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;プレーンごとに出力
    53                              <1>         ;---------------------------------------
    54 000003B8 6A03E851FDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;輝度(I)プレーンを選択
    54 000003C1 C404                <1>
    55 000003C3 6A08E863FDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;輝度(I)プレーンを選択
    55 000003CC C404                <1>
    56 000003CE 516A085753E8C5FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    56 000003D7 FF6683C410          <1>
    57                              <1> 
    58 000003DC 6A02E82DFDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;赤(R)プレーンを選択
    58 000003E5 C404                <1>
    59 000003E7 6A04E83FFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;赤(R)プレーンを選択
    59 000003F0 C404                <1>
    60 000003F2 516A045753E8A1FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    60 000003FB FF6683C410          <1>
    61                              <1> 
    62 00000400 6A01E809FDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;緑(G)プレーンを選択
    62 00000409 C404                <1>
    63 0000040B 6A02E81BFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;緑(G)プレーンを選択
    63 00000414 C404                <1>
    64 00000416 516A025753E87DFDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    64 0000041F FF6683C410          <1>
    65                              <1> 
    66 00000424 6A00E8E5FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;青(B)プレーンを選択
    66 0000042D C404                <1>
    67 0000042F 6A01E8F7FCFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;青(B)プレーンを選択
    67 00000438 C404                <1>
    68 0000043A 516A015753E859FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    68 00000443 FF6683C410          <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;レジスタの復帰
    72                              <1>         ;---------------------------------------
    73 00000448 5F                  <1>         pop     edi
    74 00000449 59                  <1>         pop     ecx
    75 0000044A 5B                  <1>         pop     ebx
    76 0000044B 58                  <1>         pop     eax
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 0000044C 89EC                <1>         mov     esp, ebp
    82 0000044E 5D                  <1>         pop     ebp
    83                              <1> 
    84 0000044F C3                  <1>         ret
   101                                  %include        "..\modules\protect\draw_line.s"
     1                              <1> draw_line:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000450 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000451 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;変数を定義
    16                              <1>         ;-----------------------------------
    17 00000453 6A00                <1>         push    dword 0                     ;   - 4| sum = 0; //相対軸の積算値
    18 00000455 6A00                <1>         push    dword 0                     ;   - 8| x0 = 0; //X座標
    19 00000457 6A00                <1>         push    dword 0                     ;   -12| dx = 0; //X増分
    20 00000459 6A00                <1>         push    dword 0                     ;   -16| inc_x = 0; //X座標増分(基準軸:1 or -1)
    21 0000045B 6A00                <1>         push    dword 0                     ;   -20| y0 = 0; //Y座標
    22 0000045D 6A00                <1>         push    dword 0                     ;   -24| dy = 0; //Y増分
    23 0000045F 6A00                <1>         push    dword 0                     ;   -28| inc_y = 0; //Y座標増分(基準軸:1 or -1)
    24                              <1> 
    25                              <1>         ;-----------------------------------
    26                              <1>         ;レジスタの保存
    27                              <1>         ;-----------------------------------
    28 00000461 50                  <1>         push    eax
    29 00000462 53                  <1>         push    ebx
    30 00000463 51                  <1>         push    ecx
    31 00000464 57                  <1>         push    edi
    32 00000465 52                  <1>         push    edx
    33 00000466 56                  <1>         push    esi
    34                              <1> 
    35                              <1>         ;---------------------------------------
    36                              <1>         ;幅を計算(X軸)
    37                              <1>         ;---------------------------------------
    38 00000467 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    39 0000046A 8B5D10              <1>         mov     ebx, [ebp +16]                  ;EBX = X1;
    40 0000046D 29C3                <1>         sub     ebx, eax                        ;EBX = X1 - X0; //幅
    41 0000046F 7D09                <1>         jge     .10F                            ;if(幅 < 0)
    42                              <1>                                                 ;{
    43 00000471 F7DB                <1>         neg     ebx                             ;   幅 *= -1;
    44 00000473 BEFFFFFFFF          <1>         mov     esi, -1                         ;   //X座標の増分
    45 00000478 EB05                <1>         jmp     .10E                            ;}
    46                              <1> .10F:                                           ;else
    47                              <1>                                                 ;{
    48 0000047A BE01000000          <1>         mov     esi, 1                          ;   //X座標の増分
    49                              <1> .10E:                                           ;}
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;高さを計算(Y軸)
    53                              <1>         ;---------------------------------------
    54 0000047F 8B4D0C              <1>         mov     ecx, [ebp +12]                  ;ECX = Y0;
    55 00000482 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    56 00000485 29CA                <1>         sub     edx, ecx                        ;EDX = Y1 - Y0; //高さ
    57 00000487 7D09                <1>         jge     .20F                            ;if(高さ < 0)
    58                              <1>                                                 ;{
    59 00000489 F7DA                <1>         neg     edx                             ;   高さ *= -1;
    60 0000048B BFFFFFFFFF          <1>         mov     edi, -1                         ;   //Y座標の増分
    61 00000490 EB05                <1>         jmp     .20E                            ;}
    62                              <1> .20F:                                           ;else
    63                              <1>                                                 ;{
    64 00000492 BF01000000          <1>         mov     edi, 1                          ;   //Y座標の増分
    65                              <1> .20E:                                           ;}
    66                              <1>         
    67                              <1>         ;---------------------------------------
    68                              <1>         ;X軸
    69                              <1>         ;---------------------------------------
    70 00000497 8945F8              <1>         mov     [ebp - 8], eax                  ;//X軸:開始座標
    71 0000049A 895DF4              <1>         mov     [ebp -12], ebx                  ;//X軸:描画幅
    72 0000049D 8975F0              <1>         mov     [ebp -16], esi                  ;//X軸:増分(基準軸:1 or -1)
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;Y軸
    76                              <1>         ;---------------------------------------
    77 000004A0 894DEC              <1>         mov     [ebp -20], ecx                  ;//Y軸:開始座標
    78 000004A3 8955E8              <1>         mov     [ebp -24], edx                  ;//Y軸:描画幅
    79 000004A6 897DE4              <1>         mov     [ebp -28], edi                  ;//Y軸:増分(基準軸:1 or -1)
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;基準軸を決める
    83                              <1>         ;---------------------------------------
    84 000004A9 39D3                <1>         cmp     ebx, edx                        ;if(幅 <= 高さ)
    85 000004AB 7F08                <1>         jg      .22F                            ;{
    86                              <1>         
    87 000004AD 8D75EC              <1>         lea     esi, [ebp -20]                  ;   //X軸が基準軸
    88 000004B0 8D7DF8              <1>         lea     edi, [ebp - 8]                  ;   //Y軸が相対軸
    89                              <1> 
    90 000004B3 EB06                <1>         jmp     .22E                            ;}
    91                              <1> .22F:                                           ;else
    92                              <1>                                                 ;{
    93 000004B5 8D75F8              <1>         lea     esi, [ebp - 8]                  ;   //Y軸が基準軸
    94 000004B8 8D7DEC              <1>         lea     edi, [ebp -20]                  ;   //X軸が相対軸
    95                              <1> .22E:                                           ;}
    96                              <1> 
    97                              <1>         ;---------------------------------------
    98                              <1>         ;繰り返し回数(基準軸のドット数)(基準軸の長さが0な場合,繰り返し回数を1に設定し,1ピクセルの点を描画)
    99                              <1>         ;---------------------------------------
   100 000004BB 8B4EFC              <1>         mov     ecx, [esi - 4]                  ;ECX = 基準軸描画幅
   101 000004BE 83F900              <1>         cmp     ecx, 0                          ;if(0 == ECX)
   102 000004C1 7505                <1>         jnz     .30E                            ;{
   103 000004C3 B901000000          <1>         mov     ecx, 1                          ;   ECX = 1;
   104                              <1> .30E:                                           ;}
   105                              <1> 
   106                              <1>         ;---------------------------------------
   107                              <1>         ;線を描画
   108                              <1>         ;---------------------------------------
   109                              <1> .50L:                                           ;do
   110                              <1>                                                 ;{
   113 000004C8 FF7518FF75ECFF75F8- <1>         cdecl   draw_pixel, dword [ebp - 8],                             dword [ebp -20],                             dword [ebp +24]     ;   //点の描画
   113 000004D1 E8B7FEFFFF6683C40C  <1>
   114                              <1> 
   115                              <1>         ;---------------------------------------
   116                              <1>         ;基準軸を更新
   117                              <1>         ;---------------------------------------
   118 000004DA 8B46F8              <1>         mov     eax, [esi - 8]                  ;   EAX = 基準軸増加(1 or -1);
   119 000004DD 0106                <1>         add     [esi - 0], eax                  ;
   120                              <1> 
   121                              <1>         ;---------------------------------------
   122                              <1>         ;相対軸を更新
   123                              <1>         ;---------------------------------------
   124 000004DF 8B45FC              <1>         mov     eax, [ebp - 4]                  ;   EAX = sum;  //相対軸の積算値
   125 000004E2 0347FC              <1>         add     eax, [edi - 4]                  ;   EAX += dy;  //増加(相対軸の描画幅)
   126                              <1> 
   127 000004E5 8B5EFC              <1>         mov     ebx, [esi - 4]                  ;   EBX = dx;   //増分(基準軸の描画幅)
   128                              <1> 
   129 000004E8 39D8                <1>         cmp     eax, ebx                        ;   if(積算値 <= 相対軸の増分)
   130 000004EA 7C07                <1>         jl      .52E                            ;   {
   131 000004EC 29D8                <1>         sub     eax, ebx                        ;       EAX -= EBX; //積算値から相対軸の増分を減算
   132                              <1>                                                 ;       //相対軸の座標を更新(1ドット分)
   133 000004EE 8B5FF8              <1>         mov     ebx, [edi - 8]                  ;       EBX = 相対軸増分;
   134 000004F1 011F                <1>         add     [edi - 0], ebx                  ;       相対軸座標 = EBX;
   135                              <1> .52E:                                           ;   }
   136                              <1> 
   137 000004F3 8945FC              <1>         mov     [ebp - 4], eax                  ;//積算値を更新
   138                              <1> 
   139 000004F6 E2D0                <1>         loop    .50L
   140                              <1> .50E:                                           ;} while(ループ回数--);
   141                              <1> 
   142                              <1>         ;---------------------------------------
   143                              <1>         ;レジスタの復帰
   144                              <1>         ;---------------------------------------
   145 000004F8 5E                  <1>         pop     esi
   146 000004F9 5A                  <1>         pop     edx
   147 000004FA 5F                  <1>         pop     edi
   148 000004FB 59                  <1>         pop     ecx
   149 000004FC 5B                  <1>         pop     ebx
   150 000004FD 58                  <1>         pop     eax
   151                              <1> 
   152                              <1>         ;---------------------------------------
   153                              <1>         ;スタックフレームの破棄
   154                              <1>         ;---------------------------------------
   155 000004FE 89EC                <1>         mov     esp, ebp
   156 00000500 5D                  <1>         pop     ebp
   157                              <1> 
   158 00000501 C3                  <1>         ret
   102                                  %include        "..\modules\protect\draw_rect.s"
     1                              <1> draw_rect:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000502 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00000503 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000505 50                  <1>         push    eax
    17 00000506 53                  <1>         push    ebx
    18 00000507 51                  <1>         push    ecx
    19 00000508 52                  <1>         push    edx
    20 00000509 56                  <1>         push    esi
    21                              <1> 
    22                              <1>         ;---------------------------------------
    23                              <1>         ;変数に引数を代入
    24                              <1>         ;---------------------------------------
    25 0000050A 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    26 0000050D 8B5D0C              <1>         mov     ebx, [ebp +12]                  ;EBX = Y0;
    27 00000510 8B4D10              <1>         mov     ecx, [ebp +16]                  ;ECX = X1;
    28 00000513 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    29 00000516 8B7518              <1>         mov     esi, [ebp +24]                  ;ESI = 色;
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;座標軸の大小を確定
    33                              <1>         ;---------------------------------------
    34 00000519 39C8                <1>         cmp     eax, ecx                        ;if(X1 < X0)
    35 0000051B 7C01                <1>         jl      .10E                            ;{
    36 0000051D 91                  <1>         xchg    eax, ecx                        ;   //X0とX1を入れ替える;
    37                              <1> .10E:                                           ;}
    38                              <1> 
    39 0000051E 39D3                <1>         cmp     ebx, edx                        ;if(Y1 < Y0)
    40 00000520 7C02                <1>         jl      .20E                            ;{
    41 00000522 87DA                <1>         xchg    ebx, edx                        ;   //Y0とY1を入れ替える;
    42                              <1> .20E:                                           ;}
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;矩形を描画
    46                              <1>         ;---------------------------------------
    47 00000524 5653515350E822FFFF- <1>         cdecl   draw_line, eax, ebx, ecx, ebx, esi  ;上線
    47 0000052D FF6683C414          <1>
    48 00000532 5652505350E814FFFF- <1>         cdecl   draw_line, eax, ebx, eax, edx, esi  ;左線
    48 0000053B FF6683C414          <1>
    49                              <1> 
    50 00000540 4A                  <1>         dec     edx                                 ;EDX--; //下線は1ドット上げる
    51 00000541 5652515250E805FFFF- <1>         cdecl   draw_line, eax, edx, ecx, edx, esi  ;下線
    51 0000054A FF6683C414          <1>
    52 0000054F 42                  <1>         inc     edx
    53                              <1> 
    54 00000550 49                  <1>         dec     ecx                                 ;ECX--; //右線は1ドット左に移動
    55 00000551 5652515351E8F5FEFF- <1>         cdecl   draw_line, ecx, ebx, ecx, edx, esi  ;右線
    55 0000055A FF6683C414          <1>
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの復帰
    59                              <1>         ;---------------------------------------
    60 0000055F 5E                  <1>         pop     esi
    61 00000560 5A                  <1>         pop     edx
    62 00000561 59                  <1>         pop     ecx
    63 00000562 5B                  <1>         pop     ebx
    64 00000563 58                  <1>         pop     eax
    65                              <1> 
    66                              <1>         ;---------------------------------------
    67                              <1>         ;スタックフレームの破棄
    68                              <1>         ;---------------------------------------
    69 00000564 89EC                <1>         mov     esp, ebp
    70 00000566 5D                  <1>         pop     ebp
    71                              <1> 
    72 00000567 C3                  <1>         ret
   103                                  %include        "..\modules\protect\itoa.s"
     1                              <1> itoa:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000568 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000569 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 0000056B 50                  <1>         push    eax
    18 0000056C 53                  <1>         push    ebx
    19 0000056D 51                  <1>         push    ecx
    20 0000056E 52                  <1>         push    edx
    21 0000056F 56                  <1>         push    esi
    22 00000570 57                  <1>         push    edi
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;引数の取得
    26                              <1>         ;---------------------------------------
    27 00000571 8B4508              <1>         mov     eax, [ebp + 8]                  ;eax(val) =  数値;
    28 00000574 8B750C              <1>         mov     esi, [ebp + 12]                 ;esi(dst) = バッファアドレス;
    29 00000577 8B4D10              <1>         mov     ecx, [ebp + 16]                 ;ecx(size) = バッファサイズ;
    30                              <1> 
    31 0000057A 89F7                <1>         mov     edi, esi                        ;edi = esi(dst); //バッファの最後尾
    32 0000057C 01CF                <1>         add     edi, ecx                        ;edi(dst) = edi + ecx - 1;
    33 0000057E 4F                  <1>         dec     edi
    34                              <1> 
    35 0000057F 8B5D18              <1>         mov     ebx, [ebp + 24]            ;flags = オプション;
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;符号付き判定
    39                              <1>         ;---------------------------------------
    40 00000582 F7C301000000        <1>         test    ebx, 0b0001                      ;if(flags & 0x01) //符号付き
    41 00000588 7408                <1> .10Q:   je      .10E                            ;{
    42 0000058A 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    43 0000058D 7D03                <1> .12Q:   jge     .12E                            ;   {
    44 0000058F 83CB02              <1>         or      ebx, 0b0010                     ;       flags |= 2; //符号表示
    45                              <1> .12E:                                           ;   }
    46                              <1> .10E:                                           ;}
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;符号付き判定
    50                              <1>         ;---------------------------------------
    51 00000592 F7C302000000        <1>         test    ebx, 0b0010                     ;if(flags & 0x02) //符号出力判定
    52 00000598 7410                <1> .20Q:   je      .20E                            ;{
    53 0000059A 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    54 0000059D 7D07                <1> .22Q:   jge     .22F                            ;   {
    55 0000059F F7D8                <1>         neg     eax                             ;       val *= -1; //符号反転
    56 000005A1 C6062D              <1>         mov     [esi], byte '-'                 ;       *dst = '-'; //符号表示
    57 000005A4 EB03                <1>         jmp     .22E                            ;   }
    58                              <1> .22F:                                           ;   else
    59                              <1>                                                 ;   {
    60 000005A6 C6062B              <1>         mov     [esi], byte '+'                 ;       *dst = '+'; //符号表示
    61                              <1> .22E:                                           ;   }
    62 000005A9 49                  <1>         dec     ecx                             ;   size--;     //残りバッファサイズの減算
    63                              <1> .20E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;ASCII変換
    67                              <1>         ;---------------------------------------
    68 000005AA 8B5D14              <1>         mov     ebx, [ebp + 20]                 ;BX = 基数;
    69                              <1> .30L:                                           ;do
    70                              <1>                                                 ;{
    71 000005AD BA00000000          <1>         mov     edx, 0                          ;
    72 000005B2 F7F3                <1>         div     ebx                             ;   DX = DX:AX % 基数;
    73                              <1>                                                 ;   AX = DX:AX / 基数;
    74                              <1>                                                 ;
    75 000005B4 89D6                <1>         mov     esi, edx                        ;   //テーブル参照
    76 000005B6 8A96[E1050000]      <1>         mov     dl, byte [.ascii + esi]         ;   DL = ASCII[DX]
    77                              <1>                                                 ;
    78 000005BC 8817                <1>         mov     [edi], dl                       ;   *dst = DL;
    79 000005BE 4F                  <1>         dec     edi                             ;   dst--;
    80                              <1>                                                 ;
    81 000005BF 83F800              <1>         cmp     eax, 0                          ;
    82 000005C2 E0E9                <1>         loopnz  .30L                            ;}while(AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;---------------------------------------
    86                              <1>         ;空欄を埋める
    87                              <1>         ;---------------------------------------
    88 000005C4 83F900              <1>         cmp     ecx, 0                          ;if(size)
    89 000005C7 740E                <1> .40Q:   je      .40E                            ;{
    90 000005C9 B020                <1>         mov     al, ' '                         ;       AL = ' '; // ' 'で埋める(デフォルト値)
    91 000005CB 66837D1804          <1>         cmp     [ebp + 24], word 0b0100         ;       if(flags & 0x04)
    92 000005D0 7502                <1> .42Q:   jne     .42E                            ;           {
    93 000005D2 B030                <1>         mov     al, '0'                         ;               AL = '0'; // '0'で埋める
    94                              <1> .42E:                                           ;           }
    95 000005D4 FD                  <1>         std                                     ;       // DF = 1(-方向)
    96 000005D5 F3AA                <1>         rep     stosb                           ;       while(--CX) *DI -- = AL;
    97                              <1> .40E:                                           ;}
    98                              <1>         
    99                              <1>         ;---------------------------------------
   100                              <1>         ;レジスタの復帰
   101                              <1>         ;---------------------------------------
   102 000005D7 5F                  <1>         pop     edi
   103 000005D8 5E                  <1>         pop     esi
   104 000005D9 5A                  <1>         pop     edx
   105 000005DA 59                  <1>         pop     ecx
   106 000005DB 5B                  <1>         pop     ebx
   107 000005DC 58                  <1>         pop     eax
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;スタックフレームの破棄
   111                              <1>         ;---------------------------------------
   112 000005DD 89EC                <1>         mov     esp, ebp
   113 000005DF 5D                  <1>         pop     ebp
   114                              <1> 
   115 000005E0 C3                  <1>         ret
   116                              <1> 
   117 000005E1 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   117 000005EA 39414243444546      <1>
   104                                  %include        "..\modules\protect\rtc.s"
     1                              <1> rtc_get_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 保存先アドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 000005F1 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 000005F2 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 000005F4 53                  <1>         push    ebx
    14                              <1> 
    15                              <1>         ;---------------------------------------
    16                              <1>         ;RTCから必要な情報を取得
    17                              <1>         ;---------------------------------------
    18 000005F5 B00A                <1>         mov     al, 0x0A                        ;//レジスタA
    19 000005F7 E670                <1>         out     0x70, al                        ;outp(0x70, AL);
    20 000005F9 E471                <1>         in      al, 0x71                        ;AL = レジスタA
    21 000005FB A880                <1>         test    al, 0x80                        ;if(UIP) //更新中
    22 000005FD 7407                <1>         je      .10F                            ;{
    23 000005FF B801000000          <1>         mov     eax, 1                          ;   return 0; //データ更新中
    24 00000604 EB27                <1>         jmp     .10E                            ;}
    25                              <1> .10F:                                           ;else
    26                              <1>                                                 ;{
    27 00000606 B004                <1>         mov     al, 0x04                        ;   AL = 0x04;
    28 00000608 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    29 0000060A E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //時データ
    30                              <1> 
    31 0000060C C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    32                              <1> 
    33 0000060F B002                <1>         mov     al, 0x02                        ;   AL = 0x02;
    34 00000611 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    35 00000613 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //分データ
    36                              <1> 
    37 00000615 C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    38                              <1> 
    39                              <1>                                                 ;   RAM[0x00]:秒
    40 00000618 B000                <1>         mov     al, 0x00                        ;   AL = 0x00;
    41 0000061A E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    42 0000061C E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //秒データ
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;有効なデータのみをアドレス先へ保存
    46                              <1>         ;---------------------------------------
    47 0000061E 25FFFFFF00          <1>         and     eax, 0x00_FF_FF_FF              ;//下位3バイトのみ有効
    48                              <1> 
    49 00000623 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;dst = 保存先;
    50 00000626 8903                <1>         mov     [ebx], eax                      ;[dst] = 時刻;
    51                              <1>         
    52 00000628 B801000000          <1>         mov     eax, 1                          ;   return 1; //正常終了
    53                              <1> .10E:                                           ;}
    54                              <1> 
    55                              <1>         ;---------------------------------------
    56                              <1>         ;レジスタの復帰
    57                              <1>         ;---------------------------------------
    58 0000062D 5B                  <1>         pop     ebx
    59                              <1> 
    60                              <1>         ;---------------------------------------
    61                              <1>         ;スタックフレームの破棄
    62                              <1>         ;---------------------------------------
    63 0000062E 89EC                <1>         mov     esp, ebp
    64 00000630 5D                  <1>         pop     ebp
    65                              <1> 
    66 00000631 C3                  <1>         ret
   105                                  %include        "..\modules\protect\draw_time.s"
     1                              <1> draw_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00000632 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00000633 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00000635 50                  <1>         push    eax
    18 00000636 53                  <1>         push    ebx
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;数字を文字に変換
    22                              <1>         ;---------------------------------------
    23 00000637 8B4514              <1>         mov     eax, [ebp +20]                  ;EAX = 時刻データ;
    24                              <1> 
    25 0000063A 0FB6D8              <1>         movzx   ebx, al                         ;EBX = 秒;
    26 0000063D 6A046A106A0268-     <1>         cdecl   itoa, ebx, .sec, 2, 16, 0b0100  ;//文字を変換
    26 00000644 [A4060000]53E81AFF- <1>
    26 0000064C FFFF6683C414        <1>
    27                              <1> 
    28 00000652 88E3                <1>         mov     bl, ah                          ;EBX = 分;
    29 00000654 6A046A106A0268-     <1>         cdecl   itoa, ebx, .min, 2, 16, 0b0100  ;//文字に変換
    29 0000065B [A1060000]53E803FF- <1>
    29 00000663 FFFF6683C414        <1>
    30                              <1> 
    31 00000669 C1E810              <1>         shr     eax, 16                         ;EBX = 時;
    32 0000066C 6A046A106A0268-     <1>         cdecl   itoa, eax, .hour, 2, 16, 0b0100 ;//文字に変換
    32 00000673 [9E060000]50E8EBFE- <1>
    32 0000067B FFFF6683C414        <1>
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;文字列を表示
    36                              <1>         ;---------------------------------------
    37 00000681 68[9E060000]FF7510- <1>         cdecl   draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    37 00000689 FF750CFF7508E838FC- <1>
    37 00000692 FFFF6683C410        <1>
    38                              <1>         
    39                              <1>         ;---------------------------------------
    40                              <1>         ;レジスタの復帰
    41                              <1>         ;---------------------------------------
    42 00000698 5B                  <1>         pop     ebx
    43 00000699 58                  <1>         pop     eax
    44                              <1> 
    45                              <1>         ;---------------------------------------
    46                              <1>         ;スタックフレームの破棄
    47                              <1>         ;---------------------------------------
    48 0000069A 89EC                <1>         mov     esp, ebp
    49 0000069C 5D                  <1>         pop     ebp
    50                              <1> 
    51 0000069D C3                  <1>         ret
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;データ
    55                              <1>         ;---------------------------------------
    56 0000069E 5A5A3A              <1>         .hour:  db  "ZZ:"
    57 000006A1 5A5A3A              <1>         .min:   db  "ZZ:"
    58 000006A4 5A5A00              <1>         .sec:   db  "ZZ", 0
   106                                  %include        "..\modules\protect\interrupt.s"
     1                              <1> int_stop:
     2 000006A7 FB                  <1>         sti                                     ;//割り込み許可
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;EAXで示される文字列を表示
     6                              <1>         ;---------------------------------------
     7 000006A8 50680F0600006A0F6A- <1>         cdecl   draw_str, 25, 15, 0x060F, eax   ;draw_str(EAX);
     7 000006B1 19E815FCFFFF6683C4- <1>
     7 000006BA 10                  <1>
     8                              <1>         
     9                              <1>         ;---------------------------------------
    10                              <1>         ;スタックのデータを文字列に変換
    11                              <1>         ;---------------------------------------
    12 000006BB 8B0424              <1>         mov     eax, [esp + 0]                  ;EAX = ESP[ 0];
    13 000006BE 6A046A106A0868-     <1>         cdecl   itoa, eax, .p1, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    13 000006C5 [83070000]50E899FE- <1>
    13 000006CD FFFF6683C414        <1>
    14                              <1> 
    15 000006D3 8B442404            <1>         mov     eax, [esp + 4]                  ;EAX = ESP[ 4];
    16 000006D7 6A046A106A0868-     <1>         cdecl   itoa, eax, .p2, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    16 000006DE [94070000]50E880FE- <1>
    16 000006E6 FFFF6683C414        <1>
    17                              <1> 
    18 000006EC 8B442408            <1>         mov     eax, [esp + 8]                  ;EAX = ESP[ 8];
    19 000006F0 6A046A106A0868-     <1>         cdecl   itoa, eax, .p3, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    19 000006F7 [A5070000]50E867FE- <1>
    19 000006FF FFFF6683C414        <1>
    20                              <1> 
    21 00000705 8B44240C            <1>         mov     eax, [esp +12]                  ;EAX = ESP[12];
    22 00000709 6A046A106A0868-     <1>         cdecl   itoa, eax, .p4, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    22 00000710 [B6070000]50E84EFE- <1>
    22 00000718 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;文字列の表示
    26                              <1>         ;---------------------------------------
    27 0000071E 68[7C070000]68040F- <1>         cdecl   draw_str, 25, 16, 0x0F04, .s1,  ;draw_str("ESP+ 0:-------- ");
    27 00000726 00006A106A19E89BFB- <1>
    27 0000072F FFFF6683C410        <1>
    28 00000735 68[8D070000]68040F- <1>         cdecl   draw_str, 25, 17, 0x0F04, .s2   ;draw_str("   + 4:-------- ");
    28 0000073D 00006A116A19E884FB- <1>
    28 00000746 FFFF6683C410        <1>
    29 0000074C 68[9E070000]68040F- <1>         cdecl   draw_str, 25, 18, 0x0F04, .s3,  ;draw_str("   + 8:-------- ");
    29 00000754 00006A126A19E86DFB- <1>
    29 0000075D FFFF6683C410        <1>
    30 00000763 68[AF070000]68040F- <1>         cdecl   draw_str, 25, 19, 0x0F04, .s4   ;draw_str("   +12:-------- ");        
    30 0000076B 00006A136A19E856FB- <1>
    30 00000774 FFFF6683C410        <1>
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;無限ループ
    34                              <1>         ;---------------------------------------
    35 0000077A EBFE                <1>         jmp     $                               ;while(1); //無限ループ
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;データ
    39                              <1>         ;---------------------------------------
    40 0000077C 4553502B20303A      <1> .s1:    db  "ESP+ 0:"
    41 00000783 2D2D2D2D2D2D2D2D20- <1> .p1:    db  "-------- ", 0
    41 0000078C 00                  <1>
    42 0000078D 2020202B20343A      <1> .s2:    db  "   + 4:"
    43 00000794 2D2D2D2D2D2D2D2D20- <1> .p2:    db  "-------- ", 0
    43 0000079D 00                  <1>
    44 0000079E 2020202B20383A      <1> .s3:    db  "   + 8:"
    45 000007A5 2D2D2D2D2D2D2D2D20- <1> .p3:    db  "-------- ", 0
    45 000007AE 00                  <1>
    46 000007AF 2020202B31323A      <1> .s4:    db  "   +12:"
    47 000007B6 2D2D2D2D2D2D2D2D20- <1> .p4:    db  "-------- ", 0
    47 000007BF 00                  <1>
    48                              <1> 
    49                              <1> int_default:
    50                              <1>         ;---------------------------------------
    51                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
    52                              <1>         ;---------------------------------------
    53 000007C0 9C                  <1>         pushf                                   ;//EFLAGS(IF=0)
    54 000007C1 0E                  <1>         push    cs                              ;//cs
    55 000007C2 68[A7060000]        <1>         push    int_stop                        ;//スタック表示処理
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み種別を登録して復帰
    59                              <1>         ;---------------------------------------
    60 000007C7 B8[CD070000]        <1>         mov     eax, .s0                        ;//割り込み種別
    61 000007CC CF                  <1>         iret                                    ;スタックされている場所に復帰
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;データ
    65                              <1>         ;---------------------------------------
    66 000007CD 203C2020202053544F- <1> .s0:    db  " <    STOP    > ", 0
    66 000007D6 50202020203E2000    <1>
    67                              <1> 
    68                              <1> ;********************************************************************************************************
    69                              <1> ;割り込みベクタの初期化
    70                              <1> ;********************************************************************************************************
    71 000007DE 90<rept>            <1> ALIGN   4
    72 000007E0 FF07                <1> IDTR:   dw      8 * 256 - 1                     ;idt_limit
    73 000007E2 00001000            <1>         dd      VECT_BASE                       ;idt_location
    74                              <1> 
    75                              <1> ;********************************************************************************************************
    76                              <1> ;割り込みテーブルを初期化
    77                              <1> ;********************************************************************************************************
    78                              <1> init_int:
    79                              <1>         ;---------------------------------------
    80                              <1>         ;レジスタの保存
    81                              <1>         ;---------------------------------------
    82 000007E6 50                  <1>         push    eax
    83 000007E7 53                  <1>         push    ebx
    84 000007E8 51                  <1>         push    ecx
    85 000007E9 57                  <1>         push    edi
    86                              <1> 
    87                              <1>         ;---------------------------------------
    88                              <1>         ;全ての割り込みにデフォルト処理を設定
    89                              <1>         ;---------------------------------------
    90 000007EA 8D05[C0070000]      <1>         lea     eax, [int_default]              ;EAX = 割り込み処理アドレス;
    91 000007F0 BB008E0800          <1>         mov     ebx, 0x0008_8E00                ;EBX = セグメントセレクタ;
    92 000007F5 6693                <1>         xchg    ax, bx                          ;//下位ワード(2バイト)を交換(割り込みゲートディスクリプタの形式に合わせる)
    93                              <1> 
    94 000007F7 B900010000          <1>         mov     ecx, 256                        ;ECX = 割り込みベクタ数
    95 000007FC BF00001000          <1>         mov     edi, VECT_BASE                  ;EDI = 割り込みベクタテーブル
    96                              <1> 
    97                              <1> .10L:                                           ;do
    98                              <1>                                                 ;{
    99 00000801 891F                <1>         mov     [edi + 0], ebx                  ;       [EDI + 0] = 割り込みディスクリプタ(下位)
   100 00000803 894704              <1>         mov     [edi + 4], eax                  ;       [EDI + 4] = 割り込みディスクリプタ(上位)
   101 00000806 83C708              <1>         add     edi, 8                          ;       EDI += 8;
   102 00000809 E2F6                <1>         loop    .10L                            ;}while(ECX--);
   103                              <1> 
   104                              <1>         ;---------------------------------------
   105                              <1>         ;割り込みディスクリプタの設定
   106                              <1>         ;---------------------------------------
   107 0000080B 0F011D[E0070000]    <1>         lidt    [IDTR]                          ;//割り込みディスクリプタテーブルをロード
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;データ
   111                              <1>         ;---------------------------------------
   112 00000812 5F                  <1>         pop     edi
   113 00000813 59                  <1>         pop     ecx
   114 00000814 5B                  <1>         pop     ebx
   115 00000815 58                  <1>         pop     eax
   116                              <1> 
   117 00000816 C3                  <1>         ret
   118                              <1> 
   119                              <1> int_zero_div:
   120                              <1>         ;---------------------------------------
   121                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
   122                              <1>         ;---------------------------------------
   123 00000817 9C                  <1>         pushf                                   ;//EFLAGS
   124 00000818 0E                  <1>         push    cs                              ;//CS
   125 00000819 68[A7060000]        <1>         push    int_stop                        ;//スタック表示処理
   126                              <1> 
   127                              <1>         ;---------------------------------------
   128                              <1>         ;割り込み種別を登録して復帰
   129                              <1>         ;---------------------------------------
   130 0000081E B8[24080000]        <1>         mov     eax, .s0                        ;//割り込み種別
   131 00000823 CF                  <1>         iret
   132                              <1> 
   133 00000824 203C20205A45524F20- <1> .s0:    db      " <  ZERO DIV  > ", 0
   133 0000082D 44495620203E2000    <1>
   107                                  %include        "..\modules\protect\pic.s"
     1                              <1> init_pic:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000835 50                  <1>         push    eax
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;マスタの設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x20, 0x11                      ;//MASTER.ICW1 = 0x11;
    10 00000836 B011                <2>  mov al, %2
    10 00000838 E620                <2>  out %1, al
    11                              <1>         outp    0x21, 0x20                      ;//MASTER.ICW2 = 0x20;
    11 0000083A B020                <2>  mov al, %2
    11 0000083C E621                <2>  out %1, al
    12                              <1>         outp    0x21, 0x04                      ;//MASTER.ICW3 = 0x04;
    12 0000083E B004                <2>  mov al, %2
    12 00000840 E621                <2>  out %1, al
    13                              <1>         outp    0x21, 0x05                      ;//MASTER.ICW4 = 0x05;
    13 00000842 B005                <2>  mov al, %2
    13 00000844 E621                <2>  out %1, al
    14                              <1>         outp    0x21, 0xEF                      ;//マスタ割り込みマスク
    14 00000846 B0EF                <2>  mov al, %2
    14 00000848 E621                <2>  out %1, al
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;スレーブの設定
    18                              <1>         ;---------------------------------------
    19                              <1>         outp    0xA0, 0x11                      ;//SLAVE.ICW1 = 0x11;
    19 0000084A B011                <2>  mov al, %2
    19 0000084C E6A0                <2>  out %1, al
    20                              <1>         outp    0xA1, 0x28                      ;//SLAVE.ICW2 = 0x28;
    20 0000084E B028                <2>  mov al, %2
    20 00000850 E6A1                <2>  out %1, al
    21                              <1>         outp    0xA1, 0x02                      ;//SLAVE.ICW3 = 0x02;
    21 00000852 B002                <2>  mov al, %2
    21 00000854 E6A1                <2>  out %1, al
    22                              <1>         outp    0xA1, 0x01                      ;//SLAVE.ICW4 = 0x01;
    22 00000856 B001                <2>  mov al, %2
    22 00000858 E6A1                <2>  out %1, al
    23                              <1>         outp    0xA1, 0xEF                      ;//マスタ割り込みマスク
    23 0000085A B0EF                <2>  mov al, %2
    23 0000085C E6A1                <2>  out %1, al
    24                              <1> 
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 0000085E 58                  <1>         pop     eax
    29                              <1> 
    30 0000085F C3                  <1>         ret
   108                                  %include        "..\modules\protect\int_rtc.s"
     1                              <1> int_rtc:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000860 60                  <1>         pusha
     6 00000861 1E                  <1>         push    ds
     7 00000862 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントセレクタの設定
    11                              <1>         ;---------------------------------------
    12 00000863 66B81000            <1>         mov     ax, 0x0010
    13 00000867 8ED8                <1>         mov     ds, ax
    14 00000869 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;RTCから時刻を取得
    18                              <1>         ;---------------------------------------
    19 0000086B 68[0C010000]E87CFD- <1>         cdecl   rtc_get_time, RTC_TIME          ;EAX = get_time(&RTC_TIME);
    19 00000873 FFFF6683C404        <1>
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;RTCの割り込み要因を取得
    23                              <1>         ;---------------------------------------
    24                              <1>         outp    0x70, 0x0C                      ;outp(0x70, 0x0C); //レジスタCを選択
    24 00000879 B00C                <2>  mov al, %2
    24 0000087B E670                <2>  out %1, al
    25 0000087D E471                <1>         in      al, 0x71                        ;AL = port(0x71);
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;割り込みフラグをクリア(EOI)
    29                              <1>         ;---------------------------------------
    30 0000087F B020                <1>         mov     al, 0x20                        ;AL = EOIコマンド;
    31 00000881 E6A0                <1>         out     0xA0, al                        ;outp(0xA0, AL); //スレーブPIC
    32 00000883 E620                <1>         out     0x20, al                        ;outp(0x20, AL); //マスタPIC
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;レジスタの復帰
    36                              <1>         ;---------------------------------------
    37 00000885 07                  <1>         pop     es
    38 00000886 1F                  <1>         pop     ds
    39 00000887 61                  <1>         popa
    40                              <1> 
    41 00000888 CF                  <1>         iret                                    ;割り込み処理の終了
    42                              <1> 
    43                              <1> rtc_int_en:
    44                              <1>         ;-----------------------------------
    45                              <1>         ;スタックフレームの構築
    46                              <1>         ;-----------------------------------
    47                              <1>                                             ;   + 8| 指定されたビット
    48                              <1>                                             ;   + 4| IP(戻り番号)
    49 00000889 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    50 0000088A 89E5                <1>         mov     ebp, esp                    ;------|---------
    51                              <1> 
    52                              <1>         ;---------------------------------------
    53                              <1>         ;レジスタの保存
    54                              <1>         ;---------------------------------------
    55 0000088C 50                  <1>         push    eax
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み許可認定(RTCの内部レジスタBのUIE(更新終了割り込み許可)ビットをセット)
    59                              <1>         ;---------------------------------------
    60                              <1>         outp    0x70, 0x0B                      ;outp(0x70, AL); //レジスタBを選択
    60 0000088D B00B                <2>  mov al, %2
    60 0000088F E670                <2>  out %1, al
    61                              <1> 
    62 00000891 E471                <1>         in      al, 0x71                        ;AL = port(0x71); //レジスタBの
    63 00000893 0A4508              <1>         or      al, [ebp + 8]                   ;AL |= ビット; //指定されたビットをセット
    64                              <1> 
    65 00000896 E671                <1>         out     0x71, al                        ;outp(0x71, AL); //レジスタBに書き込み
    66                              <1> 
    67                              <1>         ;---------------------------------------
    68                              <1>         ;レジスタの復帰
    69                              <1>         ;---------------------------------------
    70 00000898 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 00000899 89EC                <1>         mov     esp, ebp
    76 0000089B 5D                  <1>         pop     ebp
    77                              <1> 
    78 0000089C C3                  <1>         ret
   109                                  %include        "..\modules\protect\ring_buff.s"
     1                              <1> ring_rd:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| 読み込んだデータの保存先アドレス
     6                              <1>                                             ;   + 8| リングバッファ
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 0000089D 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
     9 0000089E 89E5                <1>         mov     ebp, esp                    ;------|---------
    10                              <1> 
    11                              <1>         ;---------------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;---------------------------------------
    14 000008A0 60                  <1>         pusha
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;引数を取得
    18                              <1>         ;---------------------------------------
    19 000008A1 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    20 000008A4 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = データアドレス;
    21                              <1>         
    22                              <1>         ;---------------------------------------
    23                              <1>         ;読み込み位置を確認
    24                              <1>         ;---------------------------------------
    25 000008A7 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    26 000008AC 8B1E                <1>         mov     ebx, [esi + ring_buff.rp]       ;EBX = rp; //読み込み位置
    27 000008AE 3B5E04              <1>         cmp     ebx, [esi + ring_buff.wp]       ;if(EBX != wp) //書き込み位置と異なる
    28 000008B1 7411                <1>         je      .10E                            ;{
    29                              <1>         
    30 000008B3 8A441E08            <1>         mov     al, [esi + ring_buff.item + ebx];   AL = BUFF[rp]; //キーコードを保存
    31                              <1> 
    32 000008B7 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //データを保存
    33                              <1> 
    34 000008B9 43                  <1>         inc     ebx                             ;   EBX++; //次の読み込み位置
    35 000008BA 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= 0x0F; //サイズの制限
    36 000008BD 891E                <1>         mov     [esi + ring_buff.rp], ebx       ;   wp = EBX; //読み込み位置を保存
    37                              <1> 
    38 000008BF B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //データあり
    39                              <1> .10E:                                           ;}
    40                              <1> 
    41                              <1>         ;---------------------------------------
    42                              <1>         ;レジスタの復帰
    43                              <1>         ;---------------------------------------
    44 000008C4 61                  <1>         popa
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;スタックフレームの破棄
    48                              <1>         ;---------------------------------------
    49 000008C5 89EC                <1>         mov     esp, ebp
    50 000008C7 5D                  <1>         pop     ebp
    51                              <1> 
    52 000008C8 C3                  <1>         ret
    53                              <1> 
    54                              <1> ring_wr:
    55                              <1>         ;-----------------------------------
    56                              <1>         ;スタックフレームの構築
    57                              <1>         ;-----------------------------------
    58                              <1>                                             ;   +12| 書き込むデータ
    59                              <1>                                             ;   + 8| リングバッファ
    60                              <1>                                             ;   + 4| IP(戻り番号)
    61 000008C9 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    62 000008CA 89E5                <1>         mov     ebp, esp                    ;------|---------
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;レジスタの保存
    66                              <1>         ;---------------------------------------
    67 000008CC 60                  <1>         pusha
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;引数を取得
    71                              <1>         ;---------------------------------------
    72 000008CD 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    73                              <1>         
    74                              <1>         ;---------------------------------------
    75                              <1>         ;書き込み位置を確認
    76                              <1>         ;---------------------------------------
    77 000008D0 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    78 000008D5 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
    79 000008D8 89D9                <1>         mov     ecx, ebx                        ;ECX = EBX;
    80 000008DA 41                  <1>         inc     ecx                             ;ECX++;
    81 000008DB 83E10F              <1>         and     ecx, RING_INDEX_MASK            ;ECX &= 0x0F //サイズの制限
    82                              <1>         
    83 000008DE 3B0E                <1>         cmp     ecx, [esi + ring_buff.rp]       ;if(ECX != rp) //読み込み位置と異なる
    84 000008E0 740F                <1>         je      .10E                            ;{
    85                              <1>         
    86 000008E2 8A450C              <1>         mov     al, [ebp +12]                   ;   AL = データ;
    87                              <1> 
    88 000008E5 88441E08            <1>         mov     [esi + ring_buff.item + ebx], al;   BUFF[wp] = AL; //キーコードを保存
    89 000008E9 894E04              <1>         mov     [esi + ring_buff.wp], ecx       ;   wp = ECX; //書き込み位置を保存
    90 000008EC B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //成功
    91                              <1> .10E:                                           ;}
    92                              <1> 
    93                              <1>         ;---------------------------------------
    94                              <1>         ;レジスタの復帰
    95                              <1>         ;---------------------------------------
    96 000008F1 61                  <1>         popa
    97                              <1>         
    98                              <1>         ;---------------------------------------
    99                              <1>         ;スタックフレームの破棄
   100                              <1>         ;---------------------------------------
   101 000008F2 89EC                <1>         mov     esp, ebp
   102 000008F4 5D                  <1>         pop     ebp
   103                              <1> 
   104 000008F5 C3                  <1>         ret
   105                              <1> 
   106                              <1> draw_key:
   107                              <1>         ;-----------------------------------
   108                              <1>         ;スタックフレームの構築
   109                              <1>         ;-----------------------------------
   110                              <1>                                             ;   +16| リングブッファ
   111                              <1>                                             ;   +12| Y(行)
   112                              <1>                                             ;   + 8| X(列)
   113                              <1>                                             ;   + 4| IP(戻り番号)
   114 000008F6 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
   115 000008F7 89E5                <1>         mov     ebp, esp                    ;------|---------
   116                              <1> 
   117                              <1>         ;---------------------------------------
   118                              <1>         ;レジスタの保存
   119                              <1>         ;---------------------------------------
   120 000008F9 60                  <1>         pusha
   121                              <1> 
   122                              <1>         ;---------------------------------------
   123                              <1>         ;引数を取得
   124                              <1>         ;---------------------------------------
   125 000008FA 8B7508              <1>         mov     esi, [ebp + 8]                  ;EDX = X(列);
   126 000008FD 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行);
   127 00000900 8B7510              <1>         mov     esi, [ebp +16]                  ;ESI = リングブッファ;
   128                              <1>         
   129                              <1>         ;---------------------------------------
   130                              <1>         ;リングブッファの情報を取得
   131                              <1>         ;---------------------------------------
   132 00000903 8B1E                <1>         mov     ebx, [esi + ring_buff.rp]       ;EBX = wp; //書き込み位置
   133 00000905 8D7608              <1>         lea     esi, [esi + ring_buff.item]     ;ESI = &KEY_BUFF[EBX];
   134 00000908 B910000000          <1>         mov     ecx, RING_ITEM_SIZE             ;ECX = RING_ITEM_SIZE; //要素数
   135                              <1> 
   136                              <1> .10L:                                           ;do
   137                              <1>                                                 ;{
   138 0000090D 4B                  <1>         dec     ebx                             ;   EBX--;
   139 0000090E 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= RING_INDEX_MASK;
   140 00000911 8A041E              <1>         mov     al, [esi + ebx]                 ;   EAX = KEY_BUFF[EBX];
   141                              <1> 
   142 00000914 6A046A106A0268-     <1>         cdecl   itoa, eax, .tmp, 2, 16, 0b0100  ;   //キーコードを文字列に変換
   142 0000091B [45090000]50E843FC- <1>
   142 00000923 FFFF6683C414        <1>
   143 00000929 68[45090000]6A0257- <1>         cdecl   draw_str, edx, edi, 0x02, .tmp  ;   //変換した文字列を表示
   143 00000931 52E895F9FFFF6683C4- <1>
   143 0000093A 10                  <1>
   144                              <1> 
   145 0000093B 83C203              <1>         add     edx, 3                          ;   //表示位置を更新(3文字分)
   146                              <1> 
   147 0000093E E2CD                <1>         loop    .10L
   148                              <1> .10E:                                           ;}while(ECX--);        
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;レジスタの復帰
   152                              <1>         ;---------------------------------------
   153 00000940 61                  <1>         popa
   154                              <1>         
   155                              <1>         ;---------------------------------------
   156                              <1>         ;スタックフレームの破棄
   157                              <1>         ;---------------------------------------
   158 00000941 89EC                <1>         mov     esp, ebp
   159 00000943 5D                  <1>         pop     ebp
   160                              <1> 
   161 00000944 C3                  <1>         ret
   162                              <1> 
   163                              <1>         ;---------------------------------------
   164                              <1>         ;データ
   165                              <1>         ;---------------------------------------
   166 00000945 2D2D2000            <1> .tmp    db  "-- ", 0
   110                                  %include        "..\modules\protect\int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000949 60                  <1>         pusha
     6 0000094A 1E                  <1>         push    ds
     7 0000094B 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 0000094C 66B81000            <1>         mov     ax, 0x0010
    13 00000950 8ED8                <1>         mov     ds, ax
    14 00000952 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;KBCのブッファ読み取り
    18                              <1>         ;---------------------------------------
    19 00000954 E460                <1>         in      al, 0x60                        ; AL = キーコードの取得
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;キーコードの保存
    23                              <1>         ;---------------------------------------
    24 00000956 5068[70090000]E868- <1>         cdecl   ring_wr, _KEY_BUFF, eax         ;ring_wr(_KEY_BUFF, EAX); //キーコードの保存
    24 0000095E FFFFFF6683C408      <1>
    25                              <1>         
    26                              <1>         ;---------------------------------------
    27                              <1>         ;割り込み終了コマンド送信
    28                              <1>         ;---------------------------------------
    29                              <1>         outp    0x20, 0x20                      ;outp(); //マスタPIC:EOIコマンド
    29 00000965 B020                <2>  mov al, %2
    29 00000967 E620                <2>  out %1, al
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;レジスタの復帰
    33                              <1>         ;---------------------------------------
    34 00000969 07                  <1>         pop     es
    35 0000096A 1F                  <1>         pop     ds
    36 0000096B 61                  <1>         popa
    37                              <1> 
    38 0000096C CF                  <1>         iret                                    ;割り込みからの復帰
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;データ
    42                              <1>         ;---------------------------------------
    43                              <1> 
    44 0000096D 00<rept>            <1> ALIGN   4, db   0
    45 00000970 00<rept>            <1> _KEY_BUFF:  times   ring_buff_size  db  0
   111                                  
   112                                  ;********************************************************************************************************
   113                                  ;パディング
   114                                  ;********************************************************************************************************
   115 00000988 00<rept>                        times KERNEL_SIZE - ($ - $$)    db 0    ;パディング
