draw_str:
        ;-----------------------------------
        ;スタックフレームの構築
        ;-----------------------------------
                                            ;   +12| Y(行)
                                            ;   + 8| X(列)
                                            ;   + 4| IP(戻り番号)
        push   ebp                          ;EBP+ 0| EBP(元の値)
        mov    ebp, esp                     ;------|---------

        ;-----------------------------------
        ;レジスタの保存
        ;-----------------------------------
        push    eax
        push    ebx
        push    ecx
        push    edx
        push    esi

        ;---------------------------------------
        ;引数を変数に代入
        ;---------------------------------------
        mov     ecx, [ebp + 8]                  ;ECX = 列;
        mov     edx, [ebp +12]                  ;EDX = 行;
        movzx   ebx, word [ebp + 16]            ;EBX = 表示色;
        mov     esi, [ebp +20]                  ;ESI = 文字列へのアドレス;

        ;---------------------------------------
        ;文字列を表示
        ;---------------------------------------
        cld                                     ;DF = 0; //アドレス加算
.10L:                                           ;do
                                                ;{
        lodsb                                   ;   AL = *ESI++;
        cmp     al, 0                           ;   if(0 == AL)
        je  .10E                                ;       break;

        ;---------------------------------------
        ;システムコールを利用して文字を出力する
        ;---------------------------------------
%ifdef  USE_SYSTEM_CALL
        int     0x81                            ;       sys_call(1, X, Y, 色, 文字);
%else
        cdecl   draw_char, ecx, edx, ebx, eax   ;       draw_char();
%endif

        ;---------------------------------------
        ;文字の表示位置を更新
        ;---------------------------------------
        inc     ecx                             ;   ECX++; //列を加算
        cmp     ecx, 80                         ;   if(80 <= ECX) //80文字以上?
        jl      .12E                            ;   {
        mov     ecx, 0                          ;       ECX = 0; //列を初期化
        inc     edx                             ;       EDX++; //行を加算
        cmp     edx, 30                         ;       if(30 <= EDX) //30行以上?
        jl      .12E                            ;       {
        mov     edx, 0                          ;           EDX = 0;
                                                ;       }
.12E:                                           ;   }
        jmp     .10L                            ;
.10E:                                           ;}while(1);

        ;---------------------------------------
        ;レジスタの復帰
        ;---------------------------------------
        pop     esi
        pop     edx
        pop     ecx
        pop     ebx
        pop     eax

        ;---------------------------------------
        ;スタックフレームの破棄
        ;---------------------------------------
        mov     esp, ebp
        pop     ebp

        ret