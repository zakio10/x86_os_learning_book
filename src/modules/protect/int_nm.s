get_tss_base:
        ;---------------------------------------
        ;TSSセレクタで指定されているTSSディスクリプタからTSSベースアドレスを取得し、EAXに代入。
        ;---------------------------------------
        mov     eax, [GDT + ebx + 2]            ;EAX = TSS[23:0];
        shl     eax, 8                          ;EAX << 8;
        mov     al, [GDT + ebx + 7]             ;AL = TSS[31:24];
        ror     eax, 8                          ;EAX >>= 8; //循環

        ret

save_fpu_context:
        ;---------------------------------------
        ;EAXレジスタに設定されたTSSディスクリプタのベースアドレスを参照して、FPUコンテキストを保存し、保存済みフラグをセット。
        ;---------------------------------------
        fnsave  [eax + 104]                     ;//FPUコンテキストを保存
        mov     [eax + 104 + 108], dword 1      ;saved = 1; //フラグをセット

        ret

load_fpu_context:
        ;---------------------------------------
        ;FPUコンテキストを復帰する。保存済みフラグがセットされていなければFPUを初期化する。
        ;---------------------------------------
        cmp     [eax + 104 + 108], dword 0      ;if(0 == saved)
        jne     .10F                            ;{
        fninit                                  ;   //FPUの初期化
        jmp     .10E                            ;}
.10F:                                           ;else
                                                ;{
        frstor  [eax + 104]                     ;   //FPUコンテキストを復帰
.10E:                                           ;}

        ret

int_nm:
        ;-----------------------------------
        ;レジスタの保存
        ;-----------------------------------
        pusha
        push    ds
        push    es

        ;---------------------------------------
        ;カーネル用セレクタを設定
        ;---------------------------------------
        mov     ax, DS_KERNEL                   ;0x10と同じ
        mov     ds, ax
        mov     es, ax
        
        ;---------------------------------------
        ;タスクスイッチフラグをクリア
        ;---------------------------------------
        clts                                    ;CR0.TS = 0;

        ;---------------------------------------
        ;前回/今回FPUを使用するタスク
        ;---------------------------------------
        mov     edi, [.last_tss]                ;EDI = 前回FPUを使用したタスクのTSS
        str     esi                             ;ESI = 今回FPUを使用したタスクのTSS
        and     esi, ~0x0007                    ;//特権レベルとTI(Table Indicator:テーブル指定)bitをマスクして除外

        ;---------------------------------------
        ;FPUの初回利用をチェック
        ;---------------------------------------
        cmp     edi, 0                          ;if(0 != EDI) //前回使用したタスク
        je      .10F                            ;{
        
        cmp     esi, edi                        ;   if(ESI != EDI) //異なるタスク
        je      .12E                            ;   {
        
        cli                                     ;       //割り込み禁止

        ;---------------------------------------
        ;前回のFPUコンテキストを保存
        ;---------------------------------------
        mov     ebx, edi                        ;       EBX = EDI; //前回のタスク
        call    get_tss_base                    ;       EAX = get_tss_base(TSSセレクタインデックス(前回)); //TSSアドレスを取得
        call    save_fpu_context                ;       save_fpu_context(); //FPUコンテキスを保存

        ;---------------------------------------
        ;今回のFPUコンテキストを復帰
        ;---------------------------------------
        mov     ebx, esi                        ;       EBX = ESI; //今回のタスク
        call    get_tss_base                    ;       EAX = get_tss_base(TSSセレクタインデックス(今回)); //TSSアドレスを取得
        call    load_fpu_context                ;       load_fpu_context(); //FPUコンテキスを復帰

        sti                                     ;       //割り込み許可
.12E:                                           ;   }
        jmp     .10E                            ;}
.10F:                                           ;else
                                                ;{
        
        cli                                     ;   //割り込み禁止

        ;---------------------------------------
        ;今回のFPUコンテキストを復帰
        ;---------------------------------------
        mov     ebx, esi                        ;   EBX = ESI; //今回のタスク
        call    get_tss_base                    ;   EAX = get_tss_base(TSSセレクタインデックス(今回)); //TSSアドレスを取得
        call    load_fpu_context                ;   load_fpu_context(); //FPUコンテキスを復帰

        sti                                     ;   //割り込み許可
.10E:                                           ;}

        mov     [.last_tss], esi                ;//FPUを使用したタスクを保存

        ;---------------------------------------
        ;レジスタの復帰
        ;---------------------------------------
        pop     es
        pop     ds
        popa

        iret

ALIGN   4,  db  0
.last_tss:  dd  0