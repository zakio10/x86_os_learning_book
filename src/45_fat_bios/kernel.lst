     1                                  ;********************************************************************************************************
     2                                  ;マクロ
     3                                  ;********************************************************************************************************
     4                                  %define         USE_SYSTEM_CALL
     5                                  %define         USE_TEST_AND_SET
     6                                  
     7                                  %include        "..\include\define.s"
     1                              <1> VECT_BASE   equ     0x0010_0000             ;0010_0000:0010_07FF
     2                              <1> 
     3                              <1> SECT_SIZE   equ     (512)                   ;セクタサイズ
     4                              <1> 
     5                              <1> BOOT_LOAD   equ     0x7C00                  ;ブートプログラムのロード位置
     6                              <1> BOOT_END    equ     (BOOT_LOAD + BOOT_SIZE)
     7                              <1> BOOT_SIZE   equ     (1024 * 8)              ;ブートコードサイズ
     8                              <1> BOOT_SECT   equ     (BOOT_SIZE / SECT_SIZE) ;ブートプログラムのセクタ数
     9                              <1> 
    10                              <1> KERNEL_LOAD equ     0x0010_1000
    11                              <1> KERNEL_SIZE equ     (1024*8)                ;カーネルサイズ
    12                              <1> KERNEL_SECT equ     (KERNEL_SIZE / SECT_SIZE)
    13                              <1> 
    14                              <1> STACK_BASE  equ     0x0010_3000             ;タスク用スタックエリア
    15                              <1> STACK_SIZE  equ     1024                    ;スタックサイズ
    16                              <1> 
    17                              <1> CR3_BASE    equ     0x0010_5000             ;ページ変換テーブル:タスク3用
    18                              <1> 
    19                              <1> CR3_TASK_4  equ     0x0020_0000             ;ページ変換テーブル:タスク4用
    20                              <1> CR3_TASK_5  equ     0x0020_2000             ;ページ変換テーブル:タスク5用
    21                              <1> CR3_TASK_6  equ     0x0020_4000             ;ページ変換テーブル:タスク6用
    22                              <1> 
    23                              <1> SP_TASK_0   equ     STACK_BASE + (STACK_SIZE * 1)
    24                              <1> SP_TASK_1   equ     STACK_BASE + (STACK_SIZE * 2)
    25                              <1> SP_TASK_2   equ     STACK_BASE + (STACK_SIZE * 3)
    26                              <1> SP_TASK_3   equ     STACK_BASE + (STACK_SIZE * 4)
    27                              <1> SP_TASK_4   equ     STACK_BASE + (STACK_SIZE * 5)
    28                              <1> SP_TASK_5   equ     STACK_BASE + (STACK_SIZE * 6)
    29                              <1> SP_TASK_6   equ     STACK_BASE + (STACK_SIZE * 7)
    30                              <1> 
    31                              <1> PARAM_TASK_4    equ     0x0010_8000         ;描画パラメータ:タスク4用
    32                              <1> PARAM_TASK_5    equ     0x0010_9000         ;描画パラメータ:タスク5用
    33                              <1> PARAM_TASK_6    equ     0x0010_A000         ;描画パラメータ:タスク6用
    34                              <1> 
    35                              <1> E820_RECORD_SIZE    equ 20
    36                              <1> 
    37                              <1> ATTR_ARCHIVE    equ     0x20
    38                              <1> ATTR_VOLUME_ID  equ     0x08 
    39                              <1> 
    40                              <1> FAT_SIZE        equ     (1024 * 128)        ;FAT-1/2
    41                              <1> ROOT_SIZE       equ     (1024 *  16)        ;ルートディレクトリ領域
    42                              <1> 
    43                              <1> FAT1_START      equ     (KERNEL_SIZE)
    44                              <1> FAT2_START      equ     (FAT1_START + FAT_SIZE)
    45                              <1> ROOT_START      equ     (FAT2_START + FAT_SIZE)
    46                              <1> FILE_START      equ     (ROOT_START + ROOT_SIZE)
     8                                  %include        "..\include\macro.s"
     1                              <1> %define     RING_ITEM_SIZE  (1 << 4)
     2                              <1> %define     RING_INDEX_MASK (RING_ITEM_SIZE - 1)
     3                              <1> 
     4                              <1> struc rose
     5 00000000 <res 00000004>      <1>         .x0         resd    1                       ;左上座標:X0
     6 00000004 <res 00000004>      <1>         .y0         resd    1                       ;左上座標:Y0
     7 00000008 <res 00000004>      <1>         .x1         resd    1                       ;右下座標:X1
     8 0000000C <res 00000004>      <1>         .y1         resd    1                       ;右下座標:Y1
     9                              <1> 
    10 00000010 <res 00000004>      <1>         .n          resd    1                       ;変数:n
    11 00000014 <res 00000004>      <1>         .d          resd    1                       ;変数:d
    12                              <1> 
    13 00000018 <res 00000004>      <1>         .color_x    resd    1                       ;描画色:X座標
    14 0000001C <res 00000004>      <1>         .color_y    resd    1                       ;描画色:Y座標
    15 00000020 <res 00000004>      <1>         .color_z    resd    1                       ;描画色:枠
    16 00000024 <res 00000004>      <1>         .color_s    resd    1                       ;描画色:文字
    17 00000028 <res 00000004>      <1>         .color_f    resd    1                       ;描画色:グラフ描画色
    18 0000002C <res 00000004>      <1>         .color_b    resd    1                       ;描画色:グラフ消去色
    19                              <1> 
    20 00000030 <res 00000010>      <1>         .title      resb    16                      ;タイトル
    21                              <1> 
    22                              <1> endstruc
    23                              <1> 
    24                              <1> struc drive
    25 00000000 <res 00000002>      <1>         .no         resw    1                       ;ドライブ番号
    26 00000002 <res 00000002>      <1>         .cyln       resw    1                       ;シリンダ
    27 00000004 <res 00000002>      <1>         .head       resw    1                       ;ヘッド
    28 00000006 <res 00000002>      <1>         .sect       resw    1                       ;セクタ
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc ring_buff
    32 00000000 <res 00000004>      <1>         .rp         resd    1                       ;RP:書き込み位置
    33 00000004 <res 00000004>      <1>         .wp         resd    1                       ;WP:読み込み位置
    34 00000008 <res 00000010>      <1>         .item       resb    RING_ITEM_SIZE          ;ブッファ
    35                              <1> endstruc
    36                              <1> 
    37                              <1> %macro  cdecl   1-*.nolist
    38                              <1> 
    39                              <1>     %rep    %0 - 1
    40                              <1>         push    %{-1:-1}
    41                              <1>         %rotate -1
    42                              <1>     %endrep
    43                              <1>     %rotate -1
    44                              <1> 
    45                              <1>         call    %1
    46                              <1> 
    47                              <1>     %if 1 < %0
    48                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)
    49                              <1>     %endif
    50                              <1> 
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro  set_vect    1-*
    54                              <1>         push    eax
    55                              <1>         push    edi
    56                              <1> 
    57                              <1>         mov     edi, VECT_BASE + (%1 * 8)           ;ベクタアドレス
    58                              <1>         mov     eax, %2
    59                              <1> 
    60                              <1>     %if 3 == %0
    61                              <1>         mov     [edi + 4], %3                       ;フラグ
    62                              <1>     %endif
    63                              <1> 
    64                              <1>         mov     [edi + 0], ax                       ;例外アドレス[15:0]
    65                              <1>         shr     eax, 16
    66                              <1>         mov     [edi + 6], ax                       ;6はエンディアン(?) 例外アドレス[31:16]
    67                              <1> 
    68                              <1>         pop     edi
    69                              <1>         pop     eax
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro  outp    2
    73                              <1>         mov     al, %2
    74                              <1>         out     %1, al
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro  set_desc    2-*
    78                              <1>         push    eax
    79                              <1>         push    edi
    80                              <1> 
    81                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
    82                              <1>         mov     eax, %2                             ;ベースアドレス
    83                              <1> 
    84                              <1>     %if 3 == %0
    85                              <1>         mov     [edi + 0], %3                       ;リミット
    86                              <1>     %endif
    87                              <1>     
    88                              <1>         mov     [edi + 2], ax                       ;ベース([15: 0])
    89                              <1>         shr     eax, 16
    90                              <1>         mov     [edi + 4], al                       ;ベース([23:16])
    91                              <1>         mov     [edi + 7], ah                       ;ベース([31:24])
    92                              <1> 
    93                              <1>         pop     edi
    94                              <1>         pop     eax
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> %macro  set_gate    2-*
    98                              <1>         push    eax
    99                              <1>         push    edi
   100                              <1> 
   101                              <1>         mov     edi, %1                             ;ディスクリプタアドレス
   102                              <1>         mov     eax, %2                             ;ベースアドレス
   103                              <1> 
   104                              <1>         mov     [edi + 0], ax                       ;ベース([15:0])
   105                              <1>         shr     eax, 16
   106                              <1>         mov     [edi + 6], ax                       ;ベース([31:16])
   107                              <1> 
   108                              <1>         pop     edi
   109                              <1>         pop     eax
   110                              <1> %endmacro
     9                                  
    10                                          ORG     KERNEL_LOAD                             ;カーネルのロードアドレス
    11                                  
    12                                  [BITS 32]
    13                                  ;********************************************************************************************************
    14                                  ;エントリポイント
    15                                  ;********************************************************************************************************
    16                                  kernel:
    17                                          ;---------------------------------------
    18                                          ;フォントアドレスを取得
    19                                          ;---------------------------------------
    20 00000000 BE007E0000                      mov     esi, BOOT_LOAD + SECT_SIZE      ;ESI = 0x7C00 + 512
    21 00000005 0FB706                          movzx   eax, word [esi + 0]             ;EAX = [ESI + 0] //セグメント
    22 00000008 0FB75E02                        movzx   ebx, word [esi + 2]             ;EBX = [ESI + 2] //オフセット
    23 0000000C C1E004                          shl     eax, 4                          ;EAX << 4;
    24 0000000F 01D8                            add     eax, ebx                        ;EAX += EBX;
    25 00000011 A3[CC020000]                    mov     [FONT_ADR], eax                 ;FONT_ADR[0] = EAX;
    26                                  
    27                                          ;---------------------------------------
    28                                          ;TSSディスクリプタの設定
    29                                          ;---------------------------------------
    30                                          set_desc        GDT.tss_0, TSS_0        ;//タスク0用TSSの設定
    30 00000016 50                  <1>  push eax
    30 00000017 57                  <1>  push edi
    30                              <1> 
    30 00000018 BF[EC080000]        <1>  mov edi, %1
    30 0000001D B8[D4020000]        <1>  mov eax, %2
    30                              <1> 
    30                              <1>  %if 3 == %0
    30                              <1>  mov [edi + 0], %3
    30                              <1>  %endif
    30                              <1> 
    30 00000022 66894702            <1>  mov [edi + 2], ax
    30 00000026 C1E810              <1>  shr eax, 16
    30 00000029 884704              <1>  mov [edi + 4], al
    30 0000002C 886707              <1>  mov [edi + 7], ah
    30                              <1> 
    30 0000002F 5F                  <1>  pop edi
    30 00000030 58                  <1>  pop eax
    31                                          set_desc        GDT.tss_1, TSS_1        ;//タスク1用TSSの設定
    31 00000031 50                  <1>  push eax
    31 00000032 57                  <1>  push edi
    31                              <1> 
    31 00000033 BF[F4080000]        <1>  mov edi, %1
    31 00000038 B8[AC030000]        <1>  mov eax, %2
    31                              <1> 
    31                              <1>  %if 3 == %0
    31                              <1>  mov [edi + 0], %3
    31                              <1>  %endif
    31                              <1> 
    31 0000003D 66894702            <1>  mov [edi + 2], ax
    31 00000041 C1E810              <1>  shr eax, 16
    31 00000044 884704              <1>  mov [edi + 4], al
    31 00000047 886707              <1>  mov [edi + 7], ah
    31                              <1> 
    31 0000004A 5F                  <1>  pop edi
    31 0000004B 58                  <1>  pop eax
    32                                          set_desc        GDT.tss_2, TSS_2        ;//タスク2用TSSの設定
    32 0000004C 50                  <1>  push eax
    32 0000004D 57                  <1>  push edi
    32                              <1> 
    32 0000004E BF[FC080000]        <1>  mov edi, %1
    32 00000053 B8[84040000]        <1>  mov eax, %2
    32                              <1> 
    32                              <1>  %if 3 == %0
    32                              <1>  mov [edi + 0], %3
    32                              <1>  %endif
    32                              <1> 
    32 00000058 66894702            <1>  mov [edi + 2], ax
    32 0000005C C1E810              <1>  shr eax, 16
    32 0000005F 884704              <1>  mov [edi + 4], al
    32 00000062 886707              <1>  mov [edi + 7], ah
    32                              <1> 
    32 00000065 5F                  <1>  pop edi
    32 00000066 58                  <1>  pop eax
    33                                          set_desc        GDT.tss_3, TSS_3        ;//タスク3用TSSの設定
    33 00000067 50                  <1>  push eax
    33 00000068 57                  <1>  push edi
    33                              <1> 
    33 00000069 BF[04090000]        <1>  mov edi, %1
    33 0000006E B8[5C050000]        <1>  mov eax, %2
    33                              <1> 
    33                              <1>  %if 3 == %0
    33                              <1>  mov [edi + 0], %3
    33                              <1>  %endif
    33                              <1> 
    33 00000073 66894702            <1>  mov [edi + 2], ax
    33 00000077 C1E810              <1>  shr eax, 16
    33 0000007A 884704              <1>  mov [edi + 4], al
    33 0000007D 886707              <1>  mov [edi + 7], ah
    33                              <1> 
    33 00000080 5F                  <1>  pop edi
    33 00000081 58                  <1>  pop eax
    34                                          set_desc        GDT.tss_4, TSS_4        ;//タスク4用TSSの設定
    34 00000082 50                  <1>  push eax
    34 00000083 57                  <1>  push edi
    34                              <1> 
    34 00000084 BF[0C090000]        <1>  mov edi, %1
    34 00000089 B8[34060000]        <1>  mov eax, %2
    34                              <1> 
    34                              <1>  %if 3 == %0
    34                              <1>  mov [edi + 0], %3
    34                              <1>  %endif
    34                              <1> 
    34 0000008E 66894702            <1>  mov [edi + 2], ax
    34 00000092 C1E810              <1>  shr eax, 16
    34 00000095 884704              <1>  mov [edi + 4], al
    34 00000098 886707              <1>  mov [edi + 7], ah
    34                              <1> 
    34 0000009B 5F                  <1>  pop edi
    34 0000009C 58                  <1>  pop eax
    35                                          set_desc        GDT.tss_5, TSS_5        ;//タスク5用TSSの設定
    35 0000009D 50                  <1>  push eax
    35 0000009E 57                  <1>  push edi
    35                              <1> 
    35 0000009F BF[14090000]        <1>  mov edi, %1
    35 000000A4 B8[0C070000]        <1>  mov eax, %2
    35                              <1> 
    35                              <1>  %if 3 == %0
    35                              <1>  mov [edi + 0], %3
    35                              <1>  %endif
    35                              <1> 
    35 000000A9 66894702            <1>  mov [edi + 2], ax
    35 000000AD C1E810              <1>  shr eax, 16
    35 000000B0 884704              <1>  mov [edi + 4], al
    35 000000B3 886707              <1>  mov [edi + 7], ah
    35                              <1> 
    35 000000B6 5F                  <1>  pop edi
    35 000000B7 58                  <1>  pop eax
    36                                          set_desc        GDT.tss_6, TSS_6        ;//タスク6用TSSの設定
    36 000000B8 50                  <1>  push eax
    36 000000B9 57                  <1>  push edi
    36                              <1> 
    36 000000BA BF[1C090000]        <1>  mov edi, %1
    36 000000BF B8[E4070000]        <1>  mov eax, %2
    36                              <1> 
    36                              <1>  %if 3 == %0
    36                              <1>  mov [edi + 0], %3
    36                              <1>  %endif
    36                              <1> 
    36 000000C4 66894702            <1>  mov [edi + 2], ax
    36 000000C8 C1E810              <1>  shr eax, 16
    36 000000CB 884704              <1>  mov [edi + 4], al
    36 000000CE 886707              <1>  mov [edi + 7], ah
    36                              <1> 
    36 000000D1 5F                  <1>  pop edi
    36 000000D2 58                  <1>  pop eax
    37                                  
    38                                          ;---------------------------------------
    39                                          ;コールゲートの設定
    40                                          ;---------------------------------------
    41                                          set_gate        GDT.call_gate, call_gate;コールゲートの設定
    41 000000D3 50                  <1>  push eax
    41 000000D4 57                  <1>  push edi
    41                              <1> 
    41 000000D5 BF[24090000]        <1>  mov edi, %1
    41 000000DA B8[7C170000]        <1>  mov eax, %2
    41                              <1> 
    41 000000DF 668907              <1>  mov [edi + 0], ax
    41 000000E2 C1E810              <1>  shr eax, 16
    41 000000E5 66894706            <1>  mov [edi + 6], ax
    41                              <1> 
    41 000000E9 5F                  <1>  pop edi
    41 000000EA 58                  <1>  pop eax
    42                                  
    43                                          ;---------------------------------------
    44                                          ;LDTの設定
    45                                          ;---------------------------------------
    46                                          set_desc        GDT.ldt, LDT, word LDT_LIMIT
    46 000000EB 50                  <1>  push eax
    46 000000EC 57                  <1>  push edi
    46                              <1> 
    46 000000ED BF[E4080000]        <1>  mov edi, %1
    46 000000F2 B8[32090000]        <1>  mov eax, %2
    46                              <1> 
    46                              <1>  %if 3 == %0
    46 000000F7 66C7075F00          <1>  mov [edi + 0], %3
    46                              <1>  %endif
    46                              <1> 
    46 000000FC 66894702            <1>  mov [edi + 2], ax
    46 00000100 C1E810              <1>  shr eax, 16
    46 00000103 884704              <1>  mov [edi + 4], al
    46 00000106 886707              <1>  mov [edi + 7], ah
    46                              <1> 
    46 00000109 5F                  <1>  pop edi
    46 0000010A 58                  <1>  pop eax
    47                                  
    48                                          ;---------------------------------------
    49                                          ;GDTをロード(再設定)
    50                                          ;---------------------------------------
    51 0000010B 0F0115[2C090000]                lgdt    [GDTR]                          ;//グローバルディスクリプタテーブルをロード
    52                                  
    53                                          ;---------------------------------------
    54                                          ;スタックの設定
    55                                          ;---------------------------------------
    56 00000112 BC00341000                      mov     esp, SP_TASK_0                  ;タスク0用のスタックを設定
    57                                  
    58                                          ;---------------------------------------
    59                                          ;タスクレジスタの初期化
    60                                          ;---------------------------------------
    61 00000117 66B83000                        mov     ax, SS_TASK_0                   ;//タスクレジスタの設定
    62 0000011B 0F00D8                          ltr     ax
    63                                  
    64                                          ;---------------------------------------
    65                                          ;初期化
    66                                          ;---------------------------------------
    67 0000011E E86F140000                      cdecl   init_int                        ;//割り込みベクタの初期化
    68 00000123 E8B9140000                      cdecl   init_pic                        ;//割り込みコントローラの初期化
    69 00000128 E87A0C0000                      cdecl   init_page                       ;ページングの初期化
    70                                  
    71                                          set_vect        0x00, int_zero_div      ;割り込み処理の登録:0除算
    71 0000012D 50                  <1>  push eax
    71 0000012E 57                  <1>  push edi
    71                              <1> 
    71 0000012F BF00001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    71 00000134 B8[C3150000]        <1>  mov eax, %2
    71                              <1> 
    71                              <1>  %if 3 == %0
    71                              <1>  mov [edi + 4], %3
    71                              <1>  %endif
    71                              <1> 
    71 00000139 668907              <1>  mov [edi + 0], ax
    71 0000013C C1E810              <1>  shr eax, 16
    71 0000013F 66894706            <1>  mov [edi + 6], ax
    71                              <1> 
    71 00000143 5F                  <1>  pop edi
    71 00000144 58                  <1>  pop eax
    72                                          set_vect        0x07, int_nm            ;割り込み処理の登録:デバイス使用不可(FPU)
    72 00000145 50                  <1>  push eax
    72 00000146 57                  <1>  push edi
    72                              <1> 
    72 00000147 BF38001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    72 0000014C B8[19180000]        <1>  mov eax, %2
    72                              <1> 
    72                              <1>  %if 3 == %0
    72                              <1>  mov [edi + 4], %3
    72                              <1>  %endif
    72                              <1> 
    72 00000151 668907              <1>  mov [edi + 0], ax
    72 00000154 C1E810              <1>  shr eax, 16
    72 00000157 66894706            <1>  mov [edi + 6], ax
    72                              <1> 
    72 0000015B 5F                  <1>  pop edi
    72 0000015C 58                  <1>  pop eax
    73                                          set_vect        0x0E, int_pf            ;割り込み処理の登録:ページフォルト
    73 0000015D 50                  <1>  push eax
    73 0000015E 57                  <1>  push edi
    73                              <1> 
    73 0000015F BF70001000          <1>  mov edi, VECT_BASE + (%1 * 8)
    73 00000164 B8[490E0000]        <1>  mov eax, %2
    73                              <1> 
    73                              <1>  %if 3 == %0
    73                              <1>  mov [edi + 4], %3
    73                              <1>  %endif
    73                              <1> 
    73 00000169 668907              <1>  mov [edi + 0], ax
    73 0000016C C1E810              <1>  shr eax, 16
    73 0000016F 66894706            <1>  mov [edi + 6], ax
    73                              <1> 
    73 00000173 5F                  <1>  pop edi
    73 00000174 58                  <1>  pop eax
    74                                          set_vect        0x20, int_timer         ;割り込み処理の登録:タイマー
    74 00000175 50                  <1>  push eax
    74 00000176 57                  <1>  push edi
    74                              <1> 
    74 00000177 BF00011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    74 0000017C B8[92090000]        <1>  mov eax, %2
    74                              <1> 
    74                              <1>  %if 3 == %0
    74                              <1>  mov [edi + 4], %3
    74                              <1>  %endif
    74                              <1> 
    74 00000181 668907              <1>  mov [edi + 0], ax
    74 00000184 C1E810              <1>  shr eax, 16
    74 00000187 66894706            <1>  mov [edi + 6], ax
    74                              <1> 
    74 0000018B 5F                  <1>  pop edi
    74 0000018C 58                  <1>  pop eax
    75                                          set_vect        0x21, int_keyboard      ;割り込み処理の登録:KBC
    75 0000018D 50                  <1>  push eax
    75 0000018E 57                  <1>  push edi
    75                              <1> 
    75 0000018F BF08011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    75 00000194 B8[F6160000]        <1>  mov eax, %2
    75                              <1> 
    75                              <1>  %if 3 == %0
    75                              <1>  mov [edi + 4], %3
    75                              <1>  %endif
    75                              <1> 
    75 00000199 668907              <1>  mov [edi + 0], ax
    75 0000019C C1E810              <1>  shr eax, 16
    75 0000019F 66894706            <1>  mov [edi + 6], ax
    75                              <1> 
    75 000001A3 5F                  <1>  pop edi
    75 000001A4 58                  <1>  pop eax
    76                                          set_vect        0x28, int_rtc           ;割り込み処理の登録:RTC
    76 000001A5 50                  <1>  push eax
    76 000001A6 57                  <1>  push edi
    76                              <1> 
    76 000001A7 BF40011000          <1>  mov edi, VECT_BASE + (%1 * 8)
    76 000001AC B8[0C160000]        <1>  mov eax, %2
    76                              <1> 
    76                              <1>  %if 3 == %0
    76                              <1>  mov [edi + 4], %3
    76                              <1>  %endif
    76                              <1> 
    76 000001B1 668907              <1>  mov [edi + 0], ax
    76 000001B4 C1E810              <1>  shr eax, 16
    76 000001B7 66894706            <1>  mov [edi + 6], ax
    76                              <1> 
    76 000001BB 5F                  <1>  pop edi
    76 000001BC 58                  <1>  pop eax
    77                                          set_vect        0x81, trap_gate_81, word 0xEF00 ;トラップゲートの登録:1文字出力
    77 000001BD 50                  <1>  push eax
    77 000001BE 57                  <1>  push edi
    77                              <1> 
    77 000001BF BF08041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    77 000001C4 B8[AC170000]        <1>  mov eax, %2
    77                              <1> 
    77                              <1>  %if 3 == %0
    77 000001C9 66C7470400EF        <1>  mov [edi + 4], %3
    77                              <1>  %endif
    77                              <1> 
    77 000001CF 668907              <1>  mov [edi + 0], ax
    77 000001D2 C1E810              <1>  shr eax, 16
    77 000001D5 66894706            <1>  mov [edi + 6], ax
    77                              <1> 
    77 000001D9 5F                  <1>  pop edi
    77 000001DA 58                  <1>  pop eax
    78                                          set_vect        0x82, trap_gate_82, word 0xEF00 ;トラップゲートの登録:点の描画
    78 000001DB 50                  <1>  push eax
    78 000001DC 57                  <1>  push edi
    78                              <1> 
    78 000001DD BF10041000          <1>  mov edi, VECT_BASE + (%1 * 8)
    78 000001E2 B8[BA170000]        <1>  mov eax, %2
    78                              <1> 
    78                              <1>  %if 3 == %0
    78 000001E7 66C7470400EF        <1>  mov [edi + 4], %3
    78                              <1>  %endif
    78                              <1> 
    78 000001ED 668907              <1>  mov [edi + 0], ax
    78 000001F0 C1E810              <1>  shr eax, 16
    78 000001F3 66894706            <1>  mov [edi + 6], ax
    78                              <1> 
    78 000001F7 5F                  <1>  pop edi
    78 000001F8 58                  <1>  pop eax
    79                                  
    80                                          ;---------------------------------------
    81                                          ;デバイスの割り込み許可
    82                                          ;---------------------------------------
    83 000001F9 6A10E8351400006683-             cdecl   rtc_int_en, 0x10                ;rtc_int_en(UIE); //更新サイクル終了割り込み許可
    83 00000202 C404               
    84 00000204 E82B150000                      cdecl   int_en_timer0                   ;//タイマー(カウンタ0)割り込み許可
    85                                  
    86                                          ;---------------------------------------
    87                                          ;IMR(割り込みマスクレジスタ)の設定
    88                                          ;---------------------------------------
    89                                          outp    0x21, 0b_1111_1000              ;//割り込み有効:スレーブPIC/KBC/タイマー
    89 00000209 B0F8                <1>  mov al, %2
    89 0000020B E621                <1>  out %1, al
    90                                          outp    0xA1, 0b_1111_1110              ;//割り込み有効:RTC
    90 0000020D B0FE                <1>  mov al, %2
    90 0000020F E6A1                <1>  out %1, al
    91                                  
    92                                          ;---------------------------------------
    93                                          ;CR3レジスタにページング用のベースアドレスをセット
    94                                          ;---------------------------------------
    95 00000211 B800501000                      mov     eax, CR3_BASE
    96 00000216 0F22D8                          mov     cr3, eax                        ;//ページテーブルの登録
    97                                  
    98                                          ;---------------------------------------
    99                                          ;CR0レジスタのPEビットを1に設定(ページングの有効化)
   100                                          ;---------------------------------------
   101 00000219 0F20C0                          mov     eax, cr0                        ;//PGビットをセット
   102 0000021C 0D00000080                      or      eax, (1 << 31)                  ;CR0 |= PG;
   103 00000221 0F22C0                          mov     cr0, eax
   104 00000224 EB00                            jmp     $ + 2                           ;FLUSH() //キャッシュされた命令を破棄
   105                                  
   106                                          ;---------------------------------------
   107                                          ;CPUの割り込み許可
   108                                          ;---------------------------------------
   109 00000226 FB                              sti                                      ;//割り込み許可
   110                                  
   111                                          ;---------------------------------------
   112                                          ;フォントの一覧表示
   113                                          ;---------------------------------------
   114 00000227 6A0D6A3FE8140E0000-             cdecl   draw_font, 63, 13               ;//フォントの一覧表示
   114 00000230 6683C408           
   115 00000234 6A046A3FE8880E0000-             cdecl   draw_color_bar, 63, 4           ;//カラーバーの表示
   115 0000023D 6683C408           
   116                                  
   117                                          ;---------------------------------------
   118                                          ;文字列の表示
   119                                          ;---------------------------------------
   120 00000241 68[B6020000]680F01-             cdecl   draw_str, 25, 14, 0x010F, .s0   ;draw_str();
   120 00000249 00006A0E6A19E8330E-
   120 00000252 00006683C410       
   121                                  
   122                                  .10L:                                           ;while(1)
   123                                                                                  ;{
   124                                          ;---------------------------------------
   125                                          ;タスクの呼び出し
   126                                          ;---------------------------------------
   127                                          ;call    SS_TASK_1:0                     ;       //タスク1へのジャンプ
   128                                  
   129                                          ;---------------------------------------
   130                                          ;回転する棒の表示
   131                                          ;---------------------------------------
   132 00000258 E8E6140000                      cdecl   draw_rotation_bar               ;       //回転する棒を表示
   133                                  
   134                                          ;---------------------------------------
   135                                          ;キーコードの取得
   136                                          ;---------------------------------------
   137 0000025D 68[C7020000]68-                 cdecl   ring_rd, _KEY_BUFF, .int_key    ;       EAX = ring_rd(buff, &int_key);
   137 00000263 [1C170000]E8DD1300-
   137 0000026B 006683C408         
   138 00000270 83F800                          cmp     eax, 0                          ;       if(EAX != 0)
   139 00000273 743D                            je      .10E                            ;       {
   140                                  
   141                                          ;---------------------------------------
   142                                          ;キーコードの表示
   143                                          ;---------------------------------------
   144 00000275 68[1C170000]6A1D6A-             cdecl   draw_key, 2, 29, _KEY_BUFF      ;               ring_show(key_buff); //全要素を表示
   144 0000027D 02E81F1400006683C4-
   144 00000286 0C                 
   145                                  
   146                                          ;---------------------------------------
   147                                          ;キー押下時の処理
   148                                          ;---------------------------------------
   149 00000287 A0[C7020000]                    mov     al, [.int_key]                  ;               AL = [.int_key]; //キーコード
   150 0000028C 3C02                            cmp     al, 0x02                        ;               if('1' == AL)
   151 0000028E 7522                            jne     .12E                            ;               {
   152                                          
   153                                          ;---------------------------------------
   154                                          ;ファイル読み込み
   155                                          ;---------------------------------------
   156 00000290 FF15F09B0000                    call    [BOOT_LOAD + BOOT_SIZE - 16]    ;                       //ファイル読み込み
   157                                  
   158                                          ;---------------------------------------
   159                                          ;ファイルの内容を表示
   160                                          ;---------------------------------------
   161 00000296 BE00780000                      mov     esi, 0x7800                     ;                       ESI = 読み込み先アドレス;
   162 0000029B C6462000                        mov     [esi + 32], byte 0              ;                       [ESI +32] = 0; //最大32文字;
   163 0000029F 5668040F00006A006A-             cdecl   draw_str, 0, 0, 0x0F04, esi     ;                       draw_str(); //文字列の表示;
   163 000002A8 00E8D90D00006683C4-
   163 000002B1 10                 
   164                                  .12E:                                           ;               }
   165                                  .10E:                                           ;       }
   166 000002B2 EBA4                            jmp     .10L                            ;}
   167                                  
   168                                          ;---------------------------------------
   169                                          ;処理の終了
   170                                          ;---------------------------------------
   171 000002B4 EBFE                            jmp     $                               ;while(1) //無限ループ
   172                                  
   173                                  
   174                                  
   175 000002B6 2048656C6C6F2C206B-     .s0:    db      " Hello, kernel! ", 0
   175 000002BF 65726E656C212000   
   176                                  
   177 000002C7 00000000                .int_key:       dd      0
   178                                  
   179 000002CB 00                      ALIGN   4, db   0
   180 000002CC 00000000                FONT_ADR:       dd      0
   181 000002D0 00000000                RTC_TIME:       dd      0
   182                                  
   183                                  ;********************************************************************************************************
   184                                  ;タスク
   185                                  ;********************************************************************************************************
   186                                  %include        "descriptor.s"
     1                              <1> ;********************************************************************************************************
     2                              <1> ;TSS
     3                              <1> ;********************************************************************************************************
     4                              <1> TSS_0:
     5 000002D4 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
     6 000002D8 00321000            <1> .esp0:          dd  SP_TASK_0 - 512                                     ;*  4:ESP0
     7 000002DC 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
     8 000002E0 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
     9 000002E4 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    10 000002E8 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    11 000002EC 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    12 000002F0 00501000            <1> .cr3:           dd  CR3_BASE                                            ;  28:CR3(PDBR)
    13 000002F4 00000000            <1> .eip:           dd  0                                                   ;  32:EIP
    14 000002F8 00000000            <1> .eflags:        dd  0                                                   ;  36:EFLAGS
    15 000002FC 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    16 00000300 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    17 00000304 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    18 00000308 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    19 0000030C 00000000            <1> .esp:           dd  0                                                   ;  56:ESP
    20 00000310 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    21 00000314 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    22 00000318 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    23 0000031C 00000000            <1> .es:            dd  0                                                   ;  72:ES
    24 00000320 00000000            <1> .cs:            dd  0                                                   ;  76:CS
    25 00000324 00000000            <1> .ss:            dd  0                                                   ;  80:SS
    26 00000328 00000000            <1> .ds:            dd  0                                                   ;  84:DS
    27 0000032C 00000000            <1> .fs:            dd  0                                                   ;  88:FS
    28 00000330 00000000            <1> .gs:            dd  0                                                   ;  92:GS
    29 00000334 00000000            <1> .ldt:           dd  0                                                   ;* 96:LDTセグメントセレクタ
    30 00000338 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    31 0000033C 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    32                              <1> 
    33                              <1> TSS_1:
    34 000003AC 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    35 000003B0 00361000            <1> .esp0:          dd  SP_TASK_1 - 512                                     ;*  4:ESP0
    36 000003B4 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    37 000003B8 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    38 000003BC 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    39 000003C0 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    40 000003C4 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    41 000003C8 00501000            <1> .cr3:           dd  CR3_BASE                                            ;  28:CR3(PDBR)
    42 000003CC [1C0A0000]          <1> .eip:           dd  task_1                                              ;  32:EIP
    43 000003D0 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
    44 000003D4 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    45 000003D8 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    46 000003DC 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    47 000003E0 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    48 000003E4 00381000            <1> .esp:           dd  SP_TASK_1                                           ;  56:ESP
    49 000003E8 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    50 000003EC 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    51 000003F0 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    52 000003F4 27000000            <1> .es:            dd  DS_TASK_1                                           ;  72:ES
    53 000003F8 1F000000            <1> .cs:            dd  CS_TASK_1                                           ;  76:CS
    54 000003FC 27000000            <1> .ss:            dd  DS_TASK_1                                           ;  80:SS
    55 00000400 27000000            <1> .ds:            dd  DS_TASK_1                                           ;  84:DS
    56 00000404 27000000            <1> .fs:            dd  DS_TASK_1                                           ;  88:FS
    57 00000408 27000000            <1> .gs:            dd  DS_TASK_1                                           ;  92:GS
    58 0000040C 28000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
    59 00000410 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    60 00000414 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    61                              <1> 
    62                              <1> TSS_2:
    63 00000484 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    64 00000488 003A1000            <1> .esp0:          dd  SP_TASK_2 - 512                                     ;*  4:ESP0
    65 0000048C 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    66 00000490 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    67 00000494 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    68 00000498 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    69 0000049C 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    70 000004A0 00501000            <1> .cr3:           dd  CR3_BASE                                            ;  28:CR3(PDBR)
    71 000004A4 [530A0000]          <1> .eip:           dd  task_2                                              ;  32:EIP
    72 000004A8 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
    73 000004AC 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
    74 000004B0 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
    75 000004B4 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
    76 000004B8 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
    77 000004BC 003C1000            <1> .esp:           dd  SP_TASK_2                                           ;  56:ESP
    78 000004C0 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
    79 000004C4 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
    80 000004C8 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
    81 000004CC 37000000            <1> .es:            dd  DS_TASK_2                                           ;  72:ES
    82 000004D0 2F000000            <1> .cs:            dd  CS_TASK_2                                           ;  76:CS
    83 000004D4 37000000            <1> .ss:            dd  DS_TASK_2                                           ;  80:SS
    84 000004D8 37000000            <1> .ds:            dd  DS_TASK_2                                           ;  84:DS
    85 000004DC 37000000            <1> .fs:            dd  DS_TASK_2                                           ;  88:FS
    86 000004E0 37000000            <1> .gs:            dd  DS_TASK_2                                           ;  92:GS
    87 000004E4 28000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
    88 000004E8 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
    89 000004EC 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
    90                              <1> 
    91                              <1> TSS_3:
    92 0000055C 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
    93 00000560 003E1000            <1> .esp0:          dd  SP_TASK_3 - 512                                     ;*  4:ESP0
    94 00000564 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
    95 00000568 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
    96 0000056C 00000000            <1> .ss1:           dd  0                                                   ;* 16:
    97 00000570 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
    98 00000574 00000000            <1> .ss2:           dd  0                                                   ;* 24:
    99 00000578 00501000            <1> .cr3:           dd  CR3_BASE                                            ;  28:CR3(PDBR)
   100 0000057C [240B0000]          <1> .eip:           dd  task_3                                              ;  32:EIP
   101 00000580 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
   102 00000584 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
   103 00000588 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
   104 0000058C 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
   105 00000590 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
   106 00000594 00401000            <1> .esp:           dd  SP_TASK_3                                           ;  56:ESP
   107 00000598 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
   108 0000059C 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
   109 000005A0 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
   110 000005A4 47000000            <1> .es:            dd  DS_TASK_3                                           ;  72:ES
   111 000005A8 3F000000            <1> .cs:            dd  CS_TASK_3                                           ;  76:CS
   112 000005AC 47000000            <1> .ss:            dd  DS_TASK_3                                           ;  80:SS
   113 000005B0 47000000            <1> .ds:            dd  DS_TASK_3                                           ;  84:DS
   114 000005B4 47000000            <1> .fs:            dd  DS_TASK_3                                           ;  88:FS
   115 000005B8 47000000            <1> .gs:            dd  DS_TASK_3                                           ;  92:GS
   116 000005BC 28000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
   117 000005C0 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
   118 000005C4 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
   119                              <1> 
   120                              <1> TSS_4:
   121 00000634 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
   122 00000638 00421000            <1> .esp0:          dd  SP_TASK_4 - 512                                     ;*  4:ESP0
   123 0000063C 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
   124 00000640 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
   125 00000644 00000000            <1> .ss1:           dd  0                                                   ;* 16:
   126 00000648 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
   127 0000064C 00000000            <1> .ss2:           dd  0                                                   ;* 24:
   128 00000650 00002000            <1> .cr3:           dd  CR3_TASK_4                                          ;  28:CR3(PDBR)
   129 00000654 [240B0000]          <1> .eip:           dd  task_3                                              ;  32:EIP
   130 00000658 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
   131 0000065C 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
   132 00000660 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
   133 00000664 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
   134 00000668 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
   135 0000066C 00441000            <1> .esp:           dd  SP_TASK_4                                           ;  56:ESP
   136 00000670 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
   137 00000674 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
   138 00000678 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
   139 0000067C 4F000000            <1> .es:            dd  DS_TASK_4                                           ;  72:ES
   140 00000680 3F000000            <1> .cs:            dd  CS_TASK_3                                           ;  76:CS
   141 00000684 4F000000            <1> .ss:            dd  DS_TASK_4                                           ;  80:SS
   142 00000688 4F000000            <1> .ds:            dd  DS_TASK_4                                           ;  84:DS
   143 0000068C 4F000000            <1> .fs:            dd  DS_TASK_4                                           ;  88:FS
   144 00000690 4F000000            <1> .gs:            dd  DS_TASK_4                                           ;  92:GS
   145 00000694 28000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
   146 00000698 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
   147 0000069C 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
   148                              <1> 
   149                              <1> TSS_5:
   150 0000070C 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
   151 00000710 00461000            <1> .esp0:          dd  SP_TASK_5 - 512                                     ;*  4:ESP0
   152 00000714 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
   153 00000718 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
   154 0000071C 00000000            <1> .ss1:           dd  0                                                   ;* 16:
   155 00000720 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
   156 00000724 00000000            <1> .ss2:           dd  0                                                   ;* 24:
   157 00000728 00202000            <1> .cr3:           dd  CR3_TASK_5                                           ;  28:CR3(PDBR)
   158 0000072C [240B0000]          <1> .eip:           dd  task_3                                              ;  32:EIP
   159 00000730 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
   160 00000734 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
   161 00000738 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
   162 0000073C 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
   163 00000740 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
   164 00000744 00202000            <1> .esp:           dd  CR3_TASK_5                                           ;  56:ESP
   165 00000748 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
   166 0000074C 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
   167 00000750 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
   168 00000754 57000000            <1> .es:            dd  DS_TASK_5                                           ;  72:ES
   169 00000758 3F000000            <1> .cs:            dd  CS_TASK_3                                           ;  76:CS
   170 0000075C 57000000            <1> .ss:            dd  DS_TASK_5                                           ;  80:SS
   171 00000760 57000000            <1> .ds:            dd  DS_TASK_5                                           ;  84:DS
   172 00000764 57000000            <1> .fs:            dd  DS_TASK_5                                           ;  88:FS
   173 00000768 57000000            <1> .gs:            dd  DS_TASK_5                                           ;  92:GS
   174 0000076C 28000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
   175 00000770 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
   176 00000774 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
   177                              <1> 
   178                              <1> TSS_6:
   179 000007E4 00000000            <1> .link:          dd  0                                                   ;   0:前のタスクへのリンク
   180 000007E8 004A1000            <1> .esp0:          dd  SP_TASK_6 - 512                                     ;*  4:ESP0
   181 000007EC 10000000            <1> .ss0:           dd  DS_KERNEL                                           ;*  8:
   182 000007F0 00000000            <1> .esp1:          dd  0                                                   ;* 12:ESP1
   183 000007F4 00000000            <1> .ss1:           dd  0                                                   ;* 16:
   184 000007F8 00000000            <1> .esp2:          dd  0                                                   ;* 20:ESP2
   185 000007FC 00000000            <1> .ss2:           dd  0                                                   ;* 24:
   186 00000800 00402000            <1> .cr3:           dd  CR3_TASK_6                                           ;  28:CR3(PDBR)
   187 00000804 [240B0000]          <1> .eip:           dd  task_3                                              ;  32:EIP
   188 00000808 02020000            <1> .eflags:        dd  0x0202                                              ;  36:EFLAGS
   189 0000080C 00000000            <1> .eax:           dd  0                                                   ;  40:EAX
   190 00000810 00000000            <1> .ecx:           dd  0                                                   ;  44:ECX
   191 00000814 00000000            <1> .edx:           dd  0                                                   ;  48:EDX
   192 00000818 00000000            <1> .ebx:           dd  0                                                   ;  52:EBX
   193 0000081C 004C1000            <1> .esp:           dd  SP_TASK_6                                           ;  56:ESP
   194 00000820 00000000            <1> .ebp:           dd  0                                                   ;  60:EBP
   195 00000824 00000000            <1> .esi:           dd  0                                                   ;  64:ESI
   196 00000828 00000000            <1> .edi:           dd  0                                                   ;  68:EDI
   197 0000082C 5F000000            <1> .es:            dd  DS_TASK_6                                           ;  72:ES
   198 00000830 3F000000            <1> .cs:            dd  CS_TASK_3                                           ;  76:CS
   199 00000834 5F000000            <1> .ss:            dd  DS_TASK_6                                           ;  80:SS
   200 00000838 5F000000            <1> .ds:            dd  DS_TASK_6                                           ;  84:DS
   201 0000083C 5F000000            <1> .fs:            dd  DS_TASK_6                                           ;  88:FS
   202 00000840 5F000000            <1> .gs:            dd  DS_TASK_6                                           ;  92:GS
   203 00000844 28000000            <1> .ldt:           dd  SS_LDT                                              ;* 96:LDTセグメントセレクタ
   204 00000848 00000000            <1> .io:            dd  0                                                   ; 100:I/Oマップページアドレス
   205 0000084C 00<rept>            <1> .fp_save:       times   108 + 4 db  0                                   ; FPUコンテキスト保存領域
   206                              <1> 
   207                              <1> ;********************************************************************************************************
   208                              <1> ;グローバルディスクリプタテーブル
   209                              <1> ;********************************************************************************************************
   210 000008BC 0000000000000000    <1> GDT:            dq  0x_0000_0000_0000_0000                              ;NULL
   211 000008C4 FFFF0000009ACF00    <1> .cs_kernel:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
   212 000008CC FFFF00000092CF00    <1> .ds_kernel:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
   213 000008D4 FFFF0000009A0F00    <1> .cs_bit16:      dq  0x_000F_9A00_0000_FFFF                              ;コードセグメント(16ビットセグメント)
   214 000008DC FFFF000000920F00    <1> .ds_bit16:      dq  0x_000F_9200_0000_FFFF                              ;データセグメント(16ビットセグメント)
   215 000008E4 0000000000820000    <1> .ldt:           dq  0x_0000_8200_0000_0000                              ;LDTディスクリプタ
   216 000008EC 6700000000890000    <1> .tss_0:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   217 000008F4 6700000000890000    <1> .tss_1:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   218 000008FC 6700000000890000    <1> .tss_2:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   219 00000904 6700000000890000    <1> .tss_3:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   220 0000090C 6700000000890000    <1> .tss_4:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   221 00000914 6700000000890000    <1> .tss_5:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   222 0000091C 6700000000890000    <1> .tss_6:         dq  0x_0000_8900_0000_0067                              ;TSSディスクリプタ
   223 00000924 0000080004EC0000    <1> .call_gate:     dq  0x_0000_EC04_0008_0000                              ;386コールゲート(DPL=3, count=4, SEL=8)
   224                              <1> .end:
   225                              <1> 
   226                              <1> CS_KERNEL       equ .cs_kernel  - GDT
   227                              <1> DS_KERNEL       equ .ds_kernel  - GDT
   228                              <1> SS_LDT          equ .ldt        - GDT
   229                              <1> SS_TASK_0       equ .tss_0      - GDT
   230                              <1> SS_TASK_1       equ .tss_1      - GDT
   231                              <1> SS_TASK_2       equ .tss_2      - GDT
   232                              <1> SS_TASK_3       equ .tss_3      - GDT
   233                              <1> SS_TASK_4       equ .tss_4      - GDT
   234                              <1> SS_TASK_5       equ .tss_5      - GDT
   235                              <1> SS_TASK_6       equ .tss_6      - GDT
   236                              <1> SS_GATE_0       equ .call_gate  - GDT
   237                              <1> 
   238 0000092C 6F00                <1> GDTR:           dw  GDT.end - GDT - 1
   239 0000092E [BC080000]          <1>                 dd  GDT
   240                              <1> 
   241                              <1> 
   242                              <1> ;********************************************************************************************************
   243                              <1> ;ローカルディスクリプタテーブル
   244                              <1> ;********************************************************************************************************
   245 00000932 0000000000000000    <1> LDT:            dq  0x_0000_0000_0000_0000                              ;NULL
   246 0000093A FFFF0000009ACF00    <1> .cs_task_0:     dq  0x_00CF_9A00_0000_FFFF                              ;CODE 4G
   247 00000942 FFFF00000092CF00    <1> .ds_task_0:     dq  0x_00CF_9200_0000_FFFF                              ;DATA 4G
   248 0000094A FFFF000000FACF00    <1> .cs_task_1:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   249 00000952 FFFF000000F2CF00    <1> .ds_task_1:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   250 0000095A FFFF000000FACF00    <1> .cs_task_2:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   251 00000962 FFFF000000F2CF00    <1> .ds_task_2:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   252 0000096A FFFF000000FACF00    <1> .cs_task_3:     dq  0x_00CF_FA00_0000_FFFF                              ;CODE 4G
   253 00000972 FFFF000000F2CF00    <1> .ds_task_3:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   254 0000097A FFFF000000F2CF00    <1> .ds_task_4:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   255 00000982 FFFF000000F2CF00    <1> .ds_task_5:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   256 0000098A FFFF000000F2CF00    <1> .ds_task_6:     dq  0x_00CF_F200_0000_FFFF                              ;DATA 4G
   257                              <1> .end:
   258                              <1> 
   259                              <1> CS_TASK_0       equ (.cs_task_0 - LDT) | 4                              ;タスク0用CSセレクタ
   260                              <1> DS_TASK_0       equ (.ds_task_0 - LDT) | 4                              ;タスク0用DSセレクタ
   261                              <1> CS_TASK_1       equ (.cs_task_1 - LDT) | 4 | 3                          ;タスク1用CSセレクタ
   262                              <1> DS_TASK_1       equ (.ds_task_1 - LDT) | 4 | 3                          ;タスク1用DSセレクタ
   263                              <1> CS_TASK_2       equ (.cs_task_2 - LDT) | 4 | 3                          ;タスク2用CSセレクタ
   264                              <1> DS_TASK_2       equ (.ds_task_2 - LDT) | 4 | 3                          ;タスク2用DSセレクタ
   265                              <1> CS_TASK_3       equ (.cs_task_3 - LDT) | 4 | 3                          ;タスク3用CSセレクタ
   266                              <1> DS_TASK_3       equ (.ds_task_3 - LDT) | 4 | 3                          ;タスク3用DSセレクタ
   267                              <1> DS_TASK_4       equ (.ds_task_4 - LDT) | 4 | 3                          ;タスク4用DSセレクタ
   268                              <1> DS_TASK_5       equ (.ds_task_5 - LDT) | 4 | 3                          ;タスク5用DSセレクタ
   269                              <1> DS_TASK_6       equ (.ds_task_6 - LDT) | 4 | 3                          ;タスク6用DSセレクタ
   270                              <1> 
   271                              <1> LDT_LIMIT       equ .end        - LDT - 1
   187                                  %include        "modules/int_timer.s"
     1                              <1> int_timer:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00000992 60                  <1>         pushad
     6 00000993 1E                  <1>         push    ds
     7 00000994 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 00000995 66B81000            <1>         mov     ax, 0x0010
    13 00000999 8ED8                <1>         mov     ds, ax
    14 0000099B 8EC0                <1>         mov     es, ax
    15                              <1>         
    16                              <1>         ;---------------------------------------
    17                              <1>         ;TICK
    18                              <1>         ;---------------------------------------
    19 0000099D FF05[140A0000]      <1>         inc     dword [TIMER_COUNT]             ;TIMER_COUNT++; //割り込み回数の更新
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;割り込みフラグをクリア(EOI)
    23                              <1>         ;---------------------------------------
    24                              <1>         outp 0x20, 0x20
    24 000009A3 B020                <2>  mov al, %2
    24 000009A5 E620                <2>  out %1, al
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;タスクの切り替え
    28                              <1>         ;---------------------------------------
    29 000009A7 660F00C8            <1>         str     ax                              ;AX = TR; //現在のタスクレジスタ
    30 000009AB 6683F830            <1>         cmp     ax, SS_TASK_0                   ;case(AX)
    31 000009AF 7427                <1>         je      .11L                            ;{
    32 000009B1 6683F838            <1>         cmp     ax, SS_TASK_1
    33 000009B5 742A                <1>         je      .12L
    34 000009B7 6683F840            <1>         cmp     ax, SS_TASK_2
    35 000009BB 742D                <1>         je      .13L
    36 000009BD 6683F848            <1>         cmp     ax, SS_TASK_3
    37 000009C1 7430                <1>         je      .14L
    38 000009C3 6683F850            <1>         cmp     ax, SS_TASK_4
    39 000009C7 7433                <1>         je      .15L
    40 000009C9 6683F858            <1>         cmp     ax, SS_TASK_5
    41 000009CD 7436                <1>         je      .16L
    42                              <1>                                                 ;       default:
    43 000009CF EA000000003000      <1>         jmp     SS_TASK_0:0                     ;       //タスク0に切り替え
    44 000009D6 EB36                <1>         jmp     .10E                            ;       break;
    45                              <1> .11L:                                           ;       case SS_TASK_0:
    46 000009D8 EA000000003800      <1>         jmp     SS_TASK_1:0                     ;       //タスク1に切り替え
    47 000009DF EB2D                <1>         jmp     .10E                            ;       break;
    48                              <1> .12L:                                           ;       case SS_TASK_1:
    49 000009E1 EA000000004000      <1>         jmp     SS_TASK_2:0                     ;       //タスク2に切り替え
    50 000009E8 EB24                <1>         jmp     .10E                            ;       break;
    51                              <1> .13L:                                           ;       case SS_TASK_2:
    52 000009EA EA000000004800      <1>         jmp     SS_TASK_3:0                     ;       //タスク3に切り替え
    53 000009F1 EB1B                <1>         jmp     .10E                            ;       break;
    54                              <1> .14L:                                           ;       case SS_TASK_3:
    55 000009F3 EA000000005000      <1>         jmp     SS_TASK_4:0                     ;       //タスク4に切り替え
    56 000009FA EB12                <1>         jmp     .10E                            ;       break;
    57                              <1> .15L:                                           ;       case SS_TASK_4:
    58 000009FC EA000000005800      <1>         jmp     SS_TASK_5:0                     ;       //タスク5に切り替え
    59 00000A03 EB09                <1>         jmp     .10E                            ;       break;
    60                              <1> .16L:                                           ;       case SS_TASK_5:
    61 00000A05 EA000000006000      <1>         jmp     SS_TASK_6:0                     ;       //タスク6に切り替え
    62 00000A0C EB00                <1>         jmp     .10E                            ;       break;
    63                              <1> .10E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;レジスタの復帰
    67                              <1>         ;---------------------------------------
    68 00000A0E 07                  <1>         pop     es
    69 00000A0F 1F                  <1>         pop     ds
    70 00000A10 61                  <1>         popad
    71                              <1>         
    72 00000A11 CF                  <1>         iret
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;データ
    76                              <1>         ;---------------------------------------
    77 00000A12 00<rept>            <1> ALIGN   4, db   0
    78 00000A14 0000000000000000    <1> TIMER_COUNT:    dq  0
   188                                  %include        "tasks/task_1.s"
     1                              <1> task_1:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;文字列の表示
     4                              <1>         ;---------------------------------------
     5 00000A1C 68[4C0A0000]6A076A- <1>         cdecl   SS_GATE_0:0, 63, 0 , 0x07, .s0  ;draw_str();
     5 00000A24 006A3F9A0000000068- <1>
     5 00000A2D 006683C410          <1>
     6                              <1> 
     7                              <1> .10L:                                           ;while(1)
     8                              <1>                                                 ;{
     9                              <1> 
    10                              <1>         ;---------------------------------------
    11                              <1>         ;時刻の表示
    12                              <1>         ;---------------------------------------
    13 00000A32 A1[D0020000]        <1>         mov     eax, [RTC_TIME]                 ;       //時刻の取得
    14 00000A37 5068000700006A006A- <1>         cdecl   draw_time, 72, 0, 0x0700, eax   ;       //時刻の表示
    14 00000A40 48E8990900006683C4- <1>
    14 00000A49 10                  <1>
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;タスクの呼び出し
    18                              <1>         ;---------------------------------------       
    19                              <1>         ;jmp     SS_TASK_0:0                     ;       //タスク0へのジャンプ
    20                              <1> 
    21 00000A4A EBE6                <1>         jmp     .10L                            ;}
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;データ
    25                              <1>         ;---------------------------------------
    26 00000A4C 5461736B2D3100      <1> .s0:    db  "Task-1", 0
   189                                  %include        "tasks/task_2.s"
     1                              <1> task_2:
     2 00000A53 68[160B0000]6A076A- <1>         cdecl   draw_str, 63, 1, 0x07, .s0      ;   draw_str(.s0);
     2 00000A5B 016A3FE82406000066- <1>
     2 00000A64 83C410              <1>
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;FPU
     6                              <1>         ;---------------------------------------
     7                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
     8                              <1>                                     ;       ST0|        ST1|        ST2|        ST3|        ST4|        ST5|
     9                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    10 00000A67 DB05[040B0000]      <1>         fild    dword [.c1000]      ;      1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    11 00000A6D D9EB                <1>         fldpi                       ;        pi|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    12 00000A6F DA35[080B0000]      <1>         fidiv   dword [.c180]       ;    pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    13 00000A75 D9EB                <1>         fldpi                       ;        pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    14 00000A77 DCC0                <1>         fadd    st0, st0            ;      2*pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
    15 00000A79 D9EE                <1>         fldz                        ;     θ = 0|       2*pi|     pi/180|       1000|  xxxxxxxxx|  xxxxxxxxx|
    16                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    17                              <1> 
    18                              <1> .10L:                                           ;while(1)
    19                              <1>                                                 ;{
    20                              <1> 
    21                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    22                              <1>                                     ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    23                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    24 00000A7B D8C2                <1>         fadd    st0, ST2            ;θ =  θ + d|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    25 00000A7D D9F8                <1>         fprem                       ;    MOD(θ)|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    26                              <1>                                     ;----------|-----------|-----------|-----------|-----------|-----------|
    27                              <1>                                     ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    28 00000A7F D9C0                <1>         fld     st0                 ;         θ|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    29 00000A81 D9FE                <1>         fsin                        ;    sin(θ)|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    30 00000A83 D8CC                <1>         fmul    st0, st4            ;ST4*sin(θ)|          θ|       2*pi|          d|       1000|  xxxxxxxxx|
    31 00000A85 DF35[0C0B0000]      <1>         fbstp   [.bcd]              ;         θ|       2*pi|          d|       1000|  xxxxxxxxx|  xxxxxxxxx|
    32                              <1> 
    33                              <1>         ;---------------------------------------
    34                              <1>         ;CPU
    35                              <1>         ;---------------------------------------
    36                              <1>         ;---------------------------------------
    37                              <1>         ;数値出力
    38                              <1>         ;---------------------------------------
    39 00000A8B A1[0C0B0000]        <1>         mov     eax, [.bcd]                     ;   EAX = 1000* sin(t);
    40 00000A90 89C3                <1>         mov     ebx, eax                        ;   EBX = EAX;
    41                              <1> 
    42 00000A92 250F0F0000          <1>         and     eax, 0x0F0F                     ;   //上位4ビットをマスク
    43 00000A97 0D30300000          <1>         or      eax, 0x3030                     ;   //上位4ビットに0x3を設定
    44                              <1> 
    45 00000A9C C1EB04              <1>         shr     ebx, 4                          ;   EBX >> 4;
    46 00000A9F 81E30F0F0000        <1>         and     ebx, 0x0F0F                     ;   //上位4ビットをマスク
    47 00000AA5 81CB30300000        <1>         or      ebx, 0x3030                     ;   //上位4ビットに0x3を設定
    48                              <1> 
    49 00000AAB 883D[1E0B0000]      <1>         mov     [.s2 + 0], bh                   ;   //1桁目
    50 00000AB1 8825[200B0000]      <1>         mov     [.s3 + 0], ah                   ;   //小数1桁目
    51 00000AB7 881D[210B0000]      <1>         mov     [.s3 + 1], bl                   ;   //小数2桁目
    52 00000ABD A2[220B0000]        <1>         mov     [.s3 + 2], al                   ;   //小数3桁目
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;符号チェック
    56                              <1>         ;---------------------------------------
    57 00000AC2 B807000000          <1>         mov     eax, 7                          ;   //bt命令準備(取り出しbit番号指定)
    58 00000AC7 0FA305[150B0000]    <1>         bt      [.bcd + 9], eax                 ;   CF = bcd[9] & 0x80;
    59 00000ACE 7209                <1>         jc      .10F                            ;   if(CF)
    60                              <1>                                                 ;   {
    61 00000AD0 C605[1D0B0000]2B    <1>         mov     [.s1 + 0], byte '+'             ;       *s1 = '+';
    62 00000AD7 EB07                <1>         jmp     .10E                            ;   }
    63                              <1> .10F:                                           ;   else
    64                              <1>                                                 ;   {
    65 00000AD9 C605[1D0B0000]2D    <1>         mov     [.s1 + 0], byte '-'             ;       *s1 = '-';
    66                              <1> .10E:                                           ;   }
    67                              <1> 
    68 00000AE0 68[1D0B0000]6A076A- <1>         cdecl   draw_str, 72, 1, 0x07, .s1      ;   draw_str(.s1);
    68 00000AE8 016A48E89705000066- <1>
    68 00000AF1 83C410              <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;ウェイト
    72                              <1>         ;---------------------------------------
    73 00000AF4 6A0AE8790D00006683- <1>         cdecl   wait_tick, 10                   ;   wait_tick(10);
    73 00000AFD C404                <1>
    74                              <1> 
    75 00000AFF E977FFFFFF          <1>         jmp     .10L                            ;}
    76                              <1> 
    77                              <1>         ;---------------------------------------
    78                              <1>         ;データ
    79                              <1>         ;---------------------------------------
    80                              <1> ALIGN   4,  db  0
    81 00000B04 E8030000            <1> .c1000:     dd  1000
    82 00000B08 B4000000            <1> .c180:      dd  180
    83 00000B0C 00<rept>            <1> .bcd:   times 10    db  0x00
    84 00000B16 5461736B2D3200      <1> .s0:    db  "Task-2", 0
    85 00000B1D 2D                  <1> .s1:    db  "-"
    86 00000B1E 302E                <1> .s2:    db  "0."
    87 00000B20 30303000            <1> .s3:    db  "000", 0
   190                                  %include        "tasks/task_3.s"
     1                              <1> task_3:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;---------------------------------------
     5 00000B24 89E5                <1>         mov     ebp, esp                        ;EBP+ 0| EBP(元の値)
     6                              <1>                                                 ;------|---------
     7 00000B26 6A00                <1>         push    dword 0                         ;   - 4| x0 = 0; //X座標原点
     8 00000B28 6A00                <1>         push    dword 0                         ;   - 8| y0 = 0; //Y座標原点
     9 00000B2A 6A00                <1>         push    dword 0                         ;   -12| x  = 0; //X座標描画
    10 00000B2C 6A00                <1>         push    dword 0                         ;   -16| y  = 0; //Y座標描画
    11 00000B2E 6A00                <1>         push    dword 0                         ;   -20| r  = 0; //角度
    12                              <1> 
    13                              <1>         ;---------------------------------------
    14                              <1>         ;初期化
    15                              <1>         ;---------------------------------------
    16 00000B30 BE00701000          <1>         mov     esi, 0x0010_7000                 ;ESI = 描画パラメータ
    17                              <1> 
    18                              <1>         ;---------------------------------------
    19                              <1>         ;タイトル表示
    20                              <1>         ;---------------------------------------
    21 00000B35 8B06                <1>         mov     eax, [esi + rose.x0]            ;X0座標
    22 00000B37 8B5E04              <1>         mov     ebx, [esi + rose.y0]            ;Y0座標
    23                              <1> 
    24 00000B3A C1E803              <1>         shr     eax, 3                          ;ESI = EAX / 8; //X座標を文字位置に変換
    25 00000B3D C1EB04              <1>         shr     ebx, 4                          ;EDI = EBX / 16; //Y座標を文字位置に変換
    26 00000B40 4B                  <1>         dec     ebx                             ;//1文字分上に移動
    27 00000B41 8B4E24              <1>         mov     ecx, [esi + rose.color_s]       ;文字色
    28 00000B44 8D5630              <1>         lea     edx, [esi + rose.title]         ;タイトル
    29                              <1> 
    30 00000B47 52515350E837050000- <1>         cdecl   draw_str, eax, ebx, ecx, edx    ;   draw_str(.s0);
    30 00000B50 6683C410            <1>
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;X軸の中点
    34                              <1>         ;---------------------------------------
    35 00000B54 8B06                <1>         mov     eax, [esi + rose.x0]            ;EAX = X0座標;
    36 00000B56 8B5E08              <1>         mov     ebx, [esi + rose.x1]            ;EBX = X1座標;
    37 00000B59 29C3                <1>         sub     ebx, eax                        ;EBX = (X1 - X0);
    38 00000B5B D1EB                <1>         shr     ebx, 1                          ;EBX /= 2;
    39 00000B5D 01C3                <1>         add     ebx, eax                        ;EBX += X0;
    40 00000B5F 895DFC              <1>         mov     [ebp - 4], ebx                  ;x0 = EBX; //X座標原点;
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;Y軸の中点
    44                              <1>         ;---------------------------------------
    45 00000B62 8B4604              <1>         mov     eax, [esi + rose.y0]            ;EAX = Y0座標;
    46 00000B65 8B5E0C              <1>         mov     ebx, [esi + rose.y1]            ;EBX = Y1座標;
    47 00000B68 29C3                <1>         sub     ebx, eax                        ;EBX = (Y1 - Y0);
    48 00000B6A D1EB                <1>         shr     ebx, 1                          ;EBX /= 2;
    49 00000B6C 01C3                <1>         add     ebx, eax                        ;EBX += Y0;
    50 00000B6E 895DF8              <1>         mov     [ebp - 8], ebx                  ;y0 = EBX; //Y座標原点;
    51                              <1> 
    52                              <1>         ;---------------------------------------
    53                              <1>         ;X軸の描画
    54                              <1>         ;---------------------------------------
    55 00000B71 8B06                <1>         mov     eax, [esi + rose.x0]            ;EAX = X0座標;
    56 00000B73 8B5DF8              <1>         mov     ebx, [ebp - 8]                  ;EBX = Y軸の中点
    57 00000B76 8B4E08              <1>         mov     ecx, [esi + rose.x1]            ;ECX = X1座標;
    58                              <1> 
    59 00000B79 FF761853515350E87B- <1>         cdecl   draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]       ;X軸
    59 00000B82 0600006683C414      <1>
    60                              <1>         
    61                              <1>         ;---------------------------------------
    62                              <1>         ;Y軸の描画
    63                              <1>         ;---------------------------------------
    64 00000B89 8B4604              <1>         mov     eax, [esi + rose.y0]            ;EAX = Y0座標;
    65 00000B8C 8B5DFC              <1>         mov     ebx, [ebp - 4]                  ;EBX = X軸の中点
    66 00000B8F 8B4E0C              <1>         mov     ecx, [esi + rose.y1]            ;ECX = Y1座標;
    67                              <1> 
    68 00000B92 FF761C51535053E862- <1>         cdecl   draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]       ;Y軸
    68 00000B9B 0600006683C414      <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;枠の描画
    72                              <1>         ;---------------------------------------
    73 00000BA2 8B06                <1>         mov     eax, [esi + rose.x0]            ;X0座標
    74 00000BA4 8B5E04              <1>         mov     ebx, [esi + rose.y0]            ;Y0座標
    75 00000BA7 8B4E08              <1>         mov     ecx, [esi + rose.x1]            ;X1座標
    76 00000BAA 8B560C              <1>         mov     edx, [esi + rose.y1]            ;y1座標
    77                              <1> 
    78 00000BAD FF762052515350E8F6- <1>         cdecl   draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]       ;枠
    78 00000BB6 0600006683C414      <1>
    79                              <1> 
    80                              <1>         ;---------------------------------------
    81                              <1>         ;振れ幅をX軸の約95%とする
    82                              <1>         ;---------------------------------------
    83 00000BBD 8B4608              <1>         mov     eax, [esi + rose.x1]            ;EAX = X1座標;
    84 00000BC0 2B06                <1>         sub     eax, [esi + rose.x0]            ;EAX -= X0座標;
    85 00000BC2 D1E8                <1>         shr     eax, 1                          ;EAX /= 2; //半分
    86 00000BC4 89C3                <1>         mov     ebx, eax                        ;EBX = EAX;
    87 00000BC6 C1EB04              <1>         shr     ebx, 4                          ;EBX /= 16;
    88 00000BC9 29D8                <1>         sub     eax, ebx                        ;EAX -= EBX;
    89                              <1> 
    90                              <1>         ;---------------------------------------
    91                              <1>         ;FPUの初期化(パラ曲線の初期化)
    92                              <1>         ;---------------------------------------
    93 00000BCB FF7614FF761050E84D- <1>         cdecl   fpu_rose_init, eax, dword [esi + rose.n], dword [esi + rose.d]  ;fpu_rose_init(A, n, d);
    93 00000BD4 0100006683C40C      <1>
    94                              <1> 
    95                              <1>         ;---------------------------------------
    96                              <1>         ;メインループ
    97                              <1>         ;---------------------------------------
    98                              <1> .10L:                                           ;while(1)
    99                              <1>                                                 ;{
   100                              <1> 
   101                              <1>         ;---------------------------------------
   102                              <1>         ;座標計算
   103                              <1>         ;---------------------------------------
   104 00000BDB 8D5DF4              <1>         lea     ebx, [ebp -12]                  ;       EBX = &x;
   105 00000BDE 8D4DF0              <1>         lea     ecx, [ebp -16]                  ;       ECX = &y;
   106 00000BE1 8B45EC              <1>         mov     eax, [ebp -20]                  ;       EAX = r;
   107                              <1> 
   108 00000BE4 505153E85201000066- <1>         cdecl   fpu_rose_update, ebx, ecx, eax  ;       fpu_rose_update(&x, &y, r);
   108 00000BED 83C40C              <1>
   109                              <1> 
   110                              <1>         ;---------------------------------------
   111                              <1>         ;角度更新(r = r % 36000)
   112                              <1>         ;---------------------------------------
   113 00000BF0 BA00000000          <1>         mov     edx, 0                          ;       EDX = 0;
   114 00000BF5 40                  <1>         inc     eax                             ;       EAX++;
   115 00000BF6 BBA08C0000          <1>         mov     ebx, 360 * 100                  ;       EBX = 36000
   116 00000BFB F7F3                <1>         div     ebx                             ;       EDX = EDX:EAX % EBX;
   117 00000BFD 8955EC              <1>         mov     [ebp -20], edx
   118                              <1> 
   119                              <1>         ;---------------------------------------
   120                              <1>         ;ドット描画
   121                              <1>         ;---------------------------------------
   122 00000C00 8B4DF4              <1>         mov     ecx, [ebp -12]                  ;       ECX = X座標
   123 00000C03 8B55F0              <1>         mov     edx, [ebp -16]                  ;       ECX = Y座標
   124                              <1> 
   125 00000C06 034DFC              <1>         add     ecx, [ebp - 4]                  ;       ECX += X座標原点;
   126 00000C09 0355F8              <1>         add     edx, [ebp - 8]                  ;       EDX += Y座標原点;
   127                              <1> 
   128 00000C0C 8B5E28              <1>         mov     ebx, [esi + rose.color_f]       ;       EBX = 表示色;
   129 00000C0F CD82                <1>         int     0x82                            ;       sys_call_82(表示色, X, Y);
   130                              <1> 
   131                              <1>         ;---------------------------------------
   132                              <1>         ;ウェイト
   133                              <1>         ;---------------------------------------
   134 00000C11 6A02E85C0C00006683- <1>         cdecl   wait_tick, 2                    ;   wait_tick(2);
   134 00000C1A C404                <1>
   135                              <1> 
   136                              <1>         ;---------------------------------------
   137                              <1>         ;ドット描画(消去)
   138                              <1>         ;---------------------------------------
   139 00000C1C 8B5E2C              <1>         mov     ebx, [esi + rose.color_b]       ;       EBX = 背景色;
   140 00000C1F CD82                <1>         int     0x82                            ;       sys_call_82(背景色, X, Y);
   141                              <1> 
   142 00000C21 EBB8                <1>         jmp     .10L                            ;}
   143                              <1> 
   144                              <1>         ;---------------------------------------
   145                              <1>         ;データ
   146                              <1>         ;---------------------------------------
   147 00000C23 00                  <1> ALIGN 4, db 0
   148                              <1> DRAW_PARAM:
   149                              <1> .t3:
   150                              <1>         istruc  rose
   151 00000C24 20000000            <1>                 at      rose.x0,        dd      32              ;左上座標:X0
   152 00000C28 20000000            <1>                 at      rose.y0,        dd      32              ;左上座標:Y0
   153 00000C2C D0000000            <1>                 at      rose.x1,        dd      208             ;右下座標:X1
   154 00000C30 D0000000            <1>                 at      rose.y1,        dd      208             ;右下座標:Y1
   155                              <1> 
   156 00000C34 02000000            <1>                 at      rose.n,         dd      2               ;変数:n
   157 00000C38 01000000            <1>                 at      rose.d,         dd      1               ;変数:d
   158                              <1> 
   159 00000C3C 07000000            <1>                 at      rose.color_x,   dd      0x0007          ;描画色:X軸
   160 00000C40 07000000            <1>                 at      rose.color_y,   dd      0x0007          ;描画色:Y軸
   161 00000C44 0F000000            <1>                 at      rose.color_z,   dd      0x000F          ;描画色:枠
   162 00000C48 0F030000            <1>                 at      rose.color_s,   dd      0x030F          ;描画色:文字
   163 00000C4C 0F000000            <1>                 at      rose.color_f,   dd      0x000F          ;描画色:グラフ描画色
   164 00000C50 03000000            <1>                 at      rose.color_b,   dd      0x0003          ;描画色:グラフ消去色
   165                              <1> 
   166 00000C54 5461736B2D3300      <1>                 at      rose.title,     db      "Task-3", 0     ;タイトル
   167 00000C5B 00<rept>            <1>         iend
   168                              <1> 
   169                              <1> .t4:
   170                              <1>         istruc  rose
   171 00000C64 F8000000            <1>                 at      rose.x0,        dd      248             ;左上座標:X0
   172 00000C68 20000000            <1>                 at      rose.y0,        dd      32              ;左上座標:Y0
   173 00000C6C A8010000            <1>                 at      rose.x1,        dd      424             ;右下座標:X1
   174 00000C70 D0000000            <1>                 at      rose.y1,        dd      208             ;右下座標:Y1
   175                              <1> 
   176 00000C74 03000000            <1>                 at      rose.n,         dd      3               ;変数:n
   177 00000C78 01000000            <1>                 at      rose.d,         dd      1               ;変数:d
   178                              <1> 
   179 00000C7C 07000000            <1>                 at      rose.color_x,   dd      0x0007          ;描画色:X軸
   180 00000C80 07000000            <1>                 at      rose.color_y,   dd      0x0007          ;描画色:Y軸
   181 00000C84 0F000000            <1>                 at      rose.color_z,   dd      0x000F          ;描画色:枠
   182 00000C88 0F030000            <1>                 at      rose.color_s,   dd      0x030F          ;描画色:文字
   183 00000C8C 0F000000            <1>                 at      rose.color_f,   dd      0x000F          ;描画色:グラフ描画色
   184 00000C90 04000000            <1>                 at      rose.color_b,   dd      0x0004          ;描画色:グラフ消去色
   185                              <1> 
   186 00000C94 5461736B2D3400      <1>                 at      rose.title,     db      "Task-4", 0     ;タイトル
   187 00000C9B 00<rept>            <1>         iend
   188                              <1> 
   189                              <1> .t5:
   190                              <1>         istruc  rose
   191 00000CA4 20000000            <1>                 at      rose.x0,        dd      32              ;左上座標:X0
   192 00000CA8 10010000            <1>                 at      rose.y0,        dd      272             ;左上座標:Y0
   193 00000CAC D0000000            <1>                 at      rose.x1,        dd      208             ;右下座標:X1
   194 00000CB0 C0010000            <1>                 at      rose.y1,        dd      448             ;右下座標:Y1
   195                              <1> 
   196 00000CB4 02000000            <1>                 at      rose.n,         dd      2               ;変数:n
   197 00000CB8 06000000            <1>                 at      rose.d,         dd      6               ;変数:d
   198                              <1> 
   199 00000CBC 07000000            <1>                 at      rose.color_x,   dd      0x0007          ;描画色:X軸
   200 00000CC0 07000000            <1>                 at      rose.color_y,   dd      0x0007          ;描画色:Y軸
   201 00000CC4 0F000000            <1>                 at      rose.color_z,   dd      0x000F          ;描画色:枠
   202 00000CC8 0F030000            <1>                 at      rose.color_s,   dd      0x030F          ;描画色:文字
   203 00000CCC 0F000000            <1>                 at      rose.color_f,   dd      0x000F          ;描画色:グラフ描画色
   204 00000CD0 05000000            <1>                 at      rose.color_b,   dd      0x0005          ;描画色:グラフ消去色
   205                              <1> 
   206 00000CD4 5461736B2D3500      <1>                 at      rose.title,     db      "Task-5", 0     ;タイトル
   207 00000CDB 00<rept>            <1>         iend
   208                              <1> 
   209                              <1> .t6:
   210                              <1>         istruc  rose
   211 00000CE4 F8000000            <1>                 at      rose.x0,        dd      248             ;左上座標:X0
   212 00000CE8 10010000            <1>                 at      rose.y0,        dd      272             ;左上座標:Y0
   213 00000CEC A8010000            <1>                 at      rose.x1,        dd      424             ;右下座標:X1
   214 00000CF0 C0010000            <1>                 at      rose.y1,        dd      448             ;右下座標:Y1
   215                              <1> 
   216 00000CF4 04000000            <1>                 at      rose.n,         dd      4               ;変数:n
   217 00000CF8 06000000            <1>                 at      rose.d,         dd      6               ;変数:d
   218                              <1> 
   219 00000CFC 07000000            <1>                 at      rose.color_x,   dd      0x0007          ;描画色:X軸
   220 00000D00 07000000            <1>                 at      rose.color_y,   dd      0x0007          ;描画色:Y軸
   221 00000D04 0F000000            <1>                 at      rose.color_z,   dd      0x000F          ;描画色:枠
   222 00000D08 0F030000            <1>                 at      rose.color_s,   dd      0x030F          ;描画色:文字
   223 00000D0C 0F000000            <1>                 at      rose.color_f,   dd      0x000F          ;描画色:グラフ描画色
   224 00000D10 06000000            <1>                 at      rose.color_b,   dd      0x0006          ;描画色:グラフ消去色
   225                              <1> 
   226 00000D14 5461736B2D3600      <1>                 at      rose.title,     db      "Task-6", 0     ;タイトル
   227 00000D1B 00<rept>            <1>         iend
   228                              <1> 
   229                              <1> fpu_rose_init:
   230                              <1>         ;---------------------------------------
   231                              <1>         ;スタックフレームの構築
   232                              <1>         ;---------------------------------------
   233                              <1>                                                 ;   +16| d
   234                              <1>                                                 ;   +12| n
   235                              <1>                                                 ;   + 8| A
   236                              <1>                                                 ;   + 4| EIP(戻り番号)
   237 00000D24 55                  <1>         push    ebp                             ;EBP+ 0| EBP(元の値)
   238 00000D25 89E5                <1>         mov     ebp, esp                        ;------|---------
   239 00000D27 68B4000000          <1>         push    dword 180                       ;   - 4| dword i = 180;
   240                              <1> 
   241                              <1>         ;---------------------------------------
   242                              <1>         ;FPU
   243                              <1>         ;---------------------------------------
   244                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   245                              <1>                                         ;       ST0|        ST1|        ST2|        ST3|        ST4|        ST5|
   246                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   247 00000D2C D9EB                <1>         fldpi                           ;        pi|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   248 00000D2E DA75FC              <1>         fidiv   dword [ebp - 4]         ;    pi/180|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   249 00000D31 DB450C              <1>         fild    dword [ebp +12]         ;         n|     pi/180|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   250 00000D34 DA7510              <1>         fidiv   dword [ebp +16]         ;       n/d|     pi/180|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   251 00000D37 DB4508              <1>         fild    dword [ebp + 8]         ;         A|        n/d|     pi/180|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   252                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   253                              <1>                                         ;         A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   254                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   255                              <1> 
   256                              <1>         ;---------------------------------------
   257                              <1>         ;スタックフレームの破棄
   258                              <1>         ;---------------------------------------
   259 00000D3A 89EC                <1>         mov     esp, ebp
   260 00000D3C 5D                  <1>         pop     ebp
   261                              <1> 
   262 00000D3D C3                  <1>         ret
   263                              <1> 
   264                              <1> fpu_rose_update:
   265                              <1>         ;---------------------------------------
   266                              <1>         ;スタックフレームの構築
   267                              <1>         ;---------------------------------------
   268                              <1>                                                 ;   +16| t(角度)
   269                              <1>                                                 ;   +12| Y(float)のアドレス
   270                              <1>                                                 ;   + 8| X(float)のアドレス
   271                              <1>                                                 ;   + 4| EIP(戻り番号)
   272 00000D3E 55                  <1>         push   ebp                              ;EBP+ 0| EBP(元の値)
   273 00000D3F 89E5                <1>         mov    ebp, esp                         ;------|---------
   274                              <1> 
   275                              <1>         ;---------------------------------------
   276                              <1>         ;レジスタの保存
   277                              <1>         ;---------------------------------------
   278 00000D41 50                  <1>         push    eax
   279 00000D42 53                  <1>         push    ebx
   280                              <1> 
   281                              <1>         ;---------------------------------------
   282                              <1>         ;X/Y座標の保存先を設定
   283                              <1>         ;---------------------------------------
   284 00000D43 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = pX; //X座標へのポインタ
   285 00000D46 8B5D0C              <1>         mov     ebx, [ebp + 12]                 ;EBX = pY; //Y座標へのポインタ
   286                              <1>         
   287                              <1>         ;---------------------------------------
   288                              <1>         ;FPU
   289                              <1>         ;---------------------------------------
   290                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   291                              <1>                                         ;       ST0|        ST1|        ST2|        ST3|        ST4|        ST5|
   292                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   293 00000D49 DB4510              <1>         fild    dword [ebp +16]         ;         t|          A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|
   294 00000D4C D8CB                <1>         fmul    st0, st3                ;        rt|          A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|
   295 00000D4E D9C0                <1>         fld     st0                     ;        rt|         rt|          A|          k|          r|  xxxxxxxxx|
   296                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   297                              <1>                                         ;    θ=(rt)|     θ=(rt)|          A|          k|          r|  xxxxxxxxx|
   298                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   299 00000D50 D9FB                <1>         fsincos                         ;    cos(θ)|     sin(θ)|          θ|          A|          k|          r|
   300                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   301 00000D52 D9CA                <1>         fxch    st2                     ;         θ|     sin(θ)|     cos(θ)|          A|          k|          r|
   302 00000D54 D8CC                <1>         fmul    st0, st4                ;        kθ|     sin(θ)|     cos(θ)|          A|          k|          r|
   303 00000D56 D9FE                <1>         fsin                            ;   sin(kθ)|     sin(θ)|     cos(θ)|          A|          k|          r|
   304 00000D58 D8CB                <1>         fmul    st0, st3                ;  Asin(kθ)|     sin(θ)|     cos(θ)|          A|          k|          r|
   305                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   306 00000D5A D9CA                <1>         fxch    st2                     ;    cos(θ)|     sin(θ)|   Asin(kθ)|          A|          k|          r|
   307 00000D5C D8CA                <1>         fmul    st0, st2                ;         x|     sin(θ)|   Asin(kθ)|          A|          k|          r|
   308 00000D5E DB18                <1>         fistp   dword [eax]             ;    sin(θ)|   Asin(kθ)|          A|          k|          r|  xxxxxxxxx|
   309                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   310 00000D60 DEC9                <1>         fmulp   st1, st0                ;         y|          A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|
   311 00000D62 D9E0                <1>         fchs                            ;        -y|          A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|
   312 00000D64 DB1B                <1>         fistp   dword [ebx]             ;         A|          k|          r|  xxxxxxxxx|  xxxxxxxxx|  xxxxxxxxx|
   313                              <1>                                         ;----------|-----------|-----------|-----------|-----------|-----------|
   314                              <1> 
   315                              <1>         ;---------------------------------------
   316                              <1>         ;レジスタの復帰
   317                              <1>         ;---------------------------------------
   318 00000D66 5B                  <1>         pop     ebx
   319 00000D67 58                  <1>         pop     eax
   320                              <1> 
   321                              <1>         ;---------------------------------------
   322                              <1>         ;スタックフレームの破棄
   323                              <1>         ;---------------------------------------
   324 00000D68 89EC                <1>         mov     esp, ebp
   325 00000D6A 5D                  <1>         pop     ebp
   326                              <1> 
   327 00000D6B C3                  <1>         ret
   191                                  %include        "modules/paging.s"
     1                              <1> page_set_4m:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;---------------------------------------
     5                              <1>                                                 ;   + 8| ページテーブル作成位置
     6                              <1>                                                 ;   + 4| EIP(戻り番号)
     7 00000D6C 55                  <1>         push    ebp                             ;EBP+ 0| EBP(元の値)
     8 00000D6D 89E5                <1>         mov     ebp, esp                        ;------|---------
     9                              <1> 
    10                              <1>         ;---------------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;---------------------------------------
    13 00000D6F 60                  <1>         pusha
    14                              <1> 
    15                              <1>         ;---------------------------------------
    16                              <1>         ;ページディレクトリの作成(P=0)
    17                              <1>         ;---------------------------------------
    18 00000D70 FC                  <1>         cld                                     ;//DFクリア(+方向)
    19 00000D71 8B7D08              <1>         mov     edi, [ebp + 8]                  ;EDI = ページディレクトリの先頭;
    20 00000D74 B800000000          <1>         mov     eax, 0x0000_0000                ;EAX = 0; //P = 0
    21 00000D79 B900040000          <1>         mov     ecx, 1024                       ;count = 1024;
    22 00000D7E F3AB                <1>         rep     stosd                           ;while(cout--) *dst++ = 属性; //ページディレクトリ全てに0x00000000をセット
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;先頭のエントリーを設定
    26                              <1>         ;---------------------------------------
    27 00000D80 89F8                <1>         mov     eax, edi                        ;EAX = EDI; //ページディレクトリの直後
    28 00000D82 2500F0FFFF          <1>         and     eax, ~0x0000_0FFF               ;EAX &= ~0FFF; //物理アドレスの指定
    29 00000D87 83C807              <1>         or      eax, 7                          ;EAX |= 7; //RWの許可
    30 00000D8A 898700F0FFFF        <1>         mov     [edi - (1024 * 4)], eax         ;//先頭エントリを設定
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;ページテーブルの設定(リニア)
    34                              <1>         ;---------------------------------------
    35 00000D90 B807000000          <1>         mov     eax, 0x0000_0007                ;//物理アドレスの指定とRWの許可
    36 00000D95 B900040000          <1>         mov     ecx, 1024                       ;count = 1024;
    37                              <1>                                                 ;do
    38                              <1> .10L:                                           ;{
    39 00000D9A AB                  <1>         stosd                                   ;   *dst++ = 属性;
    40 00000D9B 0500100000          <1>         add     eax, 0x0000_1000                ;   adr += 0x1000;
    41 00000DA0 E2F8                <1>         loop    .10L                            ;}while(--count);
    42                              <1>         
    43                              <1>         ;---------------------------------------
    44                              <1>         ;レジスタの復帰
    45                              <1>         ;---------------------------------------
    46 00000DA2 61                  <1>         popa
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;スタックフレームの破棄
    50                              <1>         ;---------------------------------------
    51 00000DA3 89EC                <1>         mov     esp, ebp
    52 00000DA5 5D                  <1>         pop     ebp
    53                              <1> 
    54 00000DA6 C3                  <1>         ret
    55                              <1> 
    56                              <1> init_page:
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの保存
    59                              <1>         ;---------------------------------------
    60 00000DA7 60                  <1>         pusha
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;ページ変換テーブルの作成
    64                              <1>         ;---------------------------------------
    65 00000DA8 6800501000E8BAFFFF- <1>         cdecl   page_set_4m, CR3_BASE           ;ページ変換テーブルの作成:タスク3用
    65 00000DB1 FF6683C404          <1>
    66 00000DB6 6800002000E8ACFFFF- <1>         cdecl   page_set_4m, CR3_TASK_4         ;ページ変換テーブルの作成:タスク4用
    66 00000DBF FF6683C404          <1>
    67 00000DC4 6800202000E89EFFFF- <1>         cdecl   page_set_4m, CR3_TASK_5         ;ページ変換テーブルの作成:タスク5用
    67 00000DCD FF6683C404          <1>
    68 00000DD2 6800402000E890FFFF- <1>         cdecl   page_set_4m, CR3_TASK_6         ;ページ変換テーブルの作成:タスク6用
    68 00000DDB FF6683C404          <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;ページテーブルの設定(不在)
    72                              <1>         ;---------------------------------------
    73 00000DE0 C7051C641000000000- <1>         mov     [0x00106000 + 0x107 * 4], dword 0;0x0010_7000をページ不在に設定
    73 00000DE9 00                  <1>
    74                              <1> 
    75                              <1>         ;---------------------------------------
    76                              <1>         ;アドレス変換設定
    77                              <1>         ;---------------------------------------
    78 00000DEA C7051C142000078010- <1>         mov     [0x0020_1000 + 0x107 * 4], dword PARAM_TASK_4 + 7       ;//アドレス変換:タスク4用
    78 00000DF3 00                  <1>
    79 00000DF4 C7051C342000079010- <1>         mov     [0x0020_3000 + 0x107 * 4], dword PARAM_TASK_5 + 7       ;//アドレス変換:タスク5用
    79 00000DFD 00                  <1>
    80 00000DFE C7051C54200007A010- <1>         mov     [0x0020_5000 + 0x107 * 4], dword PARAM_TASK_6 + 7       ;//アドレス変換:タスク6用
    80 00000E07 00                  <1>
    81                              <1> 
    82                              <1>         ;---------------------------------------
    83                              <1>         ;描画パラメータの設定
    84                              <1>         ;---------------------------------------
    85 00000E08 6A4068[640C0000]68- <1>         cdecl   memcpy, PARAM_TASK_4, DRAW_PARAM.t4, rose_size          ;描画パラメータ:タスク4用
    85 00000E10 00801000E8790A0000- <1>
    85 00000E19 6683C40C            <1>
    86 00000E1D 6A4068[A40C0000]68- <1>         cdecl   memcpy, PARAM_TASK_5, DRAW_PARAM.t5, rose_size          ;描画パラメータ:タスク5用
    86 00000E25 00901000E8640A0000- <1>
    86 00000E2E 6683C40C            <1>
    87 00000E32 6A4068[E40C0000]68- <1>         cdecl   memcpy, PARAM_TASK_6, DRAW_PARAM.t6, rose_size          ;描画パラメータ:タスク5用
    87 00000E3A 00A01000E84F0A0000- <1>
    87 00000E43 6683C40C            <1>
    88                              <1> 
    89                              <1>         ;---------------------------------------
    90                              <1>         ;レジスタの復帰
    91                              <1>         ;---------------------------------------
    92 00000E47 61                  <1>         popa
    93                              <1> 
    94 00000E48 C3                  <1>         ret
   192                                  %include        "modules/int_pf.s"
     1                              <1> int_pf:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;---------------------------------------
     5                              <1>                                                 ;   + 4| EIP(戻り番号)
     6 00000E49 55                  <1>         push    ebp                             ;EBP+ 0| EBP(元の値)
     7 00000E4A 89E5                <1>         mov     ebp, esp                        ;------|---------
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;レジスタの保存
    11                              <1>         ;---------------------------------------
    12 00000E4C 60                  <1>         pusha
    13 00000E4D 1E                  <1>         push    ds
    14 00000E4E 06                  <1>         push    es
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;例外を生成したアドレスの確認
    18                              <1>         ;---------------------------------------
    19 00000E4F 0F20D0              <1>         mov     eax, cr2                        ;//CR2
    20 00000E52 2500F0FFFF          <1>         and     eax, ~0x0FFF                    ;//4Kバイト以内のアクセス
    21 00000E57 3D00701000          <1>         cmp     eax, 0x0010_7000                ;ptr = アクセスアドレス;
    22 00000E5C 7521                <1>         jne     .10F                            ;if(0x0010_7000 == ptr)
    23                              <1>                                                 ;{
    24 00000E5E C7051C641000077010- <1>         mov     [0x00106000 + 0x107 * 4], dword 0x00107007  ;//ページの有効化
    24 00000E67 00                  <1>
    25 00000E68 6A4068[240C0000]68- <1>         cdecl   memcpy, 0x0010_7000, DRAW_PARAM, rose_size  ;描画パラメータ:タスク3用
    25 00000E70 00701000E8190A0000- <1>
    25 00000E79 6683C40C            <1>
    26                              <1>                                                 ;}
    27 00000E7D EB15                <1>         jmp     .10E                            ;else
    28                              <1> .10F:                                           ;{
    29                              <1>         ;---------------------------------------
    30                              <1>         ;スタックの調整
    31                              <1>         ;---------------------------------------
    32 00000E7F 83C404              <1>         add     esp, 4                          ;pop es
    33 00000E82 83C404              <1>         add     esp, 4                          ;pop ds
    34 00000E85 61                  <1>         popa
    35 00000E86 5D                  <1>         pop     ebp
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;タスク終了処理
    39                              <1>         ;---------------------------------------
    40 00000E87 9C                  <1>         pushf                                   ;   //EFLAGS
    41 00000E88 0E                  <1>         push    cs                              ;   //CS
    42 00000E89 68[54140000]        <1>         push    int_stop                        ;   //スタック表示処理
    43                              <1> 
    44 00000E8E B8[9E0E0000]        <1>         mov     eax, .s0                        ;   //割り込み種別
    45 00000E93 CF                  <1>         iret                                    ;}
    46                              <1> .10E:
    47                              <1>         ;---------------------------------------
    48                              <1>         ;レジスタの復帰
    49                              <1>         ;---------------------------------------
    50 00000E94 07                  <1>         pop     es
    51 00000E95 1F                  <1>         pop     ds
    52 00000E96 61                  <1>         popa
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;スタックフレームの破棄
    56                              <1>         ;---------------------------------------
    57 00000E97 89EC                <1>         mov     esp, ebp
    58 00000E99 5D                  <1>         pop     ebp
    59                              <1> 
    60                              <1>         ;---------------------------------------
    61                              <1>         ;エラーコードの破棄
    62                              <1>         ;---------------------------------------
    63 00000E9A 83C404              <1>         add     esp, 4                          ;//エラーコードの破棄
    64                              <1> 
    65 00000E9D CF                  <1>         iret
    66                              <1>         ;---------------------------------------
    67                              <1>         ;データ
    68                              <1>         ;---------------------------------------
    69 00000E9E 203C20504147452046- <1> .s0:    db  " < PAGE FAULT > ", 0
    69 00000EA7 41554C54203E2000    <1>
   193                                  
   194                                  ;********************************************************************************************************
   195                                  ;モジュール
   196                                  ;********************************************************************************************************
   197                                  %include        "..\modules\protect\vga.s"
     1                              <1> vga_set_read_plane:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 読み込みプレーン(0~3)
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00000EAF 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00000EB0 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00000EB2 6650                <1>         push    ax
    14 00000EB4 6652                <1>         push    dx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;読み込みプレーンの選択
    18                              <1>         ;---------------------------------------
    19 00000EB6 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    20 00000EB9 80E403              <1>         and     ah, 0x03                        ;AH &= 0x03; //余計なビットをマスク
    21 00000EBC B004                <1>         mov     al, 0x04                        ;AL = 読み込みマップ選択レジスタ
    22 00000EBE 66BACE03            <1>         mov     dx, 0x03CE                      ;DX = グラフィックス制御ポート
    23 00000EC2 66EF                <1>         out     dx, ax                          ;//ポート出力
    24                              <1>         
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 00000EC4 665A                <1>         pop     dx
    29 00000EC6 6658                <1>         pop     ax
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;スタックフレームの破棄
    33                              <1>         ;---------------------------------------
    34 00000EC8 89EC                <1>         mov     esp, ebp
    35 00000ECA 5D                  <1>         pop     ebp
    36                              <1> 
    37 00000ECB C3                  <1>         ret
    38                              <1> 
    39                              <1> vga_set_write_plane:
    40                              <1>         ;-----------------------------------
    41                              <1>         ;スタックフレームの構築
    42                              <1>         ;-----------------------------------
    43                              <1>                                             ;   + 8| 書き込みプレーン
    44                              <1>                                             ;   + 4| IP(戻り番号)
    45 00000ECC 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    46 00000ECD 89E5                <1>         mov    ebp, esp                     ;------|---------
    47                              <1> 
    48                              <1>         ;-----------------------------------
    49                              <1>         ;レジスタの保存
    50                              <1>         ;-----------------------------------
    51 00000ECF 6650                <1>         push    ax
    52 00000ED1 6652                <1>         push    dx
    53                              <1> 
    54                              <1>         ;---------------------------------------
    55                              <1>         ;読み込みプレーンの選択
    56                              <1>         ;---------------------------------------
    57 00000ED3 8A6508              <1>         mov     ah, [ebp + 8]                   ;AH = プレーンの選択(3 = 輝度, 2~0 = RGB)
    58 00000ED6 80E40F              <1>         and     ah, 0x0F                        ;AH &= 0x03; //余計なビットをマスク
    59 00000ED9 B002                <1>         mov     al, 0x02                        ;AL = 読み込みマップ選択レジスタ
    60 00000EDB 66BAC403            <1>         mov     dx, 0x03C4                      ;DX = グラフィックス制御ポート
    61 00000EDF 66EF                <1>         out     dx, ax                          ;//ポート出力
    62                              <1>         
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 00000EE1 665A                <1>         pop     dx
    67 00000EE3 6658                <1>         pop     ax
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;スタックフレームの破棄
    71                              <1>         ;---------------------------------------
    72 00000EE5 89EC                <1>         mov     esp, ebp
    73 00000EE7 5D                  <1>         pop     ebp
    74                              <1> 
    75 00000EE8 C3                  <1>         ret
    76                              <1> 
    77                              <1> vram_font_copy:
    78                              <1>         ;-----------------------------------
    79                              <1>         ;スタックフレームの構築
    80                              <1>         ;-----------------------------------
    81                              <1>                                             ;EBP+20| 描画色
    82                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
    83                              <1>                                             ;EBP+12| VRAMアドレス
    84                              <1>                                             ;   + 8| FONTアドレス
    85                              <1>                                             ;   + 4| IP(戻り番号)
    86 00000EE9 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    87 00000EEA 89E5                <1>         mov    ebp, esp                     ;------|---------
    88                              <1> 
    89                              <1>         ;-----------------------------------
    90                              <1>         ;レジスタの保存
    91                              <1>         ;-----------------------------------
    92 00000EEC 50                  <1>         push    eax
    93 00000EED 53                  <1>         push    ebx
    94 00000EEE 51                  <1>         push    ecx
    95 00000EEF 57                  <1>         push    edi
    96 00000EF0 52                  <1>         push    edx
    97 00000EF1 56                  <1>         push    esi
    98                              <1> 
    99                              <1>         ;---------------------------------------
   100                              <1>         ;引数を変数に代入
   101                              <1>         ;---------------------------------------
   102 00000EF2 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = フォントアドレス;
   103 00000EF5 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   104 00000EF8 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   105 00000EFC 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   106                              <1> 
   107                              <1>         ;---------------------------------------
   108                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   109                              <1>         ;---------------------------------------
   110 00000F00 84C7                <1>         test    bh, al                          ;ZF = (背景色 & プレーン)
   111 00000F02 0F94C6              <1>         setz    dh                              ;if(ZF == 1){ DH = 0x00; }else{ DH = 0x01;}
   112 00000F05 FECE                <1>         dec     dh                              ;DH--; // 0xFF or 0x00
   113                              <1> 
   114 00000F07 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   115 00000F09 0F94C2              <1>         setz    dl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   116 00000F0C FECA                <1>         dec     dl                              ;DL--; //0xFF or 0x00
   117                              <1> 
   118                              <1>         ;---------------------------------------
   119                              <1>         ;16ビットフォントのコピー
   120                              <1>         ;---------------------------------------
   121 00000F0E FC                  <1>         cld                                     ;DF = 0; //アドレス加算
   122                              <1> 
   123 00000F0F B910000000          <1>         mov     ecx, 16                         ;ECX = 16; //16ドット
   124                              <1> .10L:                                           ;do
   125                              <1>                                                 ;{
   126                              <1>         ;---------------------------------------
   127                              <1>         ;フォントマスクの作成
   128                              <1>         ;---------------------------------------
   129 00000F14 AC                  <1>         lodsb                                   ;   AL = *ESI++; //フォント
   130 00000F15 88C4                <1>         mov     ah, al                          ;   AH = AL;
   131 00000F17 F6D4                <1>         not     ah                              ;   AH ~= AH; //!フォント(ビット反転)
   132                              <1> 
   133                              <1>         ;---------------------------------------
   134                              <1>         ;前景色
   135                              <1>         ;---------------------------------------
   136 00000F19 20D0                <1>         and     al, dl                          ;   AL = 前景色 & フォント;
   137                              <1> 
   138                              <1>         ;---------------------------------------
   139                              <1>         ;背景色
   140                              <1>         ;---------------------------------------
   141 00000F1B F7C310000000        <1>         test    ebx, 0x0010                     ;if(透過モード)
   142 00000F21 7404                <1>         jz      .11F                            ;{
   143 00000F23 2227                <1>         and     ah, [edi]                       ;   AH = !フォント & [EDI] //現在値
   144 00000F25 EB02                <1>         jmp     .11E                            ;}
   145                              <1> .11F:                                           ;else
   146                              <1>                                                 ;{
   147 00000F27 20F4                <1>         and     ah, dh                          ;   AH = !フォント & 背景色
   148                              <1> .11E:                                           ;}
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;前景色と背景色を合成
   152                              <1>         ;---------------------------------------
   153 00000F29 08E0                <1>         or  al, ah                              ;   AL = 背景 | 前景;
   154                              <1> 
   155                              <1>         ;---------------------------------------
   156                              <1>         ;新しい値を出力（VRAMに代入)
   157                              <1>         ;---------------------------------------
   158 00000F2B 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //プレーンに書き込む
   159                              <1> 
   160 00000F2D 83C750              <1>         add     edi, 80                         ;   EDI += 80;
   161 00000F30 E2E2                <1>         loop    .10L                            ;}while(--ECX);
   162                              <1> .10E:
   163                              <1>         ;---------------------------------------
   164                              <1>         ;レジスタの復帰
   165                              <1>         ;---------------------------------------
   166 00000F32 5E                  <1>         pop     esi
   167 00000F33 5A                  <1>         pop     edx
   168 00000F34 5F                  <1>         pop     edi
   169 00000F35 59                  <1>         pop     ecx
   170 00000F36 5B                  <1>         pop     ebx
   171 00000F37 58                  <1>         pop     eax
   172                              <1> 
   173                              <1>         ;---------------------------------------
   174                              <1>         ;スタックフレームの破棄
   175                              <1>         ;---------------------------------------
   176 00000F38 89EC                <1>         mov     esp, ebp
   177 00000F3A 5D                  <1>         pop     ebp
   178                              <1> 
   179 00000F3B C3                  <1>         ret
   180                              <1> 
   181                              <1> vram_bit_copy:
   182                              <1>         ;-----------------------------------
   183                              <1>         ;スタックフレームの構築
   184                              <1>         ;-----------------------------------
   185                              <1>                                             ;EBP+20| 描画色
   186                              <1>                                             ;EBP+16| 出力プレーン(1つのプレーンのみをビットで指定)
   187                              <1>                                             ;EBP+12| VRAMアドレス
   188                              <1>                                             ;   + 8| 出力ビットパターン
   189                              <1>                                             ;   + 4| IP(戻り番号)
   190 00000F3C 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
   191 00000F3D 89E5                <1>         mov    ebp, esp                     ;------|---------
   192                              <1> 
   193                              <1>         ;-----------------------------------
   194                              <1>         ;レジスタの保存
   195                              <1>         ;-----------------------------------
   196 00000F3F 50                  <1>         push    eax
   197 00000F40 53                  <1>         push    ebx
   198 00000F41 57                  <1>         push    edi
   199                              <1> 
   200                              <1>         ;---------------------------------------
   201                              <1>         ;引数を変数に代入
   202                              <1>         ;---------------------------------------
   203 00000F42 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = VRAMアドレス;
   204 00000F45 0FB64510            <1>         movzx   eax, byte [ebp +16]             ;EAX = プレーン(ビット指定);
   205 00000F49 0FB75D14            <1>         movzx   ebx, word [ebp +20]             ;EBX = 描画色
   206                              <1> 
   207                              <1>         ;---------------------------------------
   208                              <1>         ;マスクデータを作成(プレーンと景色が一致時に0xFFに。不一致時に0x00に。)
   209                              <1>         ;---------------------------------------
   210 00000F4D 84C3                <1>         test    bl, al                          ;ZF = (前景色 & プレーン);
   211 00000F4F 0F94C3              <1>         setz    bl                              ;if(ZF == 1){ DL = 0x00; }else{ DL = 0x01;}
   212 00000F52 FECB                <1>         dec     bl                              ;DL--; //0xFF or 0x00
   213                              <1> 
   214                              <1>         ;---------------------------------------
   215                              <1>         ;背景のマスクを作成
   216                              <1>         ;---------------------------------------
   217 00000F54 8A4508              <1>         mov     al, [ebp + 8]                   ;AL = 出力ビットパターン;
   218 00000F57 88C4                <1>         mov     ah, al                          ;AH ~= AL; //!出力ビットパターン(ビット反転)
   219 00000F59 F6D4                <1>         not     ah
   220                              <1> 
   221                              <1>         ;---------------------------------------
   222                              <1>         ;背景色
   223                              <1>         ;---------------------------------------
   224 00000F5B 2227                <1>         and     ah, [edi]                       ;AH = 現在値 & !出力ビットパターン
   225 00000F5D 20D8                <1>         and     al, bl                          ;AL = 表示色 & 出力ビットパターン
   226 00000F5F 08E0                <1>         or      al, ah                          ;AL |= AH;
   227 00000F61 8807                <1>         mov     [edi], al                       ;[EDI] = BL; //プレーンに書き込む
   228                              <1> 
   229                              <1>         ;---------------------------------------
   230                              <1>         ;レジスタの復帰
   231                              <1>         ;---------------------------------------
   232 00000F63 5F                  <1>         pop     edi
   233 00000F64 5B                  <1>         pop     ebx
   234 00000F65 58                  <1>         pop     eax
   235                              <1> 
   236                              <1>         ;---------------------------------------
   237                              <1>         ;スタックフレームの破棄
   238                              <1>         ;---------------------------------------
   239 00000F66 89EC                <1>         mov     esp, ebp
   240 00000F68 5D                  <1>         pop     ebp
   241                              <1> 
   242 00000F69 C3                  <1>         ret
   198                                  %include        "..\modules\protect\draw_char.s"
     1                              <1> draw_char:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +20| 文字
     6                              <1>                                             ;   +16| 描画色
     7                              <1>                                             ;   +12| 行(0~29)
     8                              <1>                                             ;   + 8| 列(0~79)
     9                              <1>                                             ;   + 4| IP(戻り番号)
    10 00000F6A 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    11 00000F6B 89E5                <1>         mov    ebp, esp                     ;------|---------
    12                              <1> 
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 00000F6D 53                  <1>         push    ebx
    17 00000F6E 57                  <1>         push    edi
    18 00000F6F 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 00000F70 0FB67514            <1>         movzx   esi, byte [ebp +20]             ;CL = 文字コード;
    24 00000F74 C1E604              <1>         shl     esi, 4                          ;CL *= 16; //1文字16バイト
    25 00000F77 0335[CC020000]      <1>         add     esi, [FONT_ADR]                 ;ESI = フォントアドレス;
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;コピー先アドレスを取得
    29                              <1>         ;adr = 0xA0000 + (640 / 8 * 16) * y + x
    30                              <1>         ;---------------------------------------
    31 00000F7D 8B7D0C              <1>         mov     edi, [ebp +12]                  ;Y(行)
    32 00000F80 C1E708              <1>         shl     edi, 8                          ;EDI = Y * 256;
    33 00000F83 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]  ;EDI = Y * 4 + Y;
    34 00000F8A 037D08              <1>         add     edi, [ebp + 8]                  ;X(列)
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;同期処理(リソース解法待ち(ビジーウェイト))
    38                              <1>         ;---------------------------------------
    39                              <1> %ifdef  USE_TEST_AND_SET
    40 00000F8D 68[40100000]E83008- <1>         cdecl   test_and_set, IN_USE            ;//リソースの空き待ち
    40 00000F95 00006683C404        <1>
    41                              <1> %endif
    42                              <1> 
    43                              <1>         ;---------------------------------------
    44                              <1>         ;1文字文のフォントを出力
    45                              <1>         ;---------------------------------------
    46 00000F9B 0FB75D10            <1>         movzx   ebx, word [ebp +16]             ; //表示色
    47                              <1> 
    48 00000F9F 6A03E809FFFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;//読み込みプレーン:輝度(I)
    48 00000FA8 C404                <1>
    49 00000FAA 6A08E81BFFFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;//書き込みプレーン:輝度(I)
    49 00000FB3 C404                <1>
    50 00000FB5 536A085756E82AFFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x08, ebx
    50 00000FBE FF6683C410          <1>
    51                              <1>         
    52 00000FC3 6A02E8E5FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;//読み込みプレーン:赤(R)
    52 00000FCC C404                <1>
    53 00000FCE 6A04E8F7FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;//書き込みプレーン:赤(R)
    53 00000FD7 C404                <1>
    54 00000FD9 536A045756E806FFFF- <1>         cdecl   vram_font_copy, esi, edi, 0x04, ebx
    54 00000FE2 FF6683C410          <1>
    55                              <1> 
    56 00000FE7 6A01E8C1FEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;//読み込みプレーン:緑(G)
    56 00000FF0 C404                <1>
    57 00000FF2 6A02E8D3FEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;//書き込みプレーン:緑(G)
    57 00000FFB C404                <1>
    58 00000FFD 536A025756E8E2FEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x02, ebx
    58 00001006 FF6683C410          <1>
    59                              <1> 
    60 0000100B 6A00E89DFEFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;//読み込みプレーン:青(B)
    60 00001014 C404                <1>
    61 00001016 6A01E8AFFEFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;//書き込みプレーン:青(B)
    61 0000101F C404                <1>
    62 00001021 536A015756E8BEFEFF- <1>         cdecl   vram_font_copy, esi, edi, 0x01, ebx
    62 0000102A FF6683C410          <1>
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;同期処理(リソース解法)
    66                              <1>         ;---------------------------------------
    67                              <1> %ifdef  USE_TEST_AND_SET
    68 0000102F C705[40100000]0000- <1>         mov     [IN_USE], dword 0               ;変数のクリア
    68 00001037 0000                <1>
    69                              <1> %endif
    70                              <1> 
    71                              <1>         ;---------------------------------------
    72                              <1>         ;レジスタの復帰
    73                              <1>         ;---------------------------------------
    74 00001039 5E                  <1>         pop     esi
    75 0000103A 5F                  <1>         pop     edi
    76 0000103B 5B                  <1>         pop     ebx
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 0000103C 89EC                <1>         mov     esp, ebp
    82 0000103E 5D                  <1>         pop     ebp
    83                              <1> 
    84 0000103F C3                  <1>         ret
    85                              <1> 
    86                              <1>         ;---------------------------------------
    87                              <1>         ;データ
    88                              <1>         ;---------------------------------------
    89                              <1> ALIGN   4,      db      0
    90 00001040 00000000            <1> IN_USE:         dd      0
   199                                  %include        "..\modules\protect\draw_font.s"
     1                              <1> draw_font:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00001044 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00001045 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 00001047 50                  <1>         push    eax
    15 00001048 53                  <1>         push    ebx
    16 00001049 51                  <1>         push    ecx
    17 0000104A 57                  <1>         push    edi
    18 0000104B 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;コピー元フォントアドレスを設定
    22                              <1>         ;---------------------------------------
    23 0000104C 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 0000104F 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;コピー先アドレスを取得
    28                              <1>         ;---------------------------------------
    29 00001052 B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 00001057 81F900010000        <1> .10L:   cmp     ecx, 256                        ;    ECX < 256;
    31 0000105D 731F                <1>         jae     .10E                            ;
    32                              <1>                                                 ;    ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示する桁位置を計算
    36                              <1>         ;---------------------------------------
    37 0000105F 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 00001061 83E00F              <1>         and     eax, 0x0F                       ;   EAX &= 0x0F;
    39 00001064 01F0                <1>         add     eax, esi                        ;   EAX += X;
    40                              <1>         ;---------------------------------------
    41                              <1>         ;表示する行位置を計算
    42                              <1>         ;---------------------------------------
    43 00001066 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    44 00001068 C1EB04              <1>         shr     ebx, 4                          ;   EBX /= 16;
    45 0000106B 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    46                              <1>         
    47 0000106D 516A075350E8F3FEFF- <1>         cdecl   draw_char, eax, ebx, 0x07, ecx  ;   draw_char();
    47 00001076 FF6683C410          <1>
    48                              <1> 
    49 0000107B 41                  <1>         inc     ecx                             ;   //for(... ECX++)
    50 0000107C EBD9                <1>         jmp     .10L                            ;
    51                              <1> .10E:                                           ;}
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;レジスタの復帰
    55                              <1>         ;---------------------------------------
    56 0000107E 5E                  <1>         pop     esi
    57 0000107F 5F                  <1>         pop     edi
    58 00001080 59                  <1>         pop     ecx
    59 00001081 5B                  <1>         pop     ebx
    60 00001082 58                  <1>         pop     eax
    61                              <1> 
    62                              <1>         ;---------------------------------------
    63                              <1>         ;スタックフレームの破棄
    64                              <1>         ;---------------------------------------
    65 00001083 89EC                <1>         mov     esp, ebp
    66 00001085 5D                  <1>         pop     ebp
    67                              <1> 
    68 00001086 C3                  <1>         ret
   200                                  %include        "..\modules\protect\draw_str.s"
     1                              <1> draw_str:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00001087 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 00001088 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 0000108A 50                  <1>         push    eax
    15 0000108B 53                  <1>         push    ebx
    16 0000108C 51                  <1>         push    ecx
    17 0000108D 52                  <1>         push    edx
    18 0000108E 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 0000108F 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = 列;
    24 00001092 8B550C              <1>         mov     edx, [ebp +12]                  ;EDX = 行;
    25 00001095 0FB75D10            <1>         movzx   ebx, word [ebp + 16]            ;EBX = 表示色;
    26 00001099 8B7514              <1>         mov     esi, [ebp +20]                  ;ESI = 文字列へのアドレス;
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字列を表示
    30                              <1>         ;---------------------------------------
    31 0000109C FC                  <1>         cld                                     ;DF = 0; //アドレス加算
    32                              <1> .10L:                                           ;do
    33                              <1>                                                 ;{
    34 0000109D AC                  <1>         lodsb                                   ;   AL = *ESI++;
    35 0000109E 3C00                <1>         cmp     al, 0                           ;   if(0 == AL)
    36 000010A0 741A                <1>         je  .10E                                ;       break;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;システムコールを利用して文字を出力する
    40                              <1>         ;---------------------------------------
    41                              <1> %ifdef  USE_SYSTEM_CALL
    42 000010A2 CD81                <1>         int     0x81                            ;       sys_call(1, X, Y, 色, 文字);
    43                              <1> %else
    44                              <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;       draw_char();
    45                              <1> %endif
    46                              <1> 
    47                              <1>         ;---------------------------------------
    48                              <1>         ;文字の表示位置を更新
    49                              <1>         ;---------------------------------------
    50 000010A4 41                  <1>         inc     ecx                             ;   ECX++; //列を加算
    51 000010A5 83F950              <1>         cmp     ecx, 80                         ;   if(80 <= ECX) //80文字以上?
    52 000010A8 7C10                <1>         jl      .12E                            ;   {
    53 000010AA B900000000          <1>         mov     ecx, 0                          ;       ECX = 0; //列を初期化
    54 000010AF 42                  <1>         inc     edx                             ;       EDX++; //行を加算
    55 000010B0 83FA1E              <1>         cmp     edx, 30                         ;       if(30 <= EDX) //30行以上?
    56 000010B3 7C05                <1>         jl      .12E                            ;       {
    57 000010B5 BA00000000          <1>         mov     edx, 0                          ;           EDX = 0;
    58                              <1>                                                 ;       }
    59                              <1> .12E:                                           ;   }
    60 000010BA EBE1                <1>         jmp     .10L                            ;
    61                              <1> .10E:                                           ;}while(1);
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;レジスタの復帰
    65                              <1>         ;---------------------------------------
    66 000010BC 5E                  <1>         pop     esi
    67 000010BD 5A                  <1>         pop     edx
    68 000010BE 59                  <1>         pop     ecx
    69 000010BF 5B                  <1>         pop     ebx
    70 000010C0 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 000010C1 89EC                <1>         mov     esp, ebp
    76 000010C3 5D                  <1>         pop     ebp
    77                              <1> 
    78 000010C4 C3                  <1>         ret
   201                                  %include        "..\modules\protect\draw_color_bar.s"
     1                              <1> draw_color_bar:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| Y(行)
     6                              <1>                                             ;   + 8| X(列)
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 000010C5 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     9 000010C6 89E5                <1>         mov    ebp, esp                     ;------|---------
    10                              <1> 
    11                              <1>         ;-----------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;-----------------------------------
    14 000010C8 50                  <1>         push    eax
    15 000010C9 53                  <1>         push    ebx
    16 000010CA 51                  <1>         push    ecx
    17 000010CB 52                  <1>         push    edx
    18 000010CC 56                  <1>         push    esi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;引数を変数に代入
    22                              <1>         ;---------------------------------------
    23 000010CD 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = X(列)
    24 000010D0 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行)
    25                              <1> 
    26                              <1>         ;---------------------------------------
    27                              <1>         ;カラーバーを表示
    28                              <1>         ;---------------------------------------
    29 000010D3 B900000000          <1>         mov     ecx, 0                          ;for(ECX = 0;
    30 000010D8 83F910              <1> .10L:   cmp     ecx, 16                         ;    ECX < 16;
    31 000010DB 732E                <1>         jae     .10E
    32                              <1>                                                 ;ECX++)
    33                              <1>                                                 ;{
    34                              <1>         ;---------------------------------------
    35                              <1>         ;表示位置を計算(列)
    36                              <1>         ;---------------------------------------
    37 000010DD 89C8                <1>         mov     eax, ecx                        ;   EAX = ECX;
    38 000010DF 83E001              <1>         and     eax, 0x01                       ;   EAX &= 0x01;
    39 000010E2 C1E003              <1>         shl     eax, 3                          ;   EAX *= 8; //8文字分乗算
    40 000010E5 01F0                <1>         add     eax, esi                        ;   EAX += X;
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;表示位置を計算(行)
    44                              <1>         ;---------------------------------------
    45 000010E7 89CB                <1>         mov     ebx, ecx                        ;   EBX = ECX;
    46 000010E9 D1EB                <1>         shr     ebx, 1                          ;   EBX /= 2;
    47 000010EB 01FB                <1>         add     ebx, edi                        ;   EBX += Y;
    48                              <1> 
    49                              <1>         ;---------------------------------------
    50                              <1>         ;描画色を計算
    51                              <1>         ;---------------------------------------
    52 000010ED 89CA                <1>         mov     edx, ecx                        ;   EDX = ECX;
    53 000010EF D1E2                <1>         shl     edx, 1                          ;   EDX *= 2;
    54 000010F1 8B92[1D110000]      <1>         mov     edx, [.t0 + edx]                ;   EDX += Y;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;カラーバーを表示
    58                              <1>         ;---------------------------------------
    59 000010F7 68[14110000]525350- <1>         cdecl   draw_str, eax, ebx, edx, .s0    ;   draw_str();
    59 000010FF E883FFFFFF6683C410  <1>
    60                              <1> 
    61 00001108 41                  <1>         inc     ecx                             ;   //for(...ECX++
    62 00001109 EBCD                <1>         jmp     .10L                            ;
    63                              <1> .10E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;レジスタの復帰
    67                              <1>         ;---------------------------------------
    68 0000110B 5E                  <1>         pop     esi
    69 0000110C 5A                  <1>         pop     edx
    70 0000110D 59                  <1>         pop     ecx
    71 0000110E 5B                  <1>         pop     ebx
    72 0000110F 58                  <1>         pop     eax
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;スタックフレームの破棄
    76                              <1>         ;---------------------------------------
    77 00001110 89EC                <1>         mov     esp, ebp
    78 00001112 5D                  <1>         pop     ebp
    79                              <1> 
    80 00001113 C3                  <1>         ret
    81                              <1> 
    82                              <1>         ;---------------------------------------
    83                              <1>         ;データ
    84                              <1>         ;---------------------------------------
    85 00001114 202020202020202000  <1> .s0:    db  '        ', 0                       ;8文字分のスペース(表示色だけを変更)
    86                              <1> 
    87 0000111D 00000008            <1> .t0:    dw  0x0000, 0x0800                      ;カラーバーの背景色
    88 00001121 00010009            <1>         dw  0x0100, 0x0900
    89 00001125 0002000A            <1>         dw  0x0200, 0x0A00
    90 00001129 0003000B            <1>         dw  0x0300, 0x0B00
    91 0000112D 0004000C            <1>         dw  0x0400, 0x0C00
    92 00001131 0005000D            <1>         dw  0x0500, 0x0D00
    93 00001135 0006000E            <1>         dw  0x0600, 0x0E00
    94 00001139 0007000F            <1>         dw  0x0700, 0x0F00
   202                                  %include        "..\modules\protect\draw_pixel.s"
     1                              <1> draw_pixel:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +16| 色
     6                              <1>                                             ;   +12| Y(行)
     7                              <1>                                             ;   + 8| X(列)
     8                              <1>                                             ;   + 4| IP(戻り番号)
     9 0000113D 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    10 0000113E 89E5                <1>         mov    ebp, esp                     ;------|---------
    11                              <1> 
    12                              <1>         ;-----------------------------------
    13                              <1>         ;レジスタの保存
    14                              <1>         ;-----------------------------------
    15 00001140 50                  <1>         push    eax
    16 00001141 53                  <1>         push    ebx
    17 00001142 51                  <1>         push    ecx
    18 00001143 57                  <1>         push    edi
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;描画位置のメモリアドレスを計算
    22                              <1>         ;---------------------------------------
    23                              <1>         ;---------------------------------------
    24                              <1>         ;Y座標を80倍する(640/8)
    25                              <1>         ;---------------------------------------
    26 00001144 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y座標;
    27 00001147 C1E704              <1>         shl     edi, 4                          ;EDI *= 16;
    28 0000114A 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000] ;EDI = 0xA_0000[EDI * 4 + EDI];
    29                              <1>         
    30                              <1>         ;---------------------------------------
    31                              <1>         ;X座標を1/8して加算
    32                              <1>         ;---------------------------------------
    33 00001151 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;EBX = X座標;
    34 00001154 89D9                <1>         mov     ecx, ebx                        ;ECX = X座標; //一時保存
    35 00001156 C1EB03              <1>         shr     ebx, 3                          ;EBX /= 8;
    36 00001159 01DF                <1>         add     edi, ebx                        ;EDI += EBX;
    37                              <1> 
    38                              <1>         ;---------------------------------------
    39                              <1>         ;X座標を8で割った余りからビット位置を計算(出力ビットパターン)
    40                              <1>         ;(0=0x80, 1=0x40,... 7=0x01)
    41                              <1>         ;---------------------------------------
    42 0000115B 83E107              <1>         and     ecx, 0x07                       ;ECX = X & 0x07;
    43 0000115E BB80000000          <1>         mov     ebx, 0x80                       ;EBX = 0x80;
    44 00001163 D3EB                <1>         shr     ebx, cl                         ;EBX >>= ECX;
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;色を指定
    48                              <1>         ;---------------------------------------
    49 00001165 8B4D10              <1>         mov     ecx, [ebp +16]                  ;表示色
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;プレーンごとに出力
    53                              <1>         ;---------------------------------------
    54 00001168 6A03E840FDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x03        ;輝度(I)プレーンを選択
    54 00001171 C404                <1>
    55 00001173 6A08E852FDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x08       ;輝度(I)プレーンを選択
    55 0000117C C404                <1>
    56 0000117E 516A085753E8B4FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x08, ecx
    56 00001187 FF6683C410          <1>
    57                              <1> 
    58 0000118C 6A02E81CFDFFFF6683- <1>         cdecl   vga_set_read_plane, 0x02        ;赤(R)プレーンを選択
    58 00001195 C404                <1>
    59 00001197 6A04E82EFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x04       ;赤(R)プレーンを選択
    59 000011A0 C404                <1>
    60 000011A2 516A045753E890FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x04, ecx
    60 000011AB FF6683C410          <1>
    61                              <1> 
    62 000011B0 6A01E8F8FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x01        ;緑(G)プレーンを選択
    62 000011B9 C404                <1>
    63 000011BB 6A02E80AFDFFFF6683- <1>         cdecl   vga_set_write_plane, 0x02       ;緑(G)プレーンを選択
    63 000011C4 C404                <1>
    64 000011C6 516A025753E86CFDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x02, ecx
    64 000011CF FF6683C410          <1>
    65                              <1> 
    66 000011D4 6A00E8D4FCFFFF6683- <1>         cdecl   vga_set_read_plane, 0x00        ;青(B)プレーンを選択
    66 000011DD C404                <1>
    67 000011DF 6A01E8E6FCFFFF6683- <1>         cdecl   vga_set_write_plane, 0x01       ;青(B)プレーンを選択
    67 000011E8 C404                <1>
    68 000011EA 516A015753E848FDFF- <1>         cdecl   vram_bit_copy, ebx, edi, 0x01, ecx
    68 000011F3 FF6683C410          <1>
    69                              <1> 
    70                              <1>         ;---------------------------------------
    71                              <1>         ;レジスタの復帰
    72                              <1>         ;---------------------------------------
    73 000011F8 5F                  <1>         pop     edi
    74 000011F9 59                  <1>         pop     ecx
    75 000011FA 5B                  <1>         pop     ebx
    76 000011FB 58                  <1>         pop     eax
    77                              <1> 
    78                              <1>         ;---------------------------------------
    79                              <1>         ;スタックフレームの破棄
    80                              <1>         ;---------------------------------------
    81 000011FC 89EC                <1>         mov     esp, ebp
    82 000011FE 5D                  <1>         pop     ebp
    83                              <1> 
    84 000011FF C3                  <1>         ret
   203                                  %include        "..\modules\protect\draw_line.s"
     1                              <1> draw_line:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00001200 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 00001201 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;変数を定義
    16                              <1>         ;-----------------------------------
    17 00001203 6A00                <1>         push    dword 0                     ;   - 4| sum = 0; //相対軸の積算値
    18 00001205 6A00                <1>         push    dword 0                     ;   - 8| x0 = 0; //X座標
    19 00001207 6A00                <1>         push    dword 0                     ;   -12| dx = 0; //X増分
    20 00001209 6A00                <1>         push    dword 0                     ;   -16| inc_x = 0; //X座標増分(基準軸:1 or -1)
    21 0000120B 6A00                <1>         push    dword 0                     ;   -20| y0 = 0; //Y座標
    22 0000120D 6A00                <1>         push    dword 0                     ;   -24| dy = 0; //Y増分
    23 0000120F 6A00                <1>         push    dword 0                     ;   -28| inc_y = 0; //Y座標増分(基準軸:1 or -1)
    24                              <1> 
    25                              <1>         ;-----------------------------------
    26                              <1>         ;レジスタの保存
    27                              <1>         ;-----------------------------------
    28 00001211 50                  <1>         push    eax
    29 00001212 53                  <1>         push    ebx
    30 00001213 51                  <1>         push    ecx
    31 00001214 57                  <1>         push    edi
    32 00001215 52                  <1>         push    edx
    33 00001216 56                  <1>         push    esi
    34                              <1> 
    35                              <1>         ;---------------------------------------
    36                              <1>         ;幅を計算(X軸)
    37                              <1>         ;---------------------------------------
    38 00001217 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    39 0000121A 8B5D10              <1>         mov     ebx, [ebp +16]                  ;EBX = X1;
    40 0000121D 29C3                <1>         sub     ebx, eax                        ;EBX = X1 - X0; //幅
    41 0000121F 7D09                <1>         jge     .10F                            ;if(幅 < 0)
    42                              <1>                                                 ;{
    43 00001221 F7DB                <1>         neg     ebx                             ;   幅 *= -1;
    44 00001223 BEFFFFFFFF          <1>         mov     esi, -1                         ;   //X座標の増分
    45 00001228 EB05                <1>         jmp     .10E                            ;}
    46                              <1> .10F:                                           ;else
    47                              <1>                                                 ;{
    48 0000122A BE01000000          <1>         mov     esi, 1                          ;   //X座標の増分
    49                              <1> .10E:                                           ;}
    50                              <1> 
    51                              <1>         ;---------------------------------------
    52                              <1>         ;高さを計算(Y軸)
    53                              <1>         ;---------------------------------------
    54 0000122F 8B4D0C              <1>         mov     ecx, [ebp +12]                  ;ECX = Y0;
    55 00001232 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    56 00001235 29CA                <1>         sub     edx, ecx                        ;EDX = Y1 - Y0; //高さ
    57 00001237 7D09                <1>         jge     .20F                            ;if(高さ < 0)
    58                              <1>                                                 ;{
    59 00001239 F7DA                <1>         neg     edx                             ;   高さ *= -1;
    60 0000123B BFFFFFFFFF          <1>         mov     edi, -1                         ;   //Y座標の増分
    61 00001240 EB05                <1>         jmp     .20E                            ;}
    62                              <1> .20F:                                           ;else
    63                              <1>                                                 ;{
    64 00001242 BF01000000          <1>         mov     edi, 1                          ;   //Y座標の増分
    65                              <1> .20E:                                           ;}
    66                              <1>         
    67                              <1>         ;---------------------------------------
    68                              <1>         ;X軸
    69                              <1>         ;---------------------------------------
    70 00001247 8945F8              <1>         mov     [ebp - 8], eax                  ;//X軸:開始座標
    71 0000124A 895DF4              <1>         mov     [ebp -12], ebx                  ;//X軸:描画幅
    72 0000124D 8975F0              <1>         mov     [ebp -16], esi                  ;//X軸:増分(基準軸:1 or -1)
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;Y軸
    76                              <1>         ;---------------------------------------
    77 00001250 894DEC              <1>         mov     [ebp -20], ecx                  ;//Y軸:開始座標
    78 00001253 8955E8              <1>         mov     [ebp -24], edx                  ;//Y軸:描画幅
    79 00001256 897DE4              <1>         mov     [ebp -28], edi                  ;//Y軸:増分(基準軸:1 or -1)
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;基準軸を決める
    83                              <1>         ;---------------------------------------
    84 00001259 39D3                <1>         cmp     ebx, edx                        ;if(幅 <= 高さ)
    85 0000125B 7F08                <1>         jg      .22F                            ;{
    86                              <1>         
    87 0000125D 8D75EC              <1>         lea     esi, [ebp -20]                  ;   //X軸が基準軸
    88 00001260 8D7DF8              <1>         lea     edi, [ebp - 8]                  ;   //Y軸が相対軸
    89                              <1> 
    90 00001263 EB06                <1>         jmp     .22E                            ;}
    91                              <1> .22F:                                           ;else
    92                              <1>                                                 ;{
    93 00001265 8D75F8              <1>         lea     esi, [ebp - 8]                  ;   //Y軸が基準軸
    94 00001268 8D7DEC              <1>         lea     edi, [ebp -20]                  ;   //X軸が相対軸
    95                              <1> .22E:                                           ;}
    96                              <1> 
    97                              <1>         ;---------------------------------------
    98                              <1>         ;繰り返し回数(基準軸のドット数)(基準軸の長さが0な場合,繰り返し回数を1に設定し,1ピクセルの点を描画)
    99                              <1>         ;---------------------------------------
   100 0000126B 8B4EFC              <1>         mov     ecx, [esi - 4]                  ;ECX = 基準軸描画幅
   101 0000126E 83F900              <1>         cmp     ecx, 0                          ;if(0 == ECX)
   102 00001271 7505                <1>         jnz     .30E                            ;{
   103 00001273 B901000000          <1>         mov     ecx, 1                          ;   ECX = 1;
   104                              <1> .30E:                                           ;}
   105                              <1> 
   106                              <1>         ;---------------------------------------
   107                              <1>         ;線を描画
   108                              <1>         ;---------------------------------------
   109                              <1> .50L:                                           ;do
   110                              <1>                                                 ;{
   111                              <1>         
   112                              <1>         ;---------------------------------------
   113                              <1>         ;同期処理
   114                              <1>         ;---------------------------------------
   115                              <1> %ifdef  USE_SYSTEM_CALL
   116 00001278 89C8                <1>         mov     eax, ecx                        ;       //繰り返し回数を保存
   117                              <1> 
   118 0000127A 8B5D18              <1>         mov     ebx, [ebp +24]                  ;       EBX = 表示色;
   119 0000127D 8B4DF8              <1>         mov     ecx, [ebp - 8]                  ;       ECX = X座標;
   120 00001280 8B55EC              <1>         mov     edx, [ebp -20]                  ;       ECX = Y座標;
   121 00001283 CD82                <1>         int     0x82                            ;       sys_call(1, X, Y, 色, 文字); //BX(C), CX(X), DX(Y)
   122                              <1> 
   123 00001285 89C1                <1>         mov     ecx, eax
   124                              <1> %else
   127                              <1>         cdecl   draw_pixel, dword [ebp - 8],                             dword [ebp -20],                             dword [ebp +24]     ;   //点の描画
   128                              <1> %endif
   129                              <1> 
   130                              <1>         ;---------------------------------------
   131                              <1>         ;基準軸を更新
   132                              <1>         ;---------------------------------------
   133 00001287 8B46F8              <1>         mov     eax, [esi - 8]                  ;   EAX = 基準軸増加(1 or -1);
   134 0000128A 0106                <1>         add     [esi - 0], eax                  ;
   135                              <1> 
   136                              <1>         ;---------------------------------------
   137                              <1>         ;相対軸を更新
   138                              <1>         ;---------------------------------------
   139 0000128C 8B45FC              <1>         mov     eax, [ebp - 4]                  ;   EAX = sum;  //相対軸の積算値
   140 0000128F 0347FC              <1>         add     eax, [edi - 4]                  ;   EAX += dy;  //増加(相対軸の描画幅)
   141                              <1> 
   142 00001292 8B5EFC              <1>         mov     ebx, [esi - 4]                  ;   EBX = dx;   //増分(基準軸の描画幅)
   143                              <1> 
   144 00001295 39D8                <1>         cmp     eax, ebx                        ;   if(積算値 <= 相対軸の増分)
   145 00001297 7C07                <1>         jl      .52E                            ;   {
   146 00001299 29D8                <1>         sub     eax, ebx                        ;       EAX -= EBX; //積算値から相対軸の増分を減算
   147                              <1>                                                 ;       //相対軸の座標を更新(1ドット分)
   148 0000129B 8B5FF8              <1>         mov     ebx, [edi - 8]                  ;       EBX = 相対軸増分;
   149 0000129E 011F                <1>         add     [edi - 0], ebx                  ;       相対軸座標 = EBX;
   150                              <1> .52E:                                           ;   }
   151                              <1> 
   152 000012A0 8945FC              <1>         mov     [ebp - 4], eax                  ;//積算値を更新
   153                              <1> 
   154 000012A3 E2D3                <1>         loop    .50L
   155                              <1> .50E:                                           ;} while(ループ回数--);
   156                              <1> 
   157                              <1>         ;---------------------------------------
   158                              <1>         ;レジスタの復帰
   159                              <1>         ;---------------------------------------
   160 000012A5 5E                  <1>         pop     esi
   161 000012A6 5A                  <1>         pop     edx
   162 000012A7 5F                  <1>         pop     edi
   163 000012A8 59                  <1>         pop     ecx
   164 000012A9 5B                  <1>         pop     ebx
   165 000012AA 58                  <1>         pop     eax
   166                              <1> 
   167                              <1>         ;---------------------------------------
   168                              <1>         ;スタックフレームの破棄
   169                              <1>         ;---------------------------------------
   170 000012AB 89EC                <1>         mov     esp, ebp
   171 000012AD 5D                  <1>         pop     ebp
   172                              <1> 
   173 000012AE C3                  <1>         ret
   204                                  %include        "..\modules\protect\draw_rect.s"
     1                              <1> draw_rect:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| 色
     6                              <1>                                             ;   +20| Y1(終点のY座標)
     7                              <1>                                             ;   +16| X1(終点のX座標)
     8                              <1>                                             ;   +12| Y0(始点のY座標)
     9                              <1>                                             ;   + 8| X0(始点のX座標)
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 000012AF 55                  <1>         push    ebp                         ;EBP+ 0| EBP(元の値)
    12 000012B0 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1>         ;-----------------------------------
    14                              <1>         ;レジスタの保存
    15                              <1>         ;-----------------------------------
    16 000012B2 50                  <1>         push    eax
    17 000012B3 53                  <1>         push    ebx
    18 000012B4 51                  <1>         push    ecx
    19 000012B5 52                  <1>         push    edx
    20 000012B6 56                  <1>         push    esi
    21                              <1> 
    22                              <1>         ;---------------------------------------
    23                              <1>         ;変数に引数を代入
    24                              <1>         ;---------------------------------------
    25 000012B7 8B4508              <1>         mov     eax, [ebp + 8]                  ;EAX = X0;
    26 000012BA 8B5D0C              <1>         mov     ebx, [ebp +12]                  ;EBX = Y0;
    27 000012BD 8B4D10              <1>         mov     ecx, [ebp +16]                  ;ECX = X1;
    28 000012C0 8B5514              <1>         mov     edx, [ebp +20]                  ;EDX = Y1;
    29 000012C3 8B7518              <1>         mov     esi, [ebp +24]                  ;ESI = 色;
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;座標軸の大小を確定
    33                              <1>         ;---------------------------------------
    34 000012C6 39C8                <1>         cmp     eax, ecx                        ;if(X1 < X0)
    35 000012C8 7C01                <1>         jl      .10E                            ;{
    36 000012CA 91                  <1>         xchg    eax, ecx                        ;   //X0とX1を入れ替える;
    37                              <1> .10E:                                           ;}
    38                              <1> 
    39 000012CB 39D3                <1>         cmp     ebx, edx                        ;if(Y1 < Y0)
    40 000012CD 7C02                <1>         jl      .20E                            ;{
    41 000012CF 87DA                <1>         xchg    ebx, edx                        ;   //Y0とY1を入れ替える;
    42                              <1> .20E:                                           ;}
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;矩形を描画
    46                              <1>         ;---------------------------------------
    47 000012D1 5653515350E825FFFF- <1>         cdecl   draw_line, eax, ebx, ecx, ebx, esi  ;上線
    47 000012DA FF6683C414          <1>
    48 000012DF 5652505350E817FFFF- <1>         cdecl   draw_line, eax, ebx, eax, edx, esi  ;左線
    48 000012E8 FF6683C414          <1>
    49                              <1> 
    50 000012ED 4A                  <1>         dec     edx                                 ;EDX--; //下線は1ドット上げる
    51 000012EE 5652515250E808FFFF- <1>         cdecl   draw_line, eax, edx, ecx, edx, esi  ;下線
    51 000012F7 FF6683C414          <1>
    52 000012FC 42                  <1>         inc     edx
    53                              <1> 
    54 000012FD 49                  <1>         dec     ecx                                 ;ECX--; //右線は1ドット左に移動
    55 000012FE 5652515351E8F8FEFF- <1>         cdecl   draw_line, ecx, ebx, ecx, edx, esi  ;右線
    55 00001307 FF6683C414          <1>
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;レジスタの復帰
    59                              <1>         ;---------------------------------------
    60 0000130C 5E                  <1>         pop     esi
    61 0000130D 5A                  <1>         pop     edx
    62 0000130E 59                  <1>         pop     ecx
    63 0000130F 5B                  <1>         pop     ebx
    64 00001310 58                  <1>         pop     eax
    65                              <1> 
    66                              <1>         ;---------------------------------------
    67                              <1>         ;スタックフレームの破棄
    68                              <1>         ;---------------------------------------
    69 00001311 89EC                <1>         mov     esp, ebp
    70 00001313 5D                  <1>         pop     ebp
    71                              <1> 
    72 00001314 C3                  <1>         ret
   205                                  %include        "..\modules\protect\itoa.s"
     1                              <1> itoa:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 00001315 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 00001316 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00001318 50                  <1>         push    eax
    18 00001319 53                  <1>         push    ebx
    19 0000131A 51                  <1>         push    ecx
    20 0000131B 52                  <1>         push    edx
    21 0000131C 56                  <1>         push    esi
    22 0000131D 57                  <1>         push    edi
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;引数の取得
    26                              <1>         ;---------------------------------------
    27 0000131E 8B4508              <1>         mov     eax, [ebp + 8]                  ;eax(val) =  数値;
    28 00001321 8B750C              <1>         mov     esi, [ebp + 12]                 ;esi(dst) = バッファアドレス;
    29 00001324 8B4D10              <1>         mov     ecx, [ebp + 16]                 ;ecx(size) = バッファサイズ;
    30                              <1> 
    31 00001327 89F7                <1>         mov     edi, esi                        ;edi = esi(dst); //バッファの最後尾
    32 00001329 01CF                <1>         add     edi, ecx                        ;edi(dst) = edi + ecx - 1;
    33 0000132B 4F                  <1>         dec     edi
    34                              <1> 
    35 0000132C 8B5D18              <1>         mov     ebx, [ebp + 24]            ;flags = オプション;
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;符号付き判定
    39                              <1>         ;---------------------------------------
    40 0000132F F7C301000000        <1>         test    ebx, 0b0001                      ;if(flags & 0x01) //符号付き
    41 00001335 7408                <1> .10Q:   je      .10E                            ;{
    42 00001337 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    43 0000133A 7D03                <1> .12Q:   jge     .12E                            ;   {
    44 0000133C 83CB02              <1>         or      ebx, 0b0010                     ;       flags |= 2; //符号表示
    45                              <1> .12E:                                           ;   }
    46                              <1> .10E:                                           ;}
    47                              <1> 
    48                              <1>         ;---------------------------------------
    49                              <1>         ;符号付き判定
    50                              <1>         ;---------------------------------------
    51 0000133F F7C302000000        <1>         test    ebx, 0b0010                     ;if(flags & 0x02) //符号出力判定
    52 00001345 7410                <1> .20Q:   je      .20E                            ;{
    53 00001347 83F800              <1>         cmp     eax, 0                          ;   if(val < 0)
    54 0000134A 7D07                <1> .22Q:   jge     .22F                            ;   {
    55 0000134C F7D8                <1>         neg     eax                             ;       val *= -1; //符号反転
    56 0000134E C6062D              <1>         mov     [esi], byte '-'                 ;       *dst = '-'; //符号表示
    57 00001351 EB03                <1>         jmp     .22E                            ;   }
    58                              <1> .22F:                                           ;   else
    59                              <1>                                                 ;   {
    60 00001353 C6062B              <1>         mov     [esi], byte '+'                 ;       *dst = '+'; //符号表示
    61                              <1> .22E:                                           ;   }
    62 00001356 49                  <1>         dec     ecx                             ;   size--;     //残りバッファサイズの減算
    63                              <1> .20E:                                           ;}
    64                              <1> 
    65                              <1>         ;---------------------------------------
    66                              <1>         ;ASCII変換
    67                              <1>         ;---------------------------------------
    68 00001357 8B5D14              <1>         mov     ebx, [ebp + 20]                 ;BX = 基数;
    69                              <1> .30L:                                           ;do
    70                              <1>                                                 ;{
    71 0000135A BA00000000          <1>         mov     edx, 0                          ;
    72 0000135F F7F3                <1>         div     ebx                             ;   DX = DX:AX % 基数;
    73                              <1>                                                 ;   AX = DX:AX / 基数;
    74                              <1>                                                 ;
    75 00001361 89D6                <1>         mov     esi, edx                        ;   //テーブル参照
    76 00001363 8A96[8E130000]      <1>         mov     dl, byte [.ascii + esi]         ;   DL = ASCII[DX]
    77                              <1>                                                 ;
    78 00001369 8817                <1>         mov     [edi], dl                       ;   *dst = DL;
    79 0000136B 4F                  <1>         dec     edi                             ;   dst--;
    80                              <1>                                                 ;
    81 0000136C 83F800              <1>         cmp     eax, 0                          ;
    82 0000136F E0E9                <1>         loopnz  .30L                            ;}while(AX);
    83                              <1> .30E:
    84                              <1> 
    85                              <1>         ;---------------------------------------
    86                              <1>         ;空欄を埋める
    87                              <1>         ;---------------------------------------
    88 00001371 83F900              <1>         cmp     ecx, 0                          ;if(size)
    89 00001374 740E                <1> .40Q:   je      .40E                            ;{
    90 00001376 B020                <1>         mov     al, ' '                         ;       AL = ' '; // ' 'で埋める(デフォルト値)
    91 00001378 66837D1804          <1>         cmp     [ebp + 24], word 0b0100         ;       if(flags & 0x04)
    92 0000137D 7502                <1> .42Q:   jne     .42E                            ;           {
    93 0000137F B030                <1>         mov     al, '0'                         ;               AL = '0'; // '0'で埋める
    94                              <1> .42E:                                           ;           }
    95 00001381 FD                  <1>         std                                     ;       // DF = 1(-方向)
    96 00001382 F3AA                <1>         rep     stosb                           ;       while(--CX) *DI -- = AL;
    97                              <1> .40E:                                           ;}
    98                              <1>         
    99                              <1>         ;---------------------------------------
   100                              <1>         ;レジスタの復帰
   101                              <1>         ;---------------------------------------
   102 00001384 5F                  <1>         pop     edi
   103 00001385 5E                  <1>         pop     esi
   104 00001386 5A                  <1>         pop     edx
   105 00001387 59                  <1>         pop     ecx
   106 00001388 5B                  <1>         pop     ebx
   107 00001389 58                  <1>         pop     eax
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;スタックフレームの破棄
   111                              <1>         ;---------------------------------------
   112 0000138A 89EC                <1>         mov     esp, ebp
   113 0000138C 5D                  <1>         pop     ebp
   114                              <1> 
   115 0000138D C3                  <1>         ret
   116                              <1> 
   117 0000138E 303132333435363738- <1> .ascii  db      "0123456789ABCDEF"              ;変換テーブル
   117 00001397 39414243444546      <1>
   206                                  %include        "..\modules\protect\rtc.s"
     1                              <1> rtc_get_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| 保存先アドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 0000139E 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 0000139F 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 000013A1 53                  <1>         push    ebx
    14                              <1> 
    15                              <1>         ;---------------------------------------
    16                              <1>         ;RTCから必要な情報を取得
    17                              <1>         ;---------------------------------------
    18 000013A2 B00A                <1>         mov     al, 0x0A                        ;//レジスタA
    19 000013A4 E670                <1>         out     0x70, al                        ;outp(0x70, AL);
    20 000013A6 E471                <1>         in      al, 0x71                        ;AL = レジスタA
    21 000013A8 A880                <1>         test    al, 0x80                        ;if(UIP) //更新中
    22 000013AA 7407                <1>         je      .10F                            ;{
    23 000013AC B801000000          <1>         mov     eax, 1                          ;   return 0; //データ更新中
    24 000013B1 EB27                <1>         jmp     .10E                            ;}
    25                              <1> .10F:                                           ;else
    26                              <1>                                                 ;{
    27 000013B3 B004                <1>         mov     al, 0x04                        ;   AL = 0x04;
    28 000013B5 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    29 000013B7 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //時データ
    30                              <1> 
    31 000013B9 C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    32                              <1> 
    33 000013BC B002                <1>         mov     al, 0x02                        ;   AL = 0x02;
    34 000013BE E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    35 000013C0 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //分データ
    36                              <1> 
    37 000013C2 C1E008              <1>         shl     eax, 8                          ;   EAX <<= 8; //データを退避
    38                              <1> 
    39                              <1>                                                 ;   RAM[0x00]:秒
    40 000013C5 B000                <1>         mov     al, 0x00                        ;   AL = 0x00;
    41 000013C7 E670                <1>         out     0x70, al                        ;   outp(0x70, AL);
    42 000013C9 E471                <1>         in      al, 0x71                        ;   AL = inp(0x71); //秒データ
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;有効なデータのみをアドレス先へ保存
    46                              <1>         ;---------------------------------------
    47 000013CB 25FFFFFF00          <1>         and     eax, 0x00_FF_FF_FF              ;//下位3バイトのみ有効
    48                              <1> 
    49 000013D0 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;dst = 保存先;
    50 000013D3 8903                <1>         mov     [ebx], eax                      ;[dst] = 時刻;
    51                              <1>         
    52 000013D5 B801000000          <1>         mov     eax, 1                          ;   return 1; //正常終了
    53                              <1> .10E:                                           ;}
    54                              <1> 
    55                              <1>         ;---------------------------------------
    56                              <1>         ;レジスタの復帰
    57                              <1>         ;---------------------------------------
    58 000013DA 5B                  <1>         pop     ebx
    59                              <1> 
    60                              <1>         ;---------------------------------------
    61                              <1>         ;スタックフレームの破棄
    62                              <1>         ;---------------------------------------
    63 000013DB 89EC                <1>         mov     esp, ebp
    64 000013DD 5D                  <1>         pop     ebp
    65                              <1> 
    66 000013DE C3                  <1>         ret
   207                                  %include        "..\modules\protect\draw_time.s"
     1                              <1> draw_time:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +24| フラグ
     6                              <1>                                             ;   +20| 基数
     7                              <1>                                             ;   +16| バッファサイズ
     8                              <1>                                             ;   +12| バッファアドレス
     9                              <1>                                             ;   + 8| 数値
    10                              <1>                                             ;   + 4| IP(戻り番号)
    11 000013DF 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    12 000013E0 89E5                <1>         mov     ebp, esp                    ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 000013E2 50                  <1>         push    eax
    18 000013E3 53                  <1>         push    ebx
    19                              <1> 
    20                              <1>         ;---------------------------------------
    21                              <1>         ;数字を文字に変換
    22                              <1>         ;---------------------------------------
    23 000013E4 8B4514              <1>         mov     eax, [ebp +20]                  ;EAX = 時刻データ;
    24                              <1> 
    25 000013E7 0FB6D8              <1>         movzx   ebx, al                         ;EBX = 秒;
    26 000013EA 6A046A106A0268-     <1>         cdecl   itoa, ebx, .sec, 2, 16, 0b0100  ;//文字を変換
    26 000013F1 [51140000]53E81AFF- <1>
    26 000013F9 FFFF6683C414        <1>
    27                              <1> 
    28 000013FF 88E3                <1>         mov     bl, ah                          ;EBX = 分;
    29 00001401 6A046A106A0268-     <1>         cdecl   itoa, ebx, .min, 2, 16, 0b0100  ;//文字に変換
    29 00001408 [4E140000]53E803FF- <1>
    29 00001410 FFFF6683C414        <1>
    30                              <1> 
    31 00001416 C1E810              <1>         shr     eax, 16                         ;EBX = 時;
    32 00001419 6A046A106A0268-     <1>         cdecl   itoa, eax, .hour, 2, 16, 0b0100 ;//文字に変換
    32 00001420 [4B140000]50E8EBFE- <1>
    32 00001428 FFFF6683C414        <1>
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;文字列を表示
    36                              <1>         ;---------------------------------------
    37 0000142E 68[4B140000]FF7510- <1>         cdecl   draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    37 00001436 FF750CFF7508E846FC- <1>
    37 0000143F FFFF6683C410        <1>
    38                              <1>         
    39                              <1>         ;---------------------------------------
    40                              <1>         ;レジスタの復帰
    41                              <1>         ;---------------------------------------
    42 00001445 5B                  <1>         pop     ebx
    43 00001446 58                  <1>         pop     eax
    44                              <1> 
    45                              <1>         ;---------------------------------------
    46                              <1>         ;スタックフレームの破棄
    47                              <1>         ;---------------------------------------
    48 00001447 89EC                <1>         mov     esp, ebp
    49 00001449 5D                  <1>         pop     ebp
    50                              <1> 
    51 0000144A C3                  <1>         ret
    52                              <1> 
    53                              <1>         ;---------------------------------------
    54                              <1>         ;データ
    55                              <1>         ;---------------------------------------
    56 0000144B 5A5A3A              <1>         .hour:  db  "ZZ:"
    57 0000144E 5A5A3A              <1>         .min:   db  "ZZ:"
    58 00001451 5A5A00              <1>         .sec:   db  "ZZ", 0
   208                                  %include        "..\modules\protect\interrupt.s"
     1                              <1> int_stop:
     2 00001454 FB                  <1>         sti                                     ;//割り込み許可
     3                              <1> 
     4                              <1>         ;---------------------------------------
     5                              <1>         ;EAXで示される文字列を表示
     6                              <1>         ;---------------------------------------
     7 00001455 50680F0600006A0F6A- <1>         cdecl   draw_str, 25, 15, 0x060F, eax   ;draw_str(EAX);
     7 0000145E 19E823FCFFFF6683C4- <1>
     7 00001467 10                  <1>
     8                              <1>         
     9                              <1>         ;---------------------------------------
    10                              <1>         ;スタックのデータを文字列に変換
    11                              <1>         ;---------------------------------------
    12 00001468 8B0424              <1>         mov     eax, [esp + 0]                  ;EAX = ESP[ 0];
    13 0000146B 6A046A106A0868-     <1>         cdecl   itoa, eax, .p1, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    13 00001472 [30150000]50E899FE- <1>
    13 0000147A FFFF6683C414        <1>
    14                              <1> 
    15 00001480 8B442404            <1>         mov     eax, [esp + 4]                  ;EAX = ESP[ 4];
    16 00001484 6A046A106A0868-     <1>         cdecl   itoa, eax, .p2, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    16 0000148B [41150000]50E880FE- <1>
    16 00001493 FFFF6683C414        <1>
    17                              <1> 
    18 00001499 8B442408            <1>         mov     eax, [esp + 8]                  ;EAX = ESP[ 8];
    19 0000149D 6A046A106A0868-     <1>         cdecl   itoa, eax, .p3, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    19 000014A4 [52150000]50E867FE- <1>
    19 000014AC FFFF6683C414        <1>
    20                              <1> 
    21 000014B2 8B44240C            <1>         mov     eax, [esp +12]                  ;EAX = ESP[12];
    22 000014B6 6A046A106A0868-     <1>         cdecl   itoa, eax, .p4, 8, 16, 0b0100   ;itoa(EAX, 8, 16, 0b0100);
    22 000014BD [63150000]50E84EFE- <1>
    22 000014C5 FFFF6683C414        <1>
    23                              <1> 
    24                              <1>         ;---------------------------------------
    25                              <1>         ;文字列の表示
    26                              <1>         ;---------------------------------------
    27 000014CB 68[29150000]68040F- <1>         cdecl   draw_str, 25, 16, 0x0F04, .s1,  ;draw_str("ESP+ 0:-------- ");
    27 000014D3 00006A106A19E8A9FB- <1>
    27 000014DC FFFF6683C410        <1>
    28 000014E2 68[3A150000]68040F- <1>         cdecl   draw_str, 25, 17, 0x0F04, .s2   ;draw_str("   + 4:-------- ");
    28 000014EA 00006A116A19E892FB- <1>
    28 000014F3 FFFF6683C410        <1>
    29 000014F9 68[4B150000]68040F- <1>         cdecl   draw_str, 25, 18, 0x0F04, .s3,  ;draw_str("   + 8:-------- ");
    29 00001501 00006A126A19E87BFB- <1>
    29 0000150A FFFF6683C410        <1>
    30 00001510 68[5C150000]68040F- <1>         cdecl   draw_str, 25, 19, 0x0F04, .s4   ;draw_str("   +12:-------- ");        
    30 00001518 00006A136A19E864FB- <1>
    30 00001521 FFFF6683C410        <1>
    31                              <1> 
    32                              <1>         ;---------------------------------------
    33                              <1>         ;無限ループ
    34                              <1>         ;---------------------------------------
    35 00001527 EBFE                <1>         jmp     $                               ;while(1); //無限ループ
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;データ
    39                              <1>         ;---------------------------------------
    40 00001529 4553502B20303A      <1> .s1:    db  "ESP+ 0:"
    41 00001530 2D2D2D2D2D2D2D2D20- <1> .p1:    db  "-------- ", 0
    41 00001539 00                  <1>
    42 0000153A 2020202B20343A      <1> .s2:    db  "   + 4:"
    43 00001541 2D2D2D2D2D2D2D2D20- <1> .p2:    db  "-------- ", 0
    43 0000154A 00                  <1>
    44 0000154B 2020202B20383A      <1> .s3:    db  "   + 8:"
    45 00001552 2D2D2D2D2D2D2D2D20- <1> .p3:    db  "-------- ", 0
    45 0000155B 00                  <1>
    46 0000155C 2020202B31323A      <1> .s4:    db  "   +12:"
    47 00001563 2D2D2D2D2D2D2D2D20- <1> .p4:    db  "-------- ", 0
    47 0000156C 00                  <1>
    48                              <1> 
    49                              <1> int_default:
    50                              <1>         ;---------------------------------------
    51                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
    52                              <1>         ;---------------------------------------
    53 0000156D 9C                  <1>         pushf                                   ;//EFLAGS(IF=0)
    54 0000156E 0E                  <1>         push    cs                              ;//cs
    55 0000156F 68[54140000]        <1>         push    int_stop                        ;//スタック表示処理
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み種別を登録して復帰
    59                              <1>         ;---------------------------------------
    60 00001574 B8[7A150000]        <1>         mov     eax, .s0                        ;//割り込み種別
    61 00001579 CF                  <1>         iret                                    ;スタックされている場所に復帰
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;データ
    65                              <1>         ;---------------------------------------
    66 0000157A 203C2020202053544F- <1> .s0:    db  " <    STOP    > ", 0
    66 00001583 50202020203E2000    <1>
    67                              <1> 
    68                              <1> ;********************************************************************************************************
    69                              <1> ;割り込みベクタの初期化
    70                              <1> ;********************************************************************************************************
    71 0000158B 90                  <1> ALIGN   4
    72 0000158C FF07                <1> IDTR:   dw      8 * 256 - 1                     ;idt_limit
    73 0000158E 00001000            <1>         dd      VECT_BASE                       ;idt_location
    74                              <1> 
    75                              <1> ;********************************************************************************************************
    76                              <1> ;割り込みテーブルを初期化
    77                              <1> ;********************************************************************************************************
    78                              <1> init_int:
    79                              <1>         ;---------------------------------------
    80                              <1>         ;レジスタの保存
    81                              <1>         ;---------------------------------------
    82 00001592 50                  <1>         push    eax
    83 00001593 53                  <1>         push    ebx
    84 00001594 51                  <1>         push    ecx
    85 00001595 57                  <1>         push    edi
    86                              <1> 
    87                              <1>         ;---------------------------------------
    88                              <1>         ;全ての割り込みにデフォルト処理を設定
    89                              <1>         ;---------------------------------------
    90 00001596 8D05[6D150000]      <1>         lea     eax, [int_default]              ;EAX = 割り込み処理アドレス;
    91 0000159C BB008E0800          <1>         mov     ebx, 0x0008_8E00                ;EBX = セグメントセレクタ;
    92 000015A1 6693                <1>         xchg    ax, bx                          ;//下位ワード(2バイト)を交換(割り込みゲートディスクリプタの形式に合わせる)
    93                              <1> 
    94 000015A3 B900010000          <1>         mov     ecx, 256                        ;ECX = 割り込みベクタ数
    95 000015A8 BF00001000          <1>         mov     edi, VECT_BASE                  ;EDI = 割り込みベクタテーブル
    96                              <1> 
    97                              <1> .10L:                                           ;do
    98                              <1>                                                 ;{
    99 000015AD 891F                <1>         mov     [edi + 0], ebx                  ;       [EDI + 0] = 割り込みディスクリプタ(下位)
   100 000015AF 894704              <1>         mov     [edi + 4], eax                  ;       [EDI + 4] = 割り込みディスクリプタ(上位)
   101 000015B2 83C708              <1>         add     edi, 8                          ;       EDI += 8;
   102 000015B5 E2F6                <1>         loop    .10L                            ;}while(ECX--);
   103                              <1> 
   104                              <1>         ;---------------------------------------
   105                              <1>         ;割り込みディスクリプタの設定
   106                              <1>         ;---------------------------------------
   107 000015B7 0F011D[8C150000]    <1>         lidt    [IDTR]                          ;//割り込みディスクリプタテーブルをロード
   108                              <1> 
   109                              <1>         ;---------------------------------------
   110                              <1>         ;データ
   111                              <1>         ;---------------------------------------
   112 000015BE 5F                  <1>         pop     edi
   113 000015BF 59                  <1>         pop     ecx
   114 000015C0 5B                  <1>         pop     ebx
   115 000015C1 58                  <1>         pop     eax
   116                              <1> 
   117 000015C2 C3                  <1>         ret
   118                              <1> 
   119                              <1> int_zero_div:
   120                              <1>         ;---------------------------------------
   121                              <1>         ;スタック表示関数に復帰するために必要な情報をスタック
   122                              <1>         ;---------------------------------------
   123 000015C3 9C                  <1>         pushf                                   ;//EFLAGS
   124 000015C4 0E                  <1>         push    cs                              ;//CS
   125 000015C5 68[54140000]        <1>         push    int_stop                        ;//スタック表示処理
   126                              <1> 
   127                              <1>         ;---------------------------------------
   128                              <1>         ;割り込み種別を登録して復帰
   129                              <1>         ;---------------------------------------
   130 000015CA B8[D0150000]        <1>         mov     eax, .s0                        ;//割り込み種別
   131 000015CF CF                  <1>         iret
   132                              <1> 
   133 000015D0 203C20205A45524F20- <1> .s0:    db      " <  ZERO DIV  > ", 0
   133 000015D9 44495620203E2000    <1>
   209                                  %include        "..\modules\protect\pic.s"
     1                              <1> init_pic:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000015E1 50                  <1>         push    eax
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;マスタの設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x20, 0x11                      ;//MASTER.ICW1 = 0x11;
    10 000015E2 B011                <2>  mov al, %2
    10 000015E4 E620                <2>  out %1, al
    11                              <1>         outp    0x21, 0x20                      ;//MASTER.ICW2 = 0x20;
    11 000015E6 B020                <2>  mov al, %2
    11 000015E8 E621                <2>  out %1, al
    12                              <1>         outp    0x21, 0x04                      ;//MASTER.ICW3 = 0x04;
    12 000015EA B004                <2>  mov al, %2
    12 000015EC E621                <2>  out %1, al
    13                              <1>         outp    0x21, 0x05                      ;//MASTER.ICW4 = 0x05;
    13 000015EE B005                <2>  mov al, %2
    13 000015F0 E621                <2>  out %1, al
    14                              <1>         outp    0x21, 0xEF                      ;//マスタ割り込みマスク
    14 000015F2 B0EF                <2>  mov al, %2
    14 000015F4 E621                <2>  out %1, al
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;スレーブの設定
    18                              <1>         ;---------------------------------------
    19                              <1>         outp    0xA0, 0x11                      ;//SLAVE.ICW1 = 0x11;
    19 000015F6 B011                <2>  mov al, %2
    19 000015F8 E6A0                <2>  out %1, al
    20                              <1>         outp    0xA1, 0x28                      ;//SLAVE.ICW2 = 0x28;
    20 000015FA B028                <2>  mov al, %2
    20 000015FC E6A1                <2>  out %1, al
    21                              <1>         outp    0xA1, 0x02                      ;//SLAVE.ICW3 = 0x02;
    21 000015FE B002                <2>  mov al, %2
    21 00001600 E6A1                <2>  out %1, al
    22                              <1>         outp    0xA1, 0x01                      ;//SLAVE.ICW4 = 0x01;
    22 00001602 B001                <2>  mov al, %2
    22 00001604 E6A1                <2>  out %1, al
    23                              <1>         outp    0xA1, 0xEF                      ;//マスタ割り込みマスク
    23 00001606 B0EF                <2>  mov al, %2
    23 00001608 E6A1                <2>  out %1, al
    24                              <1> 
    25                              <1>         ;---------------------------------------
    26                              <1>         ;レジスタの復帰
    27                              <1>         ;---------------------------------------
    28 0000160A 58                  <1>         pop     eax
    29                              <1> 
    30 0000160B C3                  <1>         ret
   210                                  %include        "..\modules\protect\int_rtc.s"
     1                              <1> int_rtc:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 0000160C 60                  <1>         pusha
     6 0000160D 1E                  <1>         push    ds
     7 0000160E 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントセレクタの設定
    11                              <1>         ;---------------------------------------
    12 0000160F 66B81000            <1>         mov     ax, 0x0010
    13 00001613 8ED8                <1>         mov     ds, ax
    14 00001615 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;RTCから時刻を取得
    18                              <1>         ;---------------------------------------
    19 00001617 68[D0020000]E87DFD- <1>         cdecl   rtc_get_time, RTC_TIME          ;EAX = get_time(&RTC_TIME);
    19 0000161F FFFF6683C404        <1>
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;RTCの割り込み要因を取得
    23                              <1>         ;---------------------------------------
    24                              <1>         outp    0x70, 0x0C                      ;outp(0x70, 0x0C); //レジスタCを選択
    24 00001625 B00C                <2>  mov al, %2
    24 00001627 E670                <2>  out %1, al
    25 00001629 E471                <1>         in      al, 0x71                        ;AL = port(0x71);
    26                              <1> 
    27                              <1>         ;---------------------------------------
    28                              <1>         ;割り込みフラグをクリア(EOI)
    29                              <1>         ;---------------------------------------
    30 0000162B B020                <1>         mov     al, 0x20                        ;AL = EOIコマンド;
    31 0000162D E6A0                <1>         out     0xA0, al                        ;outp(0xA0, AL); //スレーブPIC
    32 0000162F E620                <1>         out     0x20, al                        ;outp(0x20, AL); //マスタPIC
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;レジスタの復帰
    36                              <1>         ;---------------------------------------
    37 00001631 07                  <1>         pop     es
    38 00001632 1F                  <1>         pop     ds
    39 00001633 61                  <1>         popa
    40                              <1> 
    41 00001634 CF                  <1>         iret                                    ;割り込み処理の終了
    42                              <1> 
    43                              <1> rtc_int_en:
    44                              <1>         ;-----------------------------------
    45                              <1>         ;スタックフレームの構築
    46                              <1>         ;-----------------------------------
    47                              <1>                                             ;   + 8| 指定されたビット
    48                              <1>                                             ;   + 4| IP(戻り番号)
    49 00001635 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    50 00001636 89E5                <1>         mov     ebp, esp                    ;------|---------
    51                              <1> 
    52                              <1>         ;---------------------------------------
    53                              <1>         ;レジスタの保存
    54                              <1>         ;---------------------------------------
    55 00001638 50                  <1>         push    eax
    56                              <1> 
    57                              <1>         ;---------------------------------------
    58                              <1>         ;割り込み許可認定(RTCの内部レジスタBのUIE(更新終了割り込み許可)ビットをセット)
    59                              <1>         ;---------------------------------------
    60                              <1>         outp    0x70, 0x0B                      ;outp(0x70, AL); //レジスタBを選択
    60 00001639 B00B                <2>  mov al, %2
    60 0000163B E670                <2>  out %1, al
    61                              <1> 
    62 0000163D E471                <1>         in      al, 0x71                        ;AL = port(0x71); //レジスタBの
    63 0000163F 0A4508              <1>         or      al, [ebp + 8]                   ;AL |= ビット; //指定されたビットをセット
    64                              <1> 
    65 00001642 E671                <1>         out     0x71, al                        ;outp(0x71, AL); //レジスタBに書き込み
    66                              <1> 
    67                              <1>         ;---------------------------------------
    68                              <1>         ;レジスタの復帰
    69                              <1>         ;---------------------------------------
    70 00001644 58                  <1>         pop     eax
    71                              <1> 
    72                              <1>         ;---------------------------------------
    73                              <1>         ;スタックフレームの破棄
    74                              <1>         ;---------------------------------------
    75 00001645 89EC                <1>         mov     esp, ebp
    76 00001647 5D                  <1>         pop     ebp
    77                              <1> 
    78 00001648 C3                  <1>         ret
   211                                  %include        "..\modules\protect\ring_buff.s"
     1                              <1> ring_rd:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| 読み込んだデータの保存先アドレス
     6                              <1>                                             ;   + 8| リングバッファ
     7                              <1>                                             ;   + 4| IP(戻り番号)
     8 00001649 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
     9 0000164A 89E5                <1>         mov     ebp, esp                    ;------|---------
    10                              <1> 
    11                              <1>         ;---------------------------------------
    12                              <1>         ;レジスタの保存
    13                              <1>         ;---------------------------------------
    14 0000164C 60                  <1>         pusha
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;引数を取得
    18                              <1>         ;---------------------------------------
    19 0000164D 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    20 00001650 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = データアドレス;
    21                              <1>         
    22                              <1>         ;---------------------------------------
    23                              <1>         ;読み込み位置を確認
    24                              <1>         ;---------------------------------------
    25 00001653 B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    26 00001658 8B1E                <1>         mov     ebx, [esi + ring_buff.rp]       ;EBX = rp; //読み込み位置
    27 0000165A 3B5E04              <1>         cmp     ebx, [esi + ring_buff.wp]       ;if(EBX != wp) //書き込み位置と異なる
    28 0000165D 7411                <1>         je      .10E                            ;{
    29                              <1>         
    30 0000165F 8A441E08            <1>         mov     al, [esi + ring_buff.item + ebx];   AL = BUFF[rp]; //キーコードを保存
    31                              <1> 
    32 00001663 8807                <1>         mov     [edi], al                       ;   [EDI] = AL; //データを保存
    33                              <1> 
    34 00001665 43                  <1>         inc     ebx                             ;   EBX++; //次の読み込み位置
    35 00001666 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= 0x0F; //サイズの制限
    36 00001669 891E                <1>         mov     [esi + ring_buff.rp], ebx       ;   wp = EBX; //読み込み位置を保存
    37                              <1> 
    38 0000166B B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //データあり
    39                              <1> .10E:                                           ;}
    40                              <1> 
    41                              <1>         ;---------------------------------------
    42                              <1>         ;レジスタの復帰
    43                              <1>         ;---------------------------------------
    44 00001670 61                  <1>         popa
    45                              <1> 
    46                              <1>         ;---------------------------------------
    47                              <1>         ;スタックフレームの破棄
    48                              <1>         ;---------------------------------------
    49 00001671 89EC                <1>         mov     esp, ebp
    50 00001673 5D                  <1>         pop     ebp
    51                              <1> 
    52 00001674 C3                  <1>         ret
    53                              <1> 
    54                              <1> ring_wr:
    55                              <1>         ;-----------------------------------
    56                              <1>         ;スタックフレームの構築
    57                              <1>         ;-----------------------------------
    58                              <1>                                             ;   +12| 書き込むデータ
    59                              <1>                                             ;   + 8| リングバッファ
    60                              <1>                                             ;   + 4| IP(戻り番号)
    61 00001675 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
    62 00001676 89E5                <1>         mov     ebp, esp                    ;------|---------
    63                              <1> 
    64                              <1>         ;---------------------------------------
    65                              <1>         ;レジスタの保存
    66                              <1>         ;---------------------------------------
    67 00001678 60                  <1>         pusha
    68                              <1> 
    69                              <1>         ;---------------------------------------
    70                              <1>         ;引数を取得
    71                              <1>         ;---------------------------------------
    72 00001679 8B7508              <1>         mov     esi, [ebp + 8]                  ;ESI = リングバッファ;
    73                              <1>         
    74                              <1>         ;---------------------------------------
    75                              <1>         ;書き込み位置を確認
    76                              <1>         ;---------------------------------------
    77 0000167C B800000000          <1>         mov     eax, 0                          ;EAX = 0; //データなし
    78 00001681 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
    79 00001684 89D9                <1>         mov     ecx, ebx                        ;ECX = EBX;
    80 00001686 41                  <1>         inc     ecx                             ;ECX++;
    81 00001687 83E10F              <1>         and     ecx, RING_INDEX_MASK            ;ECX &= 0x0F //サイズの制限
    82                              <1>         
    83 0000168A 3B0E                <1>         cmp     ecx, [esi + ring_buff.rp]       ;if(ECX != rp) //読み込み位置と異なる
    84 0000168C 740F                <1>         je      .10E                            ;{
    85                              <1>         
    86 0000168E 8A450C              <1>         mov     al, [ebp +12]                   ;   AL = データ;
    87                              <1> 
    88 00001691 88441E08            <1>         mov     [esi + ring_buff.item + ebx], al;   BUFF[wp] = AL; //キーコードを保存
    89 00001695 894E04              <1>         mov     [esi + ring_buff.wp], ecx       ;   wp = ECX; //書き込み位置を保存
    90 00001698 B801000000          <1>         mov     eax, 1                          ;   EAX = 1; //成功
    91                              <1> .10E:                                           ;}
    92                              <1> 
    93                              <1>         ;---------------------------------------
    94                              <1>         ;レジスタの復帰
    95                              <1>         ;---------------------------------------
    96 0000169D 61                  <1>         popa
    97                              <1>         
    98                              <1>         ;---------------------------------------
    99                              <1>         ;スタックフレームの破棄
   100                              <1>         ;---------------------------------------
   101 0000169E 89EC                <1>         mov     esp, ebp
   102 000016A0 5D                  <1>         pop     ebp
   103                              <1> 
   104 000016A1 C3                  <1>         ret
   105                              <1> 
   106                              <1> draw_key:
   107                              <1>         ;-----------------------------------
   108                              <1>         ;スタックフレームの構築
   109                              <1>         ;-----------------------------------
   110                              <1>                                             ;   +16| リングブッファ
   111                              <1>                                             ;   +12| Y(行)
   112                              <1>                                             ;   + 8| X(列)
   113                              <1>                                             ;   + 4| IP(戻り番号)
   114 000016A2 55                  <1>         push    ebp                         ;EBP+ 0|EBP(元の値)
   115 000016A3 89E5                <1>         mov     ebp, esp                    ;------|---------
   116                              <1> 
   117                              <1>         ;---------------------------------------
   118                              <1>         ;レジスタの保存
   119                              <1>         ;---------------------------------------
   120 000016A5 60                  <1>         pusha
   121                              <1> 
   122                              <1>         ;---------------------------------------
   123                              <1>         ;引数を取得
   124                              <1>         ;---------------------------------------
   125 000016A6 8B7508              <1>         mov     esi, [ebp + 8]                  ;EDX = X(列);
   126 000016A9 8B7D0C              <1>         mov     edi, [ebp +12]                  ;EDI = Y(行);
   127 000016AC 8B7510              <1>         mov     esi, [ebp +16]                  ;ESI = リングブッファ;
   128                              <1>         
   129                              <1>         ;---------------------------------------
   130                              <1>         ;リングブッファの情報を取得
   131                              <1>         ;---------------------------------------
   132 000016AF 8B5E04              <1>         mov     ebx, [esi + ring_buff.wp]       ;EBX = wp; //書き込み位置
   133 000016B2 8D7608              <1>         lea     esi, [esi + ring_buff.item]     ;ESI = &KEY_BUFF[EBX];
   134 000016B5 B910000000          <1>         mov     ecx, RING_ITEM_SIZE             ;ECX = RING_ITEM_SIZE; //要素数
   135                              <1> 
   136                              <1> .10L:                                           ;do
   137                              <1>                                                 ;{
   138 000016BA 4B                  <1>         dec     ebx                             ;   EBX--;
   139 000016BB 83E30F              <1>         and     ebx, RING_INDEX_MASK            ;   EBX &= RING_INDEX_MASK;
   140 000016BE 8A041E              <1>         mov     al, [esi + ebx]                 ;   EAX = KEY_BUFF[EBX];
   141                              <1> 
   142 000016C1 6A046A106A0268-     <1>         cdecl   itoa, eax, .tmp, 2, 16, 0b0100  ;   //キーコードを文字列に変換
   142 000016C8 [F2160000]50E843FC- <1>
   142 000016D0 FFFF6683C414        <1>
   143 000016D6 68[F2160000]6A0257- <1>         cdecl   draw_str, edx, edi, 0x02, .tmp  ;   //変換した文字列を表示
   143 000016DE 52E8A3F9FFFF6683C4- <1>
   143 000016E7 10                  <1>
   144                              <1> 
   145 000016E8 83C203              <1>         add     edx, 3                          ;   //表示位置を更新(3文字分)
   146                              <1> 
   147 000016EB E2CD                <1>         loop    .10L
   148                              <1> .10E:                                           ;}while(ECX--);        
   149                              <1> 
   150                              <1>         ;---------------------------------------
   151                              <1>         ;レジスタの復帰
   152                              <1>         ;---------------------------------------
   153 000016ED 61                  <1>         popa
   154                              <1>         
   155                              <1>         ;---------------------------------------
   156                              <1>         ;スタックフレームの破棄
   157                              <1>         ;---------------------------------------
   158 000016EE 89EC                <1>         mov     esp, ebp
   159 000016F0 5D                  <1>         pop     ebp
   160                              <1> 
   161 000016F1 C3                  <1>         ret
   162                              <1> 
   163                              <1>         ;---------------------------------------
   164                              <1>         ;データ
   165                              <1>         ;---------------------------------------
   166 000016F2 2D2D2000            <1> .tmp    db  "-- ", 0
   212                                  %include        "..\modules\protect\int_keyboard.s"
     1                              <1> int_keyboard:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 000016F6 60                  <1>         pusha
     6 000016F7 1E                  <1>         push    ds
     7 000016F8 06                  <1>         push    es
     8                              <1> 
     9                              <1>         ;---------------------------------------
    10                              <1>         ;データ用セグメントの設定
    11                              <1>         ;---------------------------------------
    12 000016F9 66B81000            <1>         mov     ax, 0x0010
    13 000016FD 8ED8                <1>         mov     ds, ax
    14 000016FF 8EC0                <1>         mov     es, ax
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;KBCのブッファ読み取り
    18                              <1>         ;---------------------------------------
    19 00001701 E460                <1>         in      al, 0x60                        ; AL = キーコードの取得
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;キーコードの保存
    23                              <1>         ;---------------------------------------
    24 00001703 5068[1C170000]E867- <1>         cdecl   ring_wr, _KEY_BUFF, eax         ;ring_wr(_KEY_BUFF, EAX); //キーコードの保存
    24 0000170B FFFFFF6683C408      <1>
    25                              <1>         
    26                              <1>         ;---------------------------------------
    27                              <1>         ;割り込み終了コマンド送信
    28                              <1>         ;---------------------------------------
    29                              <1>         outp    0x20, 0x20                      ;outp(); //マスタPIC:EOIコマンド
    29 00001712 B020                <2>  mov al, %2
    29 00001714 E620                <2>  out %1, al
    30                              <1> 
    31                              <1>         ;---------------------------------------
    32                              <1>         ;レジスタの復帰
    33                              <1>         ;---------------------------------------
    34 00001716 07                  <1>         pop     es
    35 00001717 1F                  <1>         pop     ds
    36 00001718 61                  <1>         popa
    37                              <1> 
    38 00001719 CF                  <1>         iret                                    ;割り込みからの復帰
    39                              <1> 
    40                              <1>         ;---------------------------------------
    41                              <1>         ;データ
    42                              <1>         ;---------------------------------------
    43                              <1> 
    44 0000171A 00<rept>            <1> ALIGN   4, db   0
    45 0000171C 00<rept>            <1> _KEY_BUFF:  times   ring_buff_size  db  0
   213                                  %include        "..\modules\protect\timer.s"
     1                              <1> int_en_timer0:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00001734 50                  <1>         push    eax                              ;//outp用
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;タイマーICのカウンタ0を設定
     9                              <1>         ;---------------------------------------
    10                              <1>         outp    0x43, 0b_00_11_010_0            ;//カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    10 00001735 B034                <2>  mov al, %2
    10 00001737 E643                <2>  out %1, al
    11                              <1>         outp    0x40, 0x9C                      ;//下位バイト
    11 00001739 B09C                <2>  mov al, %2
    11 0000173B E640                <2>  out %1, al
    12                              <1>         outp    0x40, 0x2E                      ;//上位バイト
    12 0000173D B02E                <2>  mov al, %2
    12 0000173F E640                <2>  out %1, al
    13                              <1> 
    14                              <1>         ;---------------------------------------
    15                              <1>         ;レジスタの復帰
    16                              <1>         ;---------------------------------------
    17 00001741 58                  <1>         pop     eax
    18                              <1> 
    19 00001742 C3                  <1>         ret
   214                                  %include        "..\modules\protect\draw_rotation_bar.s"
     1                              <1> draw_rotation_bar:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;レジスタの保存
     4                              <1>         ;---------------------------------------
     5 00001743 60                  <1>         pushad
     6                              <1> 
     7                              <1>         ;---------------------------------------
     8                              <1>         ;引数を取得
     9                              <1>         ;---------------------------------------
    10 00001744 A1[140A0000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = タイマー割り込みカウンタ
    11 00001749 C1E804              <1>         shr     eax, 4                          ;EAX /= 4; //16で除算
    12 0000174C 3B05[74170000]      <1>         cmp     eax, [.index]                   ;if(EAX != 前回値)
    13 00001752 741E                <1>         je      .10E                            ;{
    14                              <1>         
    15 00001754 A3[74170000]        <1>         mov     [.index], eax                   ;   前回値 = EAX;
    16 00001759 83E003              <1>         and     eax, 0x03                       ;   EAX &= 0x03; //0~3に限定
    17                              <1> 
    18 0000175C 8A80[78170000]      <1>         mov     al, [.table + eax]              ;   AL = table[index];
    19 00001762 506A0F6A1D6A00E8FC- <1>         cdecl   draw_char, 0 ,29, 0x000F, eax   ;   draw_char(); //文字を表示
    19 0000176B F7FFFF6683C410      <1>
    20                              <1> 
    21                              <1> .10E:                                           ;}    
    22                              <1> 
    23                              <1>         ;---------------------------------------
    24                              <1>         ;レジスタの復帰
    25                              <1>         ;---------------------------------------
    26 00001772 61                  <1>         popad
    27                              <1> 
    28 00001773 C3                  <1>         ret
    29                              <1> 
    30                              <1>         ;---------------------------------------
    31                              <1>         ;データ
    32                              <1>         ;---------------------------------------
    33                              <1> ALIGN   4,  db  0
    34 00001774 00000000            <1> .index:     dd  0                               ;前回値
    35 00001778 7C2F2D5C            <1> .table:     db  "|/-\"                          ;表示キャラクタ
   215                                  %include        "..\modules\protect\call_gate.s"
     1                              <1> call_gate:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   +12| X(列)
     6                              <1>                                             ;   +16| Y(行)
     7                              <1>                                             ;   +20| 色
     8                              <1>                                             ;   +24| 文字
     9                              <1>                                             ;   + 8| CS(コードセグメント)
    10                              <1>                                             ;   + 4| EIP(戻り番号)
    11 0000177C 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
    12 0000177D 89E5                <1>         mov    ebp, esp                     ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 0000177F 60                  <1>         pusha
    18 00001780 1E                  <1>         push    ds
    19 00001781 06                  <1>         push    es
    20                              <1> 
    21                              <1>         ;---------------------------------------
    22                              <1>         ;データ用セグメントの設定
    23                              <1>         ;---------------------------------------
    24 00001782 66B81000            <1>         mov     ax, 0x0010
    25 00001786 8ED8                <1>         mov     ds, ax
    26 00001788 8EC0                <1>         mov     es, ax
    27                              <1>         
    28                              <1>         ;---------------------------------------
    29                              <1>         ;文字を表示
    30                              <1>         ;---------------------------------------
    31 0000178A 8B450C              <1>         mov     eax, dword [ebp +12]            ;EAX = X(列);
    32 0000178D 8B5D10              <1>         mov     ebx, dword [ebp +16]            ;EBX = Y(行);
    33 00001790 8B4D14              <1>         mov     ecx, dword [ebp +20]            ;ECX = 色;
    34 00001793 8B5518              <1>         mov     edx, dword [ebp +24]            ;EDX = 文字;
    35 00001796 52515350E8E8F8FFFF- <1>         cdecl   draw_str, eax, ebx, ecx, edx    ;draw_str();
    35 0000179F 6683C410            <1>
    36                              <1> 
    37                              <1>         ;---------------------------------------
    38                              <1>         ;レジスタの復帰
    39                              <1>         ;---------------------------------------
    40 000017A3 07                  <1>         pop     es
    41 000017A4 1F                  <1>         pop     ds
    42 000017A5 61                  <1>         popa
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;スタックフレームの破棄
    46                              <1>         ;---------------------------------------
    47 000017A6 89EC                <1>         mov     esp, ebp
    48 000017A8 5D                  <1>         pop     ebp
    49                              <1> 
    50 000017A9 CA1000              <1>         retf 4 * 4
   216                                  %include        "..\modules\protect\trap_gate.s"
     1                              <1> trap_gate_81:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;1文字出力
     4                              <1>         ;---------------------------------------
     5 000017AC 50535251E8B5F7FFFF- <1>         cdecl   draw_char, ecx, edx, ebx, eax   ;//1文字出力
     5 000017B5 6683C410            <1>
     6                              <1> 
     7 000017B9 CF                  <1>         iret
     8                              <1> 
     9                              <1> trap_gate_82:
    10                              <1>         ;---------------------------------------
    11                              <1>         ;点の描画
    12                              <1>         ;---------------------------------------
    13 000017BA 535251E87BF9FFFF66- <1>         cdecl   draw_pixel, ecx, edx, ebx       ;//点の描画
    13 000017C3 83C40C              <1>
    14                              <1> 
    15 000017C6 CF                  <1>         iret
   217                                  %include        "..\modules\protect\test_and_set.s"
     1                              <1> test_and_set:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| ローカル変数のアドレス
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 000017C7 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 000017C8 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 000017CA 50                  <1>         push    eax
    14 000017CB 53                  <1>         push    ebx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;テストアンドセット
    18                              <1>         ;---------------------------------------
    19 000017CC B800000000          <1>         mov     eax, 0                          ;local = 0;
    20 000017D1 8B5D08              <1>         mov     ebx, [ebp + 8]                  ;global = アドレス;
    21                              <1> 
    22                              <1> .10L:                                           ;while(1)
    23                              <1>                                                 ;{
    24 000017D4 F00FAB03            <1>         lock    bts [ebx], eax                  ;   CF = TEST_AND_SET(IN_USE, 1);
    25 000017D8 7307                <1>         jnc     .10E                            ;   if(0 == CF)
    26                              <1>                                                 ;   break;
    27                              <1> 
    28                              <1> .12L:                                           ;   while(1)
    29                              <1>                                                 ;   {
    30 000017DA 0FA303              <1>         bt      [ebx], eax                      ;       CF = TEST(IN_USE, 1);
    31 000017DD 72FB                <1>         jc      .12L                            ;       if(0 == CF)
    32                              <1>                                                 ;       break;
    33 000017DF EBF3                <1>         jmp     .10L                            ;   }
    34                              <1> .10E:                                           ;}
    35                              <1> 
    36                              <1>         ;---------------------------------------
    37                              <1>         ;レジスタの復帰
    38                              <1>         ;---------------------------------------
    39 000017E1 5B                  <1>         pop     ebx
    40 000017E2 58                  <1>         pop     eax
    41                              <1> 
    42                              <1>         ;---------------------------------------
    43                              <1>         ;スタックフレームの破棄
    44                              <1>         ;---------------------------------------
    45 000017E3 89EC                <1>         mov     esp, ebp
    46 000017E5 5D                  <1>         pop     ebp
    47                              <1> 
    48 000017E6 C3                  <1>         ret
   218                                  %include        "..\modules\protect\int_nm.s"
     1                              <1> get_tss_base:
     2                              <1>         ;---------------------------------------
     3                              <1>         ;TSSセレクタで指定されているTSSディスクリプタからTSSベースアドレスを取得し、EAXに代入。
     4                              <1>         ;---------------------------------------
     5 000017E7 8B83[BE080000]      <1>         mov     eax, [GDT + ebx + 2]            ;EAX = TSS[23:0];
     6 000017ED C1E008              <1>         shl     eax, 8                          ;EAX << 8;
     7 000017F0 8A83[C3080000]      <1>         mov     al, [GDT + ebx + 7]             ;AL = TSS[31:24];
     8 000017F6 C1C808              <1>         ror     eax, 8                          ;EAX >>= 8; //循環
     9                              <1> 
    10 000017F9 C3                  <1>         ret
    11                              <1> 
    12                              <1> save_fpu_context:
    13                              <1>         ;---------------------------------------
    14                              <1>         ;EAXレジスタに設定されたTSSディスクリプタのベースアドレスを参照して、FPUコンテキストを保存し、保存済みフラグをセット。
    15                              <1>         ;---------------------------------------
    16 000017FA DD7068              <1>         fnsave  [eax + 104]                     ;//FPUコンテキストを保存
    17 000017FD C780D4000000010000- <1>         mov     [eax + 104 + 108], dword 1      ;saved = 1; //フラグをセット
    17 00001806 00                  <1>
    18                              <1> 
    19 00001807 C3                  <1>         ret
    20                              <1> 
    21                              <1> load_fpu_context:
    22                              <1>         ;---------------------------------------
    23                              <1>         ;FPUコンテキストを復帰する。保存済みフラグがセットされていなければFPUを初期化する。
    24                              <1>         ;---------------------------------------
    25 00001808 83B8D400000000      <1>         cmp     [eax + 104 + 108], dword 0      ;if(0 == saved)
    26 0000180F 7504                <1>         jne     .10F                            ;{
    27 00001811 DBE3                <1>         fninit                                  ;   //FPUの初期化
    28 00001813 EB03                <1>         jmp     .10E                            ;}
    29                              <1> .10F:                                           ;else
    30                              <1>                                                 ;{
    31 00001815 DD6068              <1>         frstor  [eax + 104]                     ;   //FPUコンテキストを復帰
    32                              <1> .10E:                                           ;}
    33                              <1> 
    34 00001818 C3                  <1>         ret
    35                              <1> 
    36                              <1> int_nm:
    37                              <1>         ;-----------------------------------
    38                              <1>         ;レジスタの保存
    39                              <1>         ;-----------------------------------
    40 00001819 60                  <1>         pusha
    41 0000181A 1E                  <1>         push    ds
    42 0000181B 06                  <1>         push    es
    43                              <1> 
    44                              <1>         ;---------------------------------------
    45                              <1>         ;カーネル用セレクタを設定
    46                              <1>         ;---------------------------------------
    47 0000181C 66B81000            <1>         mov     ax, DS_KERNEL                   ;0x10と同じ
    48 00001820 8ED8                <1>         mov     ds, ax
    49 00001822 8EC0                <1>         mov     es, ax
    50                              <1>         
    51                              <1>         ;---------------------------------------
    52                              <1>         ;タスクスイッチフラグをクリア
    53                              <1>         ;---------------------------------------
    54 00001824 0F06                <1>         clts                                    ;CR0.TS = 0;
    55                              <1> 
    56                              <1>         ;---------------------------------------
    57                              <1>         ;前回/今回FPUを使用するタスク
    58                              <1>         ;---------------------------------------
    59 00001826 8B3D[70180000]      <1>         mov     edi, [.last_tss]                ;EDI = 前回FPUを使用したタスクのTSS
    60 0000182C 0F00CE              <1>         str     esi                             ;ESI = 今回FPUを使用したタスクのTSS
    61 0000182F 83E6F8              <1>         and     esi, ~0x0007                    ;//特権レベルとTI(Table Indicator:テーブル指定)bitをマスクして除外
    62                              <1> 
    63                              <1>         ;---------------------------------------
    64                              <1>         ;FPUの初回利用をチェック
    65                              <1>         ;---------------------------------------
    66 00001832 83FF00              <1>         cmp     edi, 0                          ;if(0 != EDI) //前回使用したタスク
    67 00001835 7420                <1>         je      .10F                            ;{
    68                              <1>         
    69 00001837 39FE                <1>         cmp     esi, edi                        ;   if(ESI != EDI) //異なるタスク
    70 00001839 741A                <1>         je      .12E                            ;   {
    71                              <1>         
    72 0000183B FA                  <1>         cli                                     ;       //割り込み禁止
    73                              <1> 
    74                              <1>         ;---------------------------------------
    75                              <1>         ;前回のFPUコンテキストを保存
    76                              <1>         ;---------------------------------------
    77 0000183C 89FB                <1>         mov     ebx, edi                        ;       EBX = EDI; //前回のタスク
    78 0000183E E8A4FFFFFF          <1>         call    get_tss_base                    ;       EAX = get_tss_base(TSSセレクタインデックス(前回)); //TSSアドレスを取得
    79 00001843 E8B2FFFFFF          <1>         call    save_fpu_context                ;       save_fpu_context(); //FPUコンテキスを保存
    80                              <1> 
    81                              <1>         ;---------------------------------------
    82                              <1>         ;今回のFPUコンテキストを復帰
    83                              <1>         ;---------------------------------------
    84 00001848 89F3                <1>         mov     ebx, esi                        ;       EBX = ESI; //今回のタスク
    85 0000184A E898FFFFFF          <1>         call    get_tss_base                    ;       EAX = get_tss_base(TSSセレクタインデックス(今回)); //TSSアドレスを取得
    86 0000184F E8B4FFFFFF          <1>         call    load_fpu_context                ;       load_fpu_context(); //FPUコンテキスを復帰
    87                              <1> 
    88 00001854 FB                  <1>         sti                                     ;       //割り込み許可
    89                              <1> .12E:                                           ;   }
    90 00001855 EB0E                <1>         jmp     .10E                            ;}
    91                              <1> .10F:                                           ;else
    92                              <1>                                                 ;{
    93                              <1>         
    94 00001857 FA                  <1>         cli                                     ;   //割り込み禁止
    95                              <1> 
    96                              <1>         ;---------------------------------------
    97                              <1>         ;今回のFPUコンテキストを復帰
    98                              <1>         ;---------------------------------------
    99 00001858 89F3                <1>         mov     ebx, esi                        ;   EBX = ESI; //今回のタスク
   100 0000185A E888FFFFFF          <1>         call    get_tss_base                    ;   EAX = get_tss_base(TSSセレクタインデックス(今回)); //TSSアドレスを取得
   101 0000185F E8A4FFFFFF          <1>         call    load_fpu_context                ;   load_fpu_context(); //FPUコンテキスを復帰
   102                              <1> 
   103 00001864 FB                  <1>         sti                                     ;   //割り込み許可
   104                              <1> .10E:                                           ;}
   105                              <1> 
   106 00001865 8935[70180000]      <1>         mov     [.last_tss], esi                ;//FPUを使用したタスクを保存
   107                              <1> 
   108                              <1>         ;---------------------------------------
   109                              <1>         ;レジスタの復帰
   110                              <1>         ;---------------------------------------
   111 0000186B 07                  <1>         pop     es
   112 0000186C 1F                  <1>         pop     ds
   113 0000186D 61                  <1>         popa
   114                              <1> 
   115 0000186E CF                  <1>         iret
   116                              <1> 
   117 0000186F 00                  <1> ALIGN   4,  db  0
   118 00001870 00000000            <1> .last_tss:  dd  0
   219                                  %include        "..\modules\protect\wait_tick.s"
     1                              <1> wait_tick:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;   + 8| ウェイト
     6                              <1>                                             ;   + 4| IP(戻り番号)
     7 00001874 55                  <1>         push   ebp                          ;EBP+ 0| EBP(元の値)
     8 00001875 89E5                <1>         mov    ebp, esp                     ;------|---------
     9                              <1> 
    10                              <1>         ;-----------------------------------
    11                              <1>         ;レジスタの保存
    12                              <1>         ;-----------------------------------
    13 00001877 50                  <1>         push    eax
    14 00001878 51                  <1>         push    ecx
    15                              <1> 
    16                              <1>         ;---------------------------------------
    17                              <1>         ;ウェイト
    18                              <1>         ;---------------------------------------
    19 00001879 8B4D08              <1>         mov     ecx, [ebp + 8]                  ;ECX = ウェイト回数
    20 0000187C A1[140A0000]        <1>         mov     eax, [TIMER_COUNT]              ;EAX = TIMER;
    21                              <1>                                                 ;do
    22                              <1>                                                 ;{
    23 00001881 3905[140A0000]      <1> .10L:   cmp     [TIMER_COUNT], eax              ;   while(TIMER_COUNT == EAX){} //タイマ割り込みでループを出る
    24 00001887 74F8                <1>         je      .10L
    25 00001889 40                  <1>         inc     eax                             ;   EAX++;
    26 0000188A E2F5                <1>         loop    .10L                            ;}while(ECX--);
    27                              <1> 
    28                              <1>         ;---------------------------------------
    29                              <1>         ;レジスタの復帰
    30                              <1>         ;---------------------------------------
    31 0000188C 59                  <1>         pop     ecx
    32 0000188D 58                  <1>         pop     eax
    33                              <1> 
    34                              <1>         ;---------------------------------------
    35                              <1>         ;スタックフレームの破棄
    36                              <1>         ;---------------------------------------
    37 0000188E 89EC                <1>         mov     esp, ebp
    38 00001890 5D                  <1>         pop     ebp
    39                              <1> 
    40 00001891 C3                  <1>         ret
   220                                  %include        "..\modules\protect\memcpy.s"
     1                              <1> memcpy:
     2                              <1>         ;-----------------------------------
     3                              <1>         ;スタックフレームの構築
     4                              <1>         ;-----------------------------------
     5                              <1>                                             ;------|---------
     6                              <1>                                             ;EBP+16| バイト数
     7                              <1>                                             ;EBP+12| コピー元
     8                              <1>                                             ;EBP+ 8| コピー先
     9                              <1>                                             ;------|---------
    10 00001892 55                  <1>         push    ebp                         ;EBP+ 4| EIP(戻り番地)
    11 00001893 89E5                <1>         mov     ebp, esp                    ;EBP+ 0| EBP(元の値)
    12                              <1>                                             ;------|---------
    13                              <1> 
    14                              <1>         ;-----------------------------------
    15                              <1>         ;レジスタの保存
    16                              <1>         ;-----------------------------------
    17 00001895 51                  <1>         push    ecx
    18 00001896 56                  <1>         push    esi
    19 00001897 57                  <1>         push    edi
    20                              <1> 
    21                              <1>         ;-----------------------------------
    22                              <1>         ;バイト単位でのコピー
    23                              <1>         ;-----------------------------------
    24 00001898 FC                  <1>         cld                                 ;DF = 0; //+方向
    25 00001899 8B7D08              <1>         mov     edi, [ebp + 8]              ;EDI = コピー先
    26 0000189C 8B750C              <1>         mov     esi, [ebp + 12]             ;ESI = コピー元
    27 0000189F 8B4D10              <1>         mov     ecx, [ebp + 16]             ;ECX = バイト数
    28                              <1> 
    29 000018A2 F3A4                <1>         rep movsb                           ;while(*EDI++ = *ESI++);
    30                              <1> 
    31                              <1>         ;-----------------------------------
    32                              <1>         ;レジスタの復帰
    33                              <1>         ;-----------------------------------
    34 000018A4 5F                  <1>         pop     edi
    35 000018A5 5E                  <1>         pop     esi
    36 000018A6 59                  <1>         pop     ecx
    37                              <1> 
    38                              <1>         ;-----------------------------------
    39                              <1>         ;スタックフレームの破棄
    40                              <1>         ;-----------------------------------
    41 000018A7 89EC                <1>         mov     esp,ebp
    42 000018A9 5D                  <1>         pop     ebp
    43                              <1> 
    44 000018AA C3                  <1>         ret
   221                                  
   222                                  ;********************************************************************************************************
   223                                  ;パディング
   224                                  ;********************************************************************************************************
   225 000018AB 00<rept>                        times KERNEL_SIZE - ($ - $$)    db 0    ;パディング
   226                                  
   227                                  ;********************************************************************************************************
   228                                  ;FAT
   229                                  ;********************************************************************************************************
   230                                  %include        "fat.s"
     1                              <1> ;*******************************************************************************************************
     2                              <1> ;FAT:FAT-1
     3                              <1> ;*******************************************************************************************************
     4                              <1>     times (FAT1_START) - ($ - $$)   db  0x00
     5                              <1> ;-------------------------------------------------------------------------------------------------------
     6                              <1> FAT1:
     7 00002000 FFFF                <1>         db      0xFF, 0xFF                                                                              ;クラスタ:0
     8 00002002 FFFF                <1>         dw      0xFFFF                                                                                  ;クラスタ:1
     9 00002004 FFFF                <1>         dw      0xFFFF                                                                                  ;クラスタ:2
    10                              <1> 
    11                              <1> ;*******************************************************************************************************
    12                              <1> ;FAT:FAT-2
    13                              <1> ;*******************************************************************************************************
    14 00002006 00<rept>            <1>     times (FAT2_START) - ($ - $$)   db  0x00
    15                              <1> ;-------------------------------------------------------------------------------------------------------
    16                              <1> FAT2:
    17 00022000 FFFF                <1>         db      0xFF, 0xFF                                                                              ;クラスタ:0
    18 00022002 FFFF                <1>         dw      0xFFFF                                                                                  ;クラスタ:1
    19 00022004 FFFF                <1>         dw      0xFFFF                                                                                  ;クラスタ:2
    20                              <1> 
    21                              <1> ;*******************************************************************************************************
    22                              <1> ;FAT:ルートディレクトリ領域
    23                              <1> ;*******************************************************************************************************
    24 00022006 00<rept>            <1>     times (ROOT_START) - ($ - $$)   db  0x00
    25                              <1> ;-------------------------------------------------------------------------------------------------------
    26                              <1> FAT_ROOT:
    27                              <1>         ;---------------------------------------
    28                              <1>         ;ボリュームラベル
    29                              <1>         ;---------------------------------------
    30 00042000 424F4F5441424C4544- <1>         db      'BOOTABLE', 'DSK'                                                                       ;+ 0:ボリュームラベル
    30 00042009 534B                <1>
    31 0004200B 28                  <1>         db      ATTR_ARCHIVE | ATTR_VOLUME_ID                                                           ;+11:属性
    32 0004200C 00                  <1>         db      0x00                                                                                    ;+12:(予約)
    33 0004200D 00                  <1>         db      0x00                                                                                    ;+13:TS
    34 0004200E 0000                <1>         dw      ( 0 << 11 ) | ( 0 << 5 ) | (0 / 2)                                                      ;+14:作成時刻
    35 00042010 0100                <1>         dw      ( 0 <<  9 ) | ( 0 << 5 ) | ( 1)                                                         ;+16:作成日
    36 00042012 0100                <1>         dw      ( 0 <<  9 ) | ( 0 << 5 ) | ( 1)                                                         ;+18:アクセス日
    37 00042014 0000                <1>         dw      0x0000                                                                                  ;+20:(予約)
    38 00042016 0000                <1>         dw      ( 0 << 11 ) | ( 0 << 5 ) | (0 / 2)                                                      ;+22:更新時刻
    39 00042018 0100                <1>         dw      ( 0 <<  9 ) | ( 0 << 5 ) | ( 1)                                                         ;+24:更新日
    40 0004201A 0000                <1>         dw      0                                                                                       ;+26:先頭クラスタ
    41 0004201C 00000000            <1>         dd      0                                                                                       ;+28:ファイルサイズ
    42                              <1> 
    43                              <1>         ;---------------------------------------
    44                              <1>         ;通常ファイル
    45                              <1>         ;---------------------------------------
    46 00042020 5350454349414C2054- <1>         db      'SPECIAL ', 'TXT'                                                                        ;+ 0:ボリュームラベル
    46 00042029 5854                <1>
    47 0004202B 20                  <1>         db      ATTR_ARCHIVE                                                                            ;+11:属性
    48 0004202C 00                  <1>         db      0x00                                                                                    ;+12:(予約)
    49 0004202D 00                  <1>         db      0x00                                                                                    ;+13:TS
    50 0004202E 0000                <1>         dw      ( 0 << 11 ) | ( 0 << 5 ) | (0 / 2)                                                      ;+14:作成時刻
    51 00042030 0100                <1>         dw      ( 0 <<  9 ) | ( 0 << 5 ) | ( 1)                                                         ;+16:作成日
    52 00042032 0100                <1>         dw      ( 0 <<  9 ) | ( 0 << 5 ) | ( 1)                                                         ;+18:アクセス日
    53 00042034 0000                <1>         dw      0x0000                                                                                  ;+20:(予約)
    54 00042036 0000                <1>         dw      ( 0 << 11 ) | ( 0 << 5 ) | (0 / 2)                                                      ;+22:更新時刻
    55 00042038 0100                <1>         dw      ( 0 <<  9 ) | ( 0 << 5 ) | ( 1)                                                         ;+24:更新日
    56 0004203A 0200                <1>         dw      2                                                                                       ;+26:先頭クラスタ
    57 0004203C 0B000000            <1>         dd      FILE.end - FILE                                                                         ;+28:ファイルサイズ
    58                              <1> 
    59                              <1> ;*******************************************************************************************************
    60                              <1> ;FAT:データ領域
    61                              <1> ;*******************************************************************************************************
    62 00042040 00<rept>            <1>     times FILE_START - ($ - $$)   db  0x00
    63                              <1> ;-------------------------------------------------------------------------------------------------------
    64 00046000 68656C6C6F2C204641- <1> FILE:   db      'hello, FAT!'
    64 00046009 5421                <1>
    65 0004600B 00                  <1> .end:   db      0
    66                              <1> 
    67 0004600C 00<rept>            <1> ALIGN   512,    db 0x00
    68                              <1> 
    69 00046200 00<rept>            <1>     times (512 * 63)    db 0x00
